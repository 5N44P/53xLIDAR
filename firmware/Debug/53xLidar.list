
53xLidar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f15c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800f2fc  0800f2fc  0001f2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f814  0800f814  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800f814  0800f814  0001f814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f81c  0800f81c  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f81c  0800f81c  0001f81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f820  0800f820  0001f820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800f824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000557c  20000248  0800fa6c  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200057c4  0800fa6c  000257c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032ff4  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a59  00000000  00000000  0005326c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b28  00000000  00000000  00057cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001930  00000000  00000000  000597f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f491  00000000  00000000  0005b120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001aab6  00000000  00000000  0007a5b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ace35  00000000  00000000  00095067  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141e9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075f8  00000000  00000000  00141f18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000248 	.word	0x20000248
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f2e4 	.word	0x0800f2e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	0800f2e4 	.word	0x0800f2e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <sendReset>:

#include "stm32f4xx_hal.h"

// Based on devararendy library on mbed.com

void sendReset() {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059a:	4802      	ldr	r0, [pc, #8]	; (80005a4 <sendReset+0x14>)
 800059c:	f007 fb38 	bl	8007c10 <HAL_GPIO_WritePin>
	//wait_us(60);
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020000 	.word	0x40020000

080005a8 <send0>:

void send0() {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b2:	4823      	ldr	r0, [pc, #140]	; (8000640 <send0+0x98>)
 80005b4:	f007 fb2c 	bl	8007c10 <HAL_GPIO_WritePin>

//--------------hitung manual
	asm("nop");
 80005b8:	bf00      	nop
	asm("nop");
 80005ba:	bf00      	nop
	asm("nop");
 80005bc:	bf00      	nop
	asm("nop");
 80005be:	bf00      	nop
	asm("nop");
 80005c0:	bf00      	nop
	asm("nop");
 80005c2:	bf00      	nop
	asm("nop");
 80005c4:	bf00      	nop
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005cc:	481c      	ldr	r0, [pc, #112]	; (8000640 <send0+0x98>)
 80005ce:	f007 fb1f 	bl	8007c10 <HAL_GPIO_WritePin>

//-----------------hitung manual
	asm("nop");
 80005d2:	bf00      	nop
	asm("nop");
 80005d4:	bf00      	nop
	asm("nop");
 80005d6:	bf00      	nop
	asm("nop");
 80005d8:	bf00      	nop
	asm("nop");
 80005da:	bf00      	nop

	asm("nop");
 80005dc:	bf00      	nop
	asm("nop");
 80005de:	bf00      	nop
	asm("nop");
 80005e0:	bf00      	nop
	asm("nop");
 80005e2:	bf00      	nop
	asm("nop");
 80005e4:	bf00      	nop

	asm("nop");
 80005e6:	bf00      	nop
	asm("nop");
 80005e8:	bf00      	nop
	asm("nop");
 80005ea:	bf00      	nop
	asm("nop");
 80005ec:	bf00      	nop
	asm("nop");
 80005ee:	bf00      	nop

	asm("nop");
 80005f0:	bf00      	nop
	asm("nop");
 80005f2:	bf00      	nop
	asm("nop");
 80005f4:	bf00      	nop
	asm("nop");
 80005f6:	bf00      	nop
	asm("nop");
 80005f8:	bf00      	nop

	asm("nop");
 80005fa:	bf00      	nop
	asm("nop");
 80005fc:	bf00      	nop
	asm("nop");
 80005fe:	bf00      	nop
	asm("nop");
 8000600:	bf00      	nop
	asm("nop");
 8000602:	bf00      	nop

	asm("nop");
 8000604:	bf00      	nop
	asm("nop");
 8000606:	bf00      	nop
	asm("nop");
 8000608:	bf00      	nop
	asm("nop");
 800060a:	bf00      	nop
	asm("nop");
 800060c:	bf00      	nop

	asm("nop");
 800060e:	bf00      	nop
	asm("nop");
 8000610:	bf00      	nop
	asm("nop");
 8000612:	bf00      	nop
	asm("nop");
 8000614:	bf00      	nop
	asm("nop");
 8000616:	bf00      	nop

	asm("nop");
 8000618:	bf00      	nop
	asm("nop");
 800061a:	bf00      	nop
	asm("nop");
 800061c:	bf00      	nop
	asm("nop");
 800061e:	bf00      	nop
	asm("nop");
 8000620:	bf00      	nop
	asm("nop");
 8000622:	bf00      	nop
	asm("nop");
 8000624:	bf00      	nop
	asm("nop");
 8000626:	bf00      	nop
	asm("nop");
 8000628:	bf00      	nop
	asm("nop");
 800062a:	bf00      	nop

	asm("nop");
 800062c:	bf00      	nop
	asm("nop");
 800062e:	bf00      	nop
	asm("nop");
 8000630:	bf00      	nop
	asm("nop");
 8000632:	bf00      	nop
	asm("nop");
 8000634:	bf00      	nop

	asm("nop");
 8000636:	bf00      	nop
	asm("nop");
 8000638:	bf00      	nop
	asm("nop");
 800063a:	bf00      	nop
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020000 	.word	0x40020000

08000644 <send1>:
void send1() {
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064e:	482b      	ldr	r0, [pc, #172]	; (80006fc <send1+0xb8>)
 8000650:	f007 fade 	bl	8007c10 <HAL_GPIO_WritePin>

	//-----------------------------------
	asm("nop");
 8000654:	bf00      	nop
	asm("nop");
 8000656:	bf00      	nop
	asm("nop");
 8000658:	bf00      	nop
	asm("nop");
 800065a:	bf00      	nop
	asm("nop");
 800065c:	bf00      	nop

	asm("nop");
 800065e:	bf00      	nop
	asm("nop");
 8000660:	bf00      	nop
	asm("nop");
 8000662:	bf00      	nop
	asm("nop");
 8000664:	bf00      	nop
	asm("nop");
 8000666:	bf00      	nop

	asm("nop");
 8000668:	bf00      	nop
	asm("nop");
 800066a:	bf00      	nop
	asm("nop");
 800066c:	bf00      	nop
	asm("nop");
 800066e:	bf00      	nop
	asm("nop");
 8000670:	bf00      	nop

	asm("nop");
 8000672:	bf00      	nop
	asm("nop");
 8000674:	bf00      	nop
	asm("nop");
 8000676:	bf00      	nop
	asm("nop");
 8000678:	bf00      	nop
	asm("nop");
 800067a:	bf00      	nop

	asm("nop");
 800067c:	bf00      	nop
	asm("nop");
 800067e:	bf00      	nop
	asm("nop");
 8000680:	bf00      	nop
	asm("nop");
 8000682:	bf00      	nop
	asm("nop");
 8000684:	bf00      	nop

	asm("nop");
 8000686:	bf00      	nop
	asm("nop");
 8000688:	bf00      	nop
	asm("nop");
 800068a:	bf00      	nop
	asm("nop");
 800068c:	bf00      	nop
	asm("nop");
 800068e:	bf00      	nop

	asm("nop");
 8000690:	bf00      	nop
	asm("nop");
 8000692:	bf00      	nop
	asm("nop");
 8000694:	bf00      	nop
	asm("nop");
 8000696:	bf00      	nop
	asm("nop");
 8000698:	bf00      	nop

	asm("nop");
 800069a:	bf00      	nop
	asm("nop");
 800069c:	bf00      	nop
	asm("nop");
 800069e:	bf00      	nop
	asm("nop");
 80006a0:	bf00      	nop
	asm("nop");
 80006a2:	bf00      	nop

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006aa:	4814      	ldr	r0, [pc, #80]	; (80006fc <send1+0xb8>)
 80006ac:	f007 fab0 	bl	8007c10 <HAL_GPIO_WritePin>
	//-----------------hitung manual
	asm("nop");
 80006b0:	bf00      	nop
	asm("nop");
 80006b2:	bf00      	nop
	asm("nop");
 80006b4:	bf00      	nop
	asm("nop");
 80006b6:	bf00      	nop
	asm("nop");
 80006b8:	bf00      	nop

	asm("nop");
 80006ba:	bf00      	nop
	asm("nop");
 80006bc:	bf00      	nop
	asm("nop");
 80006be:	bf00      	nop
	asm("nop");
 80006c0:	bf00      	nop
	asm("nop");
 80006c2:	bf00      	nop

	asm("nop");
 80006c4:	bf00      	nop
	asm("nop");
 80006c6:	bf00      	nop
	asm("nop");
 80006c8:	bf00      	nop
	asm("nop");
 80006ca:	bf00      	nop
	asm("nop");
 80006cc:	bf00      	nop

	asm("nop");
 80006ce:	bf00      	nop
	asm("nop");
 80006d0:	bf00      	nop
	asm("nop");
 80006d2:	bf00      	nop
	asm("nop");
 80006d4:	bf00      	nop
	asm("nop");
 80006d6:	bf00      	nop

	asm("nop");
 80006d8:	bf00      	nop
	asm("nop");
 80006da:	bf00      	nop
	asm("nop");
 80006dc:	bf00      	nop
	asm("nop");
 80006de:	bf00      	nop
	asm("nop");
 80006e0:	bf00      	nop

	asm("nop");
 80006e2:	bf00      	nop
	asm("nop");
 80006e4:	bf00      	nop
	asm("nop");
 80006e6:	bf00      	nop
	asm("nop");
 80006e8:	bf00      	nop
	asm("nop");
 80006ea:	bf00      	nop

	asm("nop");
 80006ec:	bf00      	nop
	asm("nop");
 80006ee:	bf00      	nop
	asm("nop");
 80006f0:	bf00      	nop
	asm("nop");
 80006f2:	bf00      	nop
	asm("nop");
 80006f4:	bf00      	nop
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40020000 	.word	0x40020000

08000700 <writeByte>:

void writeByte(uint8_t data) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	for (int x = 7; x >= 0; x--) {
 800070a:	2307      	movs	r3, #7
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e00f      	b.n	8000730 <writeByte+0x30>
		if (data & (1 << x)) {
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	fa42 f303 	asr.w	r3, r2, r3
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <writeByte+0x26>
			//bit is high
			send1();
 8000720:	f7ff ff90 	bl	8000644 <send1>
 8000724:	e001      	b.n	800072a <writeByte+0x2a>
		} else {
			//bit is low
			send0();
 8000726:	f7ff ff3f 	bl	80005a8 <send0>
	for (int x = 7; x >= 0; x--) {
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3b01      	subs	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	daec      	bge.n	8000710 <writeByte+0x10>
		}
	}
}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <writeColor>:

void writeColor(uint32_t RGB) {
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
	writeByte((RGB & 0xFF00) >> 8); //green
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ffd7 	bl	8000700 <writeByte>
	writeByte((RGB & 0xFF0000) >> 16); //red
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	0c1b      	lsrs	r3, r3, #16
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ffd1 	bl	8000700 <writeByte>
	writeByte(RGB & 0xFF); //blue
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ffcc 	bl	8000700 <writeByte>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <sendColors>:

void send1Color(uint32_t RGB) {
	writeColor(RGB);
	sendReset();
}
void sendColors(uint32_t * const colorBuffer, size_t len) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	for (int x = 0; x < len; x++) {
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e00a      	b.n	8000796 <sendColors+0x26>
		writeColor(colorBuffer[x]);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	4413      	add	r3, r2
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffd7 	bl	800073e <writeColor>
	for (int x = 0; x < len; x++) {
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	3301      	adds	r3, #1
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	429a      	cmp	r2, r3
 800079c:	d8f0      	bhi.n	8000780 <sendColors+0x10>
	}
	sendReset();
 800079e:	f7ff fef7 	bl	8000590 <sendReset>
}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <enableSensor>:
struct {
	VL53L1_Dev_t chip;
	uint8_t valid;
} sensors[16];

int enableSensor(int i) {
 80007ac:	b5b0      	push	{r4, r5, r7, lr}
 80007ae:	b0d4      	sub	sp, #336	; 0x150
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	6018      	str	r0, [r3, #0]

	sensors[i].chip.I2cDevAddr = 0x29 << 1;
 80007b6:	4aba      	ldr	r2, [pc, #744]	; (8000aa0 <enableSensor+0x2f4>)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 80007c0:	fb01 f303 	mul.w	r3, r1, r3
 80007c4:	4413      	add	r3, r2
 80007c6:	f503 7366 	add.w	r3, r3, #920	; 0x398
 80007ca:	2252      	movs	r2, #82	; 0x52
 80007cc:	701a      	strb	r2, [r3, #0]
	if (i < 8) {
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b07      	cmp	r3, #7
 80007d4:	dc0c      	bgt.n	80007f0 <enableSensor+0x44>
		sensors[i].chip.I2cHandle = &hi2c1;
 80007d6:	4ab2      	ldr	r2, [pc, #712]	; (8000aa0 <enableSensor+0x2f4>)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 80007e0:	fb01 f303 	mul.w	r3, r1, r3
 80007e4:	4413      	add	r3, r2
 80007e6:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 80007ea:	4aae      	ldr	r2, [pc, #696]	; (8000aa4 <enableSensor+0x2f8>)
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	e00b      	b.n	8000808 <enableSensor+0x5c>
	} else {
		sensors[i].chip.I2cHandle = &hi2c2;
 80007f0:	4aab      	ldr	r2, [pc, #684]	; (8000aa0 <enableSensor+0x2f4>)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 80007fa:	fb01 f303 	mul.w	r3, r1, r3
 80007fe:	4413      	add	r3, r2
 8000800:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8000804:	4aa8      	ldr	r2, [pc, #672]	; (8000aa8 <enableSensor+0x2fc>)
 8000806:	601a      	str	r2, [r3, #0]
	}

	sensors[i].valid = 0;
 8000808:	4aa5      	ldr	r2, [pc, #660]	; (8000aa0 <enableSensor+0x2f4>)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 8000812:	fb01 f303 	mul.w	r3, r1, r3
 8000816:	4413      	add	r3, r2
 8000818:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]

	char buff[15];
	sprintf(buff, "sensor: %d\n", i);
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	49a0      	ldr	r1, [pc, #640]	; (8000aac <enableSensor+0x300>)
 800082a:	f00e fa17 	bl	800ec5c <siprintf>
	HAL_UART_Transmit(&huart1, buff, strlen(buff), 0xFFFF);
 800082e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fcd4 	bl	80001e0 <strlen>
 8000838:	4603      	mov	r3, r0
 800083a:	b29a      	uxth	r2, r3
 800083c:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8000840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000844:	489a      	ldr	r0, [pc, #616]	; (8000ab0 <enableSensor+0x304>)
 8000846:	f009 fe61 	bl	800a50c <HAL_UART_Transmit>

	/*** VL53L1X Initialization ***/
	VL53L1_Error err;
	err = VL53L1_WaitDeviceBooted(&sensors[i].chip);
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8000852:	fb02 f303 	mul.w	r3, r2, r3
 8000856:	4a92      	ldr	r2, [pc, #584]	; (8000aa0 <enableSensor+0x2f4>)
 8000858:	4413      	add	r3, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fb65 	bl	8001f2a <VL53L1_WaitDeviceBooted>
 8000860:	4603      	mov	r3, r0
 8000862:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	if (err != VL53L1_ERROR_NONE) {
 8000866:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 800086a:	2b00      	cmp	r3, #0
 800086c:	d02e      	beq.n	80008cc <enableSensor+0x120>
		uint8_t msg[] = "VL53L1_WaitDeviceBooted failed    \n";
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4a90      	ldr	r2, [pc, #576]	; (8000ab4 <enableSensor+0x308>)
 8000874:	461c      	mov	r4, r3
 8000876:	4615      	mov	r5, r2
 8000878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800087a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800087e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000880:	682b      	ldr	r3, [r5, #0]
 8000882:	6023      	str	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 8000884:	2323      	movs	r3, #35	; 0x23
 8000886:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
		msg[len - 1 - 1] = i + '0';
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000894:	3b02      	subs	r3, #2
 8000896:	3230      	adds	r2, #48	; 0x30
 8000898:	b2d1      	uxtb	r1, r2
 800089a:	f107 0208 	add.w	r2, r7, #8
 800089e:	54d1      	strb	r1, [r2, r3]
		msg[len - 3 - 1] = err + '0';
 80008a0:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 80008a4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80008a8:	3b04      	subs	r3, #4
 80008aa:	3230      	adds	r2, #48	; 0x30
 80008ac:	b2d1      	uxtb	r1, r2
 80008ae:	f107 0208 	add.w	r2, r7, #8
 80008b2:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80008b4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	f107 0108 	add.w	r1, r7, #8
 80008be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c2:	487b      	ldr	r0, [pc, #492]	; (8000ab0 <enableSensor+0x304>)
 80008c4:	f009 fe22 	bl	800a50c <HAL_UART_Transmit>
		return 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	e350      	b.n	8000f6e <enableSensor+0x7c2>
	} else {
		uint8_t msg[] = "VL53L1_WaitDeviceBooted OK  \n";
 80008cc:	4b7a      	ldr	r3, [pc, #488]	; (8000ab8 <enableSensor+0x30c>)
 80008ce:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80008d2:	461d      	mov	r5, r3
 80008d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008dc:	c407      	stmia	r4!, {r0, r1, r2}
 80008de:	8023      	strh	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 80008e0:	231d      	movs	r3, #29
 80008e2:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
		msg[len - 1 - 1] = i + '0';
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 80008f0:	3b02      	subs	r3, #2
 80008f2:	3230      	adds	r2, #48	; 0x30
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80008fa:	440b      	add	r3, r1
 80008fc:	f803 2c40 	strb.w	r2, [r3, #-64]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8000900:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8000904:	b29a      	uxth	r2, r3
 8000906:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800090a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800090e:	4868      	ldr	r0, [pc, #416]	; (8000ab0 <enableSensor+0x304>)
 8000910:	f009 fdfc 	bl	800a50c <HAL_UART_Transmit>
	}

	err = VL53L1_DataInit(&sensors[i].chip);
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800091c:	fb02 f303 	mul.w	r3, r2, r3
 8000920:	4a5f      	ldr	r2, [pc, #380]	; (8000aa0 <enableSensor+0x2f4>)
 8000922:	4413      	add	r3, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f001 fa84 	bl	8001e32 <VL53L1_DataInit>
 800092a:	4603      	mov	r3, r0
 800092c:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	if (err != VL53L1_ERROR_NONE) {
 8000930:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8000934:	2b00      	cmp	r3, #0
 8000936:	d031      	beq.n	800099c <enableSensor+0x1f0>
		uint8_t msg[] = "VL53L1_DataInit failed    \n";
 8000938:	4b60      	ldr	r3, [pc, #384]	; (8000abc <enableSensor+0x310>)
 800093a:	f107 04f4 	add.w	r4, r7, #244	; 0xf4
 800093e:	461d      	mov	r5, r3
 8000940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000944:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		uint8_t len = sizeof(msg) - 1;
 800094c:	231b      	movs	r3, #27
 800094e:	f887 3140 	strb.w	r3, [r7, #320]	; 0x140
		msg[len - 1 - 1] = i + '0';
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800095c:	3b02      	subs	r3, #2
 800095e:	3230      	adds	r2, #48	; 0x30
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000966:	440b      	add	r3, r1
 8000968:	f803 2c5c 	strb.w	r2, [r3, #-92]
		msg[len - 3 - 1] = err + '0';
 800096c:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8000970:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8000974:	3b04      	subs	r3, #4
 8000976:	3230      	adds	r2, #48	; 0x30
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800097e:	440b      	add	r3, r1
 8000980:	f803 2c5c 	strb.w	r2, [r3, #-92]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8000984:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 8000988:	b29a      	uxth	r2, r3
 800098a:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 800098e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000992:	4847      	ldr	r0, [pc, #284]	; (8000ab0 <enableSensor+0x304>)
 8000994:	f009 fdba 	bl	800a50c <HAL_UART_Transmit>
		return 3;
 8000998:	2303      	movs	r3, #3
 800099a:	e2e8      	b.n	8000f6e <enableSensor+0x7c2>
	} else {
		uint8_t msg[] = "VL53L1_DataInit OK  \n";
 800099c:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <enableSensor+0x314>)
 800099e:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 80009a2:	461d      	mov	r5, r3
 80009a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009ac:	6020      	str	r0, [r4, #0]
 80009ae:	3404      	adds	r4, #4
 80009b0:	8021      	strh	r1, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 80009b2:	2315      	movs	r3, #21
 80009b4:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
		msg[len - 1 - 1] = i + '0';
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 80009c2:	3b02      	subs	r3, #2
 80009c4:	3230      	adds	r2, #48	; 0x30
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80009cc:	440b      	add	r3, r1
 80009ce:	f803 2c74 	strb.w	r2, [r3, #-116]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80009d2:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 80009dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e0:	4833      	ldr	r0, [pc, #204]	; (8000ab0 <enableSensor+0x304>)
 80009e2:	f009 fd93 	bl	800a50c <HAL_UART_Transmit>
	}

	err = VL53L1_SetDeviceAddress(&sensors[i].chip, (0x29 + i + 1) << 1);
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	4a2b      	ldr	r2, [pc, #172]	; (8000aa0 <enableSensor+0x2f4>)
 80009f4:	441a      	add	r2, r3
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	332a      	adds	r3, #42	; 0x2a
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	4619      	mov	r1, r3
 8000a06:	4610      	mov	r0, r2
 8000a08:	f001 f9fb 	bl	8001e02 <VL53L1_SetDeviceAddress>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	sensors[i].chip.I2cDevAddr = (0x29 + i + 1) << 1; //change address even in case of error to reduce miss-talk
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	332a      	adds	r3, #42	; 0x2a
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	b2d8      	uxtb	r0, r3
 8000a20:	4a1f      	ldr	r2, [pc, #124]	; (8000aa0 <enableSensor+0x2f4>)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 8000a2a:	fb01 f303 	mul.w	r3, r1, r3
 8000a2e:	4413      	add	r3, r2
 8000a30:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8000a34:	4602      	mov	r2, r0
 8000a36:	701a      	strb	r2, [r3, #0]
	if (err != VL53L1_ERROR_NONE) {
 8000a38:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d043      	beq.n	8000ac8 <enableSensor+0x31c>
		uint8_t msg[] = "VL53L1_SetDeviceAddress failed    \n";
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <enableSensor+0x318>)
 8000a46:	461c      	mov	r4, r3
 8000a48:	4615      	mov	r5, r2
 8000a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a52:	682b      	ldr	r3, [r5, #0]
 8000a54:	6023      	str	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 8000a56:	2323      	movs	r3, #35	; 0x23
 8000a58:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
		msg[len - 1 - 1] = i + '0';
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 8000a66:	3b02      	subs	r3, #2
 8000a68:	3230      	adds	r2, #48	; 0x30
 8000a6a:	b2d1      	uxtb	r1, r2
 8000a6c:	f107 0208 	add.w	r2, r7, #8
 8000a70:	54d1      	strb	r1, [r2, r3]
		msg[len - 3 - 1] = err + '0';
 8000a72:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8000a76:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	3230      	adds	r2, #48	; 0x30
 8000a7e:	b2d1      	uxtb	r1, r2
 8000a80:	f107 0208 	add.w	r2, r7, #8
 8000a84:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8000a86:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	f107 0108 	add.w	r1, r7, #8
 8000a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a94:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <enableSensor+0x304>)
 8000a96:	f009 fd39 	bl	800a50c <HAL_UART_Transmit>
		return 2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	e267      	b.n	8000f6e <enableSensor+0x7c2>
 8000a9e:	bf00      	nop
 8000aa0:	20000464 	.word	0x20000464
 8000aa4:	200002d4 	.word	0x200002d4
 8000aa8:	20000328 	.word	0x20000328
 8000aac:	0800f2fc 	.word	0x0800f2fc
 8000ab0:	200003e4 	.word	0x200003e4
 8000ab4:	0800f308 	.word	0x0800f308
 8000ab8:	0800f32c 	.word	0x0800f32c
 8000abc:	0800f34c 	.word	0x0800f34c
 8000ac0:	0800f368 	.word	0x0800f368
 8000ac4:	0800f380 	.word	0x0800f380
	} else {
		uint8_t msg[] = "VL53L1_SetDeviceAddress OK  \n";
 8000ac8:	4b9e      	ldr	r3, [pc, #632]	; (8000d44 <enableSensor+0x598>)
 8000aca:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 8000ace:	461d      	mov	r5, r3
 8000ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ad8:	c407      	stmia	r4!, {r0, r1, r2}
 8000ada:	8023      	strh	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 8000adc:	231d      	movs	r3, #29
 8000ade:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
		msg[len - 1 - 1] = i + '0';
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8000aec:	3b02      	subs	r3, #2
 8000aee:	3230      	adds	r2, #48	; 0x30
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000af6:	440b      	add	r3, r1
 8000af8:	f803 2c94 	strb.w	r2, [r3, #-148]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8000afc:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8000b06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b0a:	488f      	ldr	r0, [pc, #572]	; (8000d48 <enableSensor+0x59c>)
 8000b0c:	f009 fcfe 	bl	800a50c <HAL_UART_Transmit>
	}

	err = VL53L1_StaticInit(&sensors[i].chip);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8000b18:	fb02 f303 	mul.w	r3, r2, r3
 8000b1c:	4a8b      	ldr	r2, [pc, #556]	; (8000d4c <enableSensor+0x5a0>)
 8000b1e:	4413      	add	r3, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 f9db 	bl	8001edc <VL53L1_StaticInit>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	if (err != VL53L1_ERROR_NONE) {
 8000b2c:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d031      	beq.n	8000b98 <enableSensor+0x3ec>
		uint8_t msg[] = "VL53L1_StaticInit failed    \n";
 8000b34:	4b86      	ldr	r3, [pc, #536]	; (8000d50 <enableSensor+0x5a4>)
 8000b36:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 8000b3a:	461d      	mov	r5, r3
 8000b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b44:	c407      	stmia	r4!, {r0, r1, r2}
 8000b46:	8023      	strh	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 8000b48:	231d      	movs	r3, #29
 8000b4a:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
		msg[len - 1 - 1] = i + '0';
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 8000b58:	3b02      	subs	r3, #2
 8000b5a:	3230      	adds	r2, #48	; 0x30
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000b62:	440b      	add	r3, r1
 8000b64:	f803 2cb4 	strb.w	r2, [r3, #-180]
		msg[len - 3 - 1] = err + '0';
 8000b68:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8000b6c:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 8000b70:	3b04      	subs	r3, #4
 8000b72:	3230      	adds	r2, #48	; 0x30
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f803 2cb4 	strb.w	r2, [r3, #-180]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8000b80:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8000b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b8e:	486e      	ldr	r0, [pc, #440]	; (8000d48 <enableSensor+0x59c>)
 8000b90:	f009 fcbc 	bl	800a50c <HAL_UART_Transmit>
		return 4;
 8000b94:	2304      	movs	r3, #4
 8000b96:	e1ea      	b.n	8000f6e <enableSensor+0x7c2>
	} else {
		uint8_t msg[] = "VL53L1_StaticInit OK  \n";
 8000b98:	4b6e      	ldr	r3, [pc, #440]	; (8000d54 <enableSensor+0x5a8>)
 8000b9a:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8000b9e:	461d      	mov	r5, r3
 8000ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ba8:	e884 0003 	stmia.w	r4, {r0, r1}
		uint8_t len = sizeof(msg) - 1;
 8000bac:	2317      	movs	r3, #23
 8000bae:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
		msg[len - 1 - 1] = i + '0';
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8000bbc:	3b02      	subs	r3, #2
 8000bbe:	3230      	adds	r2, #48	; 0x30
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f803 2ccc 	strb.w	r2, [r3, #-204]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8000bcc:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bda:	485b      	ldr	r0, [pc, #364]	; (8000d48 <enableSensor+0x59c>)
 8000bdc:	f009 fc96 	bl	800a50c <HAL_UART_Transmit>
	}

	err = VL53L1_SetDistanceMode(&sensors[i].chip, VL53L1_DISTANCEMODE_LONG);
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8000be8:	fb02 f303 	mul.w	r3, r2, r3
 8000bec:	4a57      	ldr	r2, [pc, #348]	; (8000d4c <enableSensor+0x5a0>)
 8000bee:	4413      	add	r3, r2
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 fac5 	bl	8002182 <VL53L1_SetDistanceMode>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	if (err != VL53L1_ERROR_NONE) {
 8000bfe:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d032      	beq.n	8000c6c <enableSensor+0x4c0>
		uint8_t msg[] = "VL53L1_SetDistanceMode failed    \n";
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4a53      	ldr	r2, [pc, #332]	; (8000d58 <enableSensor+0x5ac>)
 8000c0c:	461c      	mov	r4, r3
 8000c0e:	4615      	mov	r5, r2
 8000c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c18:	682b      	ldr	r3, [r5, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	8022      	strh	r2, [r4, #0]
 8000c1e:	3402      	adds	r4, #2
 8000c20:	0c1b      	lsrs	r3, r3, #16
 8000c22:	7023      	strb	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 8000c24:	2322      	movs	r3, #34	; 0x22
 8000c26:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
		msg[len - 1 - 1] = i + '0';
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8000c34:	3b02      	subs	r3, #2
 8000c36:	3230      	adds	r2, #48	; 0x30
 8000c38:	b2d1      	uxtb	r1, r2
 8000c3a:	f107 0208 	add.w	r2, r7, #8
 8000c3e:	54d1      	strb	r1, [r2, r3]
		msg[len - 3 - 1] = err + '0';
 8000c40:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8000c44:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8000c48:	3b04      	subs	r3, #4
 8000c4a:	3230      	adds	r2, #48	; 0x30
 8000c4c:	b2d1      	uxtb	r1, r2
 8000c4e:	f107 0208 	add.w	r2, r7, #8
 8000c52:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8000c54:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	f107 0108 	add.w	r1, r7, #8
 8000c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c62:	4839      	ldr	r0, [pc, #228]	; (8000d48 <enableSensor+0x59c>)
 8000c64:	f009 fc52 	bl	800a50c <HAL_UART_Transmit>
		return 5;
 8000c68:	2305      	movs	r3, #5
 8000c6a:	e180      	b.n	8000f6e <enableSensor+0x7c2>
	} else {
		uint8_t msg[] = "VL53L1_SetDistanceMode OK  \n";
 8000c6c:	4b3b      	ldr	r3, [pc, #236]	; (8000d5c <enableSensor+0x5b0>)
 8000c6e:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000c72:	461d      	mov	r5, r3
 8000c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c7c:	c407      	stmia	r4!, {r0, r1, r2}
 8000c7e:	7023      	strb	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 8000c80:	231c      	movs	r3, #28
 8000c82:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
		msg[len - 1 - 1] = i + '0';
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8000c90:	3b02      	subs	r3, #2
 8000c92:	3230      	adds	r2, #48	; 0x30
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f803 2cec 	strb.w	r2, [r3, #-236]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8000ca0:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000caa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cae:	4826      	ldr	r0, [pc, #152]	; (8000d48 <enableSensor+0x59c>)
 8000cb0:	f009 fc2c 	bl	800a50c <HAL_UART_Transmit>
	}

	err = VL53L1_SetMeasurementTimingBudgetMicroSeconds(&sensors[i].chip,
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8000cbc:	fb02 f303 	mul.w	r3, r2, r3
 8000cc0:	4a22      	ldr	r2, [pc, #136]	; (8000d4c <enableSensor+0x5a0>)
 8000cc2:	4413      	add	r3, r2
 8000cc4:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 fae1 	bl	8002290 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
			20000);
	if (err != VL53L1_ERROR_NONE) {
 8000cd4:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d043      	beq.n	8000d64 <enableSensor+0x5b8>
		uint8_t msg[] =
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <enableSensor+0x5b4>)
 8000ce2:	461c      	mov	r4, r3
 8000ce4:	4615      	mov	r5, r2
 8000ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cf6:	c403      	stmia	r4!, {r0, r1}
 8000cf8:	8022      	strh	r2, [r4, #0]
				"VL53L1_SetMeasurementTimingBudgetMicroSeconds failed    \n";
		uint8_t len = sizeof(msg) - 1;
 8000cfa:	2339      	movs	r3, #57	; 0x39
 8000cfc:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
		msg[len - 1 - 1] = i + '0';
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	3230      	adds	r2, #48	; 0x30
 8000d0e:	b2d1      	uxtb	r1, r2
 8000d10:	f107 0208 	add.w	r2, r7, #8
 8000d14:	54d1      	strb	r1, [r2, r3]
		msg[len - 3 - 1] = err + '0';
 8000d16:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8000d1a:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	3230      	adds	r2, #48	; 0x30
 8000d22:	b2d1      	uxtb	r1, r2
 8000d24:	f107 0208 	add.w	r2, r7, #8
 8000d28:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8000d2a:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	f107 0108 	add.w	r1, r7, #8
 8000d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <enableSensor+0x59c>)
 8000d3a:	f009 fbe7 	bl	800a50c <HAL_UART_Transmit>
		return 6;
 8000d3e:	2306      	movs	r3, #6
 8000d40:	e115      	b.n	8000f6e <enableSensor+0x7c2>
 8000d42:	bf00      	nop
 8000d44:	0800f3a4 	.word	0x0800f3a4
 8000d48:	200003e4 	.word	0x200003e4
 8000d4c:	20000464 	.word	0x20000464
 8000d50:	0800f3c4 	.word	0x0800f3c4
 8000d54:	0800f3e4 	.word	0x0800f3e4
 8000d58:	0800f3fc 	.word	0x0800f3fc
 8000d5c:	0800f420 	.word	0x0800f420
 8000d60:	0800f440 	.word	0x0800f440
	} else {
		uint8_t msg[] = "VL53L1_SetMeasurementTimingBudgetMicroSeconds OK  \n";
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4a83      	ldr	r2, [pc, #524]	; (8000f78 <enableSensor+0x7cc>)
 8000d6a:	461c      	mov	r4, r3
 8000d6c:	4615      	mov	r5, r2
 8000d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7a:	682b      	ldr	r3, [r5, #0]
 8000d7c:	6023      	str	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 8000d7e:	2333      	movs	r3, #51	; 0x33
 8000d80:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149
		msg[len - 1 - 1] = i + '0';
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	3230      	adds	r2, #48	; 0x30
 8000d92:	b2d1      	uxtb	r1, r2
 8000d94:	f107 0208 	add.w	r2, r7, #8
 8000d98:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8000d9a:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	f107 0108 	add.w	r1, r7, #8
 8000da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da8:	4874      	ldr	r0, [pc, #464]	; (8000f7c <enableSensor+0x7d0>)
 8000daa:	f009 fbaf 	bl	800a50c <HAL_UART_Transmit>
	}

	err = VL53L1_SetInterMeasurementPeriodMilliSeconds(&sensors[i].chip, 25);
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	4a71      	ldr	r2, [pc, #452]	; (8000f80 <enableSensor+0x7d4>)
 8000dbc:	4413      	add	r3, r2
 8000dbe:	2119      	movs	r1, #25
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 fbe5 	bl	8002590 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	if (err != VL53L1_ERROR_NONE) {
 8000dcc:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d032      	beq.n	8000e3a <enableSensor+0x68e>
		uint8_t msg[] =
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	4a6a      	ldr	r2, [pc, #424]	; (8000f84 <enableSensor+0x7d8>)
 8000dda:	461c      	mov	r4, r3
 8000ddc:	4615      	mov	r5, r2
 8000dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dee:	c403      	stmia	r4!, {r0, r1}
 8000df0:	7022      	strb	r2, [r4, #0]
				"VL53L1_SetInterMeasurementPeriodMilliSeconds failed    \n";
		uint8_t len = sizeof(msg) - 1;
 8000df2:	2338      	movs	r3, #56	; 0x38
 8000df4:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
		msg[len - 1 - 1] = i + '0';
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8000e02:	3b02      	subs	r3, #2
 8000e04:	3230      	adds	r2, #48	; 0x30
 8000e06:	b2d1      	uxtb	r1, r2
 8000e08:	f107 0208 	add.w	r2, r7, #8
 8000e0c:	54d1      	strb	r1, [r2, r3]
		msg[len - 3 - 1] = err + '0';
 8000e0e:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8000e12:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8000e16:	3b04      	subs	r3, #4
 8000e18:	3230      	adds	r2, #48	; 0x30
 8000e1a:	b2d1      	uxtb	r1, r2
 8000e1c:	f107 0208 	add.w	r2, r7, #8
 8000e20:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8000e22:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	f107 0108 	add.w	r1, r7, #8
 8000e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e30:	4852      	ldr	r0, [pc, #328]	; (8000f7c <enableSensor+0x7d0>)
 8000e32:	f009 fb6b 	bl	800a50c <HAL_UART_Transmit>
		return 7;
 8000e36:	2307      	movs	r3, #7
 8000e38:	e099      	b.n	8000f6e <enableSensor+0x7c2>
	} else {
		uint8_t msg[] = "VL53L1_SetInterMeasurementPeriodMilliSeconds OK  \n";
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4a52      	ldr	r2, [pc, #328]	; (8000f88 <enableSensor+0x7dc>)
 8000e40:	461c      	mov	r4, r3
 8000e42:	4615      	mov	r5, r2
 8000e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e50:	682b      	ldr	r3, [r5, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	8022      	strh	r2, [r4, #0]
 8000e56:	3402      	adds	r4, #2
 8000e58:	0c1b      	lsrs	r3, r3, #16
 8000e5a:	7023      	strb	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 8000e5c:	2332      	movs	r3, #50	; 0x32
 8000e5e:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
		msg[len - 1 - 1] = i + '0';
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	3230      	adds	r2, #48	; 0x30
 8000e70:	b2d1      	uxtb	r1, r2
 8000e72:	f107 0208 	add.w	r2, r7, #8
 8000e76:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8000e78:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	f107 0108 	add.w	r1, r7, #8
 8000e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e86:	483d      	ldr	r0, [pc, #244]	; (8000f7c <enableSensor+0x7d0>)
 8000e88:	f009 fb40 	bl	800a50c <HAL_UART_Transmit>
	}

	err = VL53L1_StartMeasurement(&sensors[i].chip);
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8000e94:	fb02 f303 	mul.w	r3, r2, r3
 8000e98:	4a39      	ldr	r2, [pc, #228]	; (8000f80 <enableSensor+0x7d4>)
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fced 	bl	800287c <VL53L1_StartMeasurement>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	if (err != VL53L1_ERROR_NONE) {
 8000ea8:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d02e      	beq.n	8000f0e <enableSensor+0x762>
		uint8_t msg[] = "VL53L1_StartMeasurement failed    \n";
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	4a35      	ldr	r2, [pc, #212]	; (8000f8c <enableSensor+0x7e0>)
 8000eb6:	461c      	mov	r4, r3
 8000eb8:	4615      	mov	r5, r2
 8000eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec2:	682b      	ldr	r3, [r5, #0]
 8000ec4:	6023      	str	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 8000ec6:	2323      	movs	r3, #35	; 0x23
 8000ec8:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
		msg[len - 1 - 1] = i + '0';
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	3230      	adds	r2, #48	; 0x30
 8000eda:	b2d1      	uxtb	r1, r2
 8000edc:	f107 0208 	add.w	r2, r7, #8
 8000ee0:	54d1      	strb	r1, [r2, r3]
		msg[len - 3 - 1] = err + '0';
 8000ee2:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8000ee6:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8000eea:	3b04      	subs	r3, #4
 8000eec:	3230      	adds	r2, #48	; 0x30
 8000eee:	b2d1      	uxtb	r1, r2
 8000ef0:	f107 0208 	add.w	r2, r7, #8
 8000ef4:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8000ef6:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	f107 0108 	add.w	r1, r7, #8
 8000f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f04:	481d      	ldr	r0, [pc, #116]	; (8000f7c <enableSensor+0x7d0>)
 8000f06:	f009 fb01 	bl	800a50c <HAL_UART_Transmit>
		return 8;
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	e02f      	b.n	8000f6e <enableSensor+0x7c2>
	} else {
		uint8_t msg[] = "VL53L1_StartMeasurement OK  \n";
 8000f0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f12:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <enableSensor+0x7e4>)
 8000f14:	461c      	mov	r4, r3
 8000f16:	4615      	mov	r5, r2
 8000f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f20:	c407      	stmia	r4!, {r0, r1, r2}
 8000f22:	8023      	strh	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 8000f24:	231d      	movs	r3, #29
 8000f26:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
		msg[len - 1 - 1] = i + '0';
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8000f34:	3b02      	subs	r3, #2
 8000f36:	3230      	adds	r2, #48	; 0x30
 8000f38:	b2d1      	uxtb	r1, r2
 8000f3a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000f3e:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8000f40:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000f4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f4e:	480b      	ldr	r0, [pc, #44]	; (8000f7c <enableSensor+0x7d0>)
 8000f50:	f009 fadc 	bl	800a50c <HAL_UART_Transmit>
	}
	sensors[i].valid = 1;
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <enableSensor+0x7d4>)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 8000f5e:	fb01 f303 	mul.w	r3, r1, r3
 8000f62:	4413      	add	r3, r2
 8000f64:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
	return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bdb0      	pop	{r4, r5, r7, pc}
 8000f78:	0800f47c 	.word	0x0800f47c
 8000f7c:	200003e4 	.word	0x200003e4
 8000f80:	20000464 	.word	0x20000464
 8000f84:	0800f4b0 	.word	0x0800f4b0
 8000f88:	0800f4ec 	.word	0x0800f4ec
 8000f8c:	0800f520 	.word	0x0800f520
 8000f90:	0800f544 	.word	0x0800f544

08000f94 <scan>:

void scan(I2C_HandleTypeDef *hi2c) {
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b09d      	sub	sp, #116	; 0x74
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	for (int i = 1; i < 128; i++) {
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fa0:	e033      	b.n	800100a <scan+0x76>
		 * &hi2c1 is the handle
		 * (uint16_t)(i<<1) is the i2c address left aligned
		 * retries 2
		 * timeout 2
		 */
		HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(hi2c, (i << 1), 2, 2);
 8000fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	b299      	uxth	r1, r3
 8000faa:	2302      	movs	r3, #2
 8000fac:	2202      	movs	r2, #2
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f007 f820 	bl	8007ff4 <HAL_I2C_IsDeviceReady>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 8000fba:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d006      	beq.n	8000fd0 <scan+0x3c>
				{
			HAL_UART_Transmit(&huart1, ".", 1, 0xFFFF);
 8000fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	491d      	ldr	r1, [pc, #116]	; (8001040 <scan+0xac>)
 8000fca:	481e      	ldr	r0, [pc, #120]	; (8001044 <scan+0xb0>)
 8000fcc:	f009 fa9e 	bl	800a50c <HAL_UART_Transmit>
		}
		if (result == HAL_OK) {
 8000fd0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d115      	bne.n	8001004 <scan+0x70>
			char buff[80];
			sprintf(buff, "0x%X\n", i << 1);
 8000fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fda:	005a      	lsls	r2, r3, #1
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4919      	ldr	r1, [pc, #100]	; (8001048 <scan+0xb4>)
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00d fe3a 	bl	800ec5c <siprintf>
			HAL_UART_Transmit(&huart1, buff, strlen(buff), 0xFFFF);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff f8f7 	bl	80001e0 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	f107 010c 	add.w	r1, r7, #12
 8000ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ffe:	4811      	ldr	r0, [pc, #68]	; (8001044 <scan+0xb0>)
 8001000:	f009 fa84 	bl	800a50c <HAL_UART_Transmit>
	for (int i = 1; i < 128; i++) {
 8001004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001006:	3301      	adds	r3, #1
 8001008:	66fb      	str	r3, [r7, #108]	; 0x6c
 800100a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800100c:	2b7f      	cmp	r3, #127	; 0x7f
 800100e:	ddc8      	ble.n	8000fa2 <scan+0xe>
		}
	}
	char buff[] = "\nSCAN FINISH\n";
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <scan+0xb8>)
 8001012:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001018:	c407      	stmia	r4!, {r0, r1, r2}
 800101a:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, buff, strlen(buff), 0xFFFF);
 800101c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff f8dd 	bl	80001e0 <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	b29a      	uxth	r2, r3
 800102a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800102e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <scan+0xb0>)
 8001034:	f009 fa6a 	bl	800a50c <HAL_UART_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3774      	adds	r7, #116	; 0x74
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	0800f564 	.word	0x0800f564
 8001044:	200003e4 	.word	0x200003e4
 8001048:	0800f568 	.word	0x0800f568
 800104c:	0800f570 	.word	0x0800f570

08001050 <updateLed>:

uint32_t ledColor[4];

void updateLed() {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	static int lastGreen = 0;
	static uint8_t first = 1;
	static uint32_t last = 0;
	if (!first) {
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <updateLed+0x78>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d111      	bne.n	8001080 <updateLed+0x30>
		// set back previus led
		if (lastGreen == 0) {
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <updateLed+0x7c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d104      	bne.n	800106e <updateLed+0x1e>
			ledColor[3] = last;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <updateLed+0x80>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <updateLed+0x84>)
 800106a:	60d3      	str	r3, [r2, #12]
 800106c:	e00b      	b.n	8001086 <updateLed+0x36>
		} else {
			ledColor[lastGreen - 1] = last;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <updateLed+0x7c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <updateLed+0x80>)
 8001076:	6812      	ldr	r2, [r2, #0]
 8001078:	4916      	ldr	r1, [pc, #88]	; (80010d4 <updateLed+0x84>)
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800107e:	e002      	b.n	8001086 <updateLed+0x36>
		}
	} else {
		first = 0;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <updateLed+0x78>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
	}
	//set current to blue and increment
	last = ledColor[lastGreen];
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <updateLed+0x7c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <updateLed+0x84>)
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <updateLed+0x80>)
 8001092:	6013      	str	r3, [r2, #0]
	ledColor[lastGreen] = 0x00FF00; //blue
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <updateLed+0x7c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <updateLed+0x84>)
 800109a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800109e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	lastGreen++;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <updateLed+0x7c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	4a08      	ldr	r2, [pc, #32]	; (80010cc <updateLed+0x7c>)
 80010aa:	6013      	str	r3, [r2, #0]

	//avoid overflow
	if (lastGreen >= 4) {
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <updateLed+0x7c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	dd02      	ble.n	80010ba <updateLed+0x6a>
		lastGreen = 0;
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <updateLed+0x7c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
	}

	sendColors(ledColor, 4);
 80010ba:	2104      	movs	r1, #4
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <updateLed+0x84>)
 80010be:	f7ff fb57 	bl	8000770 <sendColors>
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000040 	.word	0x20000040
 80010cc:	20000264 	.word	0x20000264
 80010d0:	20000268 	.word	0x20000268
 80010d4:	200003d4 	.word	0x200003d4

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0a6      	sub	sp, #152	; 0x98
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010de:	f006 f8f9 	bl	80072d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e2:	f000 f99b 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e6:	f000 fb15 	bl	8001714 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010ea:	f000 f9ff 	bl	80014ec <MX_I2C1_Init>
  MX_I2C2_Init();
 80010ee:	f000 fa2b 	bl	8001548 <MX_I2C2_Init>
  MX_I2C3_Init();
 80010f2:	f000 fa57 	bl	80015a4 <MX_I2C3_Init>
  MX_SPI3_Init();
 80010f6:	f000 fa83 	bl	8001600 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80010fa:	f000 fab7 	bl	800166c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010fe:	f000 fadf 	bl	80016c0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001102:	f00c ffd5 	bl	800e0b0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	// be sure to put all xshut to low
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3,
 8001106:	2200      	movs	r2, #0
 8001108:	210f      	movs	r1, #15
 800110a:	48b8      	ldr	r0, [pc, #736]	; (80013ec <main+0x314>)
 800110c:	f006 fd80 	bl	8007c10 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7,
 8001110:	2200      	movs	r2, #0
 8001112:	21f0      	movs	r1, #240	; 0xf0
 8001114:	48b6      	ldr	r0, [pc, #728]	; (80013f0 <main+0x318>)
 8001116:	f006 fd7b 	bl	8007c10 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	for (int i = 0; i < 4; i++) {
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001120:	e00a      	b.n	8001138 <main+0x60>
		ledColor[i] = 0x0000FF; //set to blue
 8001122:	4ab4      	ldr	r2, [pc, #720]	; (80013f4 <main+0x31c>)
 8001124:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001128:	21ff      	movs	r1, #255	; 0xff
 800112a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 800112e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001132:	3301      	adds	r3, #1
 8001134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001138:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800113c:	2b03      	cmp	r3, #3
 800113e:	ddf0      	ble.n	8001122 <main+0x4a>
	}
	sendColors(ledColor, 4);
 8001140:	2104      	movs	r1, #4
 8001142:	48ac      	ldr	r0, [pc, #688]	; (80013f4 <main+0x31c>)
 8001144:	f7ff fb14 	bl	8000770 <sendColors>

	HAL_Delay(1000);
 8001148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800114c:	f006 f934 	bl	80073b8 <HAL_Delay>

	for (int i = 0; i < 8; i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001156:	e057      	b.n	8001208 <main+0x130>
		HAL_GPIO_WritePin(xshut[i].port, xshut[i].mask, GPIO_PIN_SET);
 8001158:	4aa7      	ldr	r2, [pc, #668]	; (80013f8 <main+0x320>)
 800115a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800115e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001162:	4aa5      	ldr	r2, [pc, #660]	; (80013f8 <main+0x320>)
 8001164:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4413      	add	r3, r2
 800116c:	889b      	ldrh	r3, [r3, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	4619      	mov	r1, r3
 8001172:	f006 fd4d 	bl	8007c10 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001176:	200a      	movs	r0, #10
 8001178:	f006 f91e 	bl	80073b8 <HAL_Delay>
		int error = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	67fb      	str	r3, [r7, #124]	; 0x7c
		error += enableSensor(i); //i2c1
 8001180:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001184:	f7ff fb12 	bl	80007ac <enableSensor>
 8001188:	4602      	mov	r2, r0
 800118a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800118c:	4413      	add	r3, r2
 800118e:	67fb      	str	r3, [r7, #124]	; 0x7c
		error += enableSensor(i + 8); //i2c2
 8001190:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001194:	3308      	adds	r3, #8
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fb08 	bl	80007ac <enableSensor>
 800119c:	4602      	mov	r2, r0
 800119e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011a0:	4413      	add	r3, r2
 80011a2:	67fb      	str	r3, [r7, #124]	; 0x7c

		if (error) {
 80011a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00f      	beq.n	80011ca <main+0xf2>
			//HAL_GPIO_WritePin(xshut[i].port, xshut[i].mask, GPIO_PIN_RESET);
			ledColor[i / 2] = 0xFF0000; //set to red
 80011aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011ae:	0fda      	lsrs	r2, r3, #31
 80011b0:	4413      	add	r3, r2
 80011b2:	105b      	asrs	r3, r3, #1
 80011b4:	4619      	mov	r1, r3
 80011b6:	4b8f      	ldr	r3, [pc, #572]	; (80013f4 <main+0x31c>)
 80011b8:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80011bc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			sendColors(ledColor, 4);
 80011c0:	2104      	movs	r1, #4
 80011c2:	488c      	ldr	r0, [pc, #560]	; (80013f4 <main+0x31c>)
 80011c4:	f7ff fad4 	bl	8000770 <sendColors>
 80011c8:	e019      	b.n	80011fe <main+0x126>
		} else {
			if (ledColor[i / 2] != 0xFF0000) {
 80011ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011ce:	0fda      	lsrs	r2, r3, #31
 80011d0:	4413      	add	r3, r2
 80011d2:	105b      	asrs	r3, r3, #1
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b87      	ldr	r3, [pc, #540]	; (80013f4 <main+0x31c>)
 80011d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011dc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80011e0:	d00d      	beq.n	80011fe <main+0x126>
				ledColor[i / 2] = 0; //turn off led
 80011e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011e6:	0fda      	lsrs	r2, r3, #31
 80011e8:	4413      	add	r3, r2
 80011ea:	105b      	asrs	r3, r3, #1
 80011ec:	4619      	mov	r1, r3
 80011ee:	4b81      	ldr	r3, [pc, #516]	; (80013f4 <main+0x31c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				sendColors(ledColor, 4);
 80011f6:	2104      	movs	r1, #4
 80011f8:	487e      	ldr	r0, [pc, #504]	; (80013f4 <main+0x31c>)
 80011fa:	f7ff fab9 	bl	8000770 <sendColors>
	for (int i = 0; i < 8; i++) {
 80011fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001202:	3301      	adds	r3, #1
 8001204:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001208:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800120c:	2b07      	cmp	r3, #7
 800120e:	dda3      	ble.n	8001158 <main+0x80>
			}
		}
	}
	scan(&hi2c1);
 8001210:	487a      	ldr	r0, [pc, #488]	; (80013fc <main+0x324>)
 8001212:	f7ff febf 	bl	8000f94 <scan>
	scan(&hi2c2);
 8001216:	487a      	ldr	r0, [pc, #488]	; (8001400 <main+0x328>)
 8001218:	f7ff febc 	bl	8000f94 <scan>

	int fps = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	uint8_t buff[80];

	uint8_t msg[5]; // ~, 3 byte payload, checksum
	uint32_t start = HAL_GetTick();
 8001222:	f006 f8bd 	bl	80073a0 <HAL_GetTick>
 8001226:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	while (1) {

		for (int i = 0; i < 16; i++) {
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001230:	e0a0      	b.n	8001374 <main+0x29c>

			VL53L1_RangingMeasurementData_t rangingData;

			uint8_t ready = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	71fb      	strb	r3, [r7, #7]
			if (sensors[i].valid) {
 8001236:	4a73      	ldr	r2, [pc, #460]	; (8001404 <main+0x32c>)
 8001238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800123c:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 8001240:	fb01 f303 	mul.w	r3, r1, r3
 8001244:	4413      	add	r3, r2
 8001246:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 808c 	beq.w	800136a <main+0x292>
				VL53L1_Error err = VL53L1_GetMeasurementDataReady(
 8001252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001256:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800125a:	fb02 f303 	mul.w	r3, r2, r3
 800125e:	4a69      	ldr	r2, [pc, #420]	; (8001404 <main+0x32c>)
 8001260:	4413      	add	r3, r2
 8001262:	1dfa      	adds	r2, r7, #7
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fc26 	bl	8002ab8 <VL53L1_GetMeasurementDataReady>
 800126c:	4603      	mov	r3, r0
 800126e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
						&sensors[i].chip, &ready);
				if (!err && ready) {
 8001272:	f997 3083 	ldrsb.w	r3, [r7, #131]	; 0x83
 8001276:	2b00      	cmp	r3, #0
 8001278:	d15c      	bne.n	8001334 <main+0x25c>
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d059      	beq.n	8001334 <main+0x25c>

					VL53L1_GetRangingMeasurementData(&sensors[i].chip,
 8001280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001284:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8001288:	fb02 f303 	mul.w	r3, r2, r3
 800128c:	4a5d      	ldr	r2, [pc, #372]	; (8001404 <main+0x32c>)
 800128e:	4413      	add	r3, r2
 8001290:	f107 0208 	add.w	r2, r7, #8
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fde6 	bl	8002e68 <VL53L1_GetRangingMeasurementData>
							&rangingData);

					VL53L1_ClearInterruptAndStartMeasurement(&sensors[i].chip);
 800129c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012a0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80012a4:	fb02 f303 	mul.w	r3, r2, r3
 80012a8:	4a56      	ldr	r2, [pc, #344]	; (8001404 <main+0x32c>)
 80012aa:	4413      	add	r3, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f001 fbdb 	bl	8002a68 <VL53L1_ClearInterruptAndStartMeasurement>

					msg[0] = '~';
 80012b2:	237e      	movs	r3, #126	; 0x7e
 80012b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					msg[1] = i;
 80012b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					msg[2] = rangingData.RangeMilliMeter;
 80012c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					msg[3] = rangingData.RangeMilliMeter >> 8;
 80012cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80012d0:	121b      	asrs	r3, r3, #8
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					msg[4] = msg[0] + msg[1] + msg[2] + msg[3];
 80012da:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80012de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012e2:	4413      	add	r3, r2
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012ea:	4413      	add	r3, r2
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012f2:	4413      	add	r3, r2
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

					//HAL_UART_Transmit(&huart1, msg, sizeof(msg), 0xFFFF);

					sprintf((char*) buff, "%x\t%d\n", i,
							rangingData.RangeMilliMeter);
 80012fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
					sprintf((char*) buff, "%x\t%d\n", i,
 80012fe:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001302:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001306:	4940      	ldr	r1, [pc, #256]	; (8001408 <main+0x330>)
 8001308:	f00d fca8 	bl	800ec5c <siprintf>
					HAL_UART_Transmit(&huart1, buff, strlen((char*) buff),
 800130c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001310:	4618      	mov	r0, r3
 8001312:	f7fe ff65 	bl	80001e0 <strlen>
 8001316:	4603      	mov	r3, r0
 8001318:	b29a      	uxth	r2, r3
 800131a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800131e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001322:	483a      	ldr	r0, [pc, #232]	; (800140c <main+0x334>)
 8001324:	f009 f8f2 	bl	800a50c <HAL_UART_Transmit>
							0xFFFF);

					fps++;
 8001328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800132c:	3301      	adds	r3, #1
 800132e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001332:	e01a      	b.n	800136a <main+0x292>
				} else if (err) {
 8001334:	f997 3083 	ldrsb.w	r3, [r7, #131]	; 0x83
 8001338:	2b00      	cmp	r3, #0
 800133a:	d016      	beq.n	800136a <main+0x292>
					sprintf((char*) buff, "error %d reading sensor %d\n", err, i);
 800133c:	f997 2083 	ldrsb.w	r2, [r7, #131]	; 0x83
 8001340:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001344:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001348:	4931      	ldr	r1, [pc, #196]	; (8001410 <main+0x338>)
 800134a:	f00d fc87 	bl	800ec5c <siprintf>
					HAL_UART_Transmit(&huart1, buff, strlen((char*) buff), 0xFFFF);
 800134e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001352:	4618      	mov	r0, r3
 8001354:	f7fe ff44 	bl	80001e0 <strlen>
 8001358:	4603      	mov	r3, r0
 800135a:	b29a      	uxth	r2, r3
 800135c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001364:	4829      	ldr	r0, [pc, #164]	; (800140c <main+0x334>)
 8001366:	f009 f8d1 	bl	800a50c <HAL_UART_Transmit>
		for (int i = 0; i < 16; i++) {
 800136a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800136e:	3301      	adds	r3, #1
 8001370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001378:	2b0f      	cmp	r3, #15
 800137a:	f77f af5a 	ble.w	8001232 <main+0x15a>
				}
			}
		}

		static uint32_t startLedSpin = 0;
		if (HAL_GetTick() - startLedSpin >= 100) {
 800137e:	f006 f80f 	bl	80073a0 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <main+0x33c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b63      	cmp	r3, #99	; 0x63
 800138c:	d906      	bls.n	800139c <main+0x2c4>
			startLedSpin = HAL_GetTick();
 800138e:	f006 f807 	bl	80073a0 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <main+0x33c>)
 8001396:	601a      	str	r2, [r3, #0]
			updateLed();
 8001398:	f7ff fe5a 	bl	8001050 <updateLed>
		}

		if (HAL_GetTick() - start >= 1000) {
 800139c:	f006 f800 	bl	80073a0 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ac:	f4ff af3d 	bcc.w	800122a <main+0x152>
			start = HAL_GetTick();
 80013b0:	f005 fff6 	bl	80073a0 <HAL_GetTick>
 80013b4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			sprintf((char*) buff, "FPS: %d\n", fps);
 80013b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80013c0:	4915      	ldr	r1, [pc, #84]	; (8001418 <main+0x340>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00d fc4a 	bl	800ec5c <siprintf>
			HAL_UART_Transmit(&huart1, buff, strlen((char*) buff), 0xFFFF);
 80013c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7fe ff07 	bl	80001e0 <strlen>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80013da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013de:	480b      	ldr	r0, [pc, #44]	; (800140c <main+0x334>)
 80013e0:	f009 f894 	bl	800a50c <HAL_UART_Transmit>
			fps = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	while (1) {
 80013ea:	e71e      	b.n	800122a <main+0x152>
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	200003d4 	.word	0x200003d4
 80013f8:	20000000 	.word	0x20000000
 80013fc:	200002d4 	.word	0x200002d4
 8001400:	20000328 	.word	0x20000328
 8001404:	20000464 	.word	0x20000464
 8001408:	0800f580 	.word	0x0800f580
 800140c:	200003e4 	.word	0x200003e4
 8001410:	0800f588 	.word	0x0800f588
 8001414:	2000026c 	.word	0x2000026c
 8001418:	0800f5a4 	.word	0x0800f5a4

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	; 0x50
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	2230      	movs	r2, #48	; 0x30
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f00d fb55 	bl	800eada <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <SystemClock_Config+0xc8>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	4a26      	ldr	r2, [pc, #152]	; (80014e4 <SystemClock_Config+0xc8>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144e:	6413      	str	r3, [r2, #64]	; 0x40
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <SystemClock_Config+0xc8>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <SystemClock_Config+0xcc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <SystemClock_Config+0xcc>)
 8001466:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <SystemClock_Config+0xcc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001478:	2301      	movs	r3, #1
 800147a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800147c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001482:	2302      	movs	r3, #2
 8001484:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001486:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800148a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800148c:	230c      	movs	r3, #12
 800148e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001490:	2360      	movs	r3, #96	; 0x60
 8001492:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001494:	2302      	movs	r3, #2
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001498:	2304      	movs	r3, #4
 800149a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4618      	mov	r0, r3
 80014a2:	f008 f8bb 	bl	800961c <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014ac:	f000 fa02 	bl	80018b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	230f      	movs	r3, #15
 80014b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b4:	2302      	movs	r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	2103      	movs	r1, #3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f008 fbc5 	bl	8009c5c <HAL_RCC_ClockConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014d8:	f000 f9ec 	bl	80018b4 <Error_Handler>
  }
}
 80014dc:	bf00      	nop
 80014de:	3750      	adds	r7, #80	; 0x50
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40007000 	.word	0x40007000

080014ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_I2C1_Init+0x50>)
 80014f2:	4a13      	ldr	r2, [pc, #76]	; (8001540 <MX_I2C1_Init+0x54>)
 80014f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_I2C1_Init+0x50>)
 80014f8:	4a12      	ldr	r2, [pc, #72]	; (8001544 <MX_I2C1_Init+0x58>)
 80014fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_I2C1_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_I2C1_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_I2C1_Init+0x50>)
 800150a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800150e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <MX_I2C1_Init+0x50>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_I2C1_Init+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <MX_I2C1_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_I2C1_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_I2C1_Init+0x50>)
 800152a:	f006 fba3 	bl	8007c74 <HAL_I2C_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001534:	f000 f9be 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200002d4 	.word	0x200002d4
 8001540:	40005400 	.word	0x40005400
 8001544:	00061a80 	.word	0x00061a80

08001548 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_I2C2_Init+0x50>)
 800154e:	4a13      	ldr	r2, [pc, #76]	; (800159c <MX_I2C2_Init+0x54>)
 8001550:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_I2C2_Init+0x50>)
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <MX_I2C2_Init+0x58>)
 8001556:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_I2C2_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_I2C2_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_I2C2_Init+0x50>)
 8001566:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800156a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <MX_I2C2_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_I2C2_Init+0x50>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <MX_I2C2_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_I2C2_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <MX_I2C2_Init+0x50>)
 8001586:	f006 fb75 	bl	8007c74 <HAL_I2C_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001590:	f000 f990 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000328 	.word	0x20000328
 800159c:	40005800 	.word	0x40005800
 80015a0:	00061a80 	.word	0x00061a80

080015a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_I2C3_Init+0x50>)
 80015aa:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <MX_I2C3_Init+0x54>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_I2C3_Init+0x50>)
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <MX_I2C3_Init+0x58>)
 80015b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_I2C3_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_I2C3_Init+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_I2C3_Init+0x50>)
 80015c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <MX_I2C3_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_I2C3_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <MX_I2C3_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_I2C3_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_I2C3_Init+0x50>)
 80015e2:	f006 fb47 	bl	8007c74 <HAL_I2C_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80015ec:	f000 f962 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000280 	.word	0x20000280
 80015f8:	40005c00 	.word	0x40005c00
 80015fc:	00061a80 	.word	0x00061a80

08001600 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_SPI3_Init+0x64>)
 8001606:	4a18      	ldr	r2, [pc, #96]	; (8001668 <MX_SPI3_Init+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_SPI3_Init+0x64>)
 800160c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001610:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_SPI3_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_SPI3_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_SPI3_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_SPI3_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_SPI3_Init+0x64>)
 800162c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001630:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_SPI3_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <MX_SPI3_Init+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_SPI3_Init+0x64>)
 8001640:	2200      	movs	r2, #0
 8001642:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <MX_SPI3_Init+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_SPI3_Init+0x64>)
 800164c:	220a      	movs	r2, #10
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_SPI3_Init+0x64>)
 8001652:	f008 fd77 	bl	800a144 <HAL_SPI_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800165c:	f000 f92a 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000037c 	.word	0x2000037c
 8001668:	40003c00 	.word	0x40003c00

0800166c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <MX_USART1_UART_Init+0x50>)
 8001674:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_USART1_UART_Init+0x4c>)
 80016a4:	f008 fe7c 	bl	800a3a0 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ae:	f000 f901 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200003e4 	.word	0x200003e4
 80016bc:	40011000 	.word	0x40011000

080016c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <MX_USART2_UART_Init+0x50>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_USART2_UART_Init+0x4c>)
 80016f8:	f008 fe52 	bl	800a3a0 <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001702:	f000 f8d7 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000424 	.word	0x20000424
 8001710:	40004400 	.word	0x40004400

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b5c      	ldr	r3, [pc, #368]	; (80018a0 <MX_GPIO_Init+0x18c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a5b      	ldr	r2, [pc, #364]	; (80018a0 <MX_GPIO_Init+0x18c>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <MX_GPIO_Init+0x18c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <MX_GPIO_Init+0x18c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a54      	ldr	r2, [pc, #336]	; (80018a0 <MX_GPIO_Init+0x18c>)
 8001750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b52      	ldr	r3, [pc, #328]	; (80018a0 <MX_GPIO_Init+0x18c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b4e      	ldr	r3, [pc, #312]	; (80018a0 <MX_GPIO_Init+0x18c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a4d      	ldr	r2, [pc, #308]	; (80018a0 <MX_GPIO_Init+0x18c>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b4b      	ldr	r3, [pc, #300]	; (80018a0 <MX_GPIO_Init+0x18c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <MX_GPIO_Init+0x18c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a46      	ldr	r2, [pc, #280]	; (80018a0 <MX_GPIO_Init+0x18c>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b44      	ldr	r3, [pc, #272]	; (80018a0 <MX_GPIO_Init+0x18c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	4b40      	ldr	r3, [pc, #256]	; (80018a0 <MX_GPIO_Init+0x18c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a3f      	ldr	r2, [pc, #252]	; (80018a0 <MX_GPIO_Init+0x18c>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <MX_GPIO_Init+0x18c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80017b6:	2200      	movs	r2, #0
 80017b8:	f241 010f 	movw	r1, #4111	; 0x100f
 80017bc:	4839      	ldr	r0, [pc, #228]	; (80018a4 <MX_GPIO_Init+0x190>)
 80017be:	f006 fa27 	bl	8007c10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 80017c2:	2200      	movs	r2, #0
 80017c4:	f248 01f0 	movw	r1, #33008	; 0x80f0
 80017c8:	4837      	ldr	r0, [pc, #220]	; (80018a8 <MX_GPIO_Init+0x194>)
 80017ca:	f006 fa21 	bl	8007c10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d4:	4835      	ldr	r0, [pc, #212]	; (80018ac <MX_GPIO_Init+0x198>)
 80017d6:	f006 fa1b 	bl	8007c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4 
                           PC5 PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4 
 80017da:	f24e 13f0 	movw	r3, #57840	; 0xe1f0
 80017de:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	482d      	ldr	r0, [pc, #180]	; (80018a4 <MX_GPIO_Init+0x190>)
 80017f0:	f005 ff66 	bl	80076c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80017f4:	f241 030f 	movw	r3, #4111	; 0x100f
 80017f8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4825      	ldr	r0, [pc, #148]	; (80018a4 <MX_GPIO_Init+0x190>)
 800180e:	f005 ff57 	bl	80076c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001812:	2303      	movs	r3, #3
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	4820      	ldr	r0, [pc, #128]	; (80018a8 <MX_GPIO_Init+0x194>)
 8001826:	f005 ff4b 	bl	80076c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 800182a:	f248 03f0 	movw	r3, #33008	; 0x80f0
 800182e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4819      	ldr	r0, [pc, #100]	; (80018a8 <MX_GPIO_Init+0x194>)
 8001844:	f005 ff3c 	bl	80076c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14 
                           PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14 
 8001848:	f24c 2307 	movw	r3, #49671	; 0xc207
 800184c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4813      	ldr	r0, [pc, #76]	; (80018ac <MX_GPIO_Init+0x198>)
 800185e:	f005 ff2f 	bl	80076c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001862:	2304      	movs	r3, #4
 8001864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	480e      	ldr	r0, [pc, #56]	; (80018b0 <MX_GPIO_Init+0x19c>)
 8001876:	f005 ff23 	bl	80076c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800187a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	4806      	ldr	r0, [pc, #24]	; (80018ac <MX_GPIO_Init+0x198>)
 8001894:	f005 ff14 	bl	80076c0 <HAL_GPIO_Init>

}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020400 	.word	0x40020400
 80018b0:	40020c00 	.word	0x40020c00

080018b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <HAL_MspInit+0x4c>)
 80018e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_MspInit+0x4c>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <HAL_MspInit+0x4c>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_MspInit+0x4c>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08e      	sub	sp, #56	; 0x38
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a63      	ldr	r2, [pc, #396]	; (8001ad4 <HAL_I2C_MspInit+0x1ac>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d12c      	bne.n	80019a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
 800194e:	4b62      	ldr	r3, [pc, #392]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a61      	ldr	r2, [pc, #388]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	623b      	str	r3, [r7, #32]
 8001964:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001966:	23c0      	movs	r3, #192	; 0xc0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196a:	2312      	movs	r3, #18
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196e:	2301      	movs	r3, #1
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001976:	2304      	movs	r3, #4
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197e:	4619      	mov	r1, r3
 8001980:	4856      	ldr	r0, [pc, #344]	; (8001adc <HAL_I2C_MspInit+0x1b4>)
 8001982:	f005 fe9d 	bl	80076c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a52      	ldr	r2, [pc, #328]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001990:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80019a2:	e093      	b.n	8001acc <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a4d      	ldr	r2, [pc, #308]	; (8001ae0 <HAL_I2C_MspInit+0x1b8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d13d      	bne.n	8001a2a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
 80019b2:	4b49      	ldr	r3, [pc, #292]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a48      	ldr	r2, [pc, #288]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d0:	2312      	movs	r3, #18
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019dc:	2304      	movs	r3, #4
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e4:	4619      	mov	r1, r3
 80019e6:	483d      	ldr	r0, [pc, #244]	; (8001adc <HAL_I2C_MspInit+0x1b4>)
 80019e8:	f005 fe6a 	bl	80076c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019ec:	2308      	movs	r3, #8
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f0:	2312      	movs	r3, #18
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80019fc:	2309      	movs	r3, #9
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	4835      	ldr	r0, [pc, #212]	; (8001adc <HAL_I2C_MspInit+0x1b4>)
 8001a08:	f005 fe5a 	bl	80076c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	4a30      	ldr	r2, [pc, #192]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001a16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697b      	ldr	r3, [r7, #20]
}
 8001a28:	e050      	b.n	8001acc <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ae4 <HAL_I2C_MspInit+0x1bc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d14b      	bne.n	8001acc <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6313      	str	r3, [r2, #48]	; 0x30
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4a1f      	ldr	r2, [pc, #124]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a72:	2312      	movs	r3, #18
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a86:	4619      	mov	r1, r3
 8001a88:	4817      	ldr	r0, [pc, #92]	; (8001ae8 <HAL_I2C_MspInit+0x1c0>)
 8001a8a:	f005 fe19 	bl	80076c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a94:	2312      	movs	r3, #18
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4810      	ldr	r0, [pc, #64]	; (8001aec <HAL_I2C_MspInit+0x1c4>)
 8001aac:	f005 fe08 	bl	80076c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001aba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001abe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_I2C_MspInit+0x1b0>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
}
 8001acc:	bf00      	nop
 8001ace:	3738      	adds	r7, #56	; 0x38
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40005400 	.word	0x40005400
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020400 	.word	0x40020400
 8001ae0:	40005800 	.word	0x40005800
 8001ae4:	40005c00 	.word	0x40005c00
 8001ae8:	40020800 	.word	0x40020800
 8001aec:	40020000 	.word	0x40020000

08001af0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <HAL_SPI_MspInit+0xa4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d13c      	bne.n	8001b8c <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_SPI_MspInit+0xa8>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a1f      	ldr	r2, [pc, #124]	; (8001b98 <HAL_SPI_MspInit+0xa8>)
 8001b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <HAL_SPI_MspInit+0xa8>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_SPI_MspInit+0xa8>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a18      	ldr	r2, [pc, #96]	; (8001b98 <HAL_SPI_MspInit+0xa8>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <HAL_SPI_MspInit+0xa8>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB12     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <HAL_SPI_MspInit+0xac>)
 8001b68:	f005 fdaa 	bl	80076c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b6c:	2330      	movs	r3, #48	; 0x30
 8001b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b7c:	2306      	movs	r3, #6
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <HAL_SPI_MspInit+0xac>)
 8001b88:	f005 fd9a 	bl	80076c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	; 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40003c00 	.word	0x40003c00
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020400 	.word	0x40020400

08001ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	; 0x30
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a36      	ldr	r2, [pc, #216]	; (8001c98 <HAL_UART_MspInit+0xf8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d135      	bne.n	8001c2e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <HAL_UART_MspInit+0xfc>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a34      	ldr	r2, [pc, #208]	; (8001c9c <HAL_UART_MspInit+0xfc>)
 8001bcc:	f043 0310 	orr.w	r3, r3, #16
 8001bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd2:	4b32      	ldr	r3, [pc, #200]	; (8001c9c <HAL_UART_MspInit+0xfc>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <HAL_UART_MspInit+0xfc>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a2d      	ldr	r2, [pc, #180]	; (8001c9c <HAL_UART_MspInit+0xfc>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_UART_MspInit+0xfc>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	4619      	mov	r1, r3
 8001c16:	4822      	ldr	r0, [pc, #136]	; (8001ca0 <HAL_UART_MspInit+0x100>)
 8001c18:	f005 fd52 	bl	80076c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2025      	movs	r0, #37	; 0x25
 8001c22:	f005 fcdb 	bl	80075dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c26:	2025      	movs	r0, #37	; 0x25
 8001c28:	f005 fd04 	bl	8007634 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c2c:	e030      	b.n	8001c90 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <HAL_UART_MspInit+0x104>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d12b      	bne.n	8001c90 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_UART_MspInit+0xfc>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <HAL_UART_MspInit+0xfc>)
 8001c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c46:	6413      	str	r3, [r2, #64]	; 0x40
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_UART_MspInit+0xfc>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_UART_MspInit+0xfc>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_UART_MspInit+0xfc>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6313      	str	r3, [r2, #48]	; 0x30
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_UART_MspInit+0xfc>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c70:	230c      	movs	r3, #12
 8001c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c80:	2307      	movs	r3, #7
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_UART_MspInit+0x100>)
 8001c8c:	f005 fd18 	bl	80076c0 <HAL_GPIO_Init>
}
 8001c90:	bf00      	nop
 8001c92:	3730      	adds	r7, #48	; 0x30
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40011000 	.word	0x40011000
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40004400 	.word	0x40004400

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <HardFault_Handler+0x4>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <MemManage_Handler+0x4>

08001cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfc:	f005 fb3c 	bl	8007378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <USART1_IRQHandler+0x10>)
 8001d0a:	f008 fc99 	bl	800a640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200003e4 	.word	0x200003e4

08001d18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <OTG_FS_IRQHandler+0x10>)
 8001d1e:	f006 fc4a 	bl	80085b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200053b8 	.word	0x200053b8

08001d2c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <_sbrk+0x50>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d102      	bne.n	8001d42 <_sbrk+0x16>
		heap_end = &end;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <_sbrk+0x50>)
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <_sbrk+0x54>)
 8001d40:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <_sbrk+0x50>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <_sbrk+0x50>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	466a      	mov	r2, sp
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d907      	bls.n	8001d66 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d56:	f00c fe7b 	bl	800ea50 <__errno>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
 8001d64:	e006      	b.n	8001d74 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <_sbrk+0x50>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a03      	ldr	r2, [pc, #12]	; (8001d7c <_sbrk+0x50>)
 8001d70:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d72:	68fb      	ldr	r3, [r7, #12]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000270 	.word	0x20000270
 8001d80:	200057c8 	.word	0x200057c8

08001d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <SystemInit+0x28>)
 8001d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8e:	4a07      	ldr	r2, [pc, #28]	; (8001dac <SystemInit+0x28>)
 8001d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <SystemInit+0x28>)
 8001d9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d9e:	609a      	str	r2, [r3, #8]
#endif
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001db4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001db6:	e003      	b.n	8001dc0 <LoopCopyDataInit>

08001db8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001dbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001dbe:	3104      	adds	r1, #4

08001dc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001dc0:	480b      	ldr	r0, [pc, #44]	; (8001df0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001dc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dc8:	d3f6      	bcc.n	8001db8 <CopyDataInit>
  ldr  r2, =_sbss
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001dcc:	e002      	b.n	8001dd4 <LoopFillZerobss>

08001dce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dd0:	f842 3b04 	str.w	r3, [r2], #4

08001dd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dd8:	d3f9      	bcc.n	8001dce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dda:	f7ff ffd3 	bl	8001d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dde:	f00c fe3d 	bl	800ea5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de2:	f7ff f979 	bl	80010d8 <main>
  bx  lr    
 8001de6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001de8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dec:	0800f824 	.word	0x0800f824
  ldr  r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001df4:	20000248 	.word	0x20000248
  ldr  r2, =_sbss
 8001df8:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 8001dfc:	200057c4 	.word	0x200057c4

08001e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC_IRQHandler>

08001e02 <VL53L1_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	085b      	lsrs	r3, r3, #1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f005 fa01 	bl	8007224 <VL53L1_WrByte>
 8001e22:	4603      	mov	r3, r0
 8001e24:	73fb      	strb	r3, [r7, #15]
			DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8001e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d105      	bne.n	8001e52 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8001e46:	2101      	movs	r1, #1
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f001 f849 	bl	8002ee0 <VL53L1_data_init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d107      	bne.n	8001e6a <VL53L1_DataInit+0x38>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2208      	movs	r2, #8
 8001e66:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73bb      	strb	r3, [r7, #14]
 8001e6e:	e012      	b.n	8001e96 <VL53L1_DataInit+0x64>
		if (Status == VL53L1_ERROR_NONE)
 8001e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d112      	bne.n	8001e9e <VL53L1_DataInit+0x6c>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fbf2 	bl	800266a <VL53L1_SetLimitCheckEnable>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001e90:	7bbb      	ldrb	r3, [r7, #14]
 8001e92:	3301      	adds	r3, #1
 8001e94:	73bb      	strb	r3, [r7, #14]
 8001e96:	7bbb      	ldrb	r3, [r7, #14]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d9e9      	bls.n	8001e70 <VL53L1_DataInit+0x3e>
 8001e9c:	e000      	b.n	8001ea0 <VL53L1_DataInit+0x6e>
		else
			break;
 8001e9e:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 8001ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <VL53L1_DataInit+0x86>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8001ea8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001eac:	2100      	movs	r1, #0
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fc3c 	bl	800272c <VL53L1_SetLimitCheckValue>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 8001eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <VL53L1_DataInit+0x9e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8001ec0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fc30 	bl	800272c <VL53L1_SetLimitCheckValue>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7bba      	ldrb	r2, [r7, #14]
 8001ef8:	709a      	strb	r2, [r3, #2]

	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2203      	movs	r2, #3
 8001efe:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2203      	movs	r2, #3
 8001f06:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8001f12:	2108      	movs	r1, #8
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f8ec 	bl	80020f2 <VL53L1_SetPresetMode>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 8001f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8001f36:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f005 f922 	bl	8007184 <VL53L1_poll_for_boot_completion>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	603a      	str	r2, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8001f64:	4a2c      	ldr	r2, [pc, #176]	; (8002018 <ComputeDevicePresetMode+0xc8>)
 8001f66:	f107 0310 	add.w	r3, r7, #16
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	8019      	strh	r1, [r3, #0]
 8001f70:	3302      	adds	r3, #2
 8001f72:	0c12      	lsrs	r2, r2, #16
 8001f74:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8001f76:	4a29      	ldr	r2, [pc, #164]	; (800201c <ComputeDevicePresetMode+0xcc>)
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	8019      	strh	r1, [r3, #0]
 8001f82:	3302      	adds	r3, #2
 8001f84:	0c12      	lsrs	r2, r2, #16
 8001f86:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001f88:	4a25      	ldr	r2, [pc, #148]	; (8002020 <ComputeDevicePresetMode+0xd0>)
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	4611      	mov	r1, r2
 8001f92:	8019      	strh	r1, [r3, #0]
 8001f94:	3302      	adds	r3, #2
 8001f96:	0c12      	lsrs	r2, r2, #16
 8001f98:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8001fa0:	79bb      	ldrb	r3, [r7, #6]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d002      	beq.n	8001fac <ComputeDevicePresetMode+0x5c>
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d003      	beq.n	8001fb2 <ComputeDevicePresetMode+0x62>
 8001faa:	e005      	b.n	8001fb8 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	75bb      	strb	r3, [r7, #22]
		break;
 8001fb0:	e004      	b.n	8001fbc <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75bb      	strb	r3, [r7, #22]
		break;
 8001fb6:	e001      	b.n	8001fbc <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d004      	beq.n	8001fcc <ComputeDevicePresetMode+0x7c>
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d014      	beq.n	8001ff0 <ComputeDevicePresetMode+0xa0>
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d009      	beq.n	8001fde <ComputeDevicePresetMode+0x8e>
 8001fca:	e01a      	b.n	8002002 <ComputeDevicePresetMode+0xb2>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8001fcc:	7dbb      	ldrb	r3, [r7, #22]
 8001fce:	f107 0218 	add.w	r2, r7, #24
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	701a      	strb	r2, [r3, #0]
		break;
 8001fdc:	e013      	b.n	8002006 <ComputeDevicePresetMode+0xb6>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8001fde:	7dbb      	ldrb	r3, [r7, #22]
 8001fe0:	f107 0218 	add.w	r2, r7, #24
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	701a      	strb	r2, [r3, #0]
		break;
 8001fee:	e00a      	b.n	8002006 <ComputeDevicePresetMode+0xb6>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8001ff0:	7dbb      	ldrb	r3, [r7, #22]
 8001ff2:	f107 0218 	add.w	r2, r7, #24
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	701a      	strb	r2, [r3, #0]
		break;
 8002000:	e001      	b.n	8002006 <ComputeDevicePresetMode+0xb6>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8002002:	23f8      	movs	r3, #248	; 0xf8
 8002004:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8002006:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800200a:	4618      	mov	r0, r3
 800200c:	371c      	adds	r7, #28
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	0800f5dc 	.word	0x0800f5dc
 800201c:	0800f5e0 	.word	0x0800f5e0
 8002020:	0800f5e4 	.word	0x0800f5e4

08002024 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8002024:	b5b0      	push	{r4, r5, r7, lr}
 8002026:	b08e      	sub	sp, #56	; 0x38
 8002028:	af04      	add	r7, sp, #16
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	72fb      	strb	r3, [r7, #11]
 8002032:	4613      	mov	r3, r2
 8002034:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800203c:	7afb      	ldrb	r3, [r7, #11]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d002      	beq.n	8002048 <SetPresetMode+0x24>
 8002042:	7afb      	ldrb	r3, [r7, #11]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d103      	bne.n	8002050 <SetPresetMode+0x2c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8002048:	2340      	movs	r3, #64	; 0x40
 800204a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800204e:	e002      	b.n	8002056 <SetPresetMode+0x32>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8002050:	2320      	movs	r3, #32
 8002052:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8002056:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800205a:	7ab9      	ldrb	r1, [r7, #10]
 800205c:	7afb      	ldrb	r3, [r7, #11]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff76 	bl	8001f50 <ComputeDevicePresetMode>
 8002064:	4603      	mov	r3, r0
 8002066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800206a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800206e:	2b00      	cmp	r3, #0
 8002070:	d112      	bne.n	8002098 <SetPresetMode+0x74>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8002072:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002076:	f107 001c 	add.w	r0, r7, #28
 800207a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	f107 0318 	add.w	r3, r7, #24
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	4603      	mov	r3, r0
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f001 f9e7 	bl	8003460 <VL53L1_get_preset_mode_timing_cfg>
 8002092:	4603      	mov	r3, r0
 8002094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8002098:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800209c:	2b00      	cmp	r3, #0
 800209e:	d112      	bne.n	80020c6 <SetPresetMode+0xa2>
		Status = VL53L1_set_preset_mode(
 80020a0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80020a4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80020a6:	69fd      	ldr	r5, [r7, #28]
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	9102      	str	r1, [sp, #8]
 80020b0:	9201      	str	r2, [sp, #4]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	462b      	mov	r3, r5
 80020b6:	4622      	mov	r2, r4
 80020b8:	4601      	mov	r1, r0
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f001 fa7a 	bl	80035b4 <VL53L1_set_preset_mode>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80020c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d103      	bne.n	80020d6 <SetPresetMode+0xb2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80020d4:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 80020d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d103      	bne.n	80020e6 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	7afa      	ldrb	r2, [r7, #11]
 80020e2:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 80020e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3728      	adds	r7, #40	; 0x28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bdb0      	pop	{r4, r5, r7, pc}

080020f2 <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002102:	2303      	movs	r3, #3
 8002104:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 8002106:	7bba      	ldrb	r2, [r7, #14]
 8002108:	78f9      	ldrb	r1, [r7, #3]
 800210a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ff88 	bl	8002024 <SetPresetMode>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8002118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d11f      	bne.n	8002160 <VL53L1_SetPresetMode+0x6e>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	7bba      	ldrb	r2, [r7, #14]
 8002124:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				DistanceMode);

		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7bba      	ldrb	r2, [r7, #14]
 800212c:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	2b04      	cmp	r3, #4
 8002134:	d005      	beq.n	8002142 <VL53L1_SetPresetMode+0x50>
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d002      	beq.n	8002142 <VL53L1_SetPresetMode+0x50>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	2b08      	cmp	r3, #8
 8002140:	d107      	bne.n	8002152 <VL53L1_SetPresetMode+0x60>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002142:	f24a 0128 	movw	r1, #41000	; 0xa028
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f8a2 	bl	8002290 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800214c:	4603      	mov	r3, r0
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e006      	b.n	8002160 <VL53L1_SetPresetMode+0x6e>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002152:	f248 2135 	movw	r1, #33333	; 0x8235
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f89a 	bl	8002290 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800215c:	4603      	mov	r3, r0
 800215e:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d106      	bne.n	8002176 <VL53L1_SetPresetMode+0x84>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8002168:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fa0f 	bl	8002590 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8002172:	4603      	mov	r3, r0
 8002174:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b088      	sub	sp, #32
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800218e:	2300      	movs	r3, #0
 8002190:	77fb      	strb	r3, [r7, #31]
	uint32_t PhaseCalTimeoutUs;
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8002198:	777b      	strb	r3, [r7, #29]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d008      	beq.n	80021b2 <VL53L1_SetDistanceMode+0x30>
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d005      	beq.n	80021b2 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d002      	beq.n	80021b2 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 80021ac:	f06f 0303 	mvn.w	r3, #3
 80021b0:	e069      	b.n	8002286 <VL53L1_SetDistanceMode+0x104>

	/* The internal distance mode is limited to Short, Medium or
	 * long only
	*/
	if (Status == VL53L1_ERROR_NONE) {
 80021b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <VL53L1_SetDistanceMode+0x4e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d002      	beq.n	80021c6 <VL53L1_SetDistanceMode+0x44>
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d102      	bne.n	80021cc <VL53L1_SetDistanceMode+0x4a>
			(DistanceMode == VL53L1_DISTANCEMODE_MEDIUM))
			InternalDistanceMode = DistanceMode;
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	77bb      	strb	r3, [r7, #30]
 80021ca:	e001      	b.n	80021d0 <VL53L1_SetDistanceMode+0x4e>
		else /* (DistanceMode == VL53L1_DISTANCEMODE_LONG) */
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 80021cc:	2303      	movs	r3, #3
 80021ce:	77bb      	strb	r3, [r7, #30]
	}

	if (Status == VL53L1_ERROR_NONE)
 80021d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <VL53L1_SetDistanceMode+0x66>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	4619      	mov	r1, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f001 f8e7 	bl	80033b2 <VL53L1_get_user_zone>
 80021e4:	4603      	mov	r3, r0
 80021e6:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80021ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10a      	bne.n	800220c <VL53L1_SetDistanceMode+0x8a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	f107 0210 	add.w	r2, r7, #16
 80021fe:	f107 010c 	add.w	r1, r7, #12
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f001 f810 	bl	8003228 <VL53L1_get_timeouts_us>
 8002208:	4603      	mov	r3, r0
 800220a:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800220c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d107      	bne.n	8002224 <VL53L1_SetDistanceMode+0xa2>
		Status = SetPresetMode(Dev,
 8002214:	7fba      	ldrb	r2, [r7, #30]
 8002216:	7f79      	ldrb	r1, [r7, #29]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ff02 	bl	8002024 <SetPresetMode>
 8002220:	4603      	mov	r3, r0
 8002222:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				InternalDistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8002224:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <VL53L1_SetDistanceMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7fba      	ldrb	r2, [r7, #30]
 8002230:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7fba      	ldrb	r2, [r7, #30]
 8002238:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002244:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10e      	bne.n	800226a <VL53L1_SetDistanceMode+0xe8>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800224c:	68f9      	ldr	r1, [r7, #12]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 ffb0 	bl	80031b8 <VL53L1_set_timeouts_us>
 8002258:	4603      	mov	r3, r0
 800225a:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800225c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <VL53L1_SetDistanceMode+0xe8>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800226a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d107      	bne.n	8002282 <VL53L1_SetDistanceMode+0x100>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	4619      	mov	r1, r3
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f001 f877 	bl	800336c <VL53L1_set_user_zone>
 800227e:	4603      	mov	r3, r0
 8002280:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 8002282:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3720      	adds	r7, #32
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	; 0x30
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80022a0:	4b63      	ldr	r3, [pc, #396]	; (8002430 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a0>)
 80022a2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4a63      	ldr	r2, [pc, #396]	; (8002434 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d902      	bls.n	80022b2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x22>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80022ac:	23fc      	movs	r3, #252	; 0xfc
 80022ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 80022b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80022ba:	f107 031a 	add.w	r3, r7, #26
 80022be:	461a      	mov	r2, r3
 80022c0:	2105      	movs	r1, #5
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fac2 	bl	800284c <VL53L1_GetSequenceStepEnable>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80022ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80022d6:	f107 0319 	add.w	r3, r7, #25
 80022da:	461a      	mov	r2, r3
 80022dc:	2106      	movs	r1, #6
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fab4 	bl	800284c <VL53L1_GetSequenceStepEnable>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 80022ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10b      	bne.n	800230a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		Status = VL53L1_get_timeouts_us(Dev,
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	f107 0210 	add.w	r2, r7, #16
 80022fa:	f107 010c 	add.w	r1, r7, #12
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 ff92 	bl	8003228 <VL53L1_get_timeouts_us>
 8002304:	4603      	mov	r3, r0
 8002306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800230a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800230e:	2b00      	cmp	r3, #0
 8002310:	d17f      	bne.n	8002412 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8002318:	76fb      	strb	r3, [r7, #27]

		TimingGuard = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800231e:	2301      	movs	r3, #1
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8002322:	7efb      	ldrb	r3, [r7, #27]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d004      	beq.n	8002332 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xa2>
 8002328:	2b08      	cmp	r3, #8
 800232a:	d023      	beq.n	8002374 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe4>
 800232c:	2b03      	cmp	r3, #3
 800232e:	d00e      	beq.n	800234e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbe>
 8002330:	e03f      	b.n	80023b2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x122>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002332:	7ebb      	ldrb	r3, [r7, #26]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d002      	beq.n	800233e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xae>
 8002338:	7e7b      	ldrb	r3, [r7, #25]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d103      	bne.n	8002346 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb6>
				TimingGuard = 5000;
 800233e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8002344:	e038      	b.n	80023b8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>
				TimingGuard = 1000;
 8002346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800234c:	e034      	b.n	80023b8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002354:	7ebb      	ldrb	r3, [r7, #26]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d002      	beq.n	8002360 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd0>
 800235a:	7e7b      	ldrb	r3, [r7, #25]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d103      	bne.n	8002368 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd8>
				TimingGuard = 26600;
 8002360:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
 8002366:	e002      	b.n	800236e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xde>
			else
				TimingGuard = 21600;
 8002368:	f245 4360 	movw	r3, #21600	; 0x5460
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800236e:	2302      	movs	r3, #2
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8002372:	e021      	b.n	80023b8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800237a:	23f5      	movs	r3, #245	; 0xf5
 800237c:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800237e:	f107 0308 	add.w	r3, r7, #8
 8002382:	461a      	mov	r2, r3
 8002384:	f248 0136 	movw	r1, #32822	; 0x8036
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f001 ffd3 	bl	8004334 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	dd07      	ble.n	80023a4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x114>
				vhv += vhv_loops *
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	22f5      	movs	r2, #245	; 0xf5
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	461a      	mov	r2, r3
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	4413      	add	r3, r2
 80023a2:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 80023ac:	2302      	movs	r3, #2
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80023b0:	e002      	b.n	80023b8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80023b2:	23f8      	movs	r3, #248	; 0xf8
 80023b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	429a      	cmp	r2, r3
 80023be:	d803      	bhi.n	80023c8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x138>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80023c0:	23fc      	movs	r3, #252	; 0xfc
 80023c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80023c6:	e003      	b.n	80023d0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023cc:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80023ce:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 80023d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d11c      	bne.n	8002412 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d203      	bcs.n	80023e8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80023e0:	23fc      	movs	r3, #252	; 0xfc
 80023e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80023e6:	e00d      	b.n	8002404 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x174>
			else {
				TimingBudget /= divisor;
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 80023f2:	68f9      	ldr	r1, [r7, #12]
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fedd 	bl	80031b8 <VL53L1_set_timeouts_us>
 80023fe:	4603      	mov	r3, r0
 8002400:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8002404:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002408:	2b00      	cmp	r3, #0
 800240a:	d102      	bne.n	8002412 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
				VL53L1DevDataSet(Dev,
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8002412:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x192>
		VL53L1DevDataSet(Dev,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002422:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002426:	4618      	mov	r0, r3
 8002428:	3730      	adds	r7, #48	; 0x30
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	00086470 	.word	0x00086470
 8002434:	00989680 	.word	0x00989680

08002438 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08c      	sub	sp, #48	; 0x30
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002442:	2300      	movs	r3, #0
 8002444:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8002466:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800246e:	f107 031b 	add.w	r3, r7, #27
 8002472:	461a      	mov	r2, r3
 8002474:	2105      	movs	r1, #5
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f9e8 	bl	800284c <VL53L1_GetSequenceStepEnable>
 800247c:	4603      	mov	r3, r0
 800247e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8002482:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800248a:	f107 031a 	add.w	r3, r7, #26
 800248e:	461a      	mov	r2, r3
 8002490:	2106      	movs	r1, #6
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f9da 	bl	800284c <VL53L1_GetSequenceStepEnable>
 8002498:	4603      	mov	r3, r0
 800249a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800249e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10b      	bne.n	80024be <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 80024a6:	f107 0310 	add.w	r3, r7, #16
 80024aa:	f107 0214 	add.w	r2, r7, #20
 80024ae:	f107 010c 	add.w	r1, r7, #12
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 feb8 	bl	8003228 <VL53L1_get_timeouts_us>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 80024be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d155      	bne.n	8002572 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 80024cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		switch (PresetMode) {
 80024d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d004      	beq.n	80024e2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xaa>
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d027      	beq.n	800252c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf4>
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d011      	beq.n	8002504 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xcc>
 80024e0:	e043      	b.n	800256a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x132>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80024e2:	7efb      	ldrb	r3, [r7, #27]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d002      	beq.n	80024ee <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb6>
 80024e8:	7ebb      	ldrb	r3, [r7, #26]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc2>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80024f4:	3308      	adds	r3, #8
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 80024f8:	e03c      	b.n	8002574 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002502:	e037      	b.n	8002574 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002504:	7efb      	ldrb	r3, [r7, #27]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d002      	beq.n	8002510 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
 800250a:	7ebb      	ldrb	r3, [r7, #26]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d106      	bne.n	800251e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe6>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8002516:	3334      	adds	r3, #52	; 0x34
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800251c:	e02a      	b.n	8002574 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8002524:	3330      	adds	r3, #48	; 0x30
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800252a:	e023      	b.n	8002574 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800252c:	23f5      	movs	r3, #245	; 0xf5
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8002530:	f107 0308 	add.w	r3, r7, #8
 8002534:	461a      	mov	r2, r3
 8002536:	f248 0136 	movw	r1, #32822	; 0x8036
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f001 fefa 	bl	8004334 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	dd07      	ble.n	8002556 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x11e>
				vhv += vhv_loops *
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	22f5      	movs	r2, #245	; 0xf5
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	461a      	mov	r2, r3
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	4413      	add	r3, r2
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800255c:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	4413      	add	r3, r2
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002568:	e004      	b.n	8002574 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800256a:	23f8      	movs	r3, #248	; 0xf8
 800256c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002570:	e000      	b.n	8002574 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		}
	}
 8002572:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 8002574:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14a>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002580:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002582:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002586:	4618      	mov	r0, r3
 8002588:	3730      	adds	r7, #48	; 0x30
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	019b      	lsls	r3, r3, #6
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	099b      	lsrs	r3, r3, #6
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	4413      	add	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fdaf 	bl	800311a <VL53L1_set_inter_measurement_period_ms>
 80025bc:	4603      	mov	r3, r0
 80025be:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 80025c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	10624dd3 	.word	0x10624dd3

080025d0 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80025da:	2300      	movs	r3, #0
 80025dc:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 80025de:	f107 0308 	add.w	r3, r7, #8
 80025e2:	4619      	mov	r1, r3
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fdc1 	bl	800316c <VL53L1_get_inter_measurement_period_ms>
 80025ea:	4603      	mov	r3, r0
 80025ec:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	019b      	lsls	r3, r3, #6
 80025f4:	4907      	ldr	r1, [pc, #28]	; (8002614 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 80025f6:	fba1 1303 	umull	r1, r3, r1, r3
 80025fa:	099b      	lsrs	r3, r3, #6
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	10624dd3 	.word	0x10624dd3

08002618 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	460b      	mov	r3, r1
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002626:	2300      	movs	r3, #0
 8002628:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800262a:	897b      	ldrh	r3, [r7, #10]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <SetLimitValue+0x1e>
 8002630:	2b01      	cmp	r3, #1
 8002632:	d009      	beq.n	8002648 <SetLimitValue+0x30>
 8002634:	e011      	b.n	800265a <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0b9b      	lsrs	r3, r3, #14
 800263a:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800263c:	8abb      	ldrh	r3, [r7, #20]
 800263e:	4619      	mov	r1, r3
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f001 f943 	bl	80038cc <VL53L1_set_lite_sigma_threshold>
		break;
 8002646:	e00a      	b.n	800265e <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0a5b      	lsrs	r3, r3, #9
 800264c:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800264e:	8abb      	ldrh	r3, [r7, #20]
 8002650:	4619      	mov	r1, r3
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f001 f966 	bl	8003924 <VL53L1_set_lite_min_count_rate>
		break;
 8002658:	e001      	b.n	800265e <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800265a:	23fc      	movs	r3, #252	; 0xfc
 800265c:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800265e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	807b      	strh	r3, [r7, #2]
 8002676:	4613      	mov	r3, r2
 8002678:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800267a:	2300      	movs	r3, #0
 800267c:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002682:	887b      	ldrh	r3, [r7, #2]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d902      	bls.n	800268e <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002688:	23fc      	movs	r3, #252	; 0xfc
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	e014      	b.n	80026b8 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800268e:	787b      	ldrb	r3, [r7, #1]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	e006      	b.n	80026a8 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800269a:	887b      	ldrh	r3, [r7, #2]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	33e0      	adds	r3, #224	; 0xe0
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80026a8:	887b      	ldrh	r3, [r7, #2]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	4619      	mov	r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ffb2 	bl	8002618 <SetLimitValue>
 80026b4:	4603      	mov	r3, r0
 80026b6:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 80026b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10c      	bne.n	80026da <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80026c0:	787b      	ldrb	r3, [r7, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf14      	ite	ne
 80026c6:	2301      	movne	r3, #1
 80026c8:	2300      	moveq	r3, #0
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	4611      	mov	r1, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4413      	add	r3, r2
 80026d4:	460a      	mov	r2, r1
 80026d6:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 80026da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b087      	sub	sp, #28
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	460b      	mov	r3, r1
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80026f8:	897b      	ldrh	r3, [r7, #10]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d905      	bls.n	800270a <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80026fe:	23fc      	movs	r3, #252	; 0xfc
 8002700:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e008      	b.n	800271c <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800270a:	897b      	ldrh	r3, [r7, #10]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4413      	add	r3, r2
 8002710:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8002714:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7dba      	ldrb	r2, [r7, #22]
 800271a:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800271c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002720:	4618      	mov	r0, r3
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <VL53L1_SetLimitCheckValue>:

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	460b      	mov	r3, r1
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800273e:	897b      	ldrh	r3, [r7, #10]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d902      	bls.n	800274a <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002744:	23fc      	movs	r3, #252	; 0xfc
 8002746:	75fb      	strb	r3, [r7, #23]
 8002748:	e023      	b.n	8002792 <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800274a:	897b      	ldrh	r3, [r7, #10]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8002754:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 8002756:	7dbb      	ldrb	r3, [r7, #22]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d107      	bne.n	800276c <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800275c:	897b      	ldrh	r3, [r7, #10]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	33e0      	adds	r3, #224	; 0xe0
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	e012      	b.n	8002792 <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 800276c:	897b      	ldrh	r3, [r7, #10]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4619      	mov	r1, r3
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f7ff ff50 	bl	8002618 <SetLimitValue>
 8002778:	4603      	mov	r3, r0
 800277a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 800277c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d106      	bne.n	8002792 <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002784:	897b      	ldrh	r3, [r7, #10]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	33e0      	adds	r3, #224	; 0xe0
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002792:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <VL53L1_GetLimitCheckValue>:

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b088      	sub	sp, #32
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	460b      	mov	r3, r1
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	77fb      	strb	r3, [r7, #31]
	FixPoint1616_t TempFix1616;
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80027b0:	897b      	ldrh	r3, [r7, #10]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <VL53L1_GetLimitCheckValue+0x1e>
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d00c      	beq.n	80027d4 <VL53L1_GetLimitCheckValue+0x36>
 80027ba:	e017      	b.n	80027ec <VL53L1_GetLimitCheckValue+0x4e>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	4619      	mov	r1, r3
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f001 f86c 	bl	80038a0 <VL53L1_get_lite_sigma_threshold>
 80027c8:	4603      	mov	r3, r0
 80027ca:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80027cc:	8abb      	ldrh	r3, [r7, #20]
 80027ce:	039b      	lsls	r3, r3, #14
 80027d0:	61bb      	str	r3, [r7, #24]
		break;
 80027d2:	e00d      	b.n	80027f0 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80027d4:	f107 0316 	add.w	r3, r7, #22
 80027d8:	4619      	mov	r1, r3
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f001 f88c 	bl	80038f8 <VL53L1_get_lite_min_count_rate>
 80027e0:	4603      	mov	r3, r0
 80027e2:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80027e4:	8afb      	ldrh	r3, [r7, #22]
 80027e6:	025b      	lsls	r3, r3, #9
 80027e8:	61bb      	str	r3, [r7, #24]
		break;
 80027ea:	e001      	b.n	80027f0 <VL53L1_GetLimitCheckValue+0x52>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80027ec:	23fc      	movs	r3, #252	; 0xfc
 80027ee:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 80027f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d123      	bne.n	8002840 <VL53L1_GetLimitCheckValue+0xa2>

		if (TempFix1616 == 0) {
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d110      	bne.n	8002820 <VL53L1_GetLimitCheckValue+0x82>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80027fe:	897b      	ldrh	r3, [r7, #10]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	33e0      	adds	r3, #224	; 0xe0
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002812:	897b      	ldrh	r3, [r7, #10]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 800281e:	e00f      	b.n	8002840 <VL53L1_GetLimitCheckValue+0xa2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002826:	897b      	ldrh	r3, [r7, #10]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	33e0      	adds	r3, #224	; 0xe0
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002834:	897b      	ldrh	r3, [r7, #10]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4413      	add	r3, r2
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8002840:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002844:	4618      	mov	r0, r3
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	460b      	mov	r3, r1
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800285a:	2300      	movs	r3, #0
 800285c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800285e:	7afb      	ldrb	r3, [r7, #11]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4619      	mov	r1, r3
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 fd4a 	bl	80032fe <VL53L1_get_sequence_config_bit>
 800286a:	4603      	mov	r3, r0
 800286c:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800286e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002884:	2300      	movs	r3, #0
 8002886:	75fb      	strb	r3, [r7, #23]
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800288e:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 8002890:	7dbb      	ldrb	r3, [r7, #22]
 8002892:	2b05      	cmp	r3, #5
 8002894:	dc06      	bgt.n	80028a4 <VL53L1_StartMeasurement+0x28>
 8002896:	2b04      	cmp	r3, #4
 8002898:	da0b      	bge.n	80028b2 <VL53L1_StartMeasurement+0x36>
 800289a:	2b00      	cmp	r3, #0
 800289c:	db0c      	blt.n	80028b8 <VL53L1_StartMeasurement+0x3c>
 800289e:	2b02      	cmp	r3, #2
 80028a0:	dd07      	ble.n	80028b2 <VL53L1_StartMeasurement+0x36>
 80028a2:	e003      	b.n	80028ac <VL53L1_StartMeasurement+0x30>
 80028a4:	3b62      	subs	r3, #98	; 0x62
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d806      	bhi.n	80028b8 <VL53L1_StartMeasurement+0x3c>
 80028aa:	e002      	b.n	80028b2 <VL53L1_StartMeasurement+0x36>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	75fb      	strb	r3, [r7, #23]
		break;
 80028b0:	e004      	b.n	80028bc <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80028b2:	23f2      	movs	r3, #242	; 0xf2
 80028b4:	75fb      	strb	r3, [r7, #23]
		break;
 80028b6:	e001      	b.n	80028bc <VL53L1_StartMeasurement+0x40>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80028b8:	23fd      	movs	r3, #253	; 0xfd
 80028ba:	75fb      	strb	r3, [r7, #23]
	}

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	789b      	ldrb	r3, [r3, #2]
 80028c0:	757b      	strb	r3, [r7, #21]

	/* Check timing configuration between timing budget and
	* inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 80028c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d11f      	bne.n	800290a <VL53L1_StartMeasurement+0x8e>
 80028ca:	7d7b      	ldrb	r3, [r7, #21]
 80028cc:	2b40      	cmp	r3, #64	; 0x40
 80028ce:	d11c      	bne.n	800290a <VL53L1_StartMeasurement+0x8e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80028d0:	f107 0310 	add.w	r3, r7, #16
 80028d4:	4619      	mov	r1, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff fdae 	bl	8002438 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 80028dc:	4603      	mov	r3, r0
 80028de:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4a17      	ldr	r2, [pc, #92]	; (8002940 <VL53L1_StartMeasurement+0xc4>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	099b      	lsrs	r3, r3, #6
 80028ea:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 80028ec:	f107 030c 	add.w	r3, r7, #12
 80028f0:	4619      	mov	r1, r3
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff fe6c 	bl	80025d0 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 80028f8:	4603      	mov	r3, r0
 80028fa:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	429a      	cmp	r2, r3
 8002904:	d901      	bls.n	800290a <VL53L1_StartMeasurement+0x8e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8002906:	23fc      	movs	r3, #252	; 0xfc
 8002908:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 800290a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d107      	bne.n	8002922 <VL53L1_StartMeasurement+0xa6>
		Status = VL53L1_init_and_start_range(
 8002912:	7d7b      	ldrb	r3, [r7, #21]
 8002914:	2206      	movs	r2, #6
 8002916:	4619      	mov	r1, r3
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f001 f839 	bl	8003990 <VL53L1_init_and_start_range>
 800291e:	4603      	mov	r3, r0
 8002920:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8002922:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d103      	bne.n	8002932 <VL53L1_StartMeasurement+0xb6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2204      	movs	r2, #4
 800292e:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 8002932:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	10624dd3 	.word	0x10624dd3

08002944 <ChangePresetMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static VL53L1_Error ChangePresetMode(VL53L1_DEV Dev)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800294c:	2300      	movs	r3, #0
 800294e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t DeviceMeasurementMode;
	uint32_t inter_measurement_period_ms;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_user_zone(Dev, &user_zone);
 8002952:	f107 0318 	add.w	r3, r7, #24
 8002956:	4619      	mov	r1, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fd2a 	bl	80033b2 <VL53L1_get_user_zone>
 800295e:	4603      	mov	r3, r0
 8002960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/*  Initialize variables fix ticket EwokP #475395 */
	PresetMode = VL53L1DevDataGet(Dev,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800296a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			CurrentParameters.PresetMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 337f 	ldrb.w	r3, [r3, #895]	; 0x37f
 8002974:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			CurrentParameters.NewDistanceMode);
	/*  End of Initialize variables fix ticket EwokP #475395 */
	if (Status == VL53L1_ERROR_NONE)
 8002978:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10b      	bne.n	8002998 <ChangePresetMode+0x54>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	f107 0210 	add.w	r2, r7, #16
 8002988:	f107 010c 	add.w	r1, r7, #12
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fc4b 	bl	8003228 <VL53L1_get_timeouts_us>
 8002992:	4603      	mov	r3, r0
 8002994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8002998:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <ChangePresetMode+0x68>
		Status = VL53L1_stop_range(Dev);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f001 fa1f 	bl	8003de4 <VL53L1_stop_range>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE)
 80029ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <ChangePresetMode+0x80>
		Status = VL53L1_WaitUs(Dev, 500);
 80029b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f004 fc67 	bl	800728c <VL53L1_WaitUs>
 80029be:	4603      	mov	r3, r0
 80029c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE) {
 80029c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10d      	bne.n	80029e8 <ChangePresetMode+0xa4>
		inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	623b      	str	r3, [r7, #32]
					LLData.inter_measurement_period_ms);

		Status = SetPresetMode(Dev,
 80029d2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80029d6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff fb21 	bl	8002024 <SetPresetMode>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PresetMode,
				NewDistanceMode,
				inter_measurement_period_ms);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80029e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10f      	bne.n	8002a10 <ChangePresetMode+0xcc>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80029f0:	68f9      	ldr	r1, [r7, #12]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fbde 	bl	80031b8 <VL53L1_set_timeouts_us>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8002a02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d102      	bne.n	8002a10 <ChangePresetMode+0xcc>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8002a10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d108      	bne.n	8002a2a <ChangePresetMode+0xe6>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8002a18:	f107 0318 	add.w	r3, r7, #24
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fca4 	bl	800336c <VL53L1_set_user_zone>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE) {
 8002a2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10b      	bne.n	8002a4a <ChangePresetMode+0x106>
		DeviceMeasurementMode = VL53L1DevDataGet(Dev,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	789b      	ldrb	r3, [r3, #2]
 8002a36:	77fb      	strb	r3, [r7, #31]
				LLData.measurement_mode);

		Status = VL53L1_init_and_start_range(
 8002a38:	7ffb      	ldrb	r3, [r7, #31]
 8002a3a:	2206      	movs	r2, #6
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 ffa6 	bl	8003990 <VL53L1_init_and_start_range>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);
	}

	if (Status == VL53L1_ERROR_NONE)
 8002a4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <ChangePresetMode+0x118>
		VL53L1DevDataSet(Dev,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002a58:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			CurrentParameters.InternalDistanceMode,
			NewDistanceMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002a5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3728      	adds	r7, #40	; 0x28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes InternalDistanceMode;
	VL53L1_DistanceModes NewDistanceMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	789b      	ldrb	r3, [r3, #2]
 8002a78:	73bb      	strb	r3, [r7, #14]
	InternalDistanceMode = VL53L1DevDataGet(Dev,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8002a80:	737b      	strb	r3, [r7, #13]
			CurrentParameters.InternalDistanceMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 337f 	ldrb.w	r3, [r3, #895]	; 0x37f
 8002a88:	733b      	strb	r3, [r7, #12]
			CurrentParameters.NewDistanceMode);

	if (NewDistanceMode != InternalDistanceMode)
 8002a8a:	7b3a      	ldrb	r2, [r7, #12]
 8002a8c:	7b7b      	ldrb	r3, [r7, #13]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d005      	beq.n	8002a9e <VL53L1_ClearInterruptAndStartMeasurement+0x36>
		Status = ChangePresetMode(Dev);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff ff56 	bl	8002944 <ChangePresetMode>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	e006      	b.n	8002aac <VL53L1_ClearInterruptAndStartMeasurement+0x44>
	else
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 8002a9e:	7bbb      	ldrb	r3, [r7, #14]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f001 fafd 	bl	80040a2 <VL53L1_clear_interrupt_and_enable_next_range>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	73fb      	strb	r3, [r7, #15]
						Dev,
						DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f004 fb22 	bl	8007112 <VL53L1_is_new_data_ready>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b08d      	sub	sp, #52	; 0x34
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	603a      	str	r2, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
 8002aec:	460b      	mov	r3, r1
 8002aee:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 8002af0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002af4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 8002af6:	231e      	movs	r3, #30
 8002af8:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8002afa:	4b33      	ldr	r3, [pc, #204]	; (8002bc8 <ComputeRQL+0xe8>)
 8002afc:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 8002afe:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <ComputeRQL+0xec>)
 8002b00:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 8002b02:	f641 139a 	movw	r3, #6554	; 0x199a
 8002b06:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <ComputeRQL+0x36>
		returnvalue = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b14:	e04f      	b.n	8002bb6 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8002b16:	79bb      	ldrb	r3, [r7, #6]
 8002b18:	2b07      	cmp	r3, #7
 8002b1a:	d103      	bne.n	8002b24 <ComputeRQL+0x44>
		returnvalue = 50;
 8002b1c:	2332      	movs	r3, #50	; 0x32
 8002b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b22:	e048      	b.n	8002bb6 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8002b2a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	dd03      	ble.n	8002b3a <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 8002b32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b34:	041b      	lsls	r3, r3, #16
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b38:	e007      	b.n	8002b4a <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8002b40:	461a      	mov	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002b54:	461a      	mov	r2, r3
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	fb02 f303 	mul.w	r3, r2, r3
 8002b5c:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d804      	bhi.n	8002b8a <ComputeRQL+0xaa>
				SRQL = GI - partial;
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b88:	e006      	b.n	8002b98 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 8002b8a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b90:	e002      	b.n	8002b98 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 8002b92:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	0c1b      	lsrs	r3, r3, #16
 8002b9c:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b32      	cmp	r3, #50	; 0x32
 8002ba2:	d905      	bls.n	8002bb0 <ComputeRQL+0xd0>
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	bf28      	it	cs
 8002baa:	2364      	movcs	r3, #100	; 0x64
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e000      	b.n	8002bb2 <ComputeRQL+0xd2>
 8002bb0:	2332      	movs	r3, #50	; 0x32
 8002bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8002bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3734      	adds	r7, #52	; 0x34
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	0075b333 	.word	0x0075b333
 8002bcc:	0030cccd 	.word	0x0030cccd

08002bd0 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	3b04      	subs	r3, #4
 8002bde:	2b0f      	cmp	r3, #15
 8002be0:	d83d      	bhi.n	8002c5e <ConvertStatusLite+0x8e>
 8002be2:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <ConvertStatusLite+0x18>)
 8002be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be8:	08002c3b 	.word	0x08002c3b
 8002bec:	08002c35 	.word	0x08002c35
 8002bf0:	08002c41 	.word	0x08002c41
 8002bf4:	08002c47 	.word	0x08002c47
 8002bf8:	08002c53 	.word	0x08002c53
 8002bfc:	08002c59 	.word	0x08002c59
 8002c00:	08002c5f 	.word	0x08002c5f
 8002c04:	08002c5f 	.word	0x08002c5f
 8002c08:	08002c4d 	.word	0x08002c4d
 8002c0c:	08002c5f 	.word	0x08002c5f
 8002c10:	08002c5f 	.word	0x08002c5f
 8002c14:	08002c5f 	.word	0x08002c5f
 8002c18:	08002c5f 	.word	0x08002c5f
 8002c1c:	08002c5f 	.word	0x08002c5f
 8002c20:	08002c29 	.word	0x08002c29
 8002c24:	08002c2f 	.word	0x08002c2f
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8002c28:	230a      	movs	r3, #10
 8002c2a:	73fb      	strb	r3, [r7, #15]
		break;
 8002c2c:	e019      	b.n	8002c62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8002c2e:	2306      	movs	r3, #6
 8002c30:	73fb      	strb	r3, [r7, #15]
		break;
 8002c32:	e016      	b.n	8002c62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002c34:	2304      	movs	r3, #4
 8002c36:	73fb      	strb	r3, [r7, #15]
		break;
 8002c38:	e013      	b.n	8002c62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	73fb      	strb	r3, [r7, #15]
		break;
 8002c3e:	e010      	b.n	8002c62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
		break;
 8002c44:	e00d      	b.n	8002c62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002c46:	2307      	movs	r3, #7
 8002c48:	73fb      	strb	r3, [r7, #15]
		break;
 8002c4a:	e00a      	b.n	8002c62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8002c4c:	2309      	movs	r3, #9
 8002c4e:	73fb      	strb	r3, [r7, #15]
		break;
 8002c50:	e007      	b.n	8002c62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8002c52:	2303      	movs	r3, #3
 8002c54:	73fb      	strb	r3, [r7, #15]
		break;
 8002c56:	e004      	b.n	8002c62 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]
		break;
 8002c5c:	e001      	b.n	8002c62 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002c5e:	23ff      	movs	r3, #255	; 0xff
 8002c60:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08c      	sub	sp, #48	; 0x30
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	72fb      	strb	r3, [r7, #11]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8e:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8002c9e:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff1a 	bl	8002ae0 <ComputeRQL>
 8002cac:	4603      	mov	r3, r0
 8002cae:	461a      	mov	r2, r3
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cb8:	025b      	lsls	r3, r3, #9
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8002cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cc0:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002cc6:	025b      	lsls	r3, r3, #9
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cce:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd6:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002cdc:	025b      	lsls	r3, r3, #9
 8002cde:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce2:	6a3a      	ldr	r2, [r7, #32]
 8002ce4:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8002cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cee:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 8002cf6:	7abb      	ldrb	r3, [r7, #10]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d82c      	bhi.n	8002d58 <SetSimpleData+0xe8>
 8002cfe:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <SetSimpleData+0x94>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d49 	.word	0x08002d49
 8002d08:	08002d49 	.word	0x08002d49
 8002d0c:	08002d49 	.word	0x08002d49
 8002d10:	08002d59 	.word	0x08002d59
 8002d14:	08002d59 	.word	0x08002d59
 8002d18:	08002d59 	.word	0x08002d59
 8002d1c:	08002d59 	.word	0x08002d59
 8002d20:	08002d59 	.word	0x08002d59
 8002d24:	08002d59 	.word	0x08002d59
 8002d28:	08002d59 	.word	0x08002d59
 8002d2c:	08002d59 	.word	0x08002d59
 8002d30:	08002d59 	.word	0x08002d59
 8002d34:	08002d51 	.word	0x08002d51
 8002d38:	08002d59 	.word	0x08002d59
 8002d3c:	08002d59 	.word	0x08002d59
 8002d40:	08002d59 	.word	0x08002d59
 8002d44:	08002d49 	.word	0x08002d49
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	2205      	movs	r2, #5
 8002d4c:	76da      	strb	r2, [r3, #27]
		break;
 8002d4e:	e006      	b.n	8002d5e <SetSimpleData+0xee>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	220d      	movs	r2, #13
 8002d54:	76da      	strb	r2, [r3, #27]
		break;
 8002d56:	e002      	b.n	8002d5e <SetSimpleData+0xee>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d60:	7edb      	ldrb	r3, [r3, #27]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d108      	bne.n	8002d78 <SetSimpleData+0x108>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8002d66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff ff30 	bl	8002bd0 <ConvertStatusLite>
 8002d70:	4603      	mov	r3, r0
 8002d72:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002d7c:	025b      	lsls	r3, r3, #9
 8002d7e:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a3a      	ldr	r2, [r7, #32]
 8002d84:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d8c:	025b      	lsls	r3, r3, #9
 8002d8e:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a3a      	ldr	r2, [r7, #32]
 8002d94:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2100      	movs	r1, #0
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff fcfc 	bl	800279e <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8002da6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	bf0c      	ite	eq
 8002dae:	2301      	moveq	r3, #1
 8002db0:	2300      	movne	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8002db4:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8002db6:	f107 0319 	add.w	r3, r7, #25
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff fc91 	bl	80026e6 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8002dc4:	7e7b      	ldrb	r3, [r7, #25]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d104      	bne.n	8002dd4 <SetSimpleData+0x164>
 8002dca:	7ffb      	ldrb	r3, [r7, #31]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <SetSimpleData+0x164>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <SetSimpleData+0x166>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	7fba      	ldrb	r2, [r7, #30]
 8002ddc:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	461a      	mov	r2, r3
 8002de6:	2101      	movs	r1, #1
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f7ff fcd8 	bl	800279e <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8002dee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	bf0c      	ite	eq
 8002df6:	2301      	moveq	r3, #1
 8002df8:	2300      	movne	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8002dfc:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 8002dfe:	f107 0319 	add.w	r3, r7, #25
 8002e02:	461a      	mov	r2, r3
 8002e04:	2101      	movs	r1, #1
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff fc6d 	bl	80026e6 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8002e0c:	7e7b      	ldrb	r3, [r7, #25]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d104      	bne.n	8002e1c <SetSimpleData+0x1ac>
 8002e12:	7f7b      	ldrb	r3, [r7, #29]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <SetSimpleData+0x1ac>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <SetSimpleData+0x1ae>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	7fba      	ldrb	r2, [r7, #30]
 8002e24:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	8b1b      	ldrh	r3, [r3, #24]
 8002e2c:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	7edb      	ldrb	r3, [r3, #27]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d110      	bne.n	8002e58 <SetSimpleData+0x1e8>
 8002e36:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	da0c      	bge.n	8002e58 <SetSimpleData+0x1e8>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8002e3e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <SetSimpleData+0x1f4>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	da03      	bge.n	8002e52 <SetSimpleData+0x1e2>
			pRangeData->RangeStatus =
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4c:	220e      	movs	r2, #14
 8002e4e:	76da      	strb	r2, [r3, #27]
 8002e50:	e002      	b.n	8002e58 <SetSimpleData+0x1e8>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8002e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e54:	2200      	movs	r2, #0
 8002e56:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8002e58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3730      	adds	r7, #48	; 0x30
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000048 	.word	0x20000048

08002e68 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b0a8      	sub	sp, #160	; 0xa0
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t       results;
	VL53L1_range_results_t       *presults = &results;
 8002e78:	f107 0308 	add.w	r3, r7, #8
 8002e7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8002e80:	221c      	movs	r2, #28
 8002e82:	21ff      	movs	r1, #255	; 0xff
 8002e84:	6838      	ldr	r0, [r7, #0]
 8002e86:	f00b fe28 	bl	800eada <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8002e8a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002e8e:	2102      	movs	r1, #2
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f001 f888 	bl	8003fa6 <VL53L1_get_device_results>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8002e9c:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d117      	bne.n	8002ed4 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8002ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ea8:	789a      	ldrb	r2, [r3, #2]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 8002eae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 8002eb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ebc:	78da      	ldrb	r2, [r3, #3]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff fed1 	bl	8002c70 <SetSimpleData>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002ed4:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3798      	adds	r7, #152	; 0x98
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8002ee0:	b5b0      	push	{r4, r5, r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af04      	add	r7, sp, #16
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8002ef4:	2162      	movs	r1, #98	; 0x62
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f002 f91a 	bl	8005130 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2201      	movs	r2, #1
 8002f06:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2201      	movs	r2, #1
 8002f12:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2201      	movs	r2, #1
 8002f18:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f20:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002f28:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8002f30:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2264      	movs	r2, #100	; 0x64
 8002f36:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002f3e:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f240 72db 	movw	r2, #2011	; 0x7db
 8002f4e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f002 f8d0 	bl	80050f8 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <VL53L1_data_init+0x90>
 8002f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d104      	bne.n	8002f70 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f857 	bl	800301a <VL53L1_read_p2p_data>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f503 7388 	add.w	r3, r3, #272	; 0x110
	status =
 8002f76:	4618      	mov	r0, r3
 8002f78:	f001 fc00 	bl	800477c <VL53L1_init_refspadchar_config_struct>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f503 7390 	add.w	r3, r3, #288	; 0x120
	status =
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 fc1c 	bl	80047c4 <VL53L1_init_ssc_config_struct>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f103 0242 	add.w	r2, r3, #66	; 0x42
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f503 7396 	add.w	r3, r3, #300	; 0x12c
	status =
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	f001 fc31 	bl	8004806 <VL53L1_init_xtalk_config_struct>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
	status =
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f001 fc8b 	bl	80048ca <VL53L1_init_offset_cal_config_struct>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	33a4      	adds	r3, #164	; 0xa4
	status =
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f001 fcab 	bl	8004918 <VL53L1_init_tuning_parm_storage_struct>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8002fc6:	2120      	movs	r1, #32
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fcc1 	bl	8003950 <VL53L1_set_vhv_loopbound>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8002fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d116      	bne.n	8003008 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	7858      	ldrb	r0, [r3, #1]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	8b1c      	ldrh	r4, [r3, #24]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	689d      	ldr	r5, [r3, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	6912      	ldr	r2, [r2, #16]
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	6949      	ldr	r1, [r1, #20]
 8002ff2:	9102      	str	r1, [sp, #8]
 8002ff4:	9201      	str	r2, [sp, #4]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	462b      	mov	r3, r5
 8002ffa:	4622      	mov	r2, r4
 8002ffc:	4601      	mov	r1, r0
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fad8 	bl	80035b4 <VL53L1_set_preset_mode>
 8003004:	4603      	mov	r3, r0
 8003006:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f002 fdde 	bl	8005bca <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bdb0      	pop	{r4, r5, r7, pc}

0800301a <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8003022:	2300      	movs	r3, #0
 8003024:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800302a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d108      	bne.n	8003044 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003038:	4619      	mov	r1, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f003 f81a 	bl	8006074 <VL53L1_get_static_nvm_managed>
 8003040:	4603      	mov	r3, r0
 8003042:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8003044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d107      	bne.n	800305c <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	3342      	adds	r3, #66	; 0x42
 8003050:	4619      	mov	r1, r3
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f003 f94c 	bl	80062f0 <VL53L1_get_customer_nvm_managed>
 8003058:	4603      	mov	r3, r0
 800305a:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800305c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d115      	bne.n	8003090 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800306a:	4619      	mov	r1, r3
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f004 f825 	bl	80070bc <VL53L1_get_nvm_copy_data>
 8003072:	4603      	mov	r3, r0
 8003074:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8003076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d108      	bne.n	8003090 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	33f0      	adds	r3, #240	; 0xf0
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f002 f9b3 	bl	80053f6 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8003090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
		status =
 800309e:	461a      	mov	r2, r3
 80030a0:	21de      	movs	r1, #222	; 0xde
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f004 f8e1 	bl	800726a <VL53L1_RdWord>
 80030a8:	4603      	mov	r3, r0
 80030aa:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 80030b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b6:	d204      	bcs.n	80030c2 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 80030be:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 80030c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d107      	bne.n	80030da <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	339e      	adds	r3, #158	; 0x9e
		status =
 80030ce:	4619      	mov	r1, r3
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f990 	bl	80033f6 <VL53L1_get_mode_mitigation_roi>
 80030d6:	4603      	mov	r3, r0
 80030d8:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d114      	bne.n	800310e <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800310e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8003136:	23f1      	movs	r3, #241	; 0xf1
 8003138:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800313a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10c      	bne.n	800315c <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800314e:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800315c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8003188:	23f1      	movs	r3, #241	; 0xf1
 800318a:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800318c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d109      	bne.n	80031a8 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 80031a0:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 80031a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80031d8:	23f1      	movs	r3, #241	; 0xf1
 80031da:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 80031dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d11b      	bne.n	800321c <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
		status =
 8003208:	9201      	str	r2, [sp, #4]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	460b      	mov	r3, r1
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	68b8      	ldr	r0, [r7, #8]
 8003214:	f002 fc0b 	bl	8005a2e <VL53L1_calc_timeout_register_values>
 8003218:	4603      	mov	r3, r0
 800321a:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800321c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003236:	2300      	movs	r3, #0
 8003238:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8003250:	23f1      	movs	r3, #241	; 0xf1
 8003252:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8003254:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d14a      	bne.n	80032f2 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
		macro_period_us =
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f002 fa86 	bl	800577c <VL53L1_calc_macro_period_us>
 8003270:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 8003278:	6979      	ldr	r1, [r7, #20]
 800327a:	4618      	mov	r0, r3
 800327c:	f002 fb3f 	bl	80058fe <VL53L1_calc_timeout_us>
 8003280:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800328c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800328e:	8a7b      	ldrh	r3, [r7, #18]
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800329a:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800329c:	4413      	add	r3, r2
 800329e:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80032a0:	8a7b      	ldrh	r3, [r7, #18]
 80032a2:	6979      	ldr	r1, [r7, #20]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f002 fb67 	bl	8005978 <VL53L1_calc_decoded_timeout_us>
 80032aa:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 80032b6:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80032b8:	8a7b      	ldrh	r3, [r7, #18]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80032c4:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 80032c6:	4413      	add	r3, r2
 80032c8:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80032ca:	8a7b      	ldrh	r3, [r7, #18]
 80032cc:	6979      	ldr	r1, [r7, #20]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f002 fb52 	bl	8005978 <VL53L1_calc_decoded_timeout_us>
 80032d4:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 80032f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 80032fe:	b480      	push	{r7}
 8003300:	b087      	sub	sp, #28
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	460b      	mov	r3, r1
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800330c:	2300      	movs	r3, #0
 800330e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8003314:	2301      	movs	r3, #1
 8003316:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	2b07      	cmp	r3, #7
 800331c:	d81c      	bhi.n	8003358 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800331e:	7afb      	ldrb	r3, [r7, #11]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8003324:	7afb      	ldrb	r3, [r7, #11]
 8003326:	2201      	movs	r2, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 8003334:	7dbb      	ldrb	r3, [r7, #22]
 8003336:	4013      	ands	r3, r2
 8003338:	b2da      	uxtb	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800333e:	7afb      	ldrb	r3, [r7, #11]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00b      	beq.n	800335c <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	7afb      	ldrb	r3, [r7, #11]
 800334c:	fa42 f303 	asr.w	r3, r2, r3
 8003350:	b2da      	uxtb	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e001      	b.n	800335c <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8003358:	23fc      	movs	r3, #252	; 0xfc
 800335a:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800335c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003360:	4618      	mov	r0, r3
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003376:	2300      	movs	r3, #0
 8003378:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	7858      	ldrb	r0, [r3, #1]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	7819      	ldrb	r1, [r3, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800338c:	461a      	mov	r2, r3
 800338e:	f002 fbc7 	bl	8005b20 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	7898      	ldrb	r0, [r3, #2]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	78d9      	ldrb	r1, [r3, #3]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80033a0:	461a      	mov	r2, r3
 80033a2:	f002 fbfc 	bl	8005b9e <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 80033a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80033bc:	2300      	movs	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	3301      	adds	r3, #1
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	4619      	mov	r1, r3
 80033d2:	f002 fd6b 	bl	8005eac <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	1c99      	adds	r1, r3, #2
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	3303      	adds	r3, #3
 80033e4:	461a      	mov	r2, r3
 80033e6:	f002 fbc2 	bl	8005b6e <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 80033ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003400:	2300      	movs	r3, #0
 8003402:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800341a:	f107 020e 	add.w	r2, r7, #14
 800341e:	f107 010d 	add.w	r1, r7, #13
 8003422:	4618      	mov	r0, r3
 8003424:	f002 fd42 	bl	8005eac <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8003428:	7bba      	ldrb	r2, [r7, #14]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800342e:	7b7a      	ldrb	r2, [r7, #13]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800343a:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	b2da      	uxtb	r2, r3
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	b2da      	uxtb	r2, r3
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8003452:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	460b      	mov	r3, r1
 800346e:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003470:	2300      	movs	r3, #0
 8003472:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8003478:	7afb      	ldrb	r3, [r7, #11]
 800347a:	3b01      	subs	r3, #1
 800347c:	2b25      	cmp	r3, #37	; 0x25
 800347e:	f200 808e 	bhi.w	800359e <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	08003521 	.word	0x08003521
 800348c:	08003521 	.word	0x08003521
 8003490:	08003521 	.word	0x08003521
 8003494:	08003521 	.word	0x08003521
 8003498:	08003521 	.word	0x08003521
 800349c:	0800354b 	.word	0x0800354b
 80034a0:	0800354b 	.word	0x0800354b
 80034a4:	0800354b 	.word	0x0800354b
 80034a8:	0800359f 	.word	0x0800359f
 80034ac:	0800359f 	.word	0x0800359f
 80034b0:	0800359f 	.word	0x0800359f
 80034b4:	0800359f 	.word	0x0800359f
 80034b8:	0800359f 	.word	0x0800359f
 80034bc:	0800359f 	.word	0x0800359f
 80034c0:	0800359f 	.word	0x0800359f
 80034c4:	0800359f 	.word	0x0800359f
 80034c8:	08003521 	.word	0x08003521
 80034cc:	0800354b 	.word	0x0800354b
 80034d0:	0800359f 	.word	0x0800359f
 80034d4:	0800359f 	.word	0x0800359f
 80034d8:	0800359f 	.word	0x0800359f
 80034dc:	0800359f 	.word	0x0800359f
 80034e0:	0800359f 	.word	0x0800359f
 80034e4:	0800359f 	.word	0x0800359f
 80034e8:	0800359f 	.word	0x0800359f
 80034ec:	0800359f 	.word	0x0800359f
 80034f0:	0800359f 	.word	0x0800359f
 80034f4:	0800359f 	.word	0x0800359f
 80034f8:	0800359f 	.word	0x0800359f
 80034fc:	0800359f 	.word	0x0800359f
 8003500:	0800359f 	.word	0x0800359f
 8003504:	0800359f 	.word	0x0800359f
 8003508:	0800359f 	.word	0x0800359f
 800350c:	0800359f 	.word	0x0800359f
 8003510:	0800359f 	.word	0x0800359f
 8003514:	08003575 	.word	0x08003575
 8003518:	08003575 	.word	0x08003575
 800351c:	08003575 	.word	0x08003575
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	601a      	str	r2, [r3, #0]
	break;
 8003548:	e02c      	b.n	80035a4 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	601a      	str	r2, [r3, #0]
	break;
 8003572:	e017      	b.n	80035a4 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	601a      	str	r2, [r3, #0]
	break;
 800359c:	e002      	b.n	80035a4 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800359e:	23fc      	movs	r3, #252	; 0xfc
 80035a0:	75fb      	strb	r3, [r7, #23]
		break;
 80035a2:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80035a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b092      	sub	sp, #72	; 0x48
 80035b8:	af04      	add	r7, sp, #16
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	72fb      	strb	r3, [r7, #11]
 80035c2:	4613      	mov	r3, r2
 80035c4:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80035e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ea:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80035ee:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80035f6:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	33a4      	adds	r3, #164	; 0xa4
 80035fc:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8003604:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	7afa      	ldrb	r2, [r7, #11]
 800360a:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003610:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003616:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800361c:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800361e:	2103      	movs	r1, #3
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f001 fd85 	bl	8005130 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8003626:	7afb      	ldrb	r3, [r7, #11]
 8003628:	3b01      	subs	r3, #1
 800362a:	2b25      	cmp	r3, #37	; 0x25
 800362c:	f200 810c 	bhi.w	8003848 <VL53L1_set_preset_mode+0x294>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <VL53L1_set_preset_mode+0x84>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	080036d1 	.word	0x080036d1
 800363c:	080036ed 	.word	0x080036ed
 8003640:	08003709 	.word	0x08003709
 8003644:	08003725 	.word	0x08003725
 8003648:	08003741 	.word	0x08003741
 800364c:	0800375d 	.word	0x0800375d
 8003650:	08003779 	.word	0x08003779
 8003654:	08003795 	.word	0x08003795
 8003658:	08003849 	.word	0x08003849
 800365c:	08003849 	.word	0x08003849
 8003660:	08003849 	.word	0x08003849
 8003664:	08003849 	.word	0x08003849
 8003668:	08003849 	.word	0x08003849
 800366c:	08003849 	.word	0x08003849
 8003670:	08003849 	.word	0x08003849
 8003674:	08003849 	.word	0x08003849
 8003678:	080037b1 	.word	0x080037b1
 800367c:	080037cd 	.word	0x080037cd
 8003680:	08003849 	.word	0x08003849
 8003684:	08003849 	.word	0x08003849
 8003688:	08003849 	.word	0x08003849
 800368c:	08003849 	.word	0x08003849
 8003690:	08003849 	.word	0x08003849
 8003694:	08003849 	.word	0x08003849
 8003698:	08003849 	.word	0x08003849
 800369c:	08003849 	.word	0x08003849
 80036a0:	08003849 	.word	0x08003849
 80036a4:	08003849 	.word	0x08003849
 80036a8:	08003849 	.word	0x08003849
 80036ac:	08003849 	.word	0x08003849
 80036b0:	08003849 	.word	0x08003849
 80036b4:	08003849 	.word	0x08003849
 80036b8:	08003849 	.word	0x08003849
 80036bc:	08003849 	.word	0x08003849
 80036c0:	08003849 	.word	0x08003849
 80036c4:	080037e9 	.word	0x080037e9
 80036c8:	08003809 	.word	0x08003809
 80036cc:	08003829 	.word	0x08003829

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036e0:	f001 f9a8 	bl	8004a34 <VL53L1_preset_mode_standard_ranging>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80036ea:	e0b1      	b.n	8003850 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036fc:	f001 fab8 	bl	8004c70 <VL53L1_preset_mode_standard_ranging_short_range>
 8003700:	4603      	mov	r3, r0
 8003702:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8003706:	e0a3      	b.n	8003850 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003718:	f001 faeb 	bl	8004cf2 <VL53L1_preset_mode_standard_ranging_long_range>
 800371c:	4603      	mov	r3, r0
 800371e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8003722:	e095      	b.n	8003850 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003734:	f001 fb1e 	bl	8004d74 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800373e:	e087      	b.n	8003850 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800374e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003750:	f001 fb35 	bl	8004dbe <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8003754:	4603      	mov	r3, r0
 8003756:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800375a:	e079      	b.n	8003850 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800376a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800376c:	f001 fb4c 	bl	8004e08 <VL53L1_preset_mode_timed_ranging>
 8003770:	4603      	mov	r3, r0
 8003772:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8003776:	e06b      	b.n	8003850 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	9301      	str	r3, [sp, #4]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003786:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003788:	f001 fb78 	bl	8004e7c <VL53L1_preset_mode_timed_ranging_short_range>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8003792:	e05d      	b.n	8003850 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037a4:	f001 fba4 	bl	8004ef0 <VL53L1_preset_mode_timed_ranging_long_range>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80037ae:	e04f      	b.n	8003850 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037c0:	f001 fc78 	bl	80050b4 <VL53L1_preset_mode_olt>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80037ca:	e041      	b.n	8003850 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037dc:	f001 fc34 	bl	8005048 <VL53L1_preset_mode_singleshot_ranging>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80037e6:	e033      	b.n	8003850 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	9302      	str	r3, [sp, #8]
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	9301      	str	r3, [sp, #4]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037fc:	f001 fbd8 	bl	8004fb0 <VL53L1_preset_mode_low_power_auto_short_ranging>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8003806:	e023      	b.n	8003850 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	9302      	str	r3, [sp, #8]
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800381a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800381c:	f001 fba2 	bl	8004f64 <VL53L1_preset_mode_low_power_auto_ranging>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8003826:	e013      	b.n	8003850 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	9302      	str	r3, [sp, #8]
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800383a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800383c:	f001 fbde 	bl	8004ffc <VL53L1_preset_mode_low_power_auto_long_ranging>
 8003840:	4603      	mov	r3, r0
 8003842:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8003846:	e003      	b.n	8003850 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8003848:	23fc      	movs	r3, #252	; 0xfc
 800384a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800384e:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8003850:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003854:	2b00      	cmp	r3, #0
 8003856:	d105      	bne.n	8003864 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 8003858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385a:	893a      	ldrh	r2, [r7, #8]
 800385c:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	893a      	ldrh	r2, [r7, #8]
 8003862:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 8003864:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003868:	2b00      	cmp	r3, #0
 800386a:	d108      	bne.n	800387e <VL53L1_set_preset_mode+0x2ca>
		status =
 800386c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800386e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff fca0 	bl	80031b8 <VL53L1_set_timeouts_us>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800387e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <VL53L1_set_preset_mode+0x2e0>
		status =
 8003886:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff fc46 	bl	800311a <VL53L1_set_inter_measurement_period_ms>
 800388e:	4603      	mov	r3, r0
 8003890:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8003894:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8003898:	4618      	mov	r0, r3
 800389a:	3738      	adds	r7, #56	; 0x38
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80038bc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	887a      	ldrh	r2, [r7, #2]
 80038e4:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 80038e8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8003914:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003918:	4618      	mov	r0, r3
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003930:	2300      	movs	r3, #0
 8003932:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8003940:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800395c:	2300      	movs	r3, #0
 800395e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	b2da      	uxtb	r2, r3
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	b2db      	uxtb	r3, r3
 8003976:	4413      	add	r3, r2
 8003978:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8003980:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b0d0      	sub	sp, #320	; 0x140
 8003994:	af00      	add	r7, sp, #0
 8003996:	1d3b      	adds	r3, r7, #4
 8003998:	6018      	str	r0, [r3, #0]
 800399a:	4608      	mov	r0, r1
 800399c:	4611      	mov	r1, r2
 800399e:	1cfb      	adds	r3, r7, #3
 80039a0:	4602      	mov	r2, r0
 80039a2:	701a      	strb	r2, [r3, #0]
 80039a4:	1cbb      	adds	r3, r7, #2
 80039a6:	460a      	mov	r2, r1
 80039a8:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80039b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039bc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80039c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80039c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039c8:	3342      	adds	r3, #66	; 0x42
 80039ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80039ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80039d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80039da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039de:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80039e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80039e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039ea:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80039ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80039f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039f6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80039fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80039fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a02:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003a06:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8003a0a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a0e:	332c      	adds	r3, #44	; 0x2c
 8003a10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8003a34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a38:	1cfa      	adds	r2, r7, #3
 8003a3a:	7812      	ldrb	r2, [r2, #0]
 8003a3c:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8003a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a42:	791b      	ldrb	r3, [r3, #4]
 8003a44:	b25b      	sxtb	r3, r3
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8003a4c:	1cfb      	adds	r3, r7, #3
 8003a4e:	f993 3000 	ldrsb.w	r3, [r3]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	b25b      	sxtb	r3, r3
 8003a56:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a5c:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8003a5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a62:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8003a66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a6a:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8003a6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a72:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8003a76:	2bff      	cmp	r3, #255	; 0xff
 8003a78:	d104      	bne.n	8003a84 <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8003a7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003a84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a88:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d133      	bne.n	8003af8 <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8003a90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a94:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d12d      	bne.n	8003af8 <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8003a9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003aa0:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 8003aa4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003aa8:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8003aac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 8003ab6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003aba:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8003abe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10c      	bne.n	8003ae0 <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8003ac6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003aca:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 8003ad6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ada:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003ade:	e004      	b.n	8003aea <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8003ae0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 8003aea:	1cbb      	adds	r3, r7, #2
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d802      	bhi.n	8003af8 <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8003af2:	1cbb      	adds	r3, r7, #2
 8003af4:	2205      	movs	r2, #5
 8003af6:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003af8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003afc:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d110      	bne.n	8003b26 <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8003b04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b08:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d10a      	bne.n	8003b26 <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8003b10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b14:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8003b18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b1c:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8003b20:	1cbb      	adds	r3, r7, #2
 8003b22:	2206      	movs	r2, #6
 8003b24:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 8003b26:	1cbb      	adds	r3, r7, #2
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	2b05      	cmp	r3, #5
 8003b2e:	d827      	bhi.n	8003b80 <VL53L1_init_and_start_range+0x1f0>
 8003b30:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <VL53L1_init_and_start_range+0x1a8>)
 8003b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b36:	bf00      	nop
 8003b38:	08003b79 	.word	0x08003b79
 8003b3c:	08003b71 	.word	0x08003b71
 8003b40:	08003b69 	.word	0x08003b69
 8003b44:	08003b61 	.word	0x08003b61
 8003b48:	08003b59 	.word	0x08003b59
 8003b4c:	08003b51 	.word	0x08003b51
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8003b50:	2301      	movs	r3, #1
 8003b52:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8003b56:	e017      	b.n	8003b88 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8003b58:	230d      	movs	r3, #13
 8003b5a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8003b5e:	e013      	b.n	8003b88 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8003b60:	2324      	movs	r3, #36	; 0x24
 8003b62:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8003b66:	e00f      	b.n	8003b88 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8003b68:	2344      	movs	r3, #68	; 0x44
 8003b6a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8003b6e:	e00b      	b.n	8003b88 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8003b70:	235a      	movs	r3, #90	; 0x5a
 8003b72:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8003b76:	e007      	b.n	8003b88 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8003b78:	2371      	movs	r3, #113	; 0x71
 8003b7a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8003b7e:	e003      	b.n	8003b88 <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8003b80:	2383      	movs	r3, #131	; 0x83
 8003b82:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8003b86:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8003b88:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003b8c:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8003b90:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 8003b94:	f107 030c 	add.w	r3, r7, #12
 8003b98:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8003ba2:	e00b      	b.n	8003bbc <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 8003ba4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8003bae:	2200      	movs	r2, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8003bb2:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8003bbc:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 8003bc0:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d3ed      	bcc.n	8003ba4 <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8003bc8:	1cbb      	adds	r3, r7, #2
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b05      	cmp	r3, #5
 8003bce:	d917      	bls.n	8003c00 <VL53L1_init_and_start_range+0x270>
 8003bd0:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d113      	bne.n	8003c00 <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8003bd8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003bdc:	f1c3 0301 	rsb	r3, r3, #1
 8003be0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003be4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8003be8:	f107 020c 	add.w	r2, r7, #12
 8003bec:	4413      	add	r3, r2
		status =
 8003bee:	461a      	mov	r2, r3
 8003bf0:	210b      	movs	r1, #11
 8003bf2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8003bf6:	f002 f988 	bl	8005f0a <VL53L1_i2c_encode_static_nvm_managed>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8003c00:	1cbb      	adds	r3, r7, #2
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d917      	bls.n	8003c38 <VL53L1_init_and_start_range+0x2a8>
 8003c08:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d113      	bne.n	8003c38 <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8003c10:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003c14:	f1c3 030d 	rsb	r3, r3, #13
 8003c18:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003c1c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8003c20:	f107 020c 	add.w	r2, r7, #12
 8003c24:	4413      	add	r3, r2
		status =
 8003c26:	461a      	mov	r2, r3
 8003c28:	2117      	movs	r1, #23
 8003c2a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8003c2e:	f002 fa48 	bl	80060c2 <VL53L1_i2c_encode_customer_nvm_managed>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8003c38:	1cbb      	adds	r3, r7, #2
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d917      	bls.n	8003c70 <VL53L1_init_and_start_range+0x2e0>
 8003c40:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d113      	bne.n	8003c70 <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8003c48:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003c4c:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8003c50:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003c54:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8003c58:	f107 020c 	add.w	r2, r7, #12
 8003c5c:	4413      	add	r3, r2
		status =
 8003c5e:	461a      	mov	r2, r3
 8003c60:	2120      	movs	r1, #32
 8003c62:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8003c66:	f002 fb6a 	bl	800633e <VL53L1_i2c_encode_static_config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8003c70:	1cbb      	adds	r3, r7, #2
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d917      	bls.n	8003ca8 <VL53L1_init_and_start_range+0x318>
 8003c78:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d113      	bne.n	8003ca8 <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003c80:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003c84:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8003c88:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003c8c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8003c90:	f107 020c 	add.w	r2, r7, #12
 8003c94:	4413      	add	r3, r2
		status =
 8003c96:	461a      	mov	r2, r3
 8003c98:	2116      	movs	r1, #22
 8003c9a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8003c9e:	f002 fc31 	bl	8006504 <VL53L1_i2c_encode_general_config>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8003ca8:	1cbb      	adds	r3, r7, #2
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d917      	bls.n	8003ce0 <VL53L1_init_and_start_range+0x350>
 8003cb0:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d113      	bne.n	8003ce0 <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8003cb8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003cbc:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8003cc0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003cc4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8003cc8:	f107 020c 	add.w	r2, r7, #12
 8003ccc:	4413      	add	r3, r2
		status =
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2117      	movs	r1, #23
 8003cd2:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8003cd6:	f002 fc99 	bl	800660c <VL53L1_i2c_encode_timing_config>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8003ce0:	1cbb      	adds	r3, r7, #2
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d036      	beq.n	8003d56 <VL53L1_init_and_start_range+0x3c6>
 8003ce8:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d132      	bne.n	8003d56 <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8003cf0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003cf4:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8003cf8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8003cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d00:	791b      	ldrb	r3, [r3, #4]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d017      	beq.n	8003d3a <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8003d0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d0e:	789b      	ldrb	r3, [r3, #2]
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003d1a:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8003d1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d20:	789b      	ldrb	r3, [r3, #2]
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003d2c:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8003d2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d32:	789a      	ldrb	r2, [r3, #2]
 8003d34:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003d38:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003d3a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8003d3e:	f107 020c 	add.w	r2, r7, #12
 8003d42:	4413      	add	r3, r2
		status =
 8003d44:	461a      	mov	r2, r3
 8003d46:	2112      	movs	r1, #18
 8003d48:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8003d4c:	f002 fce0 	bl	8006710 <VL53L1_i2c_encode_dynamic_config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 8003d56:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d113      	bne.n	8003d86 <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 8003d5e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8003d62:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8003d66:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8003d6a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8003d6e:	f107 020c 	add.w	r2, r7, #12
 8003d72:	4413      	add	r3, r2
		status =
 8003d74:	461a      	mov	r2, r3
 8003d76:	2105      	movs	r1, #5
 8003d78:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8003d7c:	f002 fd4d 	bl	800681a <VL53L1_i2c_encode_system_control>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8003d86:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10c      	bne.n	8003da8 <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 8003d8e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
		status =
 8003d92:	f107 020c 	add.w	r2, r7, #12
 8003d96:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 8003d9a:	1d38      	adds	r0, r7, #4
 8003d9c:	6800      	ldr	r0, [r0, #0]
 8003d9e:	f003 fa1d 	bl	80071dc <VL53L1_WriteMulti>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 8003da8:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d106      	bne.n	8003dbe <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8003db0:	1d3b      	adds	r3, r7, #4
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	f001 f9e6 	bl	8005184 <VL53L1_update_ll_driver_rd_state>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 8003dbe:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8003dc6:	1d3b      	adds	r3, r7, #4
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	f001 faae 	bl	800532a <VL53L1_update_ll_driver_cfg_state>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 8003dd4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop

08003de4 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev =
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8003dfa:	b25b      	sxtb	r3, r3
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	b25b      	sxtb	r3, r3
 8003e02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e06:	b25b      	sxtb	r3, r3
 8003e08:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f002 fd39 	bl	8006890 <VL53L1_set_system_control>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	73fb      	strb	r3, [r7, #15]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 8003e34:	2103      	movs	r1, #3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f001 f97a 	bl	8005130 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d102      	bne.n	8003e4c <VL53L1_stop_range+0x68>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f001 fef3 	bl	8005c32 <VL53L1_low_power_auto_data_stop_range>

	return status;
 8003e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b0c8      	sub	sp, #288	; 0x120
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	1d3b      	adds	r3, r7, #4
 8003e60:	6018      	str	r0, [r3, #0]
 8003e62:	460a      	mov	r2, r1
 8003e64:	1cfb      	adds	r3, r7, #3
 8003e66:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003e6e:	1d3b      	adds	r3, r7, #4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8003e76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e7a:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 8003e7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8003e82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e86:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8003e8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e92:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8003e96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8003e9a:	2388      	movs	r3, #136	; 0x88
 8003e9c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8003eac:	1cfb      	adds	r3, r7, #3
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d008      	beq.n	8003ec6 <VL53L1_get_measurement_results+0x6e>
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d10d      	bne.n	8003ed4 <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8003eb8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8003ebc:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8003ec0:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8003ec4:	e00a      	b.n	8003edc <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8003ec6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8003eca:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8003ece:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8003ed2:	e003      	b.n	8003edc <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 8003ed4:	232c      	movs	r3, #44	; 0x2c
 8003ed6:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8003eda:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8003edc:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10c      	bne.n	8003efe <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 8003ee4:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
		status =
 8003ee8:	f107 0208 	add.w	r2, r7, #8
 8003eec:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8003ef0:	1d38      	adds	r0, r7, #4
 8003ef2:	6800      	ldr	r0, [r0, #0]
 8003ef4:	f003 f984 	bl	8007200 <VL53L1_ReadMulti>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8003efe:	1cfb      	adds	r3, r7, #3
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d917      	bls.n	8003f36 <VL53L1_get_measurement_results+0xde>
 8003f06:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d113      	bne.n	8003f36 <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003f0e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8003f12:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8003f16:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8003f1a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8003f1e:	f107 0208 	add.w	r2, r7, #8
 8003f22:	4413      	add	r3, r2
		status =
 8003f24:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003f28:	4619      	mov	r1, r3
 8003f2a:	2038      	movs	r0, #56	; 0x38
 8003f2c:	f002 fe2e 	bl	8006b8c <VL53L1_i2c_decode_debug_results>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8003f36:	1cfb      	adds	r3, r7, #3
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d017      	beq.n	8003f6e <VL53L1_get_measurement_results+0x116>
 8003f3e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d113      	bne.n	8003f6e <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003f46:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8003f4a:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8003f4e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8003f52:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 8003f56:	f107 0208 	add.w	r2, r7, #8
 8003f5a:	4413      	add	r3, r2
		status =
 8003f5c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003f60:	4619      	mov	r1, r3
 8003f62:	2021      	movs	r0, #33	; 0x21
 8003f64:	f002 fdb1 	bl	8006aca <VL53L1_i2c_decode_core_results>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8003f6e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d110      	bne.n	8003f98 <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8003f7c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8003f80:	f107 0208 	add.w	r2, r7, #8
 8003f84:	4413      	add	r3, r2
		status =
 8003f86:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	202c      	movs	r0, #44	; 0x2c
 8003f8e:	f002 fca6 	bl	80068de <VL53L1_i2c_decode_system_results>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8003f98:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b088      	sub	sp, #32
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8003fc2:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8003fc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 8003fd0:	7afb      	ldrb	r3, [r7, #11]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f7ff ff3f 	bl	8003e58 <VL53L1_get_measurement_results>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 8003fde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10c      	bne.n	8004000 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 8003fec:	4618      	mov	r0, r3
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f503 7222 	add.w	r2, r3, #648	; 0x288
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f000 f86c 	bl	80040d8 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8004006:	2b01      	cmp	r3, #1
 8004008:	d12d      	bne.n	8004066 <VL53L1_get_device_results+0xc0>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800400a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10e      	bne.n	8004030 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8004018:	2b00      	cmp	r3, #0
 800401a:	d109      	bne.n	8004030 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f001 fe62 	bl	8005ce6 <VL53L1_low_power_auto_setup_manual_calibration>
 8004022:	4603      	mov	r3, r0
 8004024:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800402e:	e00c      	b.n	800404a <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8004030:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d108      	bne.n	800404a <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800403e:	2b01      	cmp	r3, #1
 8004040:	d103      	bne.n	800404a <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2202      	movs	r2, #2
 8004046:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
		}

		/* perform DSS calculation. This can be performed every range */
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8004050:	2bff      	cmp	r3, #255	; 0xff
 8004052:	d008      	beq.n	8004066 <VL53L1_get_device_results+0xc0>
 8004054:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d104      	bne.n	8004066 <VL53L1_get_device_results+0xc0>
			(status == VL53L1_ERROR_NONE)) {
			status = VL53L1_low_power_auto_update_DSS(
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f001 fe87 	bl	8005d70 <VL53L1_low_power_auto_update_DSS>
 8004062:	4603      	mov	r3, r0
 8004064:	77fb      	strb	r3, [r7, #31]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800407a:	2284      	movs	r2, #132	; 0x84
 800407c:	6939      	ldr	r1, [r7, #16]
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f00a fd20 	bl	800eac4 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 8004084:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d104      	bne.n	8004096 <VL53L1_get_device_results+0xf0>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f001 f901 	bl	8005294 <VL53L1_check_ll_driver_rd_state>
 8004092:	4603      	mov	r3, r0
 8004094:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8004096:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3720      	adds	r7, #32
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	460b      	mov	r3, r1
 80040ac:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80040b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d107      	bne.n	80040ca <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	2203      	movs	r2, #3
 80040be:	4619      	mov	r1, r3
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff fc65 	bl	8003990 <VL53L1_init_and_start_range>
 80040c6:	4603      	mov	r3, r0
 80040c8:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 80040ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	; 0x24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	78da      	ldrb	r2, [r3, #3]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	3304      	adds	r3, #4
 80040fe:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 8004100:	2300      	movs	r3, #0
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e0d0      	b.n	80042a8 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	7ffa      	ldrb	r2, [r7, #31]
 800410a:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2200      	movs	r2, #0
 8004110:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	78db      	ldrb	r3, [r3, #3]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	785b      	ldrb	r3, [r3, #1]
 800411e:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8004122:	2b09      	cmp	r3, #9
 8004124:	d104      	bne.n	8004130 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2213      	movs	r2, #19
 800412a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800412e:	e007      	b.n	8004140 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 8004140:	7ffb      	ldrb	r3, [r7, #31]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 8004146:	2b01      	cmp	r3, #1
 8004148:	d05d      	beq.n	8004206 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800414a:	e0a7      	b.n	800429c <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	2b07      	cmp	r3, #7
 8004152:	d104      	bne.n	800415e <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	821a      	strh	r2, [r3, #16]
 800415c:	e00c      	b.n	8004178 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	789b      	ldrb	r3, [r3, #2]
 8004162:	2b08      	cmp	r3, #8
 8004164:	d104      	bne.n	8004170 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	821a      	strh	r2, [r3, #16]
 800416e:	e003      	b.n	8004178 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	895b      	ldrh	r3, [r3, #10]
 8004194:	015b      	lsls	r3, r3, #5
 8004196:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419e:	d302      	bcc.n	80041a6 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 80041a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041a4:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 80041ba:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041cc:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	da01      	bge.n	80041d8 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 80041d4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80041d8:	12db      	asrs	r3, r3, #11
 80041da:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	b21a      	sxth	r2, r3
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	621a      	str	r2, [r3, #32]

			break;
 8004204:	e04a      	b.n	800429c <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800421c:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	8bdb      	ldrh	r3, [r3, #30]
 800422a:	015b      	lsls	r3, r3, #5
 800422c:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004234:	d302      	bcc.n	800423c <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 8004236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800423a:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	b29a      	uxth	r2, r3
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 8004250:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	fb02 f303 	mul.w	r3, r2, r3
 800425a:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004262:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	da01      	bge.n	800426e <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800426a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800426e:	12db      	asrs	r3, r3, #11
 8004270:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	b21a      	sxth	r2, r3
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	621a      	str	r2, [r3, #32]

			break;
 800429a:	bf00      	nop
		}

		pdata++;
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	3340      	adds	r3, #64	; 0x40
 80042a0:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 80042a2:	7ffb      	ldrb	r3, [r7, #31]
 80042a4:	3301      	adds	r3, #1
 80042a6:	77fb      	strb	r3, [r7, #31]
 80042a8:	7ffb      	ldrb	r3, [r7, #31]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	f67f af2b 	bls.w	8004106 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2200      	movs	r2, #0
 80042b4:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	785b      	ldrb	r3, [r3, #1]
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	3b01      	subs	r3, #1
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d831      	bhi.n	8004328 <VL53L1_copy_sys_and_core_results_to_range_results+0x250>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <VL53L1_copy_sys_and_core_results_to_range_results+0x1f4>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	08004311 	.word	0x08004311
 80042d0:	08004311 	.word	0x08004311
 80042d4:	08004311 	.word	0x08004311
 80042d8:	08004329 	.word	0x08004329
 80042dc:	08004329 	.word	0x08004329
 80042e0:	08004329 	.word	0x08004329
 80042e4:	08004329 	.word	0x08004329
 80042e8:	08004329 	.word	0x08004329
 80042ec:	08004329 	.word	0x08004329
 80042f0:	08004329 	.word	0x08004329
 80042f4:	08004329 	.word	0x08004329
 80042f8:	08004329 	.word	0x08004329
 80042fc:	08004311 	.word	0x08004311
 8004300:	08004329 	.word	0x08004329
 8004304:	08004329 	.word	0x08004329
 8004308:	08004329 	.word	0x08004329
 800430c:	08004311 	.word	0x08004311
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	785b      	ldrb	r3, [r3, #1]
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	b2da      	uxtb	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 8004326:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8004328:	bf00      	nop
 800432a:	3724      	adds	r7, #36	; 0x24
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	460b      	mov	r3, r1
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004342:	2300      	movs	r3, #0
 8004344:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800434a:	897b      	ldrh	r3, [r7, #10]
 800434c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8004350:	2b38      	cmp	r3, #56	; 0x38
 8004352:	f200 8204 	bhi.w	800475e <VL53L1_get_tuning_parm+0x42a>
 8004356:	a201      	add	r2, pc, #4	; (adr r2, 800435c <VL53L1_get_tuning_parm+0x28>)
 8004358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435c:	08004441 	.word	0x08004441
 8004360:	0800444f 	.word	0x0800444f
 8004364:	0800445d 	.word	0x0800445d
 8004368:	0800446b 	.word	0x0800446b
 800436c:	08004479 	.word	0x08004479
 8004370:	08004487 	.word	0x08004487
 8004374:	08004495 	.word	0x08004495
 8004378:	080044a3 	.word	0x080044a3
 800437c:	080044b1 	.word	0x080044b1
 8004380:	080044bf 	.word	0x080044bf
 8004384:	080044cd 	.word	0x080044cd
 8004388:	080044db 	.word	0x080044db
 800438c:	080044e9 	.word	0x080044e9
 8004390:	080044f7 	.word	0x080044f7
 8004394:	08004505 	.word	0x08004505
 8004398:	08004513 	.word	0x08004513
 800439c:	08004521 	.word	0x08004521
 80043a0:	0800452f 	.word	0x0800452f
 80043a4:	0800453d 	.word	0x0800453d
 80043a8:	0800454b 	.word	0x0800454b
 80043ac:	08004559 	.word	0x08004559
 80043b0:	08004567 	.word	0x08004567
 80043b4:	08004575 	.word	0x08004575
 80043b8:	08004583 	.word	0x08004583
 80043bc:	08004591 	.word	0x08004591
 80043c0:	0800459f 	.word	0x0800459f
 80043c4:	080045ad 	.word	0x080045ad
 80043c8:	080045bb 	.word	0x080045bb
 80043cc:	080045c9 	.word	0x080045c9
 80043d0:	080045d7 	.word	0x080045d7
 80043d4:	080045e5 	.word	0x080045e5
 80043d8:	080045f3 	.word	0x080045f3
 80043dc:	08004601 	.word	0x08004601
 80043e0:	0800460f 	.word	0x0800460f
 80043e4:	0800461d 	.word	0x0800461d
 80043e8:	0800462b 	.word	0x0800462b
 80043ec:	08004639 	.word	0x08004639
 80043f0:	08004647 	.word	0x08004647
 80043f4:	08004655 	.word	0x08004655
 80043f8:	08004663 	.word	0x08004663
 80043fc:	08004671 	.word	0x08004671
 8004400:	0800467f 	.word	0x0800467f
 8004404:	0800468d 	.word	0x0800468d
 8004408:	0800469b 	.word	0x0800469b
 800440c:	080046a9 	.word	0x080046a9
 8004410:	080046b7 	.word	0x080046b7
 8004414:	080046c5 	.word	0x080046c5
 8004418:	080046d3 	.word	0x080046d3
 800441c:	080046e1 	.word	0x080046e1
 8004420:	080046ef 	.word	0x080046ef
 8004424:	080046fd 	.word	0x080046fd
 8004428:	0800470b 	.word	0x0800470b
 800442c:	08004719 	.word	0x08004719
 8004430:	08004727 	.word	0x08004727
 8004434:	08004735 	.word	0x08004735
 8004438:	08004743 	.word	0x08004743
 800443c:	08004751 	.word	0x08004751

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8004446:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	601a      	str	r2, [r3, #0]
	break;
 800444c:	e18e      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8004454:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	601a      	str	r2, [r3, #0]
	break;
 800445a:	e187      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8004462:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	601a      	str	r2, [r3, #0]
	break;
 8004468:	e180      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004470:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	601a      	str	r2, [r3, #0]
	break;
 8004476:	e179      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800447e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	601a      	str	r2, [r3, #0]
	break;
 8004484:	e172      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800448c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	601a      	str	r2, [r3, #0]
	break;
 8004492:	e16b      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800449a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	601a      	str	r2, [r3, #0]
	break;
 80044a0:	e164      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80044a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	601a      	str	r2, [r3, #0]
	break;
 80044ae:	e15d      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 80044b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	601a      	str	r2, [r3, #0]
	break;
 80044bc:	e156      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80044c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	601a      	str	r2, [r3, #0]
	break;
 80044ca:	e14f      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 80044d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	601a      	str	r2, [r3, #0]
	break;
 80044d8:	e148      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80044e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	601a      	str	r2, [r3, #0]
	break;
 80044e6:	e141      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 80044ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	601a      	str	r2, [r3, #0]
	break;
 80044f4:	e13a      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80044fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
	break;
 8004502:	e133      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800450a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	601a      	str	r2, [r3, #0]
	break;
 8004510:	e12c      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004518:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	601a      	str	r2, [r3, #0]
	break;
 800451e:	e125      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8004526:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	601a      	str	r2, [r3, #0]
	break;
 800452c:	e11e      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8004534:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	601a      	str	r2, [r3, #0]
	break;
 800453a:	e117      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8004542:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]
	break;
 8004548:	e110      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 8004550:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
	break;
 8004556:	e109      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800455e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	601a      	str	r2, [r3, #0]
	break;
 8004564:	e102      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800456c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	601a      	str	r2, [r3, #0]
	break;
 8004572:	e0fb      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800457a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	601a      	str	r2, [r3, #0]
	break;
 8004580:	e0f4      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8004588:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	601a      	str	r2, [r3, #0]
	break;
 800458e:	e0ed      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8004596:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	601a      	str	r2, [r3, #0]
	break;
 800459c:	e0e6      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80045a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	601a      	str	r2, [r3, #0]
	break;
 80045aa:	e0df      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 80045b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	601a      	str	r2, [r3, #0]
	break;
 80045b8:	e0d8      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80045c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
	break;
 80045c6:	e0d1      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80045ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
	break;
 80045d4:	e0ca      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80045dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	601a      	str	r2, [r3, #0]
	break;
 80045e2:	e0c3      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80045ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	601a      	str	r2, [r3, #0]
	break;
 80045f0:	e0bc      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80045f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	601a      	str	r2, [r3, #0]
	break;
 80045fe:	e0b5      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004606:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	601a      	str	r2, [r3, #0]
	break;
 800460c:	e0ae      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8004614:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	601a      	str	r2, [r3, #0]
	break;
 800461a:	e0a7      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8004622:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	601a      	str	r2, [r3, #0]
	break;
 8004628:	e0a0      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8004630:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]
	break;
 8004636:	e099      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800463e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]
	break;
 8004644:	e092      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800464c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	601a      	str	r2, [r3, #0]
	break;
 8004652:	e08b      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800465a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	601a      	str	r2, [r3, #0]
	break;
 8004660:	e084      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004668:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	601a      	str	r2, [r3, #0]
	break;
 800466e:	e07d      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8004676:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	601a      	str	r2, [r3, #0]
	break;
 800467c:	e076      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8004684:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]
	break;
 800468a:	e06f      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8004692:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	601a      	str	r2, [r3, #0]
	break;
 8004698:	e068      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 80046a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]
	break;
 80046a6:	e061      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 80046ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	601a      	str	r2, [r3, #0]
	break;
 80046b4:	e05a      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 80046bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	601a      	str	r2, [r3, #0]
	break;
 80046c2:	e053      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 80046ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	601a      	str	r2, [r3, #0]
	break;
 80046d0:	e04c      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 80046d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	601a      	str	r2, [r3, #0]
	break;
 80046de:	e045      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80046e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	601a      	str	r2, [r3, #0]
	break;
 80046ec:	e03e      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80046f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	601a      	str	r2, [r3, #0]
	break;
 80046fa:	e037      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004702:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	601a      	str	r2, [r3, #0]
	break;
 8004708:	e030      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004710:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	601a      	str	r2, [r3, #0]
	break;
 8004716:	e029      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800471e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	601a      	str	r2, [r3, #0]
	break;
 8004724:	e022      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800472c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	601a      	str	r2, [r3, #0]
	break;
 8004732:	e01b      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800473a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	601a      	str	r2, [r3, #0]
	break;
 8004740:	e014      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004748:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	601a      	str	r2, [r3, #0]
	break;
 800474e:	e00d      	b.n	800476c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004756:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	601a      	str	r2, [r3, #0]
	break;
 800475c:	e006      	b.n	800476c <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004764:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004766:	23fc      	movs	r3, #252	; 0xfc
 8004768:	75fb      	strb	r3, [r7, #23]
	break;
 800476a:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800476c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004770:	4618      	mov	r0, r3
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004784:	2300      	movs	r3, #0
 8004786:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2208      	movs	r2, #8
 800478c:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	220b      	movs	r2, #11
 8004792:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800479a:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80047a2:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80047aa:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80047b2:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80047b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80047cc:	2300      	movs	r3, #0
 80047ce:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2212      	movs	r2, #18
 80047da:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	220f      	movs	r2, #15
 80047e0:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80047ee:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	220c      	movs	r2, #12
 80047f4:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80047f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004810:	2300      	movs	r3, #0
 8004812:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	895b      	ldrh	r3, [r3, #10]
 8004818:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	895b      	ldrh	r3, [r3, #10]
 8004836:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2240      	movs	r2, #64	; 0x40
 800485a:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10d      	bne.n	8004880 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d108      	bne.n	8004880 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d103      	bne.n	8004880 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2200      	movs	r2, #0
 800487c:	741a      	strb	r2, [r3, #16]
 800487e:	e002      	b.n	8004886 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2201      	movs	r2, #1
 8004884:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8004886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d114      	bne.n	80048b8 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8004892:	2b01      	cmp	r3, #1
 8004894:	d110      	bne.n	80048b8 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	7d1b      	ldrb	r3, [r3, #20]
 80048aa:	f000 ff97 	bl	80057dc <VL53L1_calc_range_ignore_threshold>
 80048ae:	4603      	mov	r3, r0
 80048b0:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	82da      	strh	r2, [r3, #22]
 80048b6:	e002      	b.n	80048be <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2200      	movs	r2, #0
 80048bc:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 80048be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b085      	sub	sp, #20
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80048d2:	2300      	movs	r3, #0
 80048d4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80048dc:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048e4:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80048ec:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80048f4:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2208      	movs	r2, #8
 80048fa:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2228      	movs	r2, #40	; 0x28
 8004900:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2209      	movs	r2, #9
 8004906:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8004908:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004920:	2300      	movs	r3, #0
 8004922:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f248 0203 	movw	r2, #32771	; 0x8003
 800492a:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f248 0201 	movw	r2, #32769	; 0x8001
 8004932:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f248 0241 	movw	r2, #32833	; 0x8041
 800493a:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	220e      	movs	r2, #14
 8004940:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	220a      	movs	r2, #10
 8004946:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2206      	movs	r2, #6
 800494c:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	220e      	movs	r2, #14
 8004952:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	220a      	movs	r2, #10
 8004958:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2206      	movs	r2, #6
 800495e:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2221      	movs	r2, #33	; 0x21
 800496a:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800497e:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8004986:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800498e:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	22c0      	movs	r2, #192	; 0xc0
 8004994:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	22c0      	movs	r2, #192	; 0xc0
 800499a:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	22c0      	movs	r2, #192	; 0xc0
 80049a0:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2208      	movs	r2, #8
 80049a6:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2210      	movs	r2, #16
 80049ac:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2202      	movs	r2, #2
 80049ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80049dc:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80049e4:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f248 0230 	movw	r2, #32816	; 0x8030
 80049ec:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049fc:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a04:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f24f 6218 	movw	r2, #63000	; 0xf618
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004a14:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004a22:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8004a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004a4c:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2211      	movs	r2, #17
 8004a8e:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2202      	movs	r2, #2
 8004a94:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	22ff      	movs	r2, #255	; 0xff
 8004ae4:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2200      	movs	r2, #0
 8004b12:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2220      	movs	r2, #32
 8004b18:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	220b      	movs	r2, #11
 8004b1e:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	220d      	movs	r2, #13
 8004b32:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2201      	movs	r2, #1
 8004b46:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2200      	movs	r2, #0
 8004b52:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8004b5a:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2238      	movs	r2, #56	; 0x38
 8004b66:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	22ff      	movs	r2, #255	; 0xff
 8004b6c:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2201      	movs	r2, #1
 8004b72:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	221a      	movs	r2, #26
 8004b7e:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	22cc      	movs	r2, #204	; 0xcc
 8004b96:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	220b      	movs	r2, #11
 8004b9c:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	22f5      	movs	r2, #245	; 0xf5
 8004ba8:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2209      	movs	r2, #9
 8004bae:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2208      	movs	r2, #8
 8004bc4:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2278      	movs	r2, #120	; 0x78
 8004bca:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2200      	movs	r2, #0
 8004be2:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2200      	movs	r2, #0
 8004be8:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2200      	movs	r2, #0
 8004bee:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	220b      	movs	r2, #11
 8004bfe:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2209      	movs	r2, #9
 8004c04:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	22c7      	movs	r2, #199	; 0xc7
 8004c34:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	22ff      	movs	r2, #255	; 0xff
 8004c3a:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	22db      	movs	r2, #219	; 0xdb
 8004c40:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2202      	movs	r2, #2
 8004c46:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	2201      	movs	r2, #1
 8004c52:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	2201      	movs	r2, #1
 8004c58:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	2221      	movs	r2, #33	; 0x21
 8004c5e:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8004c60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	9301      	str	r3, [sp, #4]
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff fecf 	bl	8004a34 <VL53L1_preset_mode_standard_ranging>
 8004c96:	4603      	mov	r3, r0
 8004c98:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d121      	bne.n	8004ce6 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2205      	movs	r2, #5
 8004cac:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2238      	movs	r2, #56	; 0x38
 8004cc8:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2207      	movs	r2, #7
 8004cce:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2205      	movs	r2, #5
 8004cd4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8004ce6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b088      	sub	sp, #32
 8004cf6:	af02      	add	r7, sp, #8
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
 8004cfe:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7ff fe8e 	bl	8004a34 <VL53L1_preset_mode_standard_ranging>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004d1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d121      	bne.n	8004d68 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	220f      	movs	r2, #15
 8004d28:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	220d      	movs	r2, #13
 8004d2e:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2208      	movs	r2, #8
 8004d44:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	22b8      	movs	r2, #184	; 0xb8
 8004d4a:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	220f      	movs	r2, #15
 8004d50:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	220d      	movs	r2, #13
 8004d56:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8004d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d82:	2300      	movs	r3, #0
 8004d84:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	9301      	str	r3, [sp, #4]
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	68b9      	ldr	r1, [r7, #8]
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff fe4d 	bl	8004a34 <VL53L1_preset_mode_standard_ranging>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d105      	bne.n	8004db2 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2202      	movs	r2, #2
 8004daa:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	223b      	movs	r2, #59	; 0x3b
 8004db0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8004db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b088      	sub	sp, #32
 8004dc2:	af02      	add	r7, sp, #8
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]
 8004dca:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f7ff fe28 	bl	8004a34 <VL53L1_preset_mode_standard_ranging>
 8004de4:	4603      	mov	r3, r0
 8004de6:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004de8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d105      	bne.n	8004dfc <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2202      	movs	r2, #2
 8004df4:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	225b      	movs	r2, #91	; 0x5b
 8004dfa:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8004dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	9301      	str	r3, [sp, #4]
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f7ff fe03 	bl	8004a34 <VL53L1_preset_mode_standard_ranging>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d11a      	bne.n	8004e70 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	22b1      	movs	r2, #177	; 0xb1
 8004e4a:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	22d4      	movs	r2, #212	; 0xd4
 8004e56:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004e5e:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	2240      	movs	r2, #64	; 0x40
 8004e6e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8004e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	9301      	str	r3, [sp, #4]
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f7ff fee7 	bl	8004c70 <VL53L1_preset_mode_standard_ranging_short_range>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d11a      	bne.n	8004ee4 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2284      	movs	r2, #132	; 0x84
 8004ebe:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	22b1      	movs	r2, #177	; 0xb1
 8004eca:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004ed2:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	2240      	movs	r2, #64	; 0x40
 8004ee2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8004ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	9301      	str	r3, [sp, #4]
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f7ff feee 	bl	8004cf2 <VL53L1_preset_mode_standard_ranging_long_range>
 8004f16:	4603      	mov	r3, r0
 8004f18:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d11a      	bne.n	8004f58 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2200      	movs	r2, #0
 8004f26:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2297      	movs	r2, #151	; 0x97
 8004f32:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	22b1      	movs	r2, #177	; 0xb1
 8004f3e:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004f46:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	2240      	movs	r2, #64	; 0x40
 8004f56:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8004f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004f72:	2300      	movs	r3, #0
 8004f74:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	9301      	str	r3, [sp, #4]
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f7ff ff3f 	bl	8004e08 <VL53L1_preset_mode_timed_ranging>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8004f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8004f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	68b8      	ldr	r0, [r7, #8]
 8004f9c:	f000 fe83 	bl	8005ca6 <VL53L1_config_low_power_auto_mode>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8004fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff ff53 	bl	8004e7c <VL53L1_preset_mode_timed_ranging_short_range>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8004fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8004fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe4:	6839      	ldr	r1, [r7, #0]
 8004fe6:	68b8      	ldr	r0, [r7, #8]
 8004fe8:	f000 fe5d 	bl	8005ca6 <VL53L1_config_low_power_auto_mode>
 8004fec:	4603      	mov	r3, r0
 8004fee:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8004ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800500a:	2300      	movs	r3, #0
 800500c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	9301      	str	r3, [sp, #4]
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff ff67 	bl	8004ef0 <VL53L1_preset_mode_timed_ranging_long_range>
 8005022:	4603      	mov	r3, r0
 8005024:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8005026:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800502e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005030:	6839      	ldr	r1, [r7, #0]
 8005032:	68b8      	ldr	r0, [r7, #8]
 8005034:	f000 fe37 	bl	8005ca6 <VL53L1_config_low_power_auto_mode>
 8005038:	4603      	mov	r3, r0
 800503a:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800503c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005056:	2300      	movs	r3, #0
 8005058:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7ff fce3 	bl	8004a34 <VL53L1_preset_mode_standard_ranging>
 800506e:	4603      	mov	r3, r0
 8005070:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005072:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d116      	bne.n	80050a8 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2200      	movs	r2, #0
 800507e:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	22b1      	movs	r2, #177	; 0xb1
 800508a:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	22d4      	movs	r2, #212	; 0xd4
 8005096:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	2210      	movs	r2, #16
 80050a6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 80050a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80050c2:	2300      	movs	r3, #0
 80050c4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f7ff fcad 	bl	8004a34 <VL53L1_preset_mode_standard_ranging>
 80050da:	4603      	mov	r3, r0
 80050dc:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80050de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d102      	bne.n	80050ec <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	2201      	movs	r2, #1
 80050ea:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 80050ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	220a      	movs	r2, #10
 8005118:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8005122:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	332c      	adds	r3, #44	; 0x2c
 8005144:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	78fa      	ldrb	r2, [r7, #3]
 800514a:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2200      	movs	r2, #0
 8005150:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2202      	movs	r2, #2
 8005156:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2200      	movs	r2, #0
 800515c:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	78fa      	ldrb	r2, [r7, #3]
 8005162:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2200      	movs	r2, #0
 8005168:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2202      	movs	r2, #2
 800516e:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2200      	movs	r2, #0
 8005174:	71da      	strb	r2, [r3, #7]

}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800518c:	2300      	movs	r3, #0
 800518e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	332c      	adds	r3, #44	; 0x2c
 8005198:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80051a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10c      	bne.n	80051c2 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2203      	movs	r2, #3
 80051ac:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2202      	movs	r2, #2
 80051b8:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	71da      	strb	r2, [r3, #7]
 80051c0:	e060      	b.n	8005284 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	795b      	ldrb	r3, [r3, #5]
 80051c6:	2bff      	cmp	r3, #255	; 0xff
 80051c8:	d103      	bne.n	80051d2 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2280      	movs	r2, #128	; 0x80
 80051ce:	715a      	strb	r2, [r3, #5]
 80051d0:	e005      	b.n	80051de <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	795b      	ldrb	r3, [r3, #5]
 80051d6:	3301      	adds	r3, #1
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	799b      	ldrb	r3, [r3, #6]
 80051e2:	f083 0302 	eor.w	r3, r3, #2
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	791b      	ldrb	r3, [r3, #4]
 80051f0:	3b03      	subs	r3, #3
 80051f2:	2b05      	cmp	r3, #5
 80051f4:	d839      	bhi.n	800526a <VL53L1_update_ll_driver_rd_state+0xe6>
 80051f6:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <VL53L1_update_ll_driver_rd_state+0x78>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	08005215 	.word	0x08005215
 8005200:	0800526b 	.word	0x0800526b
 8005204:	0800526b 	.word	0x0800526b
 8005208:	0800523f 	.word	0x0800523f
 800520c:	0800524d 	.word	0x0800524d
 8005210:	08005255 	.word	0x08005255

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	dd03      	ble.n	800522a <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2206      	movs	r2, #6
 8005226:	711a      	strb	r2, [r3, #4]
 8005228:	e002      	b.n	8005230 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2208      	movs	r2, #8
 800522e:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	71da      	strb	r2, [r3, #7]

		break;
 800523c:	e022      	b.n	8005284 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2208      	movs	r2, #8
 8005248:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800524a:	e01b      	b.n	8005284 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2208      	movs	r2, #8
 8005250:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8005252:	e017      	b.n	8005284 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	79db      	ldrb	r3, [r3, #7]
 8005258:	f083 0301 	eor.w	r3, r3, #1
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2208      	movs	r2, #8
 8005266:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8005268:	e00c      	b.n	8005284 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2203      	movs	r2, #3
 800526e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2202      	movs	r2, #2
 800527a:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	71da      	strb	r2, [r3, #7]

		break;
 8005282:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8005284:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005288:	4618      	mov	r0, r3
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8005294:	b480      	push	{r7}
 8005296:	b089      	sub	sp, #36	; 0x24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800529c:	2300      	movs	r3, #0
 800529e:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	332c      	adds	r3, #44	; 0x2c
 80052a8:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 80052b0:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 80052c2:	f003 031f 	and.w	r3, r3, #31
 80052c6:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	78db      	ldrb	r3, [r3, #3]
 80052cc:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80052d2:	111b      	asrs	r3, r3, #4
 80052d4:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d017      	beq.n	800531a <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	791b      	ldrb	r3, [r3, #4]
 80052ee:	2b06      	cmp	r3, #6
 80052f0:	d105      	bne.n	80052fe <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2b12      	cmp	r3, #18
 80052f6:	d010      	beq.n	800531a <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 80052f8:	23ef      	movs	r3, #239	; 0xef
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e00d      	b.n	800531a <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	795b      	ldrb	r3, [r3, #5]
 8005302:	7bba      	ldrb	r2, [r7, #14]
 8005304:	429a      	cmp	r2, r3
 8005306:	d001      	beq.n	800530c <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8005308:	23ee      	movs	r3, #238	; 0xee
 800530a:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	799b      	ldrb	r3, [r3, #6]
 8005310:	7b7a      	ldrb	r2, [r7, #13]
 8005312:	429a      	cmp	r2, r3
 8005314:	d001      	beq.n	800531a <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8005316:	23ed      	movs	r3, #237	; 0xed
 8005318:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800531a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3724      	adds	r7, #36	; 0x24
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800532a:	b480      	push	{r7}
 800532c:	b087      	sub	sp, #28
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8005332:	2300      	movs	r3, #0
 8005334:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	332c      	adds	r3, #44	; 0x2c
 800533e:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8005346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10c      	bne.n	8005368 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2203      	movs	r2, #3
 8005352:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2202      	movs	r2, #2
 800535e:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	70da      	strb	r2, [r3, #3]
 8005366:	e03e      	b.n	80053e6 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	785b      	ldrb	r3, [r3, #1]
 800536c:	2bff      	cmp	r3, #255	; 0xff
 800536e:	d103      	bne.n	8005378 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2280      	movs	r2, #128	; 0x80
 8005374:	705a      	strb	r2, [r3, #1]
 8005376:	e005      	b.n	8005384 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	3301      	adds	r3, #1
 800537e:	b2da      	uxtb	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	789b      	ldrb	r3, [r3, #2]
 8005388:	f083 0302 	eor.w	r3, r3, #2
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b03      	cmp	r3, #3
 8005398:	d002      	beq.n	80053a0 <VL53L1_update_ll_driver_cfg_state+0x76>
 800539a:	2b04      	cmp	r3, #4
 800539c:	d00e      	beq.n	80053bc <VL53L1_update_ll_driver_cfg_state+0x92>
 800539e:	e015      	b.n	80053cc <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	78db      	ldrb	r3, [r3, #3]
 80053a4:	f083 0301 	eor.w	r3, r3, #1
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2204      	movs	r2, #4
 80053b8:	701a      	strb	r2, [r3, #0]
		break;
 80053ba:	e014      	b.n	80053e6 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	78db      	ldrb	r3, [r3, #3]
 80053c0:	f083 0301 	eor.w	r3, r3, #1
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	70da      	strb	r2, [r3, #3]

		break;
 80053ca:	e00c      	b.n	80053e6 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2203      	movs	r2, #3
 80053d0:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2202      	movs	r2, #2
 80053dc:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	70da      	strb	r2, [r3, #3]

		break;
 80053e4:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80053e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	7c1a      	ldrb	r2, [r3, #16]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	3301      	adds	r3, #1
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	7c52      	ldrb	r2, [r2, #17]
 8005410:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	3302      	adds	r3, #2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	7c92      	ldrb	r2, [r2, #18]
 800541a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	3303      	adds	r3, #3
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	7cd2      	ldrb	r2, [r2, #19]
 8005424:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	3304      	adds	r3, #4
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	7d12      	ldrb	r2, [r2, #20]
 800542e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	3305      	adds	r3, #5
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	7d52      	ldrb	r2, [r2, #21]
 8005438:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	3306      	adds	r3, #6
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	7d92      	ldrb	r2, [r2, #22]
 8005442:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	3307      	adds	r3, #7
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	7dd2      	ldrb	r2, [r2, #23]
 800544c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	7e12      	ldrb	r2, [r2, #24]
 8005456:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	3309      	adds	r3, #9
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	7e52      	ldrb	r2, [r2, #25]
 8005460:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	330a      	adds	r3, #10
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	7e92      	ldrb	r2, [r2, #26]
 800546a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	330b      	adds	r3, #11
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	7ed2      	ldrb	r2, [r2, #27]
 8005474:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	7f12      	ldrb	r2, [r2, #28]
 800547e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	330d      	adds	r3, #13
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	7f52      	ldrb	r2, [r2, #29]
 8005488:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	330e      	adds	r3, #14
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	7f92      	ldrb	r2, [r2, #30]
 8005492:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	330f      	adds	r3, #15
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	7fd2      	ldrb	r2, [r2, #31]
 800549c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	3310      	adds	r3, #16
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80054a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	3311      	adds	r3, #17
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80054b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	3312      	adds	r3, #18
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80054c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	3313      	adds	r3, #19
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 80054cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	3314      	adds	r3, #20
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80054d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	3315      	adds	r3, #21
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80054e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	3316      	adds	r3, #22
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 80054f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	3317      	adds	r3, #23
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80054fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	3318      	adds	r3, #24
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8005508:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	3319      	adds	r3, #25
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8005514:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	331a      	adds	r3, #26
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8005520:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	331b      	adds	r3, #27
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800552c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	331c      	adds	r3, #28
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005538:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	331d      	adds	r3, #29
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005544:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	331e      	adds	r3, #30
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8005550:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	331f      	adds	r3, #31
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800555c:	701a      	strb	r2, [r3, #0]
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800556a:	b480      	push	{r7}
 800556c:	b085      	sub	sp, #20
 800556e:	af00      	add	r7, sp, #0
 8005570:	4603      	mov	r3, r0
 8005572:	603a      	str	r2, [r7, #0]
 8005574:	80fb      	strh	r3, [r7, #6]
 8005576:	460b      	mov	r3, r1
 8005578:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8005586:	2300      	movs	r3, #0
 8005588:	81fb      	strh	r3, [r7, #14]
 800558a:	e00e      	b.n	80055aa <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800558c:	88ba      	ldrh	r2, [r7, #4]
 800558e:	89fb      	ldrh	r3, [r7, #14]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	3b01      	subs	r3, #1
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	4413      	add	r3, r2
 8005598:	89ba      	ldrh	r2, [r7, #12]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800559e:	89bb      	ldrh	r3, [r7, #12]
 80055a0:	0a1b      	lsrs	r3, r3, #8
 80055a2:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 80055a4:	89fb      	ldrh	r3, [r7, #14]
 80055a6:	3301      	adds	r3, #1
 80055a8:	81fb      	strh	r3, [r7, #14]
 80055aa:	89fa      	ldrh	r2, [r7, #14]
 80055ac:	88bb      	ldrh	r3, [r7, #4]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d3ec      	bcc.n	800558c <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 80055b2:	bf00      	nop
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80055be:	b480      	push	{r7}
 80055c0:	b085      	sub	sp, #20
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	4603      	mov	r3, r0
 80055c6:	6039      	str	r1, [r7, #0]
 80055c8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 80055ca:	2300      	movs	r3, #0
 80055cc:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 80055ce:	e00a      	b.n	80055e6 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 80055d0:	89fb      	ldrh	r3, [r7, #14]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	b21a      	sxth	r2, r3
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	1c59      	adds	r1, r3, #1
 80055da:	6039      	str	r1, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	b21b      	sxth	r3, r3
 80055e0:	4313      	orrs	r3, r2
 80055e2:	b21b      	sxth	r3, r3
 80055e4:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	1e5a      	subs	r2, r3, #1
 80055ea:	80fa      	strh	r2, [r7, #6]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1ef      	bne.n	80055d0 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 80055f0:	89fb      	ldrh	r3, [r7, #14]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80055fe:	b480      	push	{r7}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	4603      	mov	r3, r0
 8005606:	603a      	str	r2, [r7, #0]
 8005608:	80fb      	strh	r3, [r7, #6]
 800560a:	460b      	mov	r3, r1
 800560c:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800561a:	2300      	movs	r3, #0
 800561c:	81fb      	strh	r3, [r7, #14]
 800561e:	e00f      	b.n	8005640 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8005620:	88ba      	ldrh	r2, [r7, #4]
 8005622:	89fb      	ldrh	r3, [r7, #14]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	4413      	add	r3, r2
 800562c:	89ba      	ldrh	r2, [r7, #12]
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8005632:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005636:	121b      	asrs	r3, r3, #8
 8005638:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800563a:	89fb      	ldrh	r3, [r7, #14]
 800563c:	3301      	adds	r3, #1
 800563e:	81fb      	strh	r3, [r7, #14]
 8005640:	89fa      	ldrh	r2, [r7, #14]
 8005642:	88bb      	ldrh	r3, [r7, #4]
 8005644:	429a      	cmp	r2, r3
 8005646:	d3eb      	bcc.n	8005620 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	6039      	str	r1, [r7, #0]
 800565e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 8005660:	2300      	movs	r3, #0
 8005662:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	b25b      	sxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	da0e      	bge.n	800568c <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800566e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005672:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 8005674:	e00a      	b.n	800568c <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8005676:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	b21a      	sxth	r2, r3
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	1c59      	adds	r1, r3, #1
 8005682:	6039      	str	r1, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	b21b      	sxth	r3, r3
 8005688:	4313      	orrs	r3, r2
 800568a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800568c:	88fb      	ldrh	r3, [r7, #6]
 800568e:	1e5a      	subs	r2, r3, #1
 8005690:	80fa      	strh	r2, [r7, #6]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1ef      	bne.n	8005676 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 8005696:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b087      	sub	sp, #28
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	460b      	mov	r3, r1
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 80056c0:	2300      	movs	r3, #0
 80056c2:	82fb      	strh	r3, [r7, #22]
 80056c4:	e00e      	b.n	80056e4 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 80056c6:	897a      	ldrh	r2, [r7, #10]
 80056c8:	8afb      	ldrh	r3, [r7, #22]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	0a1b      	lsrs	r3, r3, #8
 80056dc:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 80056de:	8afb      	ldrh	r3, [r7, #22]
 80056e0:	3301      	adds	r3, #1
 80056e2:	82fb      	strh	r3, [r7, #22]
 80056e4:	8afa      	ldrh	r2, [r7, #22]
 80056e6:	897b      	ldrh	r3, [r7, #10]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d3ec      	bcc.n	80056c6 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4603      	mov	r3, r0
 8005700:	6039      	str	r1, [r7, #0]
 8005702:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 8005708:	e007      	b.n	800571a <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	021a      	lsls	r2, r3, #8
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	1c59      	adds	r1, r3, #1
 8005712:	6039      	str	r1, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	1e5a      	subs	r2, r3, #1
 800571e:	80fa      	strh	r2, [r7, #6]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f2      	bne.n	800570a <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 8005724:	68fb      	ldr	r3, [r7, #12]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	4603      	mov	r3, r0
 800573a:	6039      	str	r1, [r7, #0]
 800573c:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	b25b      	sxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	da0b      	bge.n	8005764 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800574c:	f04f 33ff 	mov.w	r3, #4294967295
 8005750:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 8005752:	e007      	b.n	8005764 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	021a      	lsls	r2, r3, #8
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	1c59      	adds	r1, r3, #1
 800575c:	6039      	str	r1, [r7, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8005764:	88fb      	ldrh	r3, [r7, #6]
 8005766:	1e5a      	subs	r2, r3, #1
 8005768:	80fa      	strh	r2, [r7, #6]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1f2      	bne.n	8005754 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800576e:	68fb      	ldr	r3, [r7, #12]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	460a      	mov	r2, r1
 8005786:	80fb      	strh	r3, [r7, #6]
 8005788:	4613      	mov	r3, r2
 800578a:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fb5f 	bl	8005e5e <VL53L1_calc_pll_period_us>
 80057a0:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 80057a2:	797b      	ldrb	r3, [r7, #5]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fb6e 	bl	8005e86 <VL53L1_decode_vcsel_period>
 80057aa:	4603      	mov	r3, r0
 80057ac:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4613      	mov	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	4413      	add	r3, r2
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	099b      	lsrs	r3, r3, #6
 80057be:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 80057c0:	7cfa      	ldrb	r2, [r7, #19]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	fb02 f303 	mul.w	r3, r2, r3
 80057c8:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	099b      	lsrs	r3, r3, #6
 80057ce:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 80057d0:	68fb      	ldr	r3, [r7, #12]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 80057dc:	b480      	push	{r7}
 80057de:	b089      	sub	sp, #36	; 0x24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	4608      	mov	r0, r1
 80057e6:	4611      	mov	r1, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	817b      	strh	r3, [r7, #10]
 80057ee:	460b      	mov	r3, r1
 80057f0:	813b      	strh	r3, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	4a23      	ldr	r2, [pc, #140]	; (800589c <VL53L1_calc_range_ignore_threshold+0xc0>)
 8005810:	fb82 1203 	smull	r1, r2, r2, r3
 8005814:	1192      	asrs	r2, r2, #6
 8005816:	17db      	asrs	r3, r3, #31
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800581c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005820:	2b00      	cmp	r3, #0
 8005822:	da03      	bge.n	800582c <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8005824:	897b      	ldrh	r3, [r7, #10]
 8005826:	425b      	negs	r3, r3
 8005828:	b29b      	uxth	r3, r3
 800582a:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800582c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	da03      	bge.n	800583c <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8005834:	893b      	ldrh	r3, [r7, #8]
 8005836:	425b      	negs	r3, r3
 8005838:	b29b      	uxth	r3, r3
 800583a:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800583c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005840:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005844:	4413      	add	r3, r2
 8005846:	015b      	lsls	r3, r3, #5
 8005848:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	4a13      	ldr	r2, [pc, #76]	; (800589c <VL53L1_calc_range_ignore_threshold+0xc0>)
 800584e:	fb82 1203 	smull	r1, r2, r2, r3
 8005852:	1192      	asrs	r2, r2, #6
 8005854:	17db      	asrs	r3, r3, #31
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	4413      	add	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8005862:	79fa      	ldrb	r2, [r7, #7]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	3310      	adds	r3, #16
 8005870:	2b00      	cmp	r3, #0
 8005872:	da00      	bge.n	8005876 <VL53L1_calc_range_ignore_threshold+0x9a>
 8005874:	331f      	adds	r3, #31
 8005876:	115b      	asrs	r3, r3, #5
 8005878:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005880:	db03      	blt.n	800588a <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8005882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005886:	83fb      	strh	r3, [r7, #30]
 8005888:	e001      	b.n	800588e <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800588e:	8bfb      	ldrh	r3, [r7, #30]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3724      	adds	r7, #36	; 0x24
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	10624dd3 	.word	0x10624dd3

080058a0 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	031a      	lsls	r2, r3, #12
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	441a      	add	r2, r3
	timeout_mclks   =
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80058be:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 80058c0:	68fb      	ldr	r3, [r7, #12]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff ffdc 	bl	80058a0 <VL53L1_calc_timeout_mclks>
 80058e8:	60f8      	str	r0, [r7, #12]
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);

	timeout_encoded =
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 f85d 	bl	80059aa <VL53L1_encode_timeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 80058f4:	897b      	ldrh	r3, [r7, #10]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 80058fe:	b4b0      	push	{r4, r5, r7}
 8005900:	b087      	sub	sp, #28
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	f04f 0400 	mov.w	r4, #0
 8005914:	e9c7 3402 	strd	r3, r4, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4619      	mov	r1, r3
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	f04f 0400 	mov.w	r4, #0
 8005926:	fb03 f502 	mul.w	r5, r3, r2
 800592a:	fb01 f004 	mul.w	r0, r1, r4
 800592e:	4428      	add	r0, r5
 8005930:	fba1 3403 	umull	r3, r4, r1, r3
 8005934:	1902      	adds	r2, r0, r4
 8005936:	4614      	mov	r4, r2
 8005938:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800593c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	tmp += 0x00800;
 8005940:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005944:	f513 6100 	adds.w	r1, r3, #2048	; 0x800
 8005948:	f144 0200 	adc.w	r2, r4, #0
 800594c:	e9c7 1202 	strd	r1, r2, [r7, #8]
	tmp  = tmp >> 12;
 8005950:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	f04f 0400 	mov.w	r4, #0
 800595c:	0b0b      	lsrs	r3, r1, #12
 800595e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005962:	0b14      	lsrs	r4, r2, #12
 8005964:	e9c7 3402 	strd	r3, r4, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800596c:	697b      	ldr	r3, [r7, #20]
}
 800596e:	4618      	mov	r0, r3
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	bcb0      	pop	{r4, r5, r7}
 8005976:	4770      	bx	lr

08005978 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	4603      	mov	r3, r0
 8005980:	6039      	str	r1, [r7, #0]
 8005982:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f837 	bl	8005a02 <VL53L1_decode_timeout>
 8005994:	60f8      	str	r0, [r7, #12]
		VL53L1_decode_timeout(timeout_encoded);

	timeout_us    =
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f7ff ffb0 	bl	80058fe <VL53L1_calc_timeout_us>
 800599e:	60b8      	str	r0, [r7, #8]
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);

	LOG_FUNCTION_END(0);

	return timeout_us;
 80059a0:	68bb      	ldr	r3, [r7, #8]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b087      	sub	sp, #28
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d017      	beq.n	80059f4 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80059ca:	e005      	b.n	80059d8 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80059d2:	89fb      	ldrh	r3, [r7, #14]
 80059d4:	3301      	adds	r3, #1
 80059d6:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f4      	bne.n	80059cc <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80059e2:	89fb      	ldrh	r3, [r7, #14]
 80059e4:	021b      	lsls	r3, r3, #8
 80059e6:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80059f0:	4413      	add	r3, r2
 80059f2:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80059f4:	8afb      	ldrh	r3, [r7, #22]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	4603      	mov	r3, r0
 8005a0a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005a14:	88fa      	ldrh	r2, [r7, #6]
 8005a16:	0a12      	lsrs	r2, r2, #8
 8005a18:	b292      	uxth	r2, r2
 8005a1a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005a20:	68fb      	ldr	r3, [r7, #12]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b088      	sub	sp, #32
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8005a4c:	887b      	ldrh	r3, [r7, #2]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d102      	bne.n	8005a58 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005a52:	23f1      	movs	r3, #241	; 0xf1
 8005a54:	77fb      	strb	r3, [r7, #31]
 8005a56:	e05d      	b.n	8005b14 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	799a      	ldrb	r2, [r3, #6]
		macro_period_us =
 8005a5c:	887b      	ldrh	r3, [r7, #2]
 8005a5e:	4611      	mov	r1, r2
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fe8b 	bl	800577c <VL53L1_calc_macro_period_us>
 8005a66:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
 8005a68:	6979      	ldr	r1, [r7, #20]
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f7ff ff18 	bl	80058a0 <VL53L1_calc_timeout_mclks>
 8005a70:	61b8      	str	r0, [r7, #24]
			VL53L1_calc_timeout_mclks(
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	2bff      	cmp	r3, #255	; 0xff
 8005a76:	d901      	bls.n	8005a7c <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8005a78:	23ff      	movs	r3, #255	; 0xff
 8005a7a:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
 8005a84:	6979      	ldr	r1, [r7, #20]
 8005a86:	68b8      	ldr	r0, [r7, #8]
 8005a88:	f7ff ff21 	bl	80058ce <VL53L1_calc_encoded_timeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	827b      	strh	r3, [r7, #18]
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005a90:	8a7b      	ldrh	r3, [r7, #18]
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8005a9c:	8a7b      	ldrh	r3, [r7, #18]
 8005a9e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
 8005aa4:	6979      	ldr	r1, [r7, #20]
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff ff11 	bl	80058ce <VL53L1_calc_encoded_timeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	827b      	strh	r3, [r7, #18]
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005ab0:	8a7b      	ldrh	r3, [r7, #18]
 8005ab2:	0a1b      	lsrs	r3, r3, #8
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8005ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aba:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8005abc:	8a7b      	ldrh	r3, [r7, #18]
 8005abe:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8005ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac2:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	7a5a      	ldrb	r2, [r3, #9]
		macro_period_us =
 8005ac8:	887b      	ldrh	r3, [r7, #2]
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fe55 	bl	800577c <VL53L1_calc_macro_period_us>
 8005ad2:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
 8005ad4:	6979      	ldr	r1, [r7, #20]
 8005ad6:	68b8      	ldr	r0, [r7, #8]
 8005ad8:	f7ff fef9 	bl	80058ce <VL53L1_calc_encoded_timeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	827b      	strh	r3, [r7, #18]
				VL53L1_calc_encoded_timeout(
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005ae0:	8a7b      	ldrh	r3, [r7, #18]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8005aec:	8a7b      	ldrh	r3, [r7, #18]
 8005aee:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8005af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af2:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 8005af4:	6979      	ldr	r1, [r7, #20]
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff fee9 	bl	80058ce <VL53L1_calc_encoded_timeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005b00:	8a7b      	ldrh	r3, [r7, #18]
 8005b02:	0a1b      	lsrs	r3, r3, #8
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8005b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8005b0c:	8a7b      	ldrh	r3, [r7, #18]
 8005b0e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8005b14:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3720      	adds	r7, #32
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	603a      	str	r2, [r7, #0]
 8005b2a:	71fb      	strb	r3, [r7, #7]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	2b07      	cmp	r3, #7
 8005b34:	d90a      	bls.n	8005b4c <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8005b36:	79bb      	ldrb	r3, [r7, #6]
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	3b71      	subs	r3, #113	; 0x71
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 8005b4a:	e00a      	b.n	8005b62 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8005b4c:	79bb      	ldrb	r3, [r7, #6]
 8005b4e:	f1c3 030f 	rsb	r3, r3, #15
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	701a      	strb	r2, [r3, #0]
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	4603      	mov	r3, r0
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
 8005b7a:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	091b      	lsrs	r3, r3, #4
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	701a      	strb	r2, [r3, #0]

}
 8005b92:	bf00      	nop
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	603a      	str	r2, [r7, #0]
 8005ba8:	71fb      	strb	r3, [r7, #7]
 8005baa:	460b      	mov	r3, r1
 8005bac:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8005bae:	79bb      	ldrb	r3, [r7, #6]
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	701a      	strb	r2, [r3, #0]

}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2203      	movs	r2, #3
 8005bde:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 8005c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	22ff      	movs	r2, #255	; 0xff
 8005c46:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <VL53L1_low_power_auto_data_stop_range+0x46>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_nvm.vhv_config__init =
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <VL53L1_low_power_auto_data_stop_range+0x5c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
 8005c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b087      	sub	sp, #28
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	228b      	movs	r2, #139	; 0x8b
 8005cc6:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8005cce:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 8005cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 8005d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8005d36:	4413      	add	r3, r2
 8005d38:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 8005d60:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]

	/*
	 * Do a DSS calculation and update manual config
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8b3 31de 	ldrh.w	r3, [r3, #478]	; 0x1de
 8005d86:	461a      	mov	r2, r3
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	; 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8005d8e:	4413      	add	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d98:	d302      	bcc.n	8005da0 <VL53L1_low_power_auto_update_DSS+0x30>
		utemp32a = 0xFFFF;
 8005d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d9e:	613b      	str	r3, [r7, #16]

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	041b      	lsls	r3, r3, #16
 8005da4:	613b      	str	r3, [r7, #16]

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d102      	bne.n	8005db6 <VL53L1_low_power_auto_update_DSS+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005db0:	23f1      	movs	r3, #241	; 0xf1
 8005db2:	75fb      	strb	r3, [r7, #23]
 8005db4:	e035      	b.n	8005e22 <VL53L1_low_power_auto_update_DSS+0xb2>
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 8005dbc:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8005dd4:	041b      	lsls	r3, r3, #16
 8005dd6:	613b      	str	r3, [r7, #16]
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d102      	bne.n	8005de8 <VL53L1_low_power_auto_update_DSS+0x78>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005de2:	23f1      	movs	r3, #241	; 0xf1
 8005de4:	75fb      	strb	r3, [r7, #23]
 8005de6:	e01c      	b.n	8005e22 <VL53L1_low_power_auto_update_DSS+0xb2>
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
			utemp32a = utemp32a /
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df4:	613b      	str	r3, [r7, #16]

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfc:	d302      	bcc.n	8005e04 <VL53L1_low_power_auto_update_DSS+0x94>
				utemp32a = 0xFFFF;
 8005dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e02:	613b      	str	r3, [r7, #16]

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
				pdev->low_power_auto_data.dss__required_spads;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	; 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
			pdev->gen_cfg.dss_config__roi_mode_control =
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 8005e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e26:	f113 0f0f 	cmn.w	r3, #15
 8005e2a:	d110      	bne.n	8005e4e <VL53L1_low_power_auto_update_DSS+0xde>
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005e32:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	; 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2202      	movs	r2, #2
 8005e46:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		/* reset error */
		status = VL53L1_ERROR_NONE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 8005e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	4603      	mov	r3, r0
 8005e66:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8005e6c:	88fb      	ldrh	r3, [r7, #6]
 8005e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e72:	fb92 f3f3 	sdiv	r3, r2, r3
 8005e76:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 8005e78:	68fb      	ldr	r3, [r7, #12]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	3301      	adds	r3, #1
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8005eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	da10      	bge.n	8005ee4 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	3308      	adds	r3, #8
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	3b80      	subs	r3, #128	; 0x80
 8005eda:	10db      	asrs	r3, r3, #3
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8005ee2:	e00c      	b.n	8005efe <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8005ef6:	10db      	asrs	r3, r3, #3
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	701a      	strb	r2, [r3, #0]
}
 8005efe:	bf00      	nop
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b086      	sub	sp, #24
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	460b      	mov	r3, r1
 8005f14:	607a      	str	r2, [r7, #4]
 8005f16:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8005f1c:	897b      	ldrh	r3, [r7, #10]
 8005f1e:	2b0a      	cmp	r3, #10
 8005f20:	d802      	bhi.n	8005f28 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005f22:	f06f 0309 	mvn.w	r3, #9
 8005f26:	e047      	b.n	8005fb8 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f30:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8005f3e:	f002 020f 	and.w	r2, r2, #15
 8005f42:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8005f44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8005f4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f52:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8005f54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8005f5e:	f002 0203 	and.w	r2, r2, #3
 8005f62:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8005f64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8005f6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f72:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8005f74:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	88d8      	ldrh	r0, [r3, #6]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3305      	adds	r3, #5
 8005f7e:	461a      	mov	r2, r3
 8005f80:	2102      	movs	r1, #2
 8005f82:	f7ff faf2 	bl	800556a <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8005f8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8005f98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8005fa2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005fa6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8005fa8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8005fb2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8005fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8005fd2:	89fb      	ldrh	r3, [r7, #14]
 8005fd4:	2b0a      	cmp	r3, #10
 8005fd6:	d802      	bhi.n	8005fde <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005fd8:	f06f 0309 	mvn.w	r3, #9
 8005fdc:	e046      	b.n	800606c <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe6:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	3302      	adds	r3, #2
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006006:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	3303      	adds	r3, #3
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	3304      	adds	r3, #4
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006026:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	3305      	adds	r3, #5
 8006030:	4619      	mov	r1, r3
 8006032:	2002      	movs	r0, #2
 8006034:	f7ff fac3 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006038:	4603      	mov	r3, r0
 800603a:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	79da      	ldrb	r2, [r3, #7]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	7a1a      	ldrb	r2, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	3309      	adds	r3, #9
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800605a:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	7a9a      	ldrb	r2, [r3, #10]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8006068:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800607e:	2300      	movs	r3, #0
 8006080:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8006082:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d108      	bne.n	800609c <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800608a:	f107 020c 	add.w	r2, r7, #12
 800608e:	230b      	movs	r3, #11
 8006090:	2101      	movs	r1, #1
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 f8b4 	bl	8007200 <VL53L1_ReadMulti>
 8006098:	4603      	mov	r3, r0
 800609a:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800609c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d108      	bne.n	80060b6 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80060a4:	f107 030c 	add.w	r3, r7, #12
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	4619      	mov	r1, r3
 80060ac:	200b      	movs	r0, #11
 80060ae:	f7ff ff87 	bl	8005fc0 <VL53L1_i2c_decode_static_nvm_managed>
 80060b2:	4603      	mov	r3, r0
 80060b4:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80060b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b086      	sub	sp, #24
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	460b      	mov	r3, r1
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80060d0:	2300      	movs	r3, #0
 80060d2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80060d4:	897b      	ldrh	r3, [r7, #10]
 80060d6:	2b16      	cmp	r3, #22
 80060d8:	d802      	bhi.n	80060e0 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80060da:	f06f 0309 	mvn.w	r3, #9
 80060de:	e076      	b.n	80061ce <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80060f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80060fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8006104:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800610e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8006118:	f002 020f 	and.w	r2, r2, #15
 800611c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800611e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8006128:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8006132:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006136:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8006138:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8006142:	f002 0203 	and.w	r2, r2, #3
 8006146:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8006148:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8958      	ldrh	r0, [r3, #10]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3309      	adds	r3, #9
 8006152:	461a      	mov	r2, r3
 8006154:	2102      	movs	r1, #2
 8006156:	f7ff fa08 	bl	800556a <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	330b      	adds	r3, #11
 8006164:	461a      	mov	r2, r3
 8006166:	2102      	movs	r1, #2
 8006168:	f7ff fa49 	bl	80055fe <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	330d      	adds	r3, #13
 8006176:	461a      	mov	r2, r3
 8006178:	2102      	movs	r1, #2
 800617a:	f7ff fa40 	bl	80055fe <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8a18      	ldrh	r0, [r3, #16]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	330f      	adds	r3, #15
 8006186:	461a      	mov	r2, r3
 8006188:	2102      	movs	r1, #2
 800618a:	f7ff f9ee 	bl	800556a <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8006194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006198:	b218      	sxth	r0, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3311      	adds	r3, #17
 800619e:	461a      	mov	r2, r3
 80061a0:	2102      	movs	r1, #2
 80061a2:	f7ff fa2c 	bl	80055fe <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3313      	adds	r3, #19
 80061b0:	461a      	mov	r2, r3
 80061b2:	2102      	movs	r1, #2
 80061b4:	f7ff fa23 	bl	80055fe <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3315      	adds	r3, #21
 80061c2:	461a      	mov	r2, r3
 80061c4:	2102      	movs	r1, #2
 80061c6:	f7ff fa1a 	bl	80055fe <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 80061ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b086      	sub	sp, #24
 80061da:	af00      	add	r7, sp, #0
 80061dc:	4603      	mov	r3, r0
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	607a      	str	r2, [r7, #4]
 80061e2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80061e4:	2300      	movs	r3, #0
 80061e6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80061e8:	89fb      	ldrh	r3, [r7, #14]
 80061ea:	2b16      	cmp	r3, #22
 80061ec:	d802      	bhi.n	80061f4 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80061ee:	f06f 0309 	mvn.w	r3, #9
 80061f2:	e079      	b.n	80062e8 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	785a      	ldrb	r2, [r3, #1]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	789a      	ldrb	r2, [r3, #2]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	78da      	ldrb	r2, [r3, #3]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	791a      	ldrb	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	3305      	adds	r3, #5
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	799a      	ldrb	r2, [r3, #6]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	3307      	adds	r3, #7
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	3308      	adds	r3, #8
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	3309      	adds	r3, #9
 8006258:	4619      	mov	r1, r3
 800625a:	2002      	movs	r0, #2
 800625c:	f7ff f9af 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006260:	4603      	mov	r3, r0
 8006262:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	330b      	adds	r3, #11
 800626c:	4619      	mov	r1, r3
 800626e:	2002      	movs	r0, #2
 8006270:	f7ff f9f0 	bl	8005654 <VL53L1_i2c_decode_int16_t>
 8006274:	4603      	mov	r3, r0
 8006276:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	330d      	adds	r3, #13
 8006280:	4619      	mov	r1, r3
 8006282:	2002      	movs	r0, #2
 8006284:	f7ff f9e6 	bl	8005654 <VL53L1_i2c_decode_int16_t>
 8006288:	4603      	mov	r3, r0
 800628a:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	330f      	adds	r3, #15
 8006294:	4619      	mov	r1, r3
 8006296:	2002      	movs	r0, #2
 8006298:	f7ff f991 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 800629c:	4603      	mov	r3, r0
 800629e:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	3311      	adds	r3, #17
 80062a8:	4619      	mov	r1, r3
 80062aa:	2002      	movs	r0, #2
 80062ac:	f7ff f9d2 	bl	8005654 <VL53L1_i2c_decode_int16_t>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062b6:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	3313      	adds	r3, #19
 80062c0:	4619      	mov	r1, r3
 80062c2:	2002      	movs	r0, #2
 80062c4:	f7ff f9c6 	bl	8005654 <VL53L1_i2c_decode_int16_t>
 80062c8:	4603      	mov	r3, r0
 80062ca:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	3315      	adds	r3, #21
 80062d4:	4619      	mov	r1, r3
 80062d6:	2002      	movs	r0, #2
 80062d8:	f7ff f9bc 	bl	8005654 <VL53L1_i2c_decode_int16_t>
 80062dc:	4603      	mov	r3, r0
 80062de:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80062e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80062fa:	2300      	movs	r3, #0
 80062fc:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80062fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d108      	bne.n	8006318 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8006306:	f107 0208 	add.w	r2, r7, #8
 800630a:	2317      	movs	r3, #23
 800630c:	210d      	movs	r1, #13
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 ff76 	bl	8007200 <VL53L1_ReadMulti>
 8006314:	4603      	mov	r3, r0
 8006316:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8006318:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d108      	bne.n	8006332 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8006320:	f107 0308 	add.w	r3, r7, #8
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	4619      	mov	r1, r3
 8006328:	2017      	movs	r0, #23
 800632a:	f7ff ff54 	bl	80061d6 <VL53L1_i2c_decode_customer_nvm_managed>
 800632e:	4603      	mov	r3, r0
 8006330:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8006332:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3720      	adds	r7, #32
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b086      	sub	sp, #24
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	460b      	mov	r3, r1
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800634c:	2300      	movs	r3, #0
 800634e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8006350:	897b      	ldrh	r3, [r7, #10]
 8006352:	2b1f      	cmp	r3, #31
 8006354:	d802      	bhi.n	800635c <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006356:	f06f 0309 	mvn.w	r3, #9
 800635a:	e0cf      	b.n	80064fc <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	2102      	movs	r1, #2
 8006364:	4618      	mov	r0, r3
 8006366:	f7ff f900 	bl	800556a <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8006372:	f002 0201 	and.w	r2, r2, #1
 8006376:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8006378:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8006382:	f002 020f 	and.w	r2, r2, #15
 8006386:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8006388:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8006392:	f002 020f 	and.w	r2, r2, #15
 8006396:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8006398:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 80063a2:	f002 021f 	and.w	r2, r2, #31
 80063a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80063a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80063b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063b6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80063b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80063c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80063c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80063d2:	f002 0201 	and.w	r2, r2, #1
 80063d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80063d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80063e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80063ec:	f002 0201 	and.w	r2, r2, #1
 80063f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80063f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80063fc:	f002 0203 	and.w	r2, r2, #3
 8006400:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8006402:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800640c:	f002 021f 	and.w	r2, r2, #31
 8006410:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8006412:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800641c:	f002 0203 	and.w	r2, r2, #3
 8006420:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8006422:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800642c:	f002 0203 	and.w	r2, r2, #3
 8006430:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8006432:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800643c:	f002 0207 	and.w	r2, r2, #7
 8006440:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8006442:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800644c:	f002 021f 	and.w	r2, r2, #31
 8006450:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8006452:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800645c:	f002 0201 	and.w	r2, r2, #1
 8006460:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8006462:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800646c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8006476:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8006480:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800648a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8006494:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800649e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8b18      	ldrh	r0, [r3, #24]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3318      	adds	r3, #24
 80064a8:	461a      	mov	r2, r3
 80064aa:	2102      	movs	r1, #2
 80064ac:	f7ff f85d 	bl	800556a <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 80064b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 80064c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 80064cc:	f002 020f 	and.w	r2, r2, #15
 80064d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80064d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80064dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 80064e6:	f002 020f 	and.w	r2, r2, #15
 80064ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80064ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 80064f6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80064f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	460b      	mov	r3, r1
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8006516:	897b      	ldrh	r3, [r7, #10]
 8006518:	2b15      	cmp	r3, #21
 800651a:	d802      	bhi.n	8006522 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800651c:	f06f 0309 	mvn.w	r3, #9
 8006520:	e070      	b.n	8006604 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8006532:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800653c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8006546:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800654a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800654c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8006552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006556:	b298      	uxth	r0, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3304      	adds	r3, #4
 800655c:	461a      	mov	r2, r3
 800655e:	2102      	movs	r1, #2
 8006560:	f7ff f803 	bl	800556a <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800656c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006570:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8006572:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800657c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8006586:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8006590:	f002 0201 	and.w	r2, r2, #1
 8006594:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8006596:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 80065a0:	f002 0207 	and.w	r2, r2, #7
 80065a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80065a6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8998      	ldrh	r0, [r3, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	330c      	adds	r3, #12
 80065b0:	461a      	mov	r2, r3
 80065b2:	2102      	movs	r1, #2
 80065b4:	f7fe ffd9 	bl	800556a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	89d8      	ldrh	r0, [r3, #14]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	330e      	adds	r3, #14
 80065c0:	461a      	mov	r2, r3
 80065c2:	2102      	movs	r1, #2
 80065c4:	f7fe ffd1 	bl	800556a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8a18      	ldrh	r0, [r3, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3310      	adds	r3, #16
 80065d0:	461a      	mov	r2, r3
 80065d2:	2102      	movs	r1, #2
 80065d4:	f7fe ffc9 	bl	800556a <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80065e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80065ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80065f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80065fe:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8006600:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	460b      	mov	r3, r1
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800661a:	2300      	movs	r3, #0
 800661c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800661e:	897b      	ldrh	r3, [r7, #10]
 8006620:	2b16      	cmp	r3, #22
 8006622:	d802      	bhi.n	800662a <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006624:	f06f 0309 	mvn.w	r3, #9
 8006628:	e06e      	b.n	8006708 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8006640:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800664a:	f002 020f 	and.w	r2, r2, #15
 800664e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8006650:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800665a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8006664:	f002 020f 	and.w	r2, r2, #15
 8006668:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800666a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8006674:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800667e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006682:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8006684:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800668e:	f002 020f 	and.w	r2, r2, #15
 8006692:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8006694:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800669e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 80066a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80066ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80066ae:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8958      	ldrh	r0, [r3, #10]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	330a      	adds	r3, #10
 80066b8:	461a      	mov	r2, r3
 80066ba:	2102      	movs	r1, #2
 80066bc:	f7fe ff55 	bl	800556a <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8998      	ldrh	r0, [r3, #12]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	330c      	adds	r3, #12
 80066c8:	461a      	mov	r2, r3
 80066ca:	2102      	movs	r1, #2
 80066cc:	f7fe ff4d 	bl	800556a <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 80066d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 80066e2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6918      	ldr	r0, [r3, #16]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3312      	adds	r3, #18
 80066ec:	461a      	mov	r2, r3
 80066ee:	2104      	movs	r1, #4
 80066f0:	f7fe ffd9 	bl	80056a6 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 80066fc:	f002 0201 	and.w	r2, r2, #1
 8006700:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8006702:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8006704:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	460b      	mov	r3, r1
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800671e:	2300      	movs	r3, #0
 8006720:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8006722:	897b      	ldrh	r3, [r7, #10]
 8006724:	2b11      	cmp	r3, #17
 8006726:	d802      	bhi.n	800672e <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006728:	f06f 0309 	mvn.w	r3, #9
 800672c:	e071      	b.n	8006812 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8858      	ldrh	r0, [r3, #2]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3301      	adds	r3, #1
 8006744:	461a      	mov	r2, r3
 8006746:	2102      	movs	r1, #2
 8006748:	f7fe ff0f 	bl	800556a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8898      	ldrh	r0, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3303      	adds	r3, #3
 8006754:	461a      	mov	r2, r3
 8006756:	2102      	movs	r1, #2
 8006758:	f7fe ff07 	bl	800556a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8006764:	f002 0201 	and.w	r2, r2, #1
 8006768:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800676a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8006774:	f002 0207 	and.w	r2, r2, #7
 8006778:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800677a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8006784:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800678e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8006798:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800679c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800679e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80067a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80067ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80067b8:	f002 0203 	and.w	r2, r2, #3
 80067bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80067be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 80067c8:	f002 0203 	and.w	r2, r2, #3
 80067cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80067ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 80067d8:	f002 020f 	and.w	r2, r2, #15
 80067dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80067de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 80067e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 80067f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 80067fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8006806:	f002 0203 	and.w	r2, r2, #3
 800680a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800680c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800680e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800681a:	b480      	push	{r7}
 800681c:	b087      	sub	sp, #28
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	460b      	mov	r3, r1
 8006824:	607a      	str	r2, [r7, #4]
 8006826:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006828:	2300      	movs	r3, #0
 800682a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800682c:	897b      	ldrh	r3, [r7, #10]
 800682e:	2b04      	cmp	r3, #4
 8006830:	d802      	bhi.n	8006838 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006832:	f06f 0309 	mvn.w	r3, #9
 8006836:	e025      	b.n	8006884 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800684e:	f002 0201 	and.w	r2, r2, #1
 8006852:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8006854:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800685e:	f002 0201 	and.w	r2, r2, #1
 8006862:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8006864:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800686e:	f002 0203 	and.w	r2, r2, #3
 8006872:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8006874:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800687e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8006880:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006884:	4618      	mov	r0, r3
 8006886:	371c      	adds	r7, #28
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800689a:	2300      	movs	r3, #0
 800689c:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800689e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d108      	bne.n	80068b8 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 80068a6:	f107 0308 	add.w	r3, r7, #8
 80068aa:	461a      	mov	r2, r3
 80068ac:	2105      	movs	r1, #5
 80068ae:	6838      	ldr	r0, [r7, #0]
 80068b0:	f7ff ffb3 	bl	800681a <VL53L1_i2c_encode_system_control>
 80068b4:	4603      	mov	r3, r0
 80068b6:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 80068b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d108      	bne.n	80068d2 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 80068c0:	f107 0208 	add.w	r2, r7, #8
 80068c4:	2305      	movs	r3, #5
 80068c6:	2183      	movs	r1, #131	; 0x83
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fc87 	bl	80071dc <VL53L1_WriteMulti>
 80068ce:	4603      	mov	r3, r0
 80068d0:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 80068d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b086      	sub	sp, #24
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	4603      	mov	r3, r0
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	607a      	str	r2, [r7, #4]
 80068ea:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80068ec:	2300      	movs	r3, #0
 80068ee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 80068f0:	89fb      	ldrh	r3, [r7, #14]
 80068f2:	2b2b      	cmp	r3, #43	; 0x2b
 80068f4:	d802      	bhi.n	80068fc <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80068f6:	f06f 0309 	mvn.w	r3, #9
 80068fa:	e0e2      	b.n	8006ac2 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006904:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	785a      	ldrb	r2, [r3, #1]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	3302      	adds	r3, #2
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	78da      	ldrb	r2, [r3, #3]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	3304      	adds	r3, #4
 800692e:	4619      	mov	r1, r3
 8006930:	2002      	movs	r0, #2
 8006932:	f7fe fe44 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006936:	4603      	mov	r3, r0
 8006938:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	3306      	adds	r3, #6
 8006942:	4619      	mov	r1, r3
 8006944:	2002      	movs	r0, #2
 8006946:	f7fe fe3a 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 800694a:	4603      	mov	r3, r0
 800694c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	3308      	adds	r3, #8
 8006956:	4619      	mov	r1, r3
 8006958:	2002      	movs	r0, #2
 800695a:	f7fe fe30 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 800695e:	4603      	mov	r3, r0
 8006960:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	330a      	adds	r3, #10
 800696a:	4619      	mov	r1, r3
 800696c:	2002      	movs	r0, #2
 800696e:	f7fe fe26 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006972:	4603      	mov	r3, r0
 8006974:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	330c      	adds	r3, #12
 800697e:	4619      	mov	r1, r3
 8006980:	2002      	movs	r0, #2
 8006982:	f7fe fe1c 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006986:	4603      	mov	r3, r0
 8006988:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	330e      	adds	r3, #14
 8006992:	4619      	mov	r1, r3
 8006994:	2002      	movs	r0, #2
 8006996:	f7fe fe12 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 800699a:	4603      	mov	r3, r0
 800699c:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	3310      	adds	r3, #16
 80069a6:	4619      	mov	r1, r3
 80069a8:	2002      	movs	r0, #2
 80069aa:	f7fe fe08 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 80069ae:	4603      	mov	r3, r0
 80069b0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	3312      	adds	r3, #18
 80069ba:	4619      	mov	r1, r3
 80069bc:	2002      	movs	r0, #2
 80069be:	f7fe fdfe 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 80069c2:	4603      	mov	r3, r0
 80069c4:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	3314      	adds	r3, #20
 80069ce:	4619      	mov	r1, r3
 80069d0:	2002      	movs	r0, #2
 80069d2:	f7fe fdf4 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 80069d6:	4603      	mov	r3, r0
 80069d8:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	3316      	adds	r3, #22
 80069e2:	4619      	mov	r1, r3
 80069e4:	2002      	movs	r0, #2
 80069e6:	f7fe fdea 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 80069ea:	4603      	mov	r3, r0
 80069ec:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	3318      	adds	r3, #24
 80069f6:	4619      	mov	r1, r3
 80069f8:	2002      	movs	r0, #2
 80069fa:	f7fe fde0 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 80069fe:	4603      	mov	r3, r0
 8006a00:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	331a      	adds	r3, #26
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	2002      	movs	r0, #2
 8006a0e:	f7fe fdd6 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006a12:	4603      	mov	r3, r0
 8006a14:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	331c      	adds	r3, #28
 8006a1e:	4619      	mov	r1, r3
 8006a20:	2002      	movs	r0, #2
 8006a22:	f7fe fdcc 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	331e      	adds	r3, #30
 8006a32:	4619      	mov	r1, r3
 8006a34:	2002      	movs	r0, #2
 8006a36:	f7fe fdc2 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	3320      	adds	r3, #32
 8006a46:	4619      	mov	r1, r3
 8006a48:	2002      	movs	r0, #2
 8006a4a:	f7fe fdb8 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	3322      	adds	r3, #34	; 0x22
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	2002      	movs	r0, #2
 8006a5e:	f7fe fdae 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006a62:	4603      	mov	r3, r0
 8006a64:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	3324      	adds	r3, #36	; 0x24
 8006a6e:	4619      	mov	r1, r3
 8006a70:	2002      	movs	r0, #2
 8006a72:	f7fe fda4 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006a76:	4603      	mov	r3, r0
 8006a78:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	3326      	adds	r3, #38	; 0x26
 8006a82:	4619      	mov	r1, r3
 8006a84:	2002      	movs	r0, #2
 8006a86:	f7fe fd9a 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	3328      	adds	r3, #40	; 0x28
 8006a96:	4619      	mov	r1, r3
 8006a98:	2002      	movs	r0, #2
 8006a9a:	f7fe fd90 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8006abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b086      	sub	sp, #24
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	607a      	str	r2, [r7, #4]
 8006ad6:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8006adc:	89fb      	ldrh	r3, [r7, #14]
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d802      	bhi.n	8006ae8 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006ae2:	f06f 0309 	mvn.w	r3, #9
 8006ae6:	e04d      	b.n	8006b84 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	2004      	movs	r0, #4
 8006aec:	f7fe fe04 	bl	80056f8 <VL53L1_i2c_decode_uint32_t>
 8006af0:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	3304      	adds	r3, #4
 8006afa:	4619      	mov	r1, r3
 8006afc:	2004      	movs	r0, #4
 8006afe:	f7fe fdfb 	bl	80056f8 <VL53L1_i2c_decode_uint32_t>
 8006b02:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	2004      	movs	r0, #4
 8006b10:	f7fe fe0f 	bl	8005732 <VL53L1_i2c_decode_int32_t>
 8006b14:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	330c      	adds	r3, #12
 8006b1e:	4619      	mov	r1, r3
 8006b20:	2004      	movs	r0, #4
 8006b22:	f7fe fde9 	bl	80056f8 <VL53L1_i2c_decode_uint32_t>
 8006b26:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	3310      	adds	r3, #16
 8006b30:	4619      	mov	r1, r3
 8006b32:	2004      	movs	r0, #4
 8006b34:	f7fe fde0 	bl	80056f8 <VL53L1_i2c_decode_uint32_t>
 8006b38:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	3314      	adds	r3, #20
 8006b42:	4619      	mov	r1, r3
 8006b44:	2004      	movs	r0, #4
 8006b46:	f7fe fdd7 	bl	80056f8 <VL53L1_i2c_decode_uint32_t>
 8006b4a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	3318      	adds	r3, #24
 8006b54:	4619      	mov	r1, r3
 8006b56:	2004      	movs	r0, #4
 8006b58:	f7fe fdeb 	bl	8005732 <VL53L1_i2c_decode_int32_t>
 8006b5c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	331c      	adds	r3, #28
 8006b66:	4619      	mov	r1, r3
 8006b68:	2004      	movs	r0, #4
 8006b6a:	f7fe fdc5 	bl	80056f8 <VL53L1_i2c_decode_uint32_t>
 8006b6e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f893 2020 	ldrb.w	r2, [r3, #32]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8006b80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	4603      	mov	r3, r0
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8006b9e:	89fb      	ldrh	r3, [r7, #14]
 8006ba0:	2b37      	cmp	r3, #55	; 0x37
 8006ba2:	d802      	bhi.n	8006baa <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006ba4:	f06f 0309 	mvn.w	r3, #9
 8006ba8:	e15e      	b.n	8006e68 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	2002      	movs	r0, #2
 8006bae:	f7fe fd06 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	3302      	adds	r3, #2
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc4:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	3303      	adds	r3, #3
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bd4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f003 0303 	and.w	r3, r3, #3
 8006be4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	3305      	adds	r3, #5
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	3306      	adds	r3, #6
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c04:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	3307      	adds	r3, #7
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c14:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	3308      	adds	r3, #8
 8006c1e:	4619      	mov	r1, r3
 8006c20:	2002      	movs	r0, #2
 8006c22:	f7fe fccc 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006c26:	4603      	mov	r3, r0
 8006c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c2c:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	330a      	adds	r3, #10
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	330b      	adds	r3, #11
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	f003 0303 	and.w	r3, r3, #3
 8006c4c:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	330c      	adds	r3, #12
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f003 030f 	and.w	r3, r3, #15
 8006c5c:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	330d      	adds	r3, #13
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	330e      	adds	r3, #14
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	330f      	adds	r3, #15
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f003 0303 	and.w	r3, r3, #3
 8006c8c:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	7c1a      	ldrb	r2, [r3, #16]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	7c5a      	ldrb	r2, [r3, #17]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	3312      	adds	r3, #18
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	2002      	movs	r0, #2
 8006caa:	f7fe fc88 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cb4:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	3316      	adds	r3, #22
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	2002      	movs	r0, #2
 8006cc2:	f7fe fc7c 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	3318      	adds	r3, #24
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	2002      	movs	r0, #2
 8006cd6:	f7fe fc72 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	331a      	adds	r3, #26
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	331b      	adds	r3, #27
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f003 0307 	and.w	r3, r3, #7
 8006cfc:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	7f1a      	ldrb	r2, [r3, #28]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	7f5a      	ldrb	r2, [r3, #29]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	331e      	adds	r3, #30
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d1c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	331f      	adds	r3, #31
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d2c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	3320      	adds	r3, #32
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	f003 0303 	and.w	r3, r3, #3
 8006d3c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	3321      	adds	r3, #33	; 0x21
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	3325      	adds	r3, #37	; 0x25
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	3326      	adds	r3, #38	; 0x26
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	3327      	adds	r3, #39	; 0x27
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	f003 031f 	and.w	r3, r3, #31
 8006da4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	3328      	adds	r3, #40	; 0x28
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	f003 031f 	and.w	r3, r3, #31
 8006db6:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	3329      	adds	r3, #41	; 0x29
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	332a      	adds	r3, #42	; 0x2a
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	332b      	adds	r3, #43	; 0x2b
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	332c      	adds	r3, #44	; 0x2c
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	f003 0303 	and.w	r3, r3, #3
 8006dfe:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	332d      	adds	r3, #45	; 0x2d
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e10:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	332e      	adds	r3, #46	; 0x2e
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	2004      	movs	r0, #4
 8006e20:	f7fe fc6a 	bl	80056f8 <VL53L1_i2c_decode_uint32_t>
 8006e24:	4603      	mov	r3, r0
 8006e26:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	3332      	adds	r3, #50	; 0x32
 8006e32:	4619      	mov	r1, r3
 8006e34:	2004      	movs	r0, #4
 8006e36:	f7fe fc5f 	bl	80056f8 <VL53L1_i2c_decode_uint32_t>
 8006e3a:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	3336      	adds	r3, #54	; 0x36
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	3337      	adds	r3, #55	; 0x37
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8006e64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8006e82:	89fb      	ldrh	r3, [r7, #14]
 8006e84:	2b30      	cmp	r3, #48	; 0x30
 8006e86:	d802      	bhi.n	8006e8e <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006e88:	f06f 0309 	mvn.w	r3, #9
 8006e8c:	e112      	b.n	80070b4 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	785a      	ldrb	r2, [r3, #1]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	789a      	ldrb	r2, [r3, #2]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	3303      	adds	r3, #3
 8006eaa:	4619      	mov	r1, r3
 8006eac:	2002      	movs	r0, #2
 8006eae:	f7fe fb86 	bl	80055be <VL53L1_i2c_decode_uint16_t>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	3305      	adds	r3, #5
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	3306      	adds	r3, #6
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 0307 	and.w	r3, r3, #7
 8006ed4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	3307      	adds	r3, #7
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	3308      	adds	r3, #8
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ef4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	3309      	adds	r3, #9
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f04:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	330a      	adds	r3, #10
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	330b      	adds	r3, #11
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f24:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	330d      	adds	r3, #13
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f44:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	330e      	adds	r3, #14
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f54:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	7bda      	ldrb	r2, [r3, #15]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	7c1a      	ldrb	r2, [r3, #16]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	7c5a      	ldrb	r2, [r3, #17]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	7c9a      	ldrb	r2, [r3, #18]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	7cda      	ldrb	r2, [r3, #19]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	7d1a      	ldrb	r2, [r3, #20]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	7d5a      	ldrb	r2, [r3, #21]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	7d9a      	ldrb	r2, [r3, #22]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	7dda      	ldrb	r2, [r3, #23]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	7e1a      	ldrb	r2, [r3, #24]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	7e5a      	ldrb	r2, [r3, #25]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	7e9a      	ldrb	r2, [r3, #26]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	7eda      	ldrb	r2, [r3, #27]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	7f1a      	ldrb	r2, [r3, #28]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	7f5a      	ldrb	r2, [r3, #29]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	7f9a      	ldrb	r2, [r3, #30]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	7fda      	ldrb	r2, [r3, #31]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80070b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b090      	sub	sp, #64	; 0x40
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80070c6:	2300      	movs	r3, #0
 80070c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80070cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10a      	bne.n	80070ea <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80070d4:	f107 020c 	add.w	r2, r7, #12
 80070d8:	2331      	movs	r3, #49	; 0x31
 80070da:	f240 110f 	movw	r1, #271	; 0x10f
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f88e 	bl	8007200 <VL53L1_ReadMulti>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80070ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80070f2:	f107 030c 	add.w	r3, r7, #12
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	4619      	mov	r1, r3
 80070fa:	2031      	movs	r0, #49	; 0x31
 80070fc:	f7ff feb8 	bl	8006e70 <VL53L1_i2c_decode_nvm_copy_data>
 8007100:	4603      	mov	r3, r0
 8007102:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8007106:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800710a:	4618      	mov	r0, r3
 800710c:	3740      	adds	r7, #64	; 0x40
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b086      	sub	sp, #24
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	6039      	str	r1, [r7, #0]
	 * Determines if new range data is ready by reading bit 0 of
	 * VL53L1_GPIO__TIO_HV_STATUS to determine the current state
	 * of output interrupt pin
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800711c:	2300      	movs	r3, #0
 800711e:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8007128:	2300      	movs	r3, #0
 800712a:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 8007136:	f003 0310 	and.w	r3, r3, #16
 800713a:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d102      	bne.n	8007148 <VL53L1_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 8007142:	2301      	movs	r3, #1
 8007144:	75fb      	strb	r3, [r7, #23]
 8007146:	e001      	b.n	800714c <VL53L1_is_new_data_ready+0x3a>
	else
		interrupt_ready = 0x00;
 8007148:	2300      	movs	r3, #0
 800714a:	75fb      	strb	r3, [r7, #23]

	/* read current range interrupt state */

	status = VL53L1_RdByte(
 800714c:	f107 030e 	add.w	r3, r7, #14
 8007150:	461a      	mov	r2, r3
 8007152:	2131      	movs	r1, #49	; 0x31
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f877 	bl	8007248 <VL53L1_RdByte>
 800715a:	4603      	mov	r3, r0
 800715c:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);

	/* set *pready = 1 if new range data ready complete zero otherwise */

	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 800715e:	7bbb      	ldrb	r3, [r7, #14]
 8007160:	f003 0201 	and.w	r2, r3, #1
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	429a      	cmp	r2, r3
 8007168:	d103      	bne.n	8007172 <VL53L1_is_new_data_ready+0x60>
		*pready = 0x01;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2201      	movs	r2, #1
 800716e:	701a      	strb	r2, [r3, #0]
 8007170:	e002      	b.n	8007178 <VL53L1_is_new_data_ready+0x66>
	else
		*pready = 0x00;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2200      	movs	r2, #0
 8007176:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8007178:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af02      	add	r7, sp, #8
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8007192:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f878 	bl	800728c <VL53L1_WaitUs>
 800719c:	4603      	mov	r3, r0
 800719e:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 80071a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10b      	bne.n	80071c0 <VL53L1_poll_for_boot_completion+0x3c>
		status =
 80071a8:	2301      	movs	r3, #1
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	2301      	movs	r3, #1
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	2301      	movs	r3, #1
 80071b2:	22e5      	movs	r2, #229	; 0xe5
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f877 	bl	80072aa <VL53L1_WaitValueMaskEx>
 80071bc:	4603      	mov	r3, r0
 80071be:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 80071c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d103      	bne.n	80071d0 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 80071c8:	2103      	movs	r1, #3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7fd ffb0 	bl	8005130 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 80071d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <VL53L1_WriteMulti>:
// int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
//    int status = 0;
//    return Status;
// }

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	607a      	str	r2, [r7, #4]
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	460b      	mov	r3, r1
 80071ea:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80071ec:	2300      	movs	r3, #0
 80071ee:	75fb      	strb	r3, [r7, #23]
    return Status;
 80071f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	371c      	adds	r7, #28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	607a      	str	r2, [r7, #4]
 800720a:	603b      	str	r3, [r7, #0]
 800720c:	460b      	mov	r3, r1
 800720e:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007210:	2300      	movs	r3, #0
 8007212:	75fb      	strb	r3, [r7, #23]
    return Status;
 8007214:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007218:	4618      	mov	r0, r3
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	807b      	strh	r3, [r7, #2]
 8007230:	4613      	mov	r3, r2
 8007232:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]
    return Status;
 8007238:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <VL53L1_RdByte>:
VL53L1_Error VL53L1_UpdateByte(VL53L1_DEV Dev, uint16_t index, uint8_t AndData, uint8_t OrData) {
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	460b      	mov	r3, r1
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007256:	2300      	movs	r3, #0
 8007258:	75fb      	strb	r3, [r7, #23]
    return Status;
 800725a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800725e:	4618      	mov	r0, r3
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800726a:	b480      	push	{r7}
 800726c:	b087      	sub	sp, #28
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	460b      	mov	r3, r1
 8007274:	607a      	str	r2, [r7, #4]
 8007276:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8007278:	2300      	movs	r3, #0
 800727a:	75fb      	strb	r3, [r7, #23]
    return Status;
 800727c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007280:	4618      	mov	r0, r3
 8007282:	371c      	adds	r7, #28
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <VL53L1_WaitUs>:
VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
	VL53L1_Error status  = VL53L1_ERROR_NONE;
	return status;
}

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
	return status;
 800729a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b087      	sub	sp, #28
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	4611      	mov	r1, r2
 80072b6:	461a      	mov	r2, r3
 80072b8:	460b      	mov	r3, r1
 80072ba:	80fb      	strh	r3, [r7, #6]
 80072bc:	4613      	mov	r3, r2
 80072be:	717b      	strb	r3, [r7, #5]
	VL53L1_Error status  = VL53L1_ERROR_NONE;
 80072c0:	2300      	movs	r3, #0
 80072c2:	75fb      	strb	r3, [r7, #23]
	return status;
 80072c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	371c      	adds	r7, #28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80072d8:	4b0e      	ldr	r3, [pc, #56]	; (8007314 <HAL_Init+0x40>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a0d      	ldr	r2, [pc, #52]	; (8007314 <HAL_Init+0x40>)
 80072de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80072e4:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <HAL_Init+0x40>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a0a      	ldr	r2, [pc, #40]	; (8007314 <HAL_Init+0x40>)
 80072ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072f0:	4b08      	ldr	r3, [pc, #32]	; (8007314 <HAL_Init+0x40>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a07      	ldr	r2, [pc, #28]	; (8007314 <HAL_Init+0x40>)
 80072f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072fc:	2003      	movs	r0, #3
 80072fe:	f000 f94d 	bl	800759c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007302:	2000      	movs	r0, #0
 8007304:	f000 f808 	bl	8007318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007308:	f7fa fae6 	bl	80018d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	40023c00 	.word	0x40023c00

08007318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007320:	4b12      	ldr	r3, [pc, #72]	; (800736c <HAL_InitTick+0x54>)
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	4b12      	ldr	r3, [pc, #72]	; (8007370 <HAL_InitTick+0x58>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	4619      	mov	r1, r3
 800732a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800732e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007332:	fbb2 f3f3 	udiv	r3, r2, r3
 8007336:	4618      	mov	r0, r3
 8007338:	f000 f994 	bl	8007664 <HAL_SYSTICK_Config>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e00e      	b.n	8007364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b0f      	cmp	r3, #15
 800734a:	d80a      	bhi.n	8007362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800734c:	2200      	movs	r2, #0
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	f04f 30ff 	mov.w	r0, #4294967295
 8007354:	f000 f942 	bl	80075dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007358:	4a06      	ldr	r2, [pc, #24]	; (8007374 <HAL_InitTick+0x5c>)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	e000      	b.n	8007364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
}
 8007364:	4618      	mov	r0, r3
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20000044 	.word	0x20000044
 8007370:	2000006c 	.word	0x2000006c
 8007374:	20000068 	.word	0x20000068

08007378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800737c:	4b06      	ldr	r3, [pc, #24]	; (8007398 <HAL_IncTick+0x20>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	4b06      	ldr	r3, [pc, #24]	; (800739c <HAL_IncTick+0x24>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4413      	add	r3, r2
 8007388:	4a04      	ldr	r2, [pc, #16]	; (800739c <HAL_IncTick+0x24>)
 800738a:	6013      	str	r3, [r2, #0]
}
 800738c:	bf00      	nop
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	2000006c 	.word	0x2000006c
 800739c:	20003ee4 	.word	0x20003ee4

080073a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
  return uwTick;
 80073a4:	4b03      	ldr	r3, [pc, #12]	; (80073b4 <HAL_GetTick+0x14>)
 80073a6:	681b      	ldr	r3, [r3, #0]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20003ee4 	.word	0x20003ee4

080073b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80073c0:	f7ff ffee 	bl	80073a0 <HAL_GetTick>
 80073c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d0:	d005      	beq.n	80073de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80073d2:	4b09      	ldr	r3, [pc, #36]	; (80073f8 <HAL_Delay+0x40>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4413      	add	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80073de:	bf00      	nop
 80073e0:	f7ff ffde 	bl	80073a0 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d8f7      	bhi.n	80073e0 <HAL_Delay+0x28>
  {
  }
}
 80073f0:	bf00      	nop
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	2000006c 	.word	0x2000006c

080073fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800740c:	4b0c      	ldr	r3, [pc, #48]	; (8007440 <__NVIC_SetPriorityGrouping+0x44>)
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007418:	4013      	ands	r3, r2
 800741a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800742c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800742e:	4a04      	ldr	r2, [pc, #16]	; (8007440 <__NVIC_SetPriorityGrouping+0x44>)
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	60d3      	str	r3, [r2, #12]
}
 8007434:	bf00      	nop
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	e000ed00 	.word	0xe000ed00

08007444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007444:	b480      	push	{r7}
 8007446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007448:	4b04      	ldr	r3, [pc, #16]	; (800745c <__NVIC_GetPriorityGrouping+0x18>)
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	0a1b      	lsrs	r3, r3, #8
 800744e:	f003 0307 	and.w	r3, r3, #7
}
 8007452:	4618      	mov	r0, r3
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	e000ed00 	.word	0xe000ed00

08007460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800746a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800746e:	2b00      	cmp	r3, #0
 8007470:	db0b      	blt.n	800748a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	f003 021f 	and.w	r2, r3, #31
 8007478:	4907      	ldr	r1, [pc, #28]	; (8007498 <__NVIC_EnableIRQ+0x38>)
 800747a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800747e:	095b      	lsrs	r3, r3, #5
 8007480:	2001      	movs	r0, #1
 8007482:	fa00 f202 	lsl.w	r2, r0, r2
 8007486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	e000e100 	.word	0xe000e100

0800749c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	6039      	str	r1, [r7, #0]
 80074a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	db0a      	blt.n	80074c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	490c      	ldr	r1, [pc, #48]	; (80074e8 <__NVIC_SetPriority+0x4c>)
 80074b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ba:	0112      	lsls	r2, r2, #4
 80074bc:	b2d2      	uxtb	r2, r2
 80074be:	440b      	add	r3, r1
 80074c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074c4:	e00a      	b.n	80074dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	4908      	ldr	r1, [pc, #32]	; (80074ec <__NVIC_SetPriority+0x50>)
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	f003 030f 	and.w	r3, r3, #15
 80074d2:	3b04      	subs	r3, #4
 80074d4:	0112      	lsls	r2, r2, #4
 80074d6:	b2d2      	uxtb	r2, r2
 80074d8:	440b      	add	r3, r1
 80074da:	761a      	strb	r2, [r3, #24]
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	e000e100 	.word	0xe000e100
 80074ec:	e000ed00 	.word	0xe000ed00

080074f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b089      	sub	sp, #36	; 0x24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	f1c3 0307 	rsb	r3, r3, #7
 800750a:	2b04      	cmp	r3, #4
 800750c:	bf28      	it	cs
 800750e:	2304      	movcs	r3, #4
 8007510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	3304      	adds	r3, #4
 8007516:	2b06      	cmp	r3, #6
 8007518:	d902      	bls.n	8007520 <NVIC_EncodePriority+0x30>
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	3b03      	subs	r3, #3
 800751e:	e000      	b.n	8007522 <NVIC_EncodePriority+0x32>
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007524:	f04f 32ff 	mov.w	r2, #4294967295
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	fa02 f303 	lsl.w	r3, r2, r3
 800752e:	43da      	mvns	r2, r3
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	401a      	ands	r2, r3
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007538:	f04f 31ff 	mov.w	r1, #4294967295
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	fa01 f303 	lsl.w	r3, r1, r3
 8007542:	43d9      	mvns	r1, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007548:	4313      	orrs	r3, r2
         );
}
 800754a:	4618      	mov	r0, r3
 800754c:	3724      	adds	r7, #36	; 0x24
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
	...

08007558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3b01      	subs	r3, #1
 8007564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007568:	d301      	bcc.n	800756e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800756a:	2301      	movs	r3, #1
 800756c:	e00f      	b.n	800758e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800756e:	4a0a      	ldr	r2, [pc, #40]	; (8007598 <SysTick_Config+0x40>)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3b01      	subs	r3, #1
 8007574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007576:	210f      	movs	r1, #15
 8007578:	f04f 30ff 	mov.w	r0, #4294967295
 800757c:	f7ff ff8e 	bl	800749c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <SysTick_Config+0x40>)
 8007582:	2200      	movs	r2, #0
 8007584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007586:	4b04      	ldr	r3, [pc, #16]	; (8007598 <SysTick_Config+0x40>)
 8007588:	2207      	movs	r2, #7
 800758a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	e000e010 	.word	0xe000e010

0800759c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b07      	cmp	r3, #7
 80075a8:	d00f      	beq.n	80075ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b06      	cmp	r3, #6
 80075ae:	d00c      	beq.n	80075ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b05      	cmp	r3, #5
 80075b4:	d009      	beq.n	80075ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	d006      	beq.n	80075ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d003      	beq.n	80075ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80075c2:	2192      	movs	r1, #146	; 0x92
 80075c4:	4804      	ldr	r0, [pc, #16]	; (80075d8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80075c6:	f7fa f97c 	bl	80018c2 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7ff ff16 	bl	80073fc <__NVIC_SetPriorityGrouping>
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	0800f5ec 	.word	0x0800f5ec

080075dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
 80075e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b0f      	cmp	r3, #15
 80075f2:	d903      	bls.n	80075fc <HAL_NVIC_SetPriority+0x20>
 80075f4:	21aa      	movs	r1, #170	; 0xaa
 80075f6:	480e      	ldr	r0, [pc, #56]	; (8007630 <HAL_NVIC_SetPriority+0x54>)
 80075f8:	f7fa f963 	bl	80018c2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b0f      	cmp	r3, #15
 8007600:	d903      	bls.n	800760a <HAL_NVIC_SetPriority+0x2e>
 8007602:	21ab      	movs	r1, #171	; 0xab
 8007604:	480a      	ldr	r0, [pc, #40]	; (8007630 <HAL_NVIC_SetPriority+0x54>)
 8007606:	f7fa f95c 	bl	80018c2 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800760a:	f7ff ff1b 	bl	8007444 <__NVIC_GetPriorityGrouping>
 800760e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	6978      	ldr	r0, [r7, #20]
 8007616:	f7ff ff6b 	bl	80074f0 <NVIC_EncodePriority>
 800761a:	4602      	mov	r2, r0
 800761c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007620:	4611      	mov	r1, r2
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff ff3a 	bl	800749c <__NVIC_SetPriority>
}
 8007628:	bf00      	nop
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	0800f5ec 	.word	0x0800f5ec

08007634 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	4603      	mov	r3, r0
 800763c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800763e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007642:	2b00      	cmp	r3, #0
 8007644:	da03      	bge.n	800764e <HAL_NVIC_EnableIRQ+0x1a>
 8007646:	21be      	movs	r1, #190	; 0xbe
 8007648:	4805      	ldr	r0, [pc, #20]	; (8007660 <HAL_NVIC_EnableIRQ+0x2c>)
 800764a:	f7fa f93a 	bl	80018c2 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800764e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff ff04 	bl	8007460 <__NVIC_EnableIRQ>
}
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	0800f5ec 	.word	0x0800f5ec

08007664 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7ff ff73 	bl	8007558 <SysTick_Config>
 8007672:	4603      	mov	r3, r0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d004      	beq.n	800769a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2280      	movs	r2, #128	; 0x80
 8007694:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e00c      	b.n	80076b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2205      	movs	r2, #5
 800769e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0201 	bic.w	r2, r2, #1
 80076b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a3b      	ldr	r2, [pc, #236]	; (80077c8 <HAL_GPIO_Init+0x108>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d017      	beq.n	800770e <HAL_GPIO_Init+0x4e>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a3a      	ldr	r2, [pc, #232]	; (80077cc <HAL_GPIO_Init+0x10c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d013      	beq.n	800770e <HAL_GPIO_Init+0x4e>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a39      	ldr	r2, [pc, #228]	; (80077d0 <HAL_GPIO_Init+0x110>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00f      	beq.n	800770e <HAL_GPIO_Init+0x4e>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a38      	ldr	r2, [pc, #224]	; (80077d4 <HAL_GPIO_Init+0x114>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00b      	beq.n	800770e <HAL_GPIO_Init+0x4e>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a37      	ldr	r2, [pc, #220]	; (80077d8 <HAL_GPIO_Init+0x118>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d007      	beq.n	800770e <HAL_GPIO_Init+0x4e>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a36      	ldr	r2, [pc, #216]	; (80077dc <HAL_GPIO_Init+0x11c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d003      	beq.n	800770e <HAL_GPIO_Init+0x4e>
 8007706:	21b3      	movs	r1, #179	; 0xb3
 8007708:	4835      	ldr	r0, [pc, #212]	; (80077e0 <HAL_GPIO_Init+0x120>)
 800770a:	f7fa f8da 	bl	80018c2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	b29b      	uxth	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d005      	beq.n	8007724 <HAL_GPIO_Init+0x64>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	0c1b      	lsrs	r3, r3, #16
 800771e:	041b      	lsls	r3, r3, #16
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <HAL_GPIO_Init+0x6c>
 8007724:	21b4      	movs	r1, #180	; 0xb4
 8007726:	482e      	ldr	r0, [pc, #184]	; (80077e0 <HAL_GPIO_Init+0x120>)
 8007728:	f7fa f8cb 	bl	80018c2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d035      	beq.n	80077a0 <HAL_GPIO_Init+0xe0>
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d031      	beq.n	80077a0 <HAL_GPIO_Init+0xe0>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	2b11      	cmp	r3, #17
 8007742:	d02d      	beq.n	80077a0 <HAL_GPIO_Init+0xe0>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d029      	beq.n	80077a0 <HAL_GPIO_Init+0xe0>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	2b12      	cmp	r3, #18
 8007752:	d025      	beq.n	80077a0 <HAL_GPIO_Init+0xe0>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	4a22      	ldr	r2, [pc, #136]	; (80077e4 <HAL_GPIO_Init+0x124>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d020      	beq.n	80077a0 <HAL_GPIO_Init+0xe0>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	4a21      	ldr	r2, [pc, #132]	; (80077e8 <HAL_GPIO_Init+0x128>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d01b      	beq.n	80077a0 <HAL_GPIO_Init+0xe0>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	4a1f      	ldr	r2, [pc, #124]	; (80077ec <HAL_GPIO_Init+0x12c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d016      	beq.n	80077a0 <HAL_GPIO_Init+0xe0>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	4a1e      	ldr	r2, [pc, #120]	; (80077f0 <HAL_GPIO_Init+0x130>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d011      	beq.n	80077a0 <HAL_GPIO_Init+0xe0>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	4a1c      	ldr	r2, [pc, #112]	; (80077f4 <HAL_GPIO_Init+0x134>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d00c      	beq.n	80077a0 <HAL_GPIO_Init+0xe0>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	4a1b      	ldr	r2, [pc, #108]	; (80077f8 <HAL_GPIO_Init+0x138>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d007      	beq.n	80077a0 <HAL_GPIO_Init+0xe0>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	2b03      	cmp	r3, #3
 8007796:	d003      	beq.n	80077a0 <HAL_GPIO_Init+0xe0>
 8007798:	21b5      	movs	r1, #181	; 0xb5
 800779a:	4811      	ldr	r0, [pc, #68]	; (80077e0 <HAL_GPIO_Init+0x120>)
 800779c:	f7fa f891 	bl	80018c2 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <HAL_GPIO_Init+0x100>
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d007      	beq.n	80077c0 <HAL_GPIO_Init+0x100>
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d003      	beq.n	80077c0 <HAL_GPIO_Init+0x100>
 80077b8:	21b6      	movs	r1, #182	; 0xb6
 80077ba:	4809      	ldr	r0, [pc, #36]	; (80077e0 <HAL_GPIO_Init+0x120>)
 80077bc:	f7fa f881 	bl	80018c2 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077c0:	2300      	movs	r3, #0
 80077c2:	61fb      	str	r3, [r7, #28]
 80077c4:	e211      	b.n	8007bea <HAL_GPIO_Init+0x52a>
 80077c6:	bf00      	nop
 80077c8:	40020000 	.word	0x40020000
 80077cc:	40020400 	.word	0x40020400
 80077d0:	40020800 	.word	0x40020800
 80077d4:	40020c00 	.word	0x40020c00
 80077d8:	40021000 	.word	0x40021000
 80077dc:	40021c00 	.word	0x40021c00
 80077e0:	0800f628 	.word	0x0800f628
 80077e4:	10110000 	.word	0x10110000
 80077e8:	10210000 	.word	0x10210000
 80077ec:	10310000 	.word	0x10310000
 80077f0:	10120000 	.word	0x10120000
 80077f4:	10220000 	.word	0x10220000
 80077f8:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80077fc:	2201      	movs	r2, #1
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	fa02 f303 	lsl.w	r3, r2, r3
 8007804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	4013      	ands	r3, r2
 800780e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	429a      	cmp	r2, r3
 8007816:	f040 81e5 	bne.w	8007be4 <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d00b      	beq.n	800783a <HAL_GPIO_Init+0x17a>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d007      	beq.n	800783a <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800782e:	2b11      	cmp	r3, #17
 8007830:	d003      	beq.n	800783a <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2b12      	cmp	r3, #18
 8007838:	d144      	bne.n	80078c4 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00f      	beq.n	8007862 <HAL_GPIO_Init+0x1a2>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d00b      	beq.n	8007862 <HAL_GPIO_Init+0x1a2>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d007      	beq.n	8007862 <HAL_GPIO_Init+0x1a2>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	2b03      	cmp	r3, #3
 8007858:	d003      	beq.n	8007862 <HAL_GPIO_Init+0x1a2>
 800785a:	21c8      	movs	r1, #200	; 0xc8
 800785c:	489f      	ldr	r0, [pc, #636]	; (8007adc <HAL_GPIO_Init+0x41c>)
 800785e:	f7fa f830 	bl	80018c2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	2203      	movs	r2, #3
 800786e:	fa02 f303 	lsl.w	r3, r2, r3
 8007872:	43db      	mvns	r3, r3
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	4013      	ands	r3, r2
 8007878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	005b      	lsls	r3, r3, #1
 8007882:	fa02 f303 	lsl.w	r3, r2, r3
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	4313      	orrs	r3, r2
 800788a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007898:	2201      	movs	r2, #1
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	fa02 f303 	lsl.w	r3, r2, r3
 80078a0:	43db      	mvns	r3, r3
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	4013      	ands	r3, r2
 80078a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	091b      	lsrs	r3, r3, #4
 80078ae:	f003 0201 	and.w	r2, r3, #1
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	fa02 f303 	lsl.w	r3, r2, r3
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	2203      	movs	r2, #3
 80078d0:	fa02 f303 	lsl.w	r3, r2, r3
 80078d4:	43db      	mvns	r3, r3
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	4013      	ands	r3, r2
 80078da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	689a      	ldr	r2, [r3, #8]
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	fa02 f303 	lsl.w	r3, r2, r3
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d004      	beq.n	8007906 <HAL_GPIO_Init+0x246>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	2b12      	cmp	r3, #18
 8007902:	f040 80a0 	bne.w	8007a46 <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d077      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	2b09      	cmp	r3, #9
 8007914:	d073      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d06f      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d06b      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d067      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d063      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d05f      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d05b      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b02      	cmp	r3, #2
 800794c:	d057      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b02      	cmp	r3, #2
 8007954:	d053      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d04f      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b04      	cmp	r3, #4
 8007964:	d04b      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	2b04      	cmp	r3, #4
 800796c:	d047      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	2b04      	cmp	r3, #4
 8007974:	d043      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	2b05      	cmp	r3, #5
 800797c:	d03f      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b05      	cmp	r3, #5
 8007984:	d03b      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	2b05      	cmp	r3, #5
 800798c:	d037      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	2b06      	cmp	r3, #6
 8007994:	d033      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b06      	cmp	r3, #6
 800799c:	d02f      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b05      	cmp	r3, #5
 80079a4:	d02b      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b06      	cmp	r3, #6
 80079ac:	d027      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	2b07      	cmp	r3, #7
 80079b4:	d023      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	2b07      	cmp	r3, #7
 80079bc:	d01f      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	2b07      	cmp	r3, #7
 80079c4:	d01b      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	2b08      	cmp	r3, #8
 80079cc:	d017      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	2b0a      	cmp	r3, #10
 80079d4:	d013      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2b09      	cmp	r3, #9
 80079dc:	d00f      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	2b09      	cmp	r3, #9
 80079e4:	d00b      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	2b0c      	cmp	r3, #12
 80079ec:	d007      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	2b0f      	cmp	r3, #15
 80079f4:	d003      	beq.n	80079fe <HAL_GPIO_Init+0x33e>
 80079f6:	21e0      	movs	r1, #224	; 0xe0
 80079f8:	4838      	ldr	r0, [pc, #224]	; (8007adc <HAL_GPIO_Init+0x41c>)
 80079fa:	f7f9 ff62 	bl	80018c2 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	08da      	lsrs	r2, r3, #3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3208      	adds	r2, #8
 8007a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	220f      	movs	r2, #15
 8007a16:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1a:	43db      	mvns	r3, r3
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	691a      	ldr	r2, [r3, #16]
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	f003 0307 	and.w	r3, r3, #7
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	08da      	lsrs	r2, r3, #3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3208      	adds	r2, #8
 8007a40:	69b9      	ldr	r1, [r7, #24]
 8007a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	2203      	movs	r2, #3
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	43db      	mvns	r3, r3
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f003 0203 	and.w	r2, r3, #3
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	69ba      	ldr	r2, [r7, #24]
 8007a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 80ae 	beq.w	8007be4 <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <HAL_GPIO_Init+0x420>)
 8007a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a90:	4a13      	ldr	r2, [pc, #76]	; (8007ae0 <HAL_GPIO_Init+0x420>)
 8007a92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a96:	6453      	str	r3, [r2, #68]	; 0x44
 8007a98:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <HAL_GPIO_Init+0x420>)
 8007a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007aa4:	4a0f      	ldr	r2, [pc, #60]	; (8007ae4 <HAL_GPIO_Init+0x424>)
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	089b      	lsrs	r3, r3, #2
 8007aaa:	3302      	adds	r3, #2
 8007aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	f003 0303 	and.w	r3, r3, #3
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	220f      	movs	r2, #15
 8007abc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac0:	43db      	mvns	r3, r3
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a07      	ldr	r2, [pc, #28]	; (8007ae8 <HAL_GPIO_Init+0x428>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d025      	beq.n	8007b1c <HAL_GPIO_Init+0x45c>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a06      	ldr	r2, [pc, #24]	; (8007aec <HAL_GPIO_Init+0x42c>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d01f      	beq.n	8007b18 <HAL_GPIO_Init+0x458>
 8007ad8:	e00a      	b.n	8007af0 <HAL_GPIO_Init+0x430>
 8007ada:	bf00      	nop
 8007adc:	0800f628 	.word	0x0800f628
 8007ae0:	40023800 	.word	0x40023800
 8007ae4:	40013800 	.word	0x40013800
 8007ae8:	40020000 	.word	0x40020000
 8007aec:	40020400 	.word	0x40020400
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a42      	ldr	r2, [pc, #264]	; (8007bfc <HAL_GPIO_Init+0x53c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00d      	beq.n	8007b14 <HAL_GPIO_Init+0x454>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a41      	ldr	r2, [pc, #260]	; (8007c00 <HAL_GPIO_Init+0x540>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d007      	beq.n	8007b10 <HAL_GPIO_Init+0x450>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a40      	ldr	r2, [pc, #256]	; (8007c04 <HAL_GPIO_Init+0x544>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d101      	bne.n	8007b0c <HAL_GPIO_Init+0x44c>
 8007b08:	2304      	movs	r3, #4
 8007b0a:	e008      	b.n	8007b1e <HAL_GPIO_Init+0x45e>
 8007b0c:	2307      	movs	r3, #7
 8007b0e:	e006      	b.n	8007b1e <HAL_GPIO_Init+0x45e>
 8007b10:	2303      	movs	r3, #3
 8007b12:	e004      	b.n	8007b1e <HAL_GPIO_Init+0x45e>
 8007b14:	2302      	movs	r3, #2
 8007b16:	e002      	b.n	8007b1e <HAL_GPIO_Init+0x45e>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e000      	b.n	8007b1e <HAL_GPIO_Init+0x45e>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	69fa      	ldr	r2, [r7, #28]
 8007b20:	f002 0203 	and.w	r2, r2, #3
 8007b24:	0092      	lsls	r2, r2, #2
 8007b26:	4093      	lsls	r3, r2
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b2e:	4936      	ldr	r1, [pc, #216]	; (8007c08 <HAL_GPIO_Init+0x548>)
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	089b      	lsrs	r3, r3, #2
 8007b34:	3302      	adds	r3, #2
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007b3c:	4b33      	ldr	r3, [pc, #204]	; (8007c0c <HAL_GPIO_Init+0x54c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	43db      	mvns	r3, r3
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007b60:	4a2a      	ldr	r2, [pc, #168]	; (8007c0c <HAL_GPIO_Init+0x54c>)
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007b66:	4b29      	ldr	r3, [pc, #164]	; (8007c0c <HAL_GPIO_Init+0x54c>)
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	43db      	mvns	r3, r3
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	4013      	ands	r3, r2
 8007b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8007b82:	69ba      	ldr	r2, [r7, #24]
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b8a:	4a20      	ldr	r2, [pc, #128]	; (8007c0c <HAL_GPIO_Init+0x54c>)
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b90:	4b1e      	ldr	r3, [pc, #120]	; (8007c0c <HAL_GPIO_Init+0x54c>)
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	43db      	mvns	r3, r3
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007bb4:	4a15      	ldr	r2, [pc, #84]	; (8007c0c <HAL_GPIO_Init+0x54c>)
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bba:	4b14      	ldr	r3, [pc, #80]	; (8007c0c <HAL_GPIO_Init+0x54c>)
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	43db      	mvns	r3, r3
 8007bc4:	69ba      	ldr	r2, [r7, #24]
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007bde:	4a0b      	ldr	r2, [pc, #44]	; (8007c0c <HAL_GPIO_Init+0x54c>)
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	3301      	adds	r3, #1
 8007be8:	61fb      	str	r3, [r7, #28]
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	2b0f      	cmp	r3, #15
 8007bee:	f67f ae05 	bls.w	80077fc <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8007bf2:	bf00      	nop
 8007bf4:	3720      	adds	r7, #32
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	40020800 	.word	0x40020800
 8007c00:	40020c00 	.word	0x40020c00
 8007c04:	40021000 	.word	0x40021000
 8007c08:	40013800 	.word	0x40013800
 8007c0c:	40013c00 	.word	0x40013c00

08007c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	807b      	strh	r3, [r7, #2]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007c20:	887b      	ldrh	r3, [r7, #2]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d004      	beq.n	8007c30 <HAL_GPIO_WritePin+0x20>
 8007c26:	887b      	ldrh	r3, [r7, #2]
 8007c28:	0c1b      	lsrs	r3, r3, #16
 8007c2a:	041b      	lsls	r3, r3, #16
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d004      	beq.n	8007c3a <HAL_GPIO_WritePin+0x2a>
 8007c30:	f240 119f 	movw	r1, #415	; 0x19f
 8007c34:	480e      	ldr	r0, [pc, #56]	; (8007c70 <HAL_GPIO_WritePin+0x60>)
 8007c36:	f7f9 fe44 	bl	80018c2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8007c3a:	787b      	ldrb	r3, [r7, #1]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d007      	beq.n	8007c50 <HAL_GPIO_WritePin+0x40>
 8007c40:	787b      	ldrb	r3, [r7, #1]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d004      	beq.n	8007c50 <HAL_GPIO_WritePin+0x40>
 8007c46:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8007c4a:	4809      	ldr	r0, [pc, #36]	; (8007c70 <HAL_GPIO_WritePin+0x60>)
 8007c4c:	f7f9 fe39 	bl	80018c2 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8007c50:	787b      	ldrb	r3, [r7, #1]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c56:	887a      	ldrh	r2, [r7, #2]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007c5c:	e003      	b.n	8007c66 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007c5e:	887b      	ldrh	r3, [r7, #2]
 8007c60:	041a      	lsls	r2, r3, #16
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	619a      	str	r2, [r3, #24]
}
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	0800f628 	.word	0x0800f628

08007c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e1b1      	b.n	8007fea <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4aa2      	ldr	r2, [pc, #648]	; (8007f14 <HAL_I2C_Init+0x2a0>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d00e      	beq.n	8007cae <HAL_I2C_Init+0x3a>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4aa0      	ldr	r2, [pc, #640]	; (8007f18 <HAL_I2C_Init+0x2a4>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d009      	beq.n	8007cae <HAL_I2C_Init+0x3a>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a9f      	ldr	r2, [pc, #636]	; (8007f1c <HAL_I2C_Init+0x2a8>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d004      	beq.n	8007cae <HAL_I2C_Init+0x3a>
 8007ca4:	f240 11bd 	movw	r1, #445	; 0x1bd
 8007ca8:	489d      	ldr	r0, [pc, #628]	; (8007f20 <HAL_I2C_Init+0x2ac>)
 8007caa:	f7f9 fe0a 	bl	80018c2 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d004      	beq.n	8007cc0 <HAL_I2C_Init+0x4c>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	4a9a      	ldr	r2, [pc, #616]	; (8007f24 <HAL_I2C_Init+0x2b0>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d904      	bls.n	8007cca <HAL_I2C_Init+0x56>
 8007cc0:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8007cc4:	4896      	ldr	r0, [pc, #600]	; (8007f20 <HAL_I2C_Init+0x2ac>)
 8007cc6:	f7f9 fdfc 	bl	80018c2 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <HAL_I2C_Init+0x72>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cda:	d004      	beq.n	8007ce6 <HAL_I2C_Init+0x72>
 8007cdc:	f240 11bf 	movw	r1, #447	; 0x1bf
 8007ce0:	488f      	ldr	r0, [pc, #572]	; (8007f20 <HAL_I2C_Init+0x2ac>)
 8007ce2:	f7f9 fdee 	bl	80018c2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007cee:	f023 0303 	bic.w	r3, r3, #3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d004      	beq.n	8007d00 <HAL_I2C_Init+0x8c>
 8007cf6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8007cfa:	4889      	ldr	r0, [pc, #548]	; (8007f20 <HAL_I2C_Init+0x2ac>)
 8007cfc:	f7f9 fde1 	bl	80018c2 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d08:	d009      	beq.n	8007d1e <HAL_I2C_Init+0xaa>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d12:	d004      	beq.n	8007d1e <HAL_I2C_Init+0xaa>
 8007d14:	f240 11c1 	movw	r1, #449	; 0x1c1
 8007d18:	4881      	ldr	r0, [pc, #516]	; (8007f20 <HAL_I2C_Init+0x2ac>)
 8007d1a:	f7f9 fdd2 	bl	80018c2 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d008      	beq.n	8007d38 <HAL_I2C_Init+0xc4>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d004      	beq.n	8007d38 <HAL_I2C_Init+0xc4>
 8007d2e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8007d32:	487b      	ldr	r0, [pc, #492]	; (8007f20 <HAL_I2C_Init+0x2ac>)
 8007d34:	f7f9 fdc5 	bl	80018c2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d004      	beq.n	8007d4e <HAL_I2C_Init+0xda>
 8007d44:	f240 11c3 	movw	r1, #451	; 0x1c3
 8007d48:	4875      	ldr	r0, [pc, #468]	; (8007f20 <HAL_I2C_Init+0x2ac>)
 8007d4a:	f7f9 fdba 	bl	80018c2 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d008      	beq.n	8007d68 <HAL_I2C_Init+0xf4>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	d004      	beq.n	8007d68 <HAL_I2C_Init+0xf4>
 8007d5e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8007d62:	486f      	ldr	r0, [pc, #444]	; (8007f20 <HAL_I2C_Init+0x2ac>)
 8007d64:	f7f9 fdad 	bl	80018c2 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a1b      	ldr	r3, [r3, #32]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d008      	beq.n	8007d82 <HAL_I2C_Init+0x10e>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	2b80      	cmp	r3, #128	; 0x80
 8007d76:	d004      	beq.n	8007d82 <HAL_I2C_Init+0x10e>
 8007d78:	f240 11c5 	movw	r1, #453	; 0x1c5
 8007d7c:	4868      	ldr	r0, [pc, #416]	; (8007f20 <HAL_I2C_Init+0x2ac>)
 8007d7e:	f7f9 fda0 	bl	80018c2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d106      	bne.n	8007d9c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7f9 fdc6 	bl	8001928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2224      	movs	r2, #36	; 0x24
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 0201 	bic.w	r2, r2, #1
 8007db2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007dd4:	f002 f98e 	bl	800a0f4 <HAL_RCC_GetPCLK1Freq>
 8007dd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	4a52      	ldr	r2, [pc, #328]	; (8007f28 <HAL_I2C_Init+0x2b4>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d807      	bhi.n	8007df4 <HAL_I2C_Init+0x180>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4a51      	ldr	r2, [pc, #324]	; (8007f2c <HAL_I2C_Init+0x2b8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	bf94      	ite	ls
 8007dec:	2301      	movls	r3, #1
 8007dee:	2300      	movhi	r3, #0
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	e006      	b.n	8007e02 <HAL_I2C_Init+0x18e>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4a4e      	ldr	r2, [pc, #312]	; (8007f30 <HAL_I2C_Init+0x2bc>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	bf94      	ite	ls
 8007dfc:	2301      	movls	r3, #1
 8007dfe:	2300      	movhi	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e0ef      	b.n	8007fea <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4a49      	ldr	r2, [pc, #292]	; (8007f34 <HAL_I2C_Init+0x2c0>)
 8007e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e12:	0c9b      	lsrs	r3, r3, #18
 8007e14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	4a3b      	ldr	r2, [pc, #236]	; (8007f28 <HAL_I2C_Init+0x2b4>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d802      	bhi.n	8007e44 <HAL_I2C_Init+0x1d0>
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	3301      	adds	r3, #1
 8007e42:	e009      	b.n	8007e58 <HAL_I2C_Init+0x1e4>
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007e4a:	fb02 f303 	mul.w	r3, r2, r3
 8007e4e:	4a3a      	ldr	r2, [pc, #232]	; (8007f38 <HAL_I2C_Init+0x2c4>)
 8007e50:	fba2 2303 	umull	r2, r3, r2, r3
 8007e54:	099b      	lsrs	r3, r3, #6
 8007e56:	3301      	adds	r3, #1
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	430b      	orrs	r3, r1
 8007e5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007e6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	492d      	ldr	r1, [pc, #180]	; (8007f28 <HAL_I2C_Init+0x2b4>)
 8007e74:	428b      	cmp	r3, r1
 8007e76:	d80d      	bhi.n	8007e94 <HAL_I2C_Init+0x220>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	1e59      	subs	r1, r3, #1
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	005b      	lsls	r3, r3, #1
 8007e82:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e86:	3301      	adds	r3, #1
 8007e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	bf38      	it	cc
 8007e90:	2304      	movcc	r3, #4
 8007e92:	e063      	b.n	8007f5c <HAL_I2C_Init+0x2e8>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d111      	bne.n	8007ec0 <HAL_I2C_Init+0x24c>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	1e58      	subs	r0, r3, #1
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6859      	ldr	r1, [r3, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	440b      	add	r3, r1
 8007eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8007eae:	3301      	adds	r3, #1
 8007eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	bf0c      	ite	eq
 8007eb8:	2301      	moveq	r3, #1
 8007eba:	2300      	movne	r3, #0
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	e012      	b.n	8007ee6 <HAL_I2C_Init+0x272>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	1e58      	subs	r0, r3, #1
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6859      	ldr	r1, [r3, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	440b      	add	r3, r1
 8007ece:	0099      	lsls	r1, r3, #2
 8007ed0:	440b      	add	r3, r1
 8007ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bf0c      	ite	eq
 8007ee0:	2301      	moveq	r3, #1
 8007ee2:	2300      	movne	r3, #0
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <HAL_I2C_Init+0x27a>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e036      	b.n	8007f5c <HAL_I2C_Init+0x2e8>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d122      	bne.n	8007f3c <HAL_I2C_Init+0x2c8>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	1e58      	subs	r0, r3, #1
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6859      	ldr	r1, [r3, #4]
 8007efe:	460b      	mov	r3, r1
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	440b      	add	r3, r1
 8007f04:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f08:	3301      	adds	r3, #1
 8007f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f12:	e023      	b.n	8007f5c <HAL_I2C_Init+0x2e8>
 8007f14:	40005400 	.word	0x40005400
 8007f18:	40005800 	.word	0x40005800
 8007f1c:	40005c00 	.word	0x40005c00
 8007f20:	0800f664 	.word	0x0800f664
 8007f24:	00061a80 	.word	0x00061a80
 8007f28:	000186a0 	.word	0x000186a0
 8007f2c:	001e847f 	.word	0x001e847f
 8007f30:	003d08ff 	.word	0x003d08ff
 8007f34:	431bde83 	.word	0x431bde83
 8007f38:	10624dd3 	.word	0x10624dd3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	1e58      	subs	r0, r3, #1
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6859      	ldr	r1, [r3, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	440b      	add	r3, r1
 8007f4a:	0099      	lsls	r1, r3, #2
 8007f4c:	440b      	add	r3, r1
 8007f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f52:	3301      	adds	r3, #1
 8007f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	6809      	ldr	r1, [r1, #0]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	69da      	ldr	r2, [r3, #28]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	6911      	ldr	r1, [r2, #16]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	68d2      	ldr	r2, [r2, #12]
 8007f96:	4311      	orrs	r1, r2
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	6812      	ldr	r2, [r2, #0]
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	695a      	ldr	r2, [r3, #20]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0201 	orr.w	r2, r2, #1
 8007fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop

08007ff4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08a      	sub	sp, #40	; 0x28
 8007ff8:	af02      	add	r7, sp, #8
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	607a      	str	r2, [r7, #4]
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	460b      	mov	r3, r1
 8008002:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008004:	f7ff f9cc 	bl	80073a0 <HAL_GetTick>
 8008008:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800800a:	2301      	movs	r3, #1
 800800c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b20      	cmp	r3, #32
 8008018:	f040 8110 	bne.w	800823c <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	2319      	movs	r3, #25
 8008022:	2201      	movs	r2, #1
 8008024:	4988      	ldr	r1, [pc, #544]	; (8008248 <HAL_I2C_IsDeviceReady+0x254>)
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 f912 	bl	8008250 <I2C_WaitOnFlagUntilTimeout>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008032:	2302      	movs	r3, #2
 8008034:	e103      	b.n	800823e <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800803c:	2b01      	cmp	r3, #1
 800803e:	d101      	bne.n	8008044 <HAL_I2C_IsDeviceReady+0x50>
 8008040:	2302      	movs	r3, #2
 8008042:	e0fc      	b.n	800823e <HAL_I2C_IsDeviceReady+0x24a>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b01      	cmp	r3, #1
 8008058:	d007      	beq.n	800806a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f042 0201 	orr.w	r2, r2, #1
 8008068:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008078:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2224      	movs	r2, #36	; 0x24
 800807e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4a70      	ldr	r2, [pc, #448]	; (800824c <HAL_I2C_IsDeviceReady+0x258>)
 800808c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800809c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 f8d0 	bl	8008250 <I2C_WaitOnFlagUntilTimeout>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00c      	beq.n	80080d0 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080ca:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e0b6      	b.n	800823e <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80080d0:	897b      	ldrh	r3, [r7, #10]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80080de:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80080e0:	f7ff f95e 	bl	80073a0 <HAL_GetTick>
 80080e4:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	bf0c      	ite	eq
 80080f4:	2301      	moveq	r3, #1
 80080f6:	2300      	movne	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800810a:	bf0c      	ite	eq
 800810c:	2301      	moveq	r3, #1
 800810e:	2300      	movne	r3, #0
 8008110:	b2db      	uxtb	r3, r3
 8008112:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008114:	e025      	b.n	8008162 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008116:	f7ff f943 	bl	80073a0 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	d302      	bcc.n	800812c <HAL_I2C_IsDeviceReady+0x138>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d103      	bne.n	8008134 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	22a0      	movs	r2, #160	; 0xa0
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b02      	cmp	r3, #2
 8008140:	bf0c      	ite	eq
 8008142:	2301      	moveq	r3, #1
 8008144:	2300      	movne	r3, #0
 8008146:	b2db      	uxtb	r3, r3
 8008148:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008158:	bf0c      	ite	eq
 800815a:	2301      	moveq	r3, #1
 800815c:	2300      	movne	r3, #0
 800815e:	b2db      	uxtb	r3, r3
 8008160:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2ba0      	cmp	r3, #160	; 0xa0
 800816c:	d005      	beq.n	800817a <HAL_I2C_IsDeviceReady+0x186>
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d102      	bne.n	800817a <HAL_I2C_IsDeviceReady+0x186>
 8008174:	7dbb      	ldrb	r3, [r7, #22]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0cd      	beq.n	8008116 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2220      	movs	r2, #32
 800817e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b02      	cmp	r3, #2
 800818e:	d129      	bne.n	80081e4 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800819e:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081a0:	2300      	movs	r3, #0
 80081a2:	613b      	str	r3, [r7, #16]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	613b      	str	r3, [r7, #16]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	613b      	str	r3, [r7, #16]
 80081b4:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	2319      	movs	r3, #25
 80081bc:	2201      	movs	r2, #1
 80081be:	4922      	ldr	r1, [pc, #136]	; (8008248 <HAL_I2C_IsDeviceReady+0x254>)
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 f845 	bl	8008250 <I2C_WaitOnFlagUntilTimeout>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e036      	b.n	800823e <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2220      	movs	r2, #32
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	e02c      	b.n	800823e <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f2:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081fc:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	2319      	movs	r3, #25
 8008204:	2201      	movs	r2, #1
 8008206:	4910      	ldr	r1, [pc, #64]	; (8008248 <HAL_I2C_IsDeviceReady+0x254>)
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 f821 	bl	8008250 <I2C_WaitOnFlagUntilTimeout>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e012      	b.n	800823e <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	3301      	adds	r3, #1
 800821c:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	429a      	cmp	r2, r3
 8008224:	f4ff af33 	bcc.w	800808e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2220      	movs	r2, #32
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e000      	b.n	800823e <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 800823c:	2302      	movs	r3, #2
  }
}
 800823e:	4618      	mov	r0, r3
 8008240:	3720      	adds	r7, #32
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	00100002 	.word	0x00100002
 800824c:	ffff0000 	.word	0xffff0000

08008250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	603b      	str	r3, [r7, #0]
 800825c:	4613      	mov	r3, r2
 800825e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008260:	e025      	b.n	80082ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008268:	d021      	beq.n	80082ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800826a:	f7ff f899 	bl	80073a0 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d302      	bcc.n	8008280 <I2C_WaitOnFlagUntilTimeout+0x30>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d116      	bne.n	80082ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2220      	movs	r2, #32
 800828a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	f043 0220 	orr.w	r2, r3, #32
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e023      	b.n	80082f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	0c1b      	lsrs	r3, r3, #16
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d10d      	bne.n	80082d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	43da      	mvns	r2, r3
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	4013      	ands	r3, r2
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	bf0c      	ite	eq
 80082ca:	2301      	moveq	r3, #1
 80082cc:	2300      	movne	r3, #0
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	461a      	mov	r2, r3
 80082d2:	e00c      	b.n	80082ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	43da      	mvns	r2, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	4013      	ands	r3, r2
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	bf0c      	ite	eq
 80082e6:	2301      	moveq	r3, #1
 80082e8:	2300      	movne	r3, #0
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	461a      	mov	r2, r3
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d0b6      	beq.n	8008262 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
	...

08008300 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008302:	b08f      	sub	sp, #60	; 0x3c
 8008304:	af0a      	add	r7, sp, #40	; 0x28
 8008306:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e118      	b.n	8008544 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800831a:	d003      	beq.n	8008324 <HAL_PCD_Init+0x24>
 800831c:	2187      	movs	r1, #135	; 0x87
 800831e:	488b      	ldr	r0, [pc, #556]	; (800854c <HAL_PCD_Init+0x24c>)
 8008320:	f7f9 facf 	bl	80018c2 <assert_failed>

  USBx = hpcd->Instance;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d106      	bne.n	8008344 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f006 f894 	bl	800e46c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2203      	movs	r2, #3
 8008348:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008354:	2b00      	cmp	r3, #0
 8008356:	d102      	bne.n	800835e <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4618      	mov	r0, r3
 8008364:	f003 f8c9 	bl	800b4fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	603b      	str	r3, [r7, #0]
 800836e:	687e      	ldr	r6, [r7, #4]
 8008370:	466d      	mov	r5, sp
 8008372:	f106 0410 	add.w	r4, r6, #16
 8008376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800837a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800837c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800837e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008382:	e885 0003 	stmia.w	r5, {r0, r1}
 8008386:	1d33      	adds	r3, r6, #4
 8008388:	cb0e      	ldmia	r3, {r1, r2, r3}
 800838a:	6838      	ldr	r0, [r7, #0]
 800838c:	f002 ffa0 	bl	800b2d0 <USB_CoreInit>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d005      	beq.n	80083a2 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2202      	movs	r2, #2
 800839a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e0d0      	b.n	8008544 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2100      	movs	r1, #0
 80083a8:	4618      	mov	r0, r3
 80083aa:	f003 f8b7 	bl	800b51c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083ae:	2300      	movs	r3, #0
 80083b0:	73fb      	strb	r3, [r7, #15]
 80083b2:	e04a      	b.n	800844a <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80083b4:	7bfa      	ldrb	r2, [r7, #15]
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4613      	mov	r3, r2
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	1a9b      	subs	r3, r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	440b      	add	r3, r1
 80083c2:	333d      	adds	r3, #61	; 0x3d
 80083c4:	2201      	movs	r2, #1
 80083c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80083c8:	7bfa      	ldrb	r2, [r7, #15]
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	1a9b      	subs	r3, r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	333c      	adds	r3, #60	; 0x3c
 80083d8:	7bfa      	ldrb	r2, [r7, #15]
 80083da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80083dc:	7bfa      	ldrb	r2, [r7, #15]
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	b298      	uxth	r0, r3
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	4613      	mov	r3, r2
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	1a9b      	subs	r3, r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	440b      	add	r3, r1
 80083ee:	3342      	adds	r3, #66	; 0x42
 80083f0:	4602      	mov	r2, r0
 80083f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80083f4:	7bfa      	ldrb	r2, [r7, #15]
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4613      	mov	r3, r2
 80083fa:	00db      	lsls	r3, r3, #3
 80083fc:	1a9b      	subs	r3, r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	440b      	add	r3, r1
 8008402:	333f      	adds	r3, #63	; 0x3f
 8008404:	2200      	movs	r2, #0
 8008406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008408:	7bfa      	ldrb	r2, [r7, #15]
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	1a9b      	subs	r3, r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	3344      	adds	r3, #68	; 0x44
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800841c:	7bfa      	ldrb	r2, [r7, #15]
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	4613      	mov	r3, r2
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	440b      	add	r3, r1
 800842a:	3348      	adds	r3, #72	; 0x48
 800842c:	2200      	movs	r2, #0
 800842e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008430:	7bfa      	ldrb	r2, [r7, #15]
 8008432:	6879      	ldr	r1, [r7, #4]
 8008434:	4613      	mov	r3, r2
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	1a9b      	subs	r3, r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	3350      	adds	r3, #80	; 0x50
 8008440:	2200      	movs	r2, #0
 8008442:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	3301      	adds	r3, #1
 8008448:	73fb      	strb	r3, [r7, #15]
 800844a:	7bfa      	ldrb	r2, [r7, #15]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d3af      	bcc.n	80083b4 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
 8008458:	e044      	b.n	80084e4 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800845a:	7bfa      	ldrb	r2, [r7, #15]
 800845c:	6879      	ldr	r1, [r7, #4]
 800845e:	4613      	mov	r3, r2
 8008460:	00db      	lsls	r3, r3, #3
 8008462:	1a9b      	subs	r3, r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	440b      	add	r3, r1
 8008468:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800846c:	2200      	movs	r2, #0
 800846e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008470:	7bfa      	ldrb	r2, [r7, #15]
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	4613      	mov	r3, r2
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	1a9b      	subs	r3, r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	440b      	add	r3, r1
 800847e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008482:	7bfa      	ldrb	r2, [r7, #15]
 8008484:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008486:	7bfa      	ldrb	r2, [r7, #15]
 8008488:	6879      	ldr	r1, [r7, #4]
 800848a:	4613      	mov	r3, r2
 800848c:	00db      	lsls	r3, r3, #3
 800848e:	1a9b      	subs	r3, r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	440b      	add	r3, r1
 8008494:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008498:	2200      	movs	r2, #0
 800849a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800849c:	7bfa      	ldrb	r2, [r7, #15]
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	4613      	mov	r3, r2
 80084a2:	00db      	lsls	r3, r3, #3
 80084a4:	1a9b      	subs	r3, r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	440b      	add	r3, r1
 80084aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80084b2:	7bfa      	ldrb	r2, [r7, #15]
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	4613      	mov	r3, r2
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	1a9b      	subs	r3, r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	440b      	add	r3, r1
 80084c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80084c8:	7bfa      	ldrb	r2, [r7, #15]
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	4613      	mov	r3, r2
 80084ce:	00db      	lsls	r3, r3, #3
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	440b      	add	r3, r1
 80084d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	3301      	adds	r3, #1
 80084e2:	73fb      	strb	r3, [r7, #15]
 80084e4:	7bfa      	ldrb	r2, [r7, #15]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d3b5      	bcc.n	800845a <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	687e      	ldr	r6, [r7, #4]
 80084f6:	466d      	mov	r5, sp
 80084f8:	f106 0410 	add.w	r4, r6, #16
 80084fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008508:	e885 0003 	stmia.w	r5, {r0, r1}
 800850c:	1d33      	adds	r3, r6, #4
 800850e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008510:	6838      	ldr	r0, [r7, #0]
 8008512:	f003 f82d 	bl	800b570 <USB_DevInit>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2202      	movs	r2, #2
 8008520:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e00d      	b.n	8008544 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4618      	mov	r0, r3
 800853e:	f004 f86c 	bl	800c61a <USB_DevDisconnect>

  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800854c:	0800f69c 	.word	0x0800f69c

08008550 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008564:	2b01      	cmp	r3, #1
 8008566:	d101      	bne.n	800856c <HAL_PCD_Start+0x1c>
 8008568:	2302      	movs	r3, #2
 800856a:	e020      	b.n	80085ae <HAL_PCD_Start+0x5e>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008578:	2b01      	cmp	r3, #1
 800857a:	d109      	bne.n	8008590 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008580:	2b01      	cmp	r3, #1
 8008582:	d005      	beq.n	8008590 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f004 f828 	bl	800c5ea <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4618      	mov	r0, r3
 80085a0:	f002 ff9a 	bl	800b4d8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80085b6:	b590      	push	{r4, r7, lr}
 80085b8:	b08d      	sub	sp, #52	; 0x34
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f004 f8cf 	bl	800c770 <USB_GetMode>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f040 839d 	bne.w	8008d14 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4618      	mov	r0, r3
 80085e0:	f004 f833 	bl	800c64a <USB_ReadInterrupts>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 8393 	beq.w	8008d12 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f004 f82a 	bl	800c64a <USB_ReadInterrupts>
 80085f6:	4603      	mov	r3, r0
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d107      	bne.n	8008610 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	695a      	ldr	r2, [r3, #20]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f002 0202 	and.w	r2, r2, #2
 800860e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4618      	mov	r0, r3
 8008616:	f004 f818 	bl	800c64a <USB_ReadInterrupts>
 800861a:	4603      	mov	r3, r0
 800861c:	f003 0310 	and.w	r3, r3, #16
 8008620:	2b10      	cmp	r3, #16
 8008622:	d161      	bne.n	80086e8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	699a      	ldr	r2, [r3, #24]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0210 	bic.w	r2, r2, #16
 8008632:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	f003 020f 	and.w	r2, r3, #15
 8008640:	4613      	mov	r3, r2
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	1a9b      	subs	r3, r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	4413      	add	r3, r2
 8008650:	3304      	adds	r3, #4
 8008652:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	0c5b      	lsrs	r3, r3, #17
 8008658:	f003 030f 	and.w	r3, r3, #15
 800865c:	2b02      	cmp	r3, #2
 800865e:	d124      	bne.n	80086aa <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008666:	4013      	ands	r3, r2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d035      	beq.n	80086d8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	091b      	lsrs	r3, r3, #4
 8008674:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008676:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800867a:	b29b      	uxth	r3, r3
 800867c:	461a      	mov	r2, r3
 800867e:	6a38      	ldr	r0, [r7, #32]
 8008680:	f003 fe90 	bl	800c3a4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	68da      	ldr	r2, [r3, #12]
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	091b      	lsrs	r3, r3, #4
 800868c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008690:	441a      	add	r2, r3
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	699a      	ldr	r2, [r3, #24]
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	091b      	lsrs	r3, r3, #4
 800869e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086a2:	441a      	add	r2, r3
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	619a      	str	r2, [r3, #24]
 80086a8:	e016      	b.n	80086d8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	0c5b      	lsrs	r3, r3, #17
 80086ae:	f003 030f 	and.w	r3, r3, #15
 80086b2:	2b06      	cmp	r3, #6
 80086b4:	d110      	bne.n	80086d8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80086bc:	2208      	movs	r2, #8
 80086be:	4619      	mov	r1, r3
 80086c0:	6a38      	ldr	r0, [r7, #32]
 80086c2:	f003 fe6f 	bl	800c3a4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	091b      	lsrs	r3, r3, #4
 80086ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086d2:	441a      	add	r2, r3
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	699a      	ldr	r2, [r3, #24]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f042 0210 	orr.w	r2, r2, #16
 80086e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f003 ffac 	bl	800c64a <USB_ReadInterrupts>
 80086f2:	4603      	mov	r3, r0
 80086f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80086fc:	d16e      	bne.n	80087dc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80086fe:	2300      	movs	r3, #0
 8008700:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f003 ffb2 	bl	800c670 <USB_ReadDevAllOutEpInterrupt>
 800870c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800870e:	e062      	b.n	80087d6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d057      	beq.n	80087ca <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008720:	b2d2      	uxtb	r2, r2
 8008722:	4611      	mov	r1, r2
 8008724:	4618      	mov	r0, r3
 8008726:	f003 ffd7 	bl	800c6d8 <USB_ReadDevOutEPInterrupt>
 800872a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00c      	beq.n	8008750 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	015a      	lsls	r2, r3, #5
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	4413      	add	r3, r2
 800873e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008742:	461a      	mov	r2, r3
 8008744:	2301      	movs	r3, #1
 8008746:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fdb0 	bl	80092b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	f003 0308 	and.w	r3, r3, #8
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00c      	beq.n	8008774 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008766:	461a      	mov	r2, r3
 8008768:	2308      	movs	r3, #8
 800876a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800876c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 feaa 	bl	80094c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f003 0310 	and.w	r3, r3, #16
 800877a:	2b00      	cmp	r3, #0
 800877c:	d008      	beq.n	8008790 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878a:	461a      	mov	r2, r3
 800878c:	2310      	movs	r3, #16
 800878e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b00      	cmp	r3, #0
 8008798:	d008      	beq.n	80087ac <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a6:	461a      	mov	r2, r3
 80087a8:	2320      	movs	r3, #32
 80087aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d009      	beq.n	80087ca <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	015a      	lsls	r2, r3, #5
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	4413      	add	r3, r2
 80087be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c2:	461a      	mov	r2, r3
 80087c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	3301      	adds	r3, #1
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	085b      	lsrs	r3, r3, #1
 80087d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d199      	bne.n	8008710 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f003 ff32 	bl	800c64a <USB_ReadInterrupts>
 80087e6:	4603      	mov	r3, r0
 80087e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087f0:	f040 80c0 	bne.w	8008974 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f003 ff53 	bl	800c6a4 <USB_ReadDevAllInEpInterrupt>
 80087fe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008804:	e0b2      	b.n	800896c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 80a7 	beq.w	8008960 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008818:	b2d2      	uxtb	r2, r2
 800881a:	4611      	mov	r1, r2
 800881c:	4618      	mov	r0, r3
 800881e:	f003 ff79 	bl	800c714 <USB_ReadDevInEPInterrupt>
 8008822:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d057      	beq.n	80088de <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	f003 030f 	and.w	r3, r3, #15
 8008834:	2201      	movs	r2, #1
 8008836:	fa02 f303 	lsl.w	r3, r2, r3
 800883a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	43db      	mvns	r3, r3
 8008848:	69f9      	ldr	r1, [r7, #28]
 800884a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800884e:	4013      	ands	r3, r2
 8008850:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885e:	461a      	mov	r2, r3
 8008860:	2301      	movs	r3, #1
 8008862:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d132      	bne.n	80088d2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008870:	4613      	mov	r3, r2
 8008872:	00db      	lsls	r3, r3, #3
 8008874:	1a9b      	subs	r3, r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	3348      	adds	r3, #72	; 0x48
 800887c:	6819      	ldr	r1, [r3, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008882:	4613      	mov	r3, r2
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	1a9b      	subs	r3, r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4403      	add	r3, r0
 800888c:	3344      	adds	r3, #68	; 0x44
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4419      	add	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008896:	4613      	mov	r3, r2
 8008898:	00db      	lsls	r3, r3, #3
 800889a:	1a9b      	subs	r3, r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4403      	add	r3, r0
 80088a0:	3348      	adds	r3, #72	; 0x48
 80088a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d113      	bne.n	80088d2 <HAL_PCD_IRQHandler+0x31c>
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ae:	4613      	mov	r3, r2
 80088b0:	00db      	lsls	r3, r3, #3
 80088b2:	1a9b      	subs	r3, r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	440b      	add	r3, r1
 80088b8:	3350      	adds	r3, #80	; 0x50
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d108      	bne.n	80088d2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80088ca:	461a      	mov	r2, r3
 80088cc:	2101      	movs	r1, #1
 80088ce:	f003 ff81 	bl	800c7d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f005 fe48 	bl	800e56e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f003 0308 	and.w	r3, r3, #8
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d008      	beq.n	80088fa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f4:	461a      	mov	r2, r3
 80088f6:	2308      	movs	r3, #8
 80088f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f003 0310 	and.w	r3, r3, #16
 8008900:	2b00      	cmp	r3, #0
 8008902:	d008      	beq.n	8008916 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008910:	461a      	mov	r2, r3
 8008912:	2310      	movs	r3, #16
 8008914:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891c:	2b00      	cmp	r3, #0
 800891e:	d008      	beq.n	8008932 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	4413      	add	r3, r2
 8008928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800892c:	461a      	mov	r2, r3
 800892e:	2340      	movs	r3, #64	; 0x40
 8008930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d008      	beq.n	800894e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008948:	461a      	mov	r2, r3
 800894a:	2302      	movs	r3, #2
 800894c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fc1b 	bl	8009196 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	3301      	adds	r3, #1
 8008964:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008968:	085b      	lsrs	r3, r3, #1
 800896a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	2b00      	cmp	r3, #0
 8008970:	f47f af49 	bne.w	8008806 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4618      	mov	r0, r3
 800897a:	f003 fe66 	bl	800c64a <USB_ReadInterrupts>
 800897e:	4603      	mov	r3, r0
 8008980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008988:	d122      	bne.n	80089d0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	69fa      	ldr	r2, [r7, #28]
 8008994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008998:	f023 0301 	bic.w	r3, r3, #1
 800899c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d108      	bne.n	80089ba <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80089b0:	2100      	movs	r1, #0
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fe26 	bl	8009604 <HAL_PCDEx_LPM_Callback>
 80089b8:	e002      	b.n	80089c0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f005 fe44 	bl	800e648 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	695a      	ldr	r2, [r3, #20]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80089ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f003 fe38 	bl	800c64a <USB_ReadInterrupts>
 80089da:	4603      	mov	r3, r0
 80089dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089e4:	d112      	bne.n	8008a0c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d102      	bne.n	80089fc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f005 fe00 	bl	800e5fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	695a      	ldr	r2, [r3, #20]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008a0a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f003 fe1a 	bl	800c64a <USB_ReadInterrupts>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a20:	f040 80c7 	bne.w	8008bb2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	69fa      	ldr	r2, [r7, #28]
 8008a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a32:	f023 0301 	bic.w	r3, r3, #1
 8008a36:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2110      	movs	r1, #16
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f002 fefa 	bl	800b838 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a44:	2300      	movs	r3, #0
 8008a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a48:	e056      	b.n	8008af8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4c:	015a      	lsls	r2, r3, #5
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a56:	461a      	mov	r2, r3
 8008a58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a5c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a6e:	0151      	lsls	r1, r2, #5
 8008a70:	69fa      	ldr	r2, [r7, #28]
 8008a72:	440a      	add	r2, r1
 8008a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a7c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a8e:	0151      	lsls	r1, r2, #5
 8008a90:	69fa      	ldr	r2, [r7, #28]
 8008a92:	440a      	add	r2, r1
 8008a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ab0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ac2:	0151      	lsls	r1, r2, #5
 8008ac4:	69fa      	ldr	r2, [r7, #28]
 8008ac6:	440a      	add	r2, r1
 8008ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008acc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ad0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ae2:	0151      	lsls	r1, r2, #5
 8008ae4:	69fa      	ldr	r2, [r7, #28]
 8008ae6:	440a      	add	r2, r1
 8008ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008af0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	3301      	adds	r3, #1
 8008af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d3a3      	bcc.n	8008a4a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b10:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008b14:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d016      	beq.n	8008b4c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b28:	69fa      	ldr	r2, [r7, #28]
 8008b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b2e:	f043 030b 	orr.w	r3, r3, #11
 8008b32:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3e:	69fa      	ldr	r2, [r7, #28]
 8008b40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b44:	f043 030b 	orr.w	r3, r3, #11
 8008b48:	6453      	str	r3, [r2, #68]	; 0x44
 8008b4a:	e015      	b.n	8008b78 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	69fa      	ldr	r2, [r7, #28]
 8008b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008b5e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008b62:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b72:	f043 030b 	orr.w	r3, r3, #11
 8008b76:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	69fa      	ldr	r2, [r7, #28]
 8008b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b86:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b8a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6818      	ldr	r0, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	f003 fe19 	bl	800c7d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	695a      	ldr	r2, [r3, #20]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f003 fd47 	bl	800c64a <USB_ReadInterrupts>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bc6:	d124      	bne.n	8008c12 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f003 fddd 	bl	800c78c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f002 fe8f 	bl	800b8fa <USB_GetDevSpeed>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	461a      	mov	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681c      	ldr	r4, [r3, #0]
 8008be8:	f001 fa78 	bl	800a0dc <HAL_RCC_GetHCLKFreq>
 8008bec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f002 fbcc 	bl	800b394 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f005 fcde 	bl	800e5be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	695a      	ldr	r2, [r3, #20]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f003 fd17 	bl	800c64a <USB_ReadInterrupts>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	f003 0308 	and.w	r3, r3, #8
 8008c22:	2b08      	cmp	r3, #8
 8008c24:	d10a      	bne.n	8008c3c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f005 fcbb 	bl	800e5a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	695a      	ldr	r2, [r3, #20]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f002 0208 	and.w	r2, r2, #8
 8008c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f003 fd02 	bl	800c64a <USB_ReadInterrupts>
 8008c46:	4603      	mov	r3, r0
 8008c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c50:	d10f      	bne.n	8008c72 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f005 fd13 	bl	800e688 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	695a      	ldr	r2, [r3, #20]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008c70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f003 fce7 	bl	800c64a <USB_ReadInterrupts>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c86:	d10f      	bne.n	8008ca8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f005 fce6 	bl	800e664 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	695a      	ldr	r2, [r3, #20]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f003 fccc 	bl	800c64a <USB_ReadInterrupts>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cbc:	d10a      	bne.n	8008cd4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f005 fcf4 	bl	800e6ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	695a      	ldr	r2, [r3, #20]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008cd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f003 fcb6 	bl	800c64a <USB_ReadInterrupts>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	f003 0304 	and.w	r3, r3, #4
 8008ce4:	2b04      	cmp	r3, #4
 8008ce6:	d115      	bne.n	8008d14 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	f003 0304 	and.w	r3, r3, #4
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d002      	beq.n	8008d00 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f005 fce4 	bl	800e6c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6859      	ldr	r1, [r3, #4]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	605a      	str	r2, [r3, #4]
 8008d10:	e000      	b.n	8008d14 <HAL_PCD_IRQHandler+0x75e>
      return;
 8008d12:	bf00      	nop
    }
  }
}
 8008d14:	3734      	adds	r7, #52	; 0x34
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd90      	pop	{r4, r7, pc}

08008d1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d101      	bne.n	8008d34 <HAL_PCD_SetAddress+0x1a>
 8008d30:	2302      	movs	r3, #2
 8008d32:	e013      	b.n	8008d5c <HAL_PCD_SetAddress+0x42>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	78fa      	ldrb	r2, [r7, #3]
 8008d40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	78fa      	ldrb	r2, [r7, #3]
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f003 fc26 	bl	800c59e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	4611      	mov	r1, r2
 8008d70:	461a      	mov	r2, r3
 8008d72:	4603      	mov	r3, r0
 8008d74:	70fb      	strb	r3, [r7, #3]
 8008d76:	460b      	mov	r3, r1
 8008d78:	803b      	strh	r3, [r7, #0]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008d82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	da0f      	bge.n	8008daa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d8a:	78fb      	ldrb	r3, [r7, #3]
 8008d8c:	f003 020f 	and.w	r2, r3, #15
 8008d90:	4613      	mov	r3, r2
 8008d92:	00db      	lsls	r3, r3, #3
 8008d94:	1a9b      	subs	r3, r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	3338      	adds	r3, #56	; 0x38
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	3304      	adds	r3, #4
 8008da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2201      	movs	r2, #1
 8008da6:	705a      	strb	r2, [r3, #1]
 8008da8:	e00f      	b.n	8008dca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	f003 020f 	and.w	r2, r3, #15
 8008db0:	4613      	mov	r3, r2
 8008db2:	00db      	lsls	r3, r3, #3
 8008db4:	1a9b      	subs	r3, r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008dca:	78fb      	ldrb	r3, [r7, #3]
 8008dcc:	f003 030f 	and.w	r3, r3, #15
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008dd6:	883a      	ldrh	r2, [r7, #0]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	78ba      	ldrb	r2, [r7, #2]
 8008de0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d004      	beq.n	8008df4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008df4:	78bb      	ldrb	r3, [r7, #2]
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d102      	bne.n	8008e00 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d101      	bne.n	8008e0e <HAL_PCD_EP_Open+0xaa>
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	e00e      	b.n	8008e2c <HAL_PCD_EP_Open+0xc8>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68f9      	ldr	r1, [r7, #12]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f002 fd91 	bl	800b944 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008e2a:	7afb      	ldrb	r3, [r7, #11]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	da0f      	bge.n	8008e68 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	f003 020f 	and.w	r2, r3, #15
 8008e4e:	4613      	mov	r3, r2
 8008e50:	00db      	lsls	r3, r3, #3
 8008e52:	1a9b      	subs	r3, r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	3338      	adds	r3, #56	; 0x38
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2201      	movs	r2, #1
 8008e64:	705a      	strb	r2, [r3, #1]
 8008e66:	e00f      	b.n	8008e88 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e68:	78fb      	ldrb	r3, [r7, #3]
 8008e6a:	f003 020f 	and.w	r2, r3, #15
 8008e6e:	4613      	mov	r3, r2
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	1a9b      	subs	r3, r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	3304      	adds	r3, #4
 8008e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	f003 030f 	and.w	r3, r3, #15
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d101      	bne.n	8008ea2 <HAL_PCD_EP_Close+0x6e>
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	e00e      	b.n	8008ec0 <HAL_PCD_EP_Close+0x8c>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68f9      	ldr	r1, [r7, #12]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f002 fdcf 	bl	800ba54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	607a      	str	r2, [r7, #4]
 8008ed2:	603b      	str	r3, [r7, #0]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ed8:	7afb      	ldrb	r3, [r7, #11]
 8008eda:	f003 020f 	and.w	r2, r3, #15
 8008ede:	4613      	mov	r3, r2
 8008ee0:	00db      	lsls	r3, r3, #3
 8008ee2:	1a9b      	subs	r3, r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	4413      	add	r3, r2
 8008eee:	3304      	adds	r3, #4
 8008ef0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	2200      	movs	r2, #0
 8008f02:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2200      	movs	r2, #0
 8008f08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f0a:	7afb      	ldrb	r3, [r7, #11]
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d102      	bne.n	8008f24 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008f24:	7afb      	ldrb	r3, [r7, #11]
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d109      	bne.n	8008f42 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6818      	ldr	r0, [r3, #0]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	461a      	mov	r2, r3
 8008f3a:	6979      	ldr	r1, [r7, #20]
 8008f3c:	f003 f8aa 	bl	800c094 <USB_EP0StartXfer>
 8008f40:	e008      	b.n	8008f54 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6818      	ldr	r0, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	6979      	ldr	r1, [r7, #20]
 8008f50:	f002 fe5c 	bl	800bc0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3718      	adds	r7, #24
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	460b      	mov	r3, r1
 8008f68:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	f003 020f 	and.w	r2, r3, #15
 8008f70:	6879      	ldr	r1, [r7, #4]
 8008f72:	4613      	mov	r3, r2
 8008f74:	00db      	lsls	r3, r3, #3
 8008f76:	1a9b      	subs	r3, r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	440b      	add	r3, r1
 8008f7c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008f80:	681b      	ldr	r3, [r3, #0]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	370c      	adds	r7, #12
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b086      	sub	sp, #24
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	607a      	str	r2, [r7, #4]
 8008f98:	603b      	str	r3, [r7, #0]
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f9e:	7afb      	ldrb	r3, [r7, #11]
 8008fa0:	f003 020f 	and.w	r2, r3, #15
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	00db      	lsls	r3, r3, #3
 8008fa8:	1a9b      	subs	r3, r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	3338      	adds	r3, #56	; 0x38
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008fce:	7afb      	ldrb	r3, [r7, #11]
 8008fd0:	f003 030f 	and.w	r3, r3, #15
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d102      	bne.n	8008fe8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008fe8:	7afb      	ldrb	r3, [r7, #11]
 8008fea:	f003 030f 	and.w	r3, r3, #15
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d109      	bne.n	8009006 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	6979      	ldr	r1, [r7, #20]
 8009000:	f003 f848 	bl	800c094 <USB_EP0StartXfer>
 8009004:	e008      	b.n	8009018 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	b2db      	uxtb	r3, r3
 8009010:	461a      	mov	r2, r3
 8009012:	6979      	ldr	r1, [r7, #20]
 8009014:	f002 fdfa 	bl	800bc0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	460b      	mov	r3, r1
 800902c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800902e:	78fb      	ldrb	r3, [r7, #3]
 8009030:	f003 020f 	and.w	r2, r3, #15
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	429a      	cmp	r2, r3
 800903a:	d901      	bls.n	8009040 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e050      	b.n	80090e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009044:	2b00      	cmp	r3, #0
 8009046:	da0f      	bge.n	8009068 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	f003 020f 	and.w	r2, r3, #15
 800904e:	4613      	mov	r3, r2
 8009050:	00db      	lsls	r3, r3, #3
 8009052:	1a9b      	subs	r3, r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	3338      	adds	r3, #56	; 0x38
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	4413      	add	r3, r2
 800905c:	3304      	adds	r3, #4
 800905e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2201      	movs	r2, #1
 8009064:	705a      	strb	r2, [r3, #1]
 8009066:	e00d      	b.n	8009084 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009068:	78fa      	ldrb	r2, [r7, #3]
 800906a:	4613      	mov	r3, r2
 800906c:	00db      	lsls	r3, r3, #3
 800906e:	1a9b      	subs	r3, r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	4413      	add	r3, r2
 800907a:	3304      	adds	r3, #4
 800907c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2201      	movs	r2, #1
 8009088:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800908a:	78fb      	ldrb	r3, [r7, #3]
 800908c:	f003 030f 	and.w	r3, r3, #15
 8009090:	b2da      	uxtb	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800909c:	2b01      	cmp	r3, #1
 800909e:	d101      	bne.n	80090a4 <HAL_PCD_EP_SetStall+0x82>
 80090a0:	2302      	movs	r3, #2
 80090a2:	e01e      	b.n	80090e2 <HAL_PCD_EP_SetStall+0xc0>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68f9      	ldr	r1, [r7, #12]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f003 f99f 	bl	800c3f6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10a      	bne.n	80090d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6818      	ldr	r0, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	b2d9      	uxtb	r1, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80090d2:	461a      	mov	r2, r3
 80090d4:	f003 fb7e 	bl	800c7d4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	460b      	mov	r3, r1
 80090f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	f003 020f 	and.w	r2, r3, #15
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	429a      	cmp	r2, r3
 8009102:	d901      	bls.n	8009108 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e042      	b.n	800918e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800910c:	2b00      	cmp	r3, #0
 800910e:	da0f      	bge.n	8009130 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	f003 020f 	and.w	r2, r3, #15
 8009116:	4613      	mov	r3, r2
 8009118:	00db      	lsls	r3, r3, #3
 800911a:	1a9b      	subs	r3, r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	3338      	adds	r3, #56	; 0x38
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	4413      	add	r3, r2
 8009124:	3304      	adds	r3, #4
 8009126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2201      	movs	r2, #1
 800912c:	705a      	strb	r2, [r3, #1]
 800912e:	e00f      	b.n	8009150 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	f003 020f 	and.w	r2, r3, #15
 8009136:	4613      	mov	r3, r2
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	1a9b      	subs	r3, r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	4413      	add	r3, r2
 8009146:	3304      	adds	r3, #4
 8009148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009156:	78fb      	ldrb	r3, [r7, #3]
 8009158:	f003 030f 	and.w	r3, r3, #15
 800915c:	b2da      	uxtb	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009168:	2b01      	cmp	r3, #1
 800916a:	d101      	bne.n	8009170 <HAL_PCD_EP_ClrStall+0x86>
 800916c:	2302      	movs	r3, #2
 800916e:	e00e      	b.n	800918e <HAL_PCD_EP_ClrStall+0xa4>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68f9      	ldr	r1, [r7, #12]
 800917e:	4618      	mov	r0, r3
 8009180:	f003 f9a7 	bl	800c4d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b08a      	sub	sp, #40	; 0x28
 800919a:	af02      	add	r7, sp, #8
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	4613      	mov	r3, r2
 80091ae:	00db      	lsls	r3, r3, #3
 80091b0:	1a9b      	subs	r3, r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	3338      	adds	r3, #56	; 0x38
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	4413      	add	r3, r2
 80091ba:	3304      	adds	r3, #4
 80091bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	699a      	ldr	r2, [r3, #24]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d901      	bls.n	80091ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e06c      	b.n	80092a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	695a      	ldr	r2, [r3, #20]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	69fa      	ldr	r2, [r7, #28]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d902      	bls.n	80091ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	3303      	adds	r3, #3
 80091ee:	089b      	lsrs	r3, r3, #2
 80091f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80091f2:	e02b      	b.n	800924c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	695a      	ldr	r2, [r3, #20]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	69fa      	ldr	r2, [r7, #28]
 8009206:	429a      	cmp	r2, r3
 8009208:	d902      	bls.n	8009210 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	3303      	adds	r3, #3
 8009214:	089b      	lsrs	r3, r3, #2
 8009216:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	68d9      	ldr	r1, [r3, #12]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	b2da      	uxtb	r2, r3
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009228:	b2db      	uxtb	r3, r3
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	4603      	mov	r3, r0
 800922e:	6978      	ldr	r0, [r7, #20]
 8009230:	f003 f883 	bl	800c33a <USB_WritePacket>

    ep->xfer_buff  += len;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	68da      	ldr	r2, [r3, #12]
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	441a      	add	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	699a      	ldr	r2, [r3, #24]
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	441a      	add	r2, r3
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	b29b      	uxth	r3, r3
 800925c:	69ba      	ldr	r2, [r7, #24]
 800925e:	429a      	cmp	r2, r3
 8009260:	d809      	bhi.n	8009276 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	699a      	ldr	r2, [r3, #24]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800926a:	429a      	cmp	r2, r3
 800926c:	d203      	bcs.n	8009276 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1be      	bne.n	80091f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	695a      	ldr	r2, [r3, #20]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	429a      	cmp	r2, r3
 8009280:	d811      	bhi.n	80092a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	f003 030f 	and.w	r3, r3, #15
 8009288:	2201      	movs	r2, #1
 800928a:	fa02 f303 	lsl.w	r3, r2, r3
 800928e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	43db      	mvns	r3, r3
 800929c:	6939      	ldr	r1, [r7, #16]
 800929e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092a2:	4013      	ands	r3, r2
 80092a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3720      	adds	r7, #32
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	333c      	adds	r3, #60	; 0x3c
 80092c8:	3304      	adds	r3, #4
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	015a      	lsls	r2, r3, #5
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	4413      	add	r3, r2
 80092d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	f040 80a0 	bne.w	8009428 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f003 0308 	and.w	r3, r3, #8
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d015      	beq.n	800931e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	4a72      	ldr	r2, [pc, #456]	; (80094c0 <PCD_EP_OutXfrComplete_int+0x210>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	f240 80dd 	bls.w	80094b6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 80d7 	beq.w	80094b6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009314:	461a      	mov	r2, r3
 8009316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800931a:	6093      	str	r3, [r2, #8]
 800931c:	e0cb      	b.n	80094b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	f003 0320 	and.w	r3, r3, #32
 8009324:	2b00      	cmp	r3, #0
 8009326:	d009      	beq.n	800933c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009334:	461a      	mov	r2, r3
 8009336:	2320      	movs	r3, #32
 8009338:	6093      	str	r3, [r2, #8]
 800933a:	e0bc      	b.n	80094b6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009342:	2b00      	cmp	r3, #0
 8009344:	f040 80b7 	bne.w	80094b6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4a5d      	ldr	r2, [pc, #372]	; (80094c0 <PCD_EP_OutXfrComplete_int+0x210>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d90f      	bls.n	8009370 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00a      	beq.n	8009370 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	015a      	lsls	r2, r3, #5
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	4413      	add	r3, r2
 8009362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009366:	461a      	mov	r2, r3
 8009368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800936c:	6093      	str	r3, [r2, #8]
 800936e:	e0a2      	b.n	80094b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009370:	6879      	ldr	r1, [r7, #4]
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	4613      	mov	r3, r2
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	1a9b      	subs	r3, r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	440b      	add	r3, r1
 800937e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009382:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	0159      	lsls	r1, r3, #5
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	440b      	add	r3, r1
 800938c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009396:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	4613      	mov	r3, r2
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	1a9b      	subs	r3, r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4403      	add	r3, r0
 80093a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80093aa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80093ac:	6879      	ldr	r1, [r7, #4]
 80093ae:	683a      	ldr	r2, [r7, #0]
 80093b0:	4613      	mov	r3, r2
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	1a9b      	subs	r3, r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	440b      	add	r3, r1
 80093ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80093be:	6819      	ldr	r1, [r3, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	4613      	mov	r3, r2
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	1a9b      	subs	r3, r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4403      	add	r3, r0
 80093ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4419      	add	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	4613      	mov	r3, r2
 80093dc:	00db      	lsls	r3, r3, #3
 80093de:	1a9b      	subs	r3, r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4403      	add	r3, r0
 80093e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80093e8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d114      	bne.n	800941a <PCD_EP_OutXfrComplete_int+0x16a>
 80093f0:	6879      	ldr	r1, [r7, #4]
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	4613      	mov	r3, r2
 80093f6:	00db      	lsls	r3, r3, #3
 80093f8:	1a9b      	subs	r3, r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	440b      	add	r3, r1
 80093fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d108      	bne.n	800941a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6818      	ldr	r0, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009412:	461a      	mov	r2, r3
 8009414:	2101      	movs	r1, #1
 8009416:	f003 f9dd 	bl	800c7d4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f005 f889 	bl	800e538 <HAL_PCD_DataOutStageCallback>
 8009426:	e046      	b.n	80094b6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4a26      	ldr	r2, [pc, #152]	; (80094c4 <PCD_EP_OutXfrComplete_int+0x214>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d124      	bne.n	800947a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00a      	beq.n	8009450 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	4413      	add	r3, r2
 8009442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009446:	461a      	mov	r2, r3
 8009448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800944c:	6093      	str	r3, [r2, #8]
 800944e:	e032      	b.n	80094b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f003 0320 	and.w	r3, r3, #32
 8009456:	2b00      	cmp	r3, #0
 8009458:	d008      	beq.n	800946c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009466:	461a      	mov	r2, r3
 8009468:	2320      	movs	r3, #32
 800946a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	b2db      	uxtb	r3, r3
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f005 f860 	bl	800e538 <HAL_PCD_DataOutStageCallback>
 8009478:	e01d      	b.n	80094b6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d114      	bne.n	80094aa <PCD_EP_OutXfrComplete_int+0x1fa>
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	4613      	mov	r3, r2
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	1a9b      	subs	r3, r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	440b      	add	r3, r1
 800948e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d108      	bne.n	80094aa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6818      	ldr	r0, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80094a2:	461a      	mov	r2, r3
 80094a4:	2100      	movs	r1, #0
 80094a6:	f003 f995 	bl	800c7d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f005 f841 	bl	800e538 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3718      	adds	r7, #24
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	4f54300a 	.word	0x4f54300a
 80094c4:	4f54310a 	.word	0x4f54310a

080094c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	333c      	adds	r3, #60	; 0x3c
 80094e0:	3304      	adds	r3, #4
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	015a      	lsls	r2, r3, #5
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4a15      	ldr	r2, [pc, #84]	; (8009550 <PCD_EP_OutSetupPacket_int+0x88>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d90e      	bls.n	800951c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009504:	2b00      	cmp	r3, #0
 8009506:	d009      	beq.n	800951c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	015a      	lsls	r2, r3, #5
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	4413      	add	r3, r2
 8009510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009514:	461a      	mov	r2, r3
 8009516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800951a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f004 fff9 	bl	800e514 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	4a0a      	ldr	r2, [pc, #40]	; (8009550 <PCD_EP_OutSetupPacket_int+0x88>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d90c      	bls.n	8009544 <PCD_EP_OutSetupPacket_int+0x7c>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d108      	bne.n	8009544 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6818      	ldr	r0, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800953c:	461a      	mov	r2, r3
 800953e:	2101      	movs	r1, #1
 8009540:	f003 f948 	bl	800c7d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	4f54300a 	.word	0x4f54300a

08009554 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	70fb      	strb	r3, [r7, #3]
 8009560:	4613      	mov	r3, r2
 8009562:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800956c:	78fb      	ldrb	r3, [r7, #3]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d107      	bne.n	8009582 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009572:	883b      	ldrh	r3, [r7, #0]
 8009574:	0419      	lsls	r1, r3, #16
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	430a      	orrs	r2, r1
 800957e:	629a      	str	r2, [r3, #40]	; 0x28
 8009580:	e028      	b.n	80095d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	0c1b      	lsrs	r3, r3, #16
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	4413      	add	r3, r2
 800958e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009590:	2300      	movs	r3, #0
 8009592:	73fb      	strb	r3, [r7, #15]
 8009594:	e00d      	b.n	80095b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	3340      	adds	r3, #64	; 0x40
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	0c1b      	lsrs	r3, r3, #16
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	4413      	add	r3, r2
 80095aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	3301      	adds	r3, #1
 80095b0:	73fb      	strb	r3, [r7, #15]
 80095b2:	7bfa      	ldrb	r2, [r7, #15]
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d3ec      	bcc.n	8009596 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80095bc:	883b      	ldrh	r3, [r7, #0]
 80095be:	0418      	lsls	r0, r3, #16
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6819      	ldr	r1, [r3, #0]
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	4302      	orrs	r2, r0
 80095cc:	3340      	adds	r3, #64	; 0x40
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	440b      	add	r3, r1
 80095d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b083      	sub	sp, #12
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	460b      	mov	r3, r1
 80095ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	887a      	ldrh	r2, [r7, #2]
 80095f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	460b      	mov	r3, r1
 800960e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e30d      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b0f      	cmp	r3, #15
 8009634:	d903      	bls.n	800963e <HAL_RCC_OscConfig+0x22>
 8009636:	21e8      	movs	r1, #232	; 0xe8
 8009638:	48a3      	ldr	r0, [pc, #652]	; (80098c8 <HAL_RCC_OscConfig+0x2ac>)
 800963a:	f7f8 f942 	bl	80018c2 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 8088 	beq.w	800975c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00d      	beq.n	8009670 <HAL_RCC_OscConfig+0x54>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800965c:	d008      	beq.n	8009670 <HAL_RCC_OscConfig+0x54>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009666:	d003      	beq.n	8009670 <HAL_RCC_OscConfig+0x54>
 8009668:	21ed      	movs	r1, #237	; 0xed
 800966a:	4897      	ldr	r0, [pc, #604]	; (80098c8 <HAL_RCC_OscConfig+0x2ac>)
 800966c:	f7f8 f929 	bl	80018c2 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009670:	4b96      	ldr	r3, [pc, #600]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f003 030c 	and.w	r3, r3, #12
 8009678:	2b04      	cmp	r3, #4
 800967a:	d00c      	beq.n	8009696 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800967c:	4b93      	ldr	r3, [pc, #588]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009684:	2b08      	cmp	r3, #8
 8009686:	d112      	bne.n	80096ae <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009688:	4b90      	ldr	r3, [pc, #576]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009694:	d10b      	bne.n	80096ae <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009696:	4b8d      	ldr	r3, [pc, #564]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d05b      	beq.n	800975a <HAL_RCC_OscConfig+0x13e>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d157      	bne.n	800975a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e2cd      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096b6:	d106      	bne.n	80096c6 <HAL_RCC_OscConfig+0xaa>
 80096b8:	4b84      	ldr	r3, [pc, #528]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a83      	ldr	r2, [pc, #524]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80096be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096c2:	6013      	str	r3, [r2, #0]
 80096c4:	e01d      	b.n	8009702 <HAL_RCC_OscConfig+0xe6>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096ce:	d10c      	bne.n	80096ea <HAL_RCC_OscConfig+0xce>
 80096d0:	4b7e      	ldr	r3, [pc, #504]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a7d      	ldr	r2, [pc, #500]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80096d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096da:	6013      	str	r3, [r2, #0]
 80096dc:	4b7b      	ldr	r3, [pc, #492]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a7a      	ldr	r2, [pc, #488]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80096e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	e00b      	b.n	8009702 <HAL_RCC_OscConfig+0xe6>
 80096ea:	4b78      	ldr	r3, [pc, #480]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a77      	ldr	r2, [pc, #476]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80096f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096f4:	6013      	str	r3, [r2, #0]
 80096f6:	4b75      	ldr	r3, [pc, #468]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a74      	ldr	r2, [pc, #464]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80096fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009700:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d013      	beq.n	8009732 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800970a:	f7fd fe49 	bl	80073a0 <HAL_GetTick>
 800970e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009710:	e008      	b.n	8009724 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009712:	f7fd fe45 	bl	80073a0 <HAL_GetTick>
 8009716:	4602      	mov	r2, r0
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	2b64      	cmp	r3, #100	; 0x64
 800971e:	d901      	bls.n	8009724 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e292      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009724:	4b69      	ldr	r3, [pc, #420]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d0f0      	beq.n	8009712 <HAL_RCC_OscConfig+0xf6>
 8009730:	e014      	b.n	800975c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009732:	f7fd fe35 	bl	80073a0 <HAL_GetTick>
 8009736:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009738:	e008      	b.n	800974c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800973a:	f7fd fe31 	bl	80073a0 <HAL_GetTick>
 800973e:	4602      	mov	r2, r0
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	2b64      	cmp	r3, #100	; 0x64
 8009746:	d901      	bls.n	800974c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	e27e      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800974c:	4b5f      	ldr	r3, [pc, #380]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1f0      	bne.n	800973a <HAL_RCC_OscConfig+0x11e>
 8009758:	e000      	b.n	800975c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800975a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 0302 	and.w	r3, r3, #2
 8009764:	2b00      	cmp	r3, #0
 8009766:	d079      	beq.n	800985c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d008      	beq.n	8009782 <HAL_RCC_OscConfig+0x166>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d004      	beq.n	8009782 <HAL_RCC_OscConfig+0x166>
 8009778:	f240 111f 	movw	r1, #287	; 0x11f
 800977c:	4852      	ldr	r0, [pc, #328]	; (80098c8 <HAL_RCC_OscConfig+0x2ac>)
 800977e:	f7f8 f8a0 	bl	80018c2 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	2b1f      	cmp	r3, #31
 8009788:	d904      	bls.n	8009794 <HAL_RCC_OscConfig+0x178>
 800978a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800978e:	484e      	ldr	r0, [pc, #312]	; (80098c8 <HAL_RCC_OscConfig+0x2ac>)
 8009790:	f7f8 f897 	bl	80018c2 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009794:	4b4d      	ldr	r3, [pc, #308]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	f003 030c 	and.w	r3, r3, #12
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00b      	beq.n	80097b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80097a0:	4b4a      	ldr	r3, [pc, #296]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80097a8:	2b08      	cmp	r3, #8
 80097aa:	d11c      	bne.n	80097e6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80097ac:	4b47      	ldr	r3, [pc, #284]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d116      	bne.n	80097e6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097b8:	4b44      	ldr	r3, [pc, #272]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0302 	and.w	r3, r3, #2
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d005      	beq.n	80097d0 <HAL_RCC_OscConfig+0x1b4>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d001      	beq.n	80097d0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e23c      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097d0:	4b3e      	ldr	r3, [pc, #248]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	00db      	lsls	r3, r3, #3
 80097de:	493b      	ldr	r1, [pc, #236]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80097e0:	4313      	orrs	r3, r2
 80097e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097e4:	e03a      	b.n	800985c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d020      	beq.n	8009830 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80097ee:	4b38      	ldr	r3, [pc, #224]	; (80098d0 <HAL_RCC_OscConfig+0x2b4>)
 80097f0:	2201      	movs	r2, #1
 80097f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f4:	f7fd fdd4 	bl	80073a0 <HAL_GetTick>
 80097f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097fa:	e008      	b.n	800980e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097fc:	f7fd fdd0 	bl	80073a0 <HAL_GetTick>
 8009800:	4602      	mov	r2, r0
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	2b02      	cmp	r3, #2
 8009808:	d901      	bls.n	800980e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e21d      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800980e:	4b2f      	ldr	r3, [pc, #188]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d0f0      	beq.n	80097fc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800981a:	4b2c      	ldr	r3, [pc, #176]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	00db      	lsls	r3, r3, #3
 8009828:	4928      	ldr	r1, [pc, #160]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 800982a:	4313      	orrs	r3, r2
 800982c:	600b      	str	r3, [r1, #0]
 800982e:	e015      	b.n	800985c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009830:	4b27      	ldr	r3, [pc, #156]	; (80098d0 <HAL_RCC_OscConfig+0x2b4>)
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009836:	f7fd fdb3 	bl	80073a0 <HAL_GetTick>
 800983a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800983c:	e008      	b.n	8009850 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800983e:	f7fd fdaf 	bl	80073a0 <HAL_GetTick>
 8009842:	4602      	mov	r2, r0
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	2b02      	cmp	r3, #2
 800984a:	d901      	bls.n	8009850 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e1fc      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009850:	4b1e      	ldr	r3, [pc, #120]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0302 	and.w	r3, r3, #2
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1f0      	bne.n	800983e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 0308 	and.w	r3, r3, #8
 8009864:	2b00      	cmp	r3, #0
 8009866:	d046      	beq.n	80098f6 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d008      	beq.n	8009882 <HAL_RCC_OscConfig+0x266>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	695b      	ldr	r3, [r3, #20]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d004      	beq.n	8009882 <HAL_RCC_OscConfig+0x266>
 8009878:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800987c:	4812      	ldr	r0, [pc, #72]	; (80098c8 <HAL_RCC_OscConfig+0x2ac>)
 800987e:	f7f8 f820 	bl	80018c2 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d016      	beq.n	80098b8 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800988a:	4b12      	ldr	r3, [pc, #72]	; (80098d4 <HAL_RCC_OscConfig+0x2b8>)
 800988c:	2201      	movs	r2, #1
 800988e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009890:	f7fd fd86 	bl	80073a0 <HAL_GetTick>
 8009894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009896:	e008      	b.n	80098aa <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009898:	f7fd fd82 	bl	80073a0 <HAL_GetTick>
 800989c:	4602      	mov	r2, r0
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d901      	bls.n	80098aa <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e1cf      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80098aa:	4b08      	ldr	r3, [pc, #32]	; (80098cc <HAL_RCC_OscConfig+0x2b0>)
 80098ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098ae:	f003 0302 	and.w	r3, r3, #2
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0f0      	beq.n	8009898 <HAL_RCC_OscConfig+0x27c>
 80098b6:	e01e      	b.n	80098f6 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80098b8:	4b06      	ldr	r3, [pc, #24]	; (80098d4 <HAL_RCC_OscConfig+0x2b8>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098be:	f7fd fd6f 	bl	80073a0 <HAL_GetTick>
 80098c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098c4:	e011      	b.n	80098ea <HAL_RCC_OscConfig+0x2ce>
 80098c6:	bf00      	nop
 80098c8:	0800f6d4 	.word	0x0800f6d4
 80098cc:	40023800 	.word	0x40023800
 80098d0:	42470000 	.word	0x42470000
 80098d4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80098d8:	f7fd fd62 	bl	80073a0 <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d901      	bls.n	80098ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e1af      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098ea:	4b97      	ldr	r3, [pc, #604]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 80098ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1f0      	bne.n	80098d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0304 	and.w	r3, r3, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 80a8 	beq.w	8009a54 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009904:	2300      	movs	r3, #0
 8009906:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00c      	beq.n	800992a <HAL_RCC_OscConfig+0x30e>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d008      	beq.n	800992a <HAL_RCC_OscConfig+0x30e>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	2b05      	cmp	r3, #5
 800991e:	d004      	beq.n	800992a <HAL_RCC_OscConfig+0x30e>
 8009920:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8009924:	4889      	ldr	r0, [pc, #548]	; (8009b4c <HAL_RCC_OscConfig+0x530>)
 8009926:	f7f7 ffcc 	bl	80018c2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800992a:	4b87      	ldr	r3, [pc, #540]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 800992c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10f      	bne.n	8009956 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009936:	2300      	movs	r3, #0
 8009938:	60bb      	str	r3, [r7, #8]
 800993a:	4b83      	ldr	r3, [pc, #524]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 800993c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993e:	4a82      	ldr	r2, [pc, #520]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 8009940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009944:	6413      	str	r3, [r2, #64]	; 0x40
 8009946:	4b80      	ldr	r3, [pc, #512]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 8009948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800994e:	60bb      	str	r3, [r7, #8]
 8009950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009952:	2301      	movs	r3, #1
 8009954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009956:	4b7e      	ldr	r3, [pc, #504]	; (8009b50 <HAL_RCC_OscConfig+0x534>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800995e:	2b00      	cmp	r3, #0
 8009960:	d118      	bne.n	8009994 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009962:	4b7b      	ldr	r3, [pc, #492]	; (8009b50 <HAL_RCC_OscConfig+0x534>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a7a      	ldr	r2, [pc, #488]	; (8009b50 <HAL_RCC_OscConfig+0x534>)
 8009968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800996c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800996e:	f7fd fd17 	bl	80073a0 <HAL_GetTick>
 8009972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009974:	e008      	b.n	8009988 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009976:	f7fd fd13 	bl	80073a0 <HAL_GetTick>
 800997a:	4602      	mov	r2, r0
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	2b02      	cmp	r3, #2
 8009982:	d901      	bls.n	8009988 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e160      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009988:	4b71      	ldr	r3, [pc, #452]	; (8009b50 <HAL_RCC_OscConfig+0x534>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0f0      	beq.n	8009976 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d106      	bne.n	80099aa <HAL_RCC_OscConfig+0x38e>
 800999c:	4b6a      	ldr	r3, [pc, #424]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 800999e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a0:	4a69      	ldr	r2, [pc, #420]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 80099a2:	f043 0301 	orr.w	r3, r3, #1
 80099a6:	6713      	str	r3, [r2, #112]	; 0x70
 80099a8:	e01c      	b.n	80099e4 <HAL_RCC_OscConfig+0x3c8>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	2b05      	cmp	r3, #5
 80099b0:	d10c      	bne.n	80099cc <HAL_RCC_OscConfig+0x3b0>
 80099b2:	4b65      	ldr	r3, [pc, #404]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 80099b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099b6:	4a64      	ldr	r2, [pc, #400]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 80099b8:	f043 0304 	orr.w	r3, r3, #4
 80099bc:	6713      	str	r3, [r2, #112]	; 0x70
 80099be:	4b62      	ldr	r3, [pc, #392]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 80099c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c2:	4a61      	ldr	r2, [pc, #388]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 80099c4:	f043 0301 	orr.w	r3, r3, #1
 80099c8:	6713      	str	r3, [r2, #112]	; 0x70
 80099ca:	e00b      	b.n	80099e4 <HAL_RCC_OscConfig+0x3c8>
 80099cc:	4b5e      	ldr	r3, [pc, #376]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 80099ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099d0:	4a5d      	ldr	r2, [pc, #372]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 80099d2:	f023 0301 	bic.w	r3, r3, #1
 80099d6:	6713      	str	r3, [r2, #112]	; 0x70
 80099d8:	4b5b      	ldr	r3, [pc, #364]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 80099da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099dc:	4a5a      	ldr	r2, [pc, #360]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 80099de:	f023 0304 	bic.w	r3, r3, #4
 80099e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d015      	beq.n	8009a18 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099ec:	f7fd fcd8 	bl	80073a0 <HAL_GetTick>
 80099f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099f2:	e00a      	b.n	8009a0a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099f4:	f7fd fcd4 	bl	80073a0 <HAL_GetTick>
 80099f8:	4602      	mov	r2, r0
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d901      	bls.n	8009a0a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e11f      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a0a:	4b4f      	ldr	r3, [pc, #316]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 8009a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a0e:	f003 0302 	and.w	r3, r3, #2
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0ee      	beq.n	80099f4 <HAL_RCC_OscConfig+0x3d8>
 8009a16:	e014      	b.n	8009a42 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a18:	f7fd fcc2 	bl	80073a0 <HAL_GetTick>
 8009a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a1e:	e00a      	b.n	8009a36 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a20:	f7fd fcbe 	bl	80073a0 <HAL_GetTick>
 8009a24:	4602      	mov	r2, r0
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d901      	bls.n	8009a36 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8009a32:	2303      	movs	r3, #3
 8009a34:	e109      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a36:	4b44      	ldr	r3, [pc, #272]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 8009a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a3a:	f003 0302 	and.w	r3, r3, #2
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1ee      	bne.n	8009a20 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d105      	bne.n	8009a54 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a48:	4b3f      	ldr	r3, [pc, #252]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 8009a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4c:	4a3e      	ldr	r2, [pc, #248]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 8009a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00c      	beq.n	8009a76 <HAL_RCC_OscConfig+0x45a>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d008      	beq.n	8009a76 <HAL_RCC_OscConfig+0x45a>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d004      	beq.n	8009a76 <HAL_RCC_OscConfig+0x45a>
 8009a6c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8009a70:	4836      	ldr	r0, [pc, #216]	; (8009b4c <HAL_RCC_OscConfig+0x530>)
 8009a72:	f7f7 ff26 	bl	80018c2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f000 80e4 	beq.w	8009c48 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a80:	4b31      	ldr	r3, [pc, #196]	; (8009b48 <HAL_RCC_OscConfig+0x52c>)
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	f003 030c 	and.w	r3, r3, #12
 8009a88:	2b08      	cmp	r3, #8
 8009a8a:	f000 80ae 	beq.w	8009bea <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	f040 8092 	bne.w	8009bbc <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	69db      	ldr	r3, [r3, #28]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d009      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x498>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	69db      	ldr	r3, [r3, #28]
 8009aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009aa8:	d004      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x498>
 8009aaa:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8009aae:	4827      	ldr	r0, [pc, #156]	; (8009b4c <HAL_RCC_OscConfig+0x530>)
 8009ab0:	f7f7 ff07 	bl	80018c2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a1b      	ldr	r3, [r3, #32]
 8009ab8:	2b3f      	cmp	r3, #63	; 0x3f
 8009aba:	d904      	bls.n	8009ac6 <HAL_RCC_OscConfig+0x4aa>
 8009abc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ac0:	4822      	ldr	r0, [pc, #136]	; (8009b4c <HAL_RCC_OscConfig+0x530>)
 8009ac2:	f7f7 fefe 	bl	80018c2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	2bbf      	cmp	r3, #191	; 0xbf
 8009acc:	d904      	bls.n	8009ad8 <HAL_RCC_OscConfig+0x4bc>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8009ad6:	d904      	bls.n	8009ae2 <HAL_RCC_OscConfig+0x4c6>
 8009ad8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8009adc:	481b      	ldr	r0, [pc, #108]	; (8009b4c <HAL_RCC_OscConfig+0x530>)
 8009ade:	f7f7 fef0 	bl	80018c2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d010      	beq.n	8009b0c <HAL_RCC_OscConfig+0x4f0>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aee:	2b04      	cmp	r3, #4
 8009af0:	d00c      	beq.n	8009b0c <HAL_RCC_OscConfig+0x4f0>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af6:	2b06      	cmp	r3, #6
 8009af8:	d008      	beq.n	8009b0c <HAL_RCC_OscConfig+0x4f0>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afe:	2b08      	cmp	r3, #8
 8009b00:	d004      	beq.n	8009b0c <HAL_RCC_OscConfig+0x4f0>
 8009b02:	f240 11db 	movw	r1, #475	; 0x1db
 8009b06:	4811      	ldr	r0, [pc, #68]	; (8009b4c <HAL_RCC_OscConfig+0x530>)
 8009b08:	f7f7 fedb 	bl	80018c2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d903      	bls.n	8009b1c <HAL_RCC_OscConfig+0x500>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b18:	2b0f      	cmp	r3, #15
 8009b1a:	d904      	bls.n	8009b26 <HAL_RCC_OscConfig+0x50a>
 8009b1c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8009b20:	480a      	ldr	r0, [pc, #40]	; (8009b4c <HAL_RCC_OscConfig+0x530>)
 8009b22:	f7f7 fece 	bl	80018c2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b26:	4b0b      	ldr	r3, [pc, #44]	; (8009b54 <HAL_RCC_OscConfig+0x538>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b2c:	f7fd fc38 	bl	80073a0 <HAL_GetTick>
 8009b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b32:	e011      	b.n	8009b58 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b34:	f7fd fc34 	bl	80073a0 <HAL_GetTick>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d90a      	bls.n	8009b58 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e081      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
 8009b46:	bf00      	nop
 8009b48:	40023800 	.word	0x40023800
 8009b4c:	0800f6d4 	.word	0x0800f6d4
 8009b50:	40007000 	.word	0x40007000
 8009b54:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b58:	4b3e      	ldr	r3, [pc, #248]	; (8009c54 <HAL_RCC_OscConfig+0x638>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1e7      	bne.n	8009b34 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	69da      	ldr	r2, [r3, #28]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a1b      	ldr	r3, [r3, #32]
 8009b6c:	431a      	orrs	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	019b      	lsls	r3, r3, #6
 8009b74:	431a      	orrs	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7a:	085b      	lsrs	r3, r3, #1
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	041b      	lsls	r3, r3, #16
 8009b80:	431a      	orrs	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b86:	061b      	lsls	r3, r3, #24
 8009b88:	4932      	ldr	r1, [pc, #200]	; (8009c54 <HAL_RCC_OscConfig+0x638>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b8e:	4b32      	ldr	r3, [pc, #200]	; (8009c58 <HAL_RCC_OscConfig+0x63c>)
 8009b90:	2201      	movs	r2, #1
 8009b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b94:	f7fd fc04 	bl	80073a0 <HAL_GetTick>
 8009b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b9a:	e008      	b.n	8009bae <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b9c:	f7fd fc00 	bl	80073a0 <HAL_GetTick>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d901      	bls.n	8009bae <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8009baa:	2303      	movs	r3, #3
 8009bac:	e04d      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bae:	4b29      	ldr	r3, [pc, #164]	; (8009c54 <HAL_RCC_OscConfig+0x638>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d0f0      	beq.n	8009b9c <HAL_RCC_OscConfig+0x580>
 8009bba:	e045      	b.n	8009c48 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bbc:	4b26      	ldr	r3, [pc, #152]	; (8009c58 <HAL_RCC_OscConfig+0x63c>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bc2:	f7fd fbed 	bl	80073a0 <HAL_GetTick>
 8009bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bc8:	e008      	b.n	8009bdc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bca:	f7fd fbe9 	bl	80073a0 <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d901      	bls.n	8009bdc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e036      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bdc:	4b1d      	ldr	r3, [pc, #116]	; (8009c54 <HAL_RCC_OscConfig+0x638>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1f0      	bne.n	8009bca <HAL_RCC_OscConfig+0x5ae>
 8009be8:	e02e      	b.n	8009c48 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d101      	bne.n	8009bf6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e029      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009bf6:	4b17      	ldr	r3, [pc, #92]	; (8009c54 <HAL_RCC_OscConfig+0x638>)
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d11c      	bne.n	8009c44 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d115      	bne.n	8009c44 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009c1e:	4013      	ands	r3, r2
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d10d      	bne.n	8009c44 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d106      	bne.n	8009c44 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d001      	beq.n	8009c48 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	40023800 	.word	0x40023800
 8009c58:	42470060 	.word	0x42470060

08009c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e174      	b.n	8009f5a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d003      	beq.n	8009c80 <HAL_RCC_ClockConfig+0x24>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b0f      	cmp	r3, #15
 8009c7e:	d904      	bls.n	8009c8a <HAL_RCC_ClockConfig+0x2e>
 8009c80:	f240 2151 	movw	r1, #593	; 0x251
 8009c84:	487b      	ldr	r0, [pc, #492]	; (8009e74 <HAL_RCC_ClockConfig+0x218>)
 8009c86:	f7f7 fe1c 	bl	80018c2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d019      	beq.n	8009cc4 <HAL_RCC_ClockConfig+0x68>
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d016      	beq.n	8009cc4 <HAL_RCC_ClockConfig+0x68>
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d013      	beq.n	8009cc4 <HAL_RCC_ClockConfig+0x68>
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d010      	beq.n	8009cc4 <HAL_RCC_ClockConfig+0x68>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b04      	cmp	r3, #4
 8009ca6:	d00d      	beq.n	8009cc4 <HAL_RCC_ClockConfig+0x68>
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b05      	cmp	r3, #5
 8009cac:	d00a      	beq.n	8009cc4 <HAL_RCC_ClockConfig+0x68>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b06      	cmp	r3, #6
 8009cb2:	d007      	beq.n	8009cc4 <HAL_RCC_ClockConfig+0x68>
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2b07      	cmp	r3, #7
 8009cb8:	d004      	beq.n	8009cc4 <HAL_RCC_ClockConfig+0x68>
 8009cba:	f240 2152 	movw	r1, #594	; 0x252
 8009cbe:	486d      	ldr	r0, [pc, #436]	; (8009e74 <HAL_RCC_ClockConfig+0x218>)
 8009cc0:	f7f7 fdff 	bl	80018c2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009cc4:	4b6c      	ldr	r3, [pc, #432]	; (8009e78 <HAL_RCC_ClockConfig+0x21c>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 030f 	and.w	r3, r3, #15
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d90c      	bls.n	8009cec <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cd2:	4b69      	ldr	r3, [pc, #420]	; (8009e78 <HAL_RCC_ClockConfig+0x21c>)
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	b2d2      	uxtb	r2, r2
 8009cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cda:	4b67      	ldr	r3, [pc, #412]	; (8009e78 <HAL_RCC_ClockConfig+0x21c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 030f 	and.w	r3, r3, #15
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d001      	beq.n	8009cec <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e136      	b.n	8009f5a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0302 	and.w	r3, r3, #2
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d049      	beq.n	8009d8c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0304 	and.w	r3, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d005      	beq.n	8009d10 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d04:	4b5d      	ldr	r3, [pc, #372]	; (8009e7c <HAL_RCC_ClockConfig+0x220>)
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	4a5c      	ldr	r2, [pc, #368]	; (8009e7c <HAL_RCC_ClockConfig+0x220>)
 8009d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0308 	and.w	r3, r3, #8
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d005      	beq.n	8009d28 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d1c:	4b57      	ldr	r3, [pc, #348]	; (8009e7c <HAL_RCC_ClockConfig+0x220>)
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	4a56      	ldr	r2, [pc, #344]	; (8009e7c <HAL_RCC_ClockConfig+0x220>)
 8009d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d024      	beq.n	8009d7a <HAL_RCC_ClockConfig+0x11e>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	2b80      	cmp	r3, #128	; 0x80
 8009d36:	d020      	beq.n	8009d7a <HAL_RCC_ClockConfig+0x11e>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	2b90      	cmp	r3, #144	; 0x90
 8009d3e:	d01c      	beq.n	8009d7a <HAL_RCC_ClockConfig+0x11e>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	2ba0      	cmp	r3, #160	; 0xa0
 8009d46:	d018      	beq.n	8009d7a <HAL_RCC_ClockConfig+0x11e>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	2bb0      	cmp	r3, #176	; 0xb0
 8009d4e:	d014      	beq.n	8009d7a <HAL_RCC_ClockConfig+0x11e>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	2bc0      	cmp	r3, #192	; 0xc0
 8009d56:	d010      	beq.n	8009d7a <HAL_RCC_ClockConfig+0x11e>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	2bd0      	cmp	r3, #208	; 0xd0
 8009d5e:	d00c      	beq.n	8009d7a <HAL_RCC_ClockConfig+0x11e>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	2be0      	cmp	r3, #224	; 0xe0
 8009d66:	d008      	beq.n	8009d7a <HAL_RCC_ClockConfig+0x11e>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	2bf0      	cmp	r3, #240	; 0xf0
 8009d6e:	d004      	beq.n	8009d7a <HAL_RCC_ClockConfig+0x11e>
 8009d70:	f240 2175 	movw	r1, #629	; 0x275
 8009d74:	483f      	ldr	r0, [pc, #252]	; (8009e74 <HAL_RCC_ClockConfig+0x218>)
 8009d76:	f7f7 fda4 	bl	80018c2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d7a:	4b40      	ldr	r3, [pc, #256]	; (8009e7c <HAL_RCC_ClockConfig+0x220>)
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	493d      	ldr	r1, [pc, #244]	; (8009e7c <HAL_RCC_ClockConfig+0x220>)
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0301 	and.w	r3, r3, #1
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d059      	beq.n	8009e4c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d010      	beq.n	8009dc2 <HAL_RCC_ClockConfig+0x166>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d00c      	beq.n	8009dc2 <HAL_RCC_ClockConfig+0x166>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d008      	beq.n	8009dc2 <HAL_RCC_ClockConfig+0x166>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	2b03      	cmp	r3, #3
 8009db6:	d004      	beq.n	8009dc2 <HAL_RCC_ClockConfig+0x166>
 8009db8:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8009dbc:	482d      	ldr	r0, [pc, #180]	; (8009e74 <HAL_RCC_ClockConfig+0x218>)
 8009dbe:	f7f7 fd80 	bl	80018c2 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d107      	bne.n	8009dda <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dca:	4b2c      	ldr	r3, [pc, #176]	; (8009e7c <HAL_RCC_ClockConfig+0x220>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d119      	bne.n	8009e0a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e0bf      	b.n	8009f5a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d003      	beq.n	8009dea <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d107      	bne.n	8009dfa <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dea:	4b24      	ldr	r3, [pc, #144]	; (8009e7c <HAL_RCC_ClockConfig+0x220>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d109      	bne.n	8009e0a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e0af      	b.n	8009f5a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009dfa:	4b20      	ldr	r3, [pc, #128]	; (8009e7c <HAL_RCC_ClockConfig+0x220>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e0a7      	b.n	8009f5a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e0a:	4b1c      	ldr	r3, [pc, #112]	; (8009e7c <HAL_RCC_ClockConfig+0x220>)
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	f023 0203 	bic.w	r2, r3, #3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	4919      	ldr	r1, [pc, #100]	; (8009e7c <HAL_RCC_ClockConfig+0x220>)
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009e1c:	f7fd fac0 	bl	80073a0 <HAL_GetTick>
 8009e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e22:	e00a      	b.n	8009e3a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e24:	f7fd fabc 	bl	80073a0 <HAL_GetTick>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d901      	bls.n	8009e3a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	e08f      	b.n	8009f5a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e3a:	4b10      	ldr	r3, [pc, #64]	; (8009e7c <HAL_RCC_ClockConfig+0x220>)
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	f003 020c 	and.w	r2, r3, #12
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d1eb      	bne.n	8009e24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e4c:	4b0a      	ldr	r3, [pc, #40]	; (8009e78 <HAL_RCC_ClockConfig+0x21c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 030f 	and.w	r3, r3, #15
 8009e54:	683a      	ldr	r2, [r7, #0]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d212      	bcs.n	8009e80 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e5a:	4b07      	ldr	r3, [pc, #28]	; (8009e78 <HAL_RCC_ClockConfig+0x21c>)
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	b2d2      	uxtb	r2, r2
 8009e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e62:	4b05      	ldr	r3, [pc, #20]	; (8009e78 <HAL_RCC_ClockConfig+0x21c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 030f 	and.w	r3, r3, #15
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d007      	beq.n	8009e80 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e072      	b.n	8009f5a <HAL_RCC_ClockConfig+0x2fe>
 8009e74:	0800f6d4 	.word	0x0800f6d4
 8009e78:	40023c00 	.word	0x40023c00
 8009e7c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 0304 	and.w	r3, r3, #4
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d025      	beq.n	8009ed8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d018      	beq.n	8009ec6 <HAL_RCC_ClockConfig+0x26a>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e9c:	d013      	beq.n	8009ec6 <HAL_RCC_ClockConfig+0x26a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009ea6:	d00e      	beq.n	8009ec6 <HAL_RCC_ClockConfig+0x26a>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009eb0:	d009      	beq.n	8009ec6 <HAL_RCC_ClockConfig+0x26a>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8009eba:	d004      	beq.n	8009ec6 <HAL_RCC_ClockConfig+0x26a>
 8009ebc:	f240 21ba 	movw	r1, #698	; 0x2ba
 8009ec0:	4828      	ldr	r0, [pc, #160]	; (8009f64 <HAL_RCC_ClockConfig+0x308>)
 8009ec2:	f7f7 fcfe 	bl	80018c2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ec6:	4b28      	ldr	r3, [pc, #160]	; (8009f68 <HAL_RCC_ClockConfig+0x30c>)
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	4925      	ldr	r1, [pc, #148]	; (8009f68 <HAL_RCC_ClockConfig+0x30c>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 0308 	and.w	r3, r3, #8
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d026      	beq.n	8009f32 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d018      	beq.n	8009f1e <HAL_RCC_ClockConfig+0x2c2>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ef4:	d013      	beq.n	8009f1e <HAL_RCC_ClockConfig+0x2c2>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009efe:	d00e      	beq.n	8009f1e <HAL_RCC_ClockConfig+0x2c2>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009f08:	d009      	beq.n	8009f1e <HAL_RCC_ClockConfig+0x2c2>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8009f12:	d004      	beq.n	8009f1e <HAL_RCC_ClockConfig+0x2c2>
 8009f14:	f240 21c1 	movw	r1, #705	; 0x2c1
 8009f18:	4812      	ldr	r0, [pc, #72]	; (8009f64 <HAL_RCC_ClockConfig+0x308>)
 8009f1a:	f7f7 fcd2 	bl	80018c2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009f1e:	4b12      	ldr	r3, [pc, #72]	; (8009f68 <HAL_RCC_ClockConfig+0x30c>)
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	490e      	ldr	r1, [pc, #56]	; (8009f68 <HAL_RCC_ClockConfig+0x30c>)
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009f32:	f000 f821 	bl	8009f78 <HAL_RCC_GetSysClockFreq>
 8009f36:	4601      	mov	r1, r0
 8009f38:	4b0b      	ldr	r3, [pc, #44]	; (8009f68 <HAL_RCC_ClockConfig+0x30c>)
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	091b      	lsrs	r3, r3, #4
 8009f3e:	f003 030f 	and.w	r3, r3, #15
 8009f42:	4a0a      	ldr	r2, [pc, #40]	; (8009f6c <HAL_RCC_ClockConfig+0x310>)
 8009f44:	5cd3      	ldrb	r3, [r2, r3]
 8009f46:	fa21 f303 	lsr.w	r3, r1, r3
 8009f4a:	4a09      	ldr	r2, [pc, #36]	; (8009f70 <HAL_RCC_ClockConfig+0x314>)
 8009f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009f4e:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <HAL_RCC_ClockConfig+0x318>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fd f9e0 	bl	8007318 <HAL_InitTick>

  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	0800f6d4 	.word	0x0800f6d4
 8009f68:	40023800 	.word	0x40023800
 8009f6c:	0800f7c8 	.word	0x0800f7c8
 8009f70:	20000044 	.word	0x20000044
 8009f74:	20000068 	.word	0x20000068

08009f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	607b      	str	r3, [r7, #4]
 8009f82:	2300      	movs	r3, #0
 8009f84:	60fb      	str	r3, [r7, #12]
 8009f86:	2300      	movs	r3, #0
 8009f88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f8e:	4b50      	ldr	r3, [pc, #320]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	f003 030c 	and.w	r3, r3, #12
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	d007      	beq.n	8009faa <HAL_RCC_GetSysClockFreq+0x32>
 8009f9a:	2b08      	cmp	r3, #8
 8009f9c:	d008      	beq.n	8009fb0 <HAL_RCC_GetSysClockFreq+0x38>
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f040 808d 	bne.w	800a0be <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009fa4:	4b4b      	ldr	r3, [pc, #300]	; (800a0d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009fa6:	60bb      	str	r3, [r7, #8]
       break;
 8009fa8:	e08c      	b.n	800a0c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009faa:	4b4b      	ldr	r3, [pc, #300]	; (800a0d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009fac:	60bb      	str	r3, [r7, #8]
      break;
 8009fae:	e089      	b.n	800a0c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009fb0:	4b47      	ldr	r3, [pc, #284]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009fba:	4b45      	ldr	r3, [pc, #276]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d023      	beq.n	800a00e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fc6:	4b42      	ldr	r3, [pc, #264]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	099b      	lsrs	r3, r3, #6
 8009fcc:	f04f 0400 	mov.w	r4, #0
 8009fd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009fd4:	f04f 0200 	mov.w	r2, #0
 8009fd8:	ea03 0501 	and.w	r5, r3, r1
 8009fdc:	ea04 0602 	and.w	r6, r4, r2
 8009fe0:	4a3d      	ldr	r2, [pc, #244]	; (800a0d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009fe2:	fb02 f106 	mul.w	r1, r2, r6
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	fb02 f205 	mul.w	r2, r2, r5
 8009fec:	440a      	add	r2, r1
 8009fee:	493a      	ldr	r1, [pc, #232]	; (800a0d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009ff0:	fba5 0101 	umull	r0, r1, r5, r1
 8009ff4:	1853      	adds	r3, r2, r1
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f04f 0400 	mov.w	r4, #0
 8009ffe:	461a      	mov	r2, r3
 800a000:	4623      	mov	r3, r4
 800a002:	f7f6 f945 	bl	8000290 <__aeabi_uldivmod>
 800a006:	4603      	mov	r3, r0
 800a008:	460c      	mov	r4, r1
 800a00a:	60fb      	str	r3, [r7, #12]
 800a00c:	e049      	b.n	800a0a2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a00e:	4b30      	ldr	r3, [pc, #192]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	099b      	lsrs	r3, r3, #6
 800a014:	f04f 0400 	mov.w	r4, #0
 800a018:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a01c:	f04f 0200 	mov.w	r2, #0
 800a020:	ea03 0501 	and.w	r5, r3, r1
 800a024:	ea04 0602 	and.w	r6, r4, r2
 800a028:	4629      	mov	r1, r5
 800a02a:	4632      	mov	r2, r6
 800a02c:	f04f 0300 	mov.w	r3, #0
 800a030:	f04f 0400 	mov.w	r4, #0
 800a034:	0154      	lsls	r4, r2, #5
 800a036:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a03a:	014b      	lsls	r3, r1, #5
 800a03c:	4619      	mov	r1, r3
 800a03e:	4622      	mov	r2, r4
 800a040:	1b49      	subs	r1, r1, r5
 800a042:	eb62 0206 	sbc.w	r2, r2, r6
 800a046:	f04f 0300 	mov.w	r3, #0
 800a04a:	f04f 0400 	mov.w	r4, #0
 800a04e:	0194      	lsls	r4, r2, #6
 800a050:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a054:	018b      	lsls	r3, r1, #6
 800a056:	1a5b      	subs	r3, r3, r1
 800a058:	eb64 0402 	sbc.w	r4, r4, r2
 800a05c:	f04f 0100 	mov.w	r1, #0
 800a060:	f04f 0200 	mov.w	r2, #0
 800a064:	00e2      	lsls	r2, r4, #3
 800a066:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a06a:	00d9      	lsls	r1, r3, #3
 800a06c:	460b      	mov	r3, r1
 800a06e:	4614      	mov	r4, r2
 800a070:	195b      	adds	r3, r3, r5
 800a072:	eb44 0406 	adc.w	r4, r4, r6
 800a076:	f04f 0100 	mov.w	r1, #0
 800a07a:	f04f 0200 	mov.w	r2, #0
 800a07e:	02a2      	lsls	r2, r4, #10
 800a080:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a084:	0299      	lsls	r1, r3, #10
 800a086:	460b      	mov	r3, r1
 800a088:	4614      	mov	r4, r2
 800a08a:	4618      	mov	r0, r3
 800a08c:	4621      	mov	r1, r4
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f04f 0400 	mov.w	r4, #0
 800a094:	461a      	mov	r2, r3
 800a096:	4623      	mov	r3, r4
 800a098:	f7f6 f8fa 	bl	8000290 <__aeabi_uldivmod>
 800a09c:	4603      	mov	r3, r0
 800a09e:	460c      	mov	r4, r1
 800a0a0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a0a2:	4b0b      	ldr	r3, [pc, #44]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	0c1b      	lsrs	r3, r3, #16
 800a0a8:	f003 0303 	and.w	r3, r3, #3
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	005b      	lsls	r3, r3, #1
 800a0b0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ba:	60bb      	str	r3, [r7, #8]
      break;
 800a0bc:	e002      	b.n	800a0c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a0be:	4b05      	ldr	r3, [pc, #20]	; (800a0d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a0c0:	60bb      	str	r3, [r7, #8]
      break;
 800a0c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a0c4:	68bb      	ldr	r3, [r7, #8]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	40023800 	.word	0x40023800
 800a0d4:	00f42400 	.word	0x00f42400
 800a0d8:	016e3600 	.word	0x016e3600

0800a0dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0e0:	4b03      	ldr	r3, [pc, #12]	; (800a0f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	20000044 	.word	0x20000044

0800a0f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a0f8:	f7ff fff0 	bl	800a0dc <HAL_RCC_GetHCLKFreq>
 800a0fc:	4601      	mov	r1, r0
 800a0fe:	4b05      	ldr	r3, [pc, #20]	; (800a114 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	0a9b      	lsrs	r3, r3, #10
 800a104:	f003 0307 	and.w	r3, r3, #7
 800a108:	4a03      	ldr	r2, [pc, #12]	; (800a118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a10a:	5cd3      	ldrb	r3, [r2, r3]
 800a10c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a110:	4618      	mov	r0, r3
 800a112:	bd80      	pop	{r7, pc}
 800a114:	40023800 	.word	0x40023800
 800a118:	0800f7d8 	.word	0x0800f7d8

0800a11c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a120:	f7ff ffdc 	bl	800a0dc <HAL_RCC_GetHCLKFreq>
 800a124:	4601      	mov	r1, r0
 800a126:	4b05      	ldr	r3, [pc, #20]	; (800a13c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	0b5b      	lsrs	r3, r3, #13
 800a12c:	f003 0307 	and.w	r3, r3, #7
 800a130:	4a03      	ldr	r2, [pc, #12]	; (800a140 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a132:	5cd3      	ldrb	r3, [r2, r3]
 800a134:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a138:	4618      	mov	r0, r3
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	40023800 	.word	0x40023800
 800a140:	0800f7d8 	.word	0x0800f7d8

0800a144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e113      	b.n	800a37e <HAL_SPI_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a8b      	ldr	r2, [pc, #556]	; (800a388 <HAL_SPI_Init+0x244>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d018      	beq.n	800a192 <HAL_SPI_Init+0x4e>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a89      	ldr	r2, [pc, #548]	; (800a38c <HAL_SPI_Init+0x248>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d013      	beq.n	800a192 <HAL_SPI_Init+0x4e>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a88      	ldr	r2, [pc, #544]	; (800a390 <HAL_SPI_Init+0x24c>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d00e      	beq.n	800a192 <HAL_SPI_Init+0x4e>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a86      	ldr	r2, [pc, #536]	; (800a394 <HAL_SPI_Init+0x250>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d009      	beq.n	800a192 <HAL_SPI_Init+0x4e>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a85      	ldr	r2, [pc, #532]	; (800a398 <HAL_SPI_Init+0x254>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d004      	beq.n	800a192 <HAL_SPI_Init+0x4e>
 800a188:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800a18c:	4883      	ldr	r0, [pc, #524]	; (800a39c <HAL_SPI_Init+0x258>)
 800a18e:	f7f7 fb98 	bl	80018c2 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d009      	beq.n	800a1ae <HAL_SPI_Init+0x6a>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1a2:	d004      	beq.n	800a1ae <HAL_SPI_Init+0x6a>
 800a1a4:	f240 1143 	movw	r1, #323	; 0x143
 800a1a8:	487c      	ldr	r0, [pc, #496]	; (800a39c <HAL_SPI_Init+0x258>)
 800a1aa:	f7f7 fb8a 	bl	80018c2 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00e      	beq.n	800a1d4 <HAL_SPI_Init+0x90>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1be:	d009      	beq.n	800a1d4 <HAL_SPI_Init+0x90>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1c8:	d004      	beq.n	800a1d4 <HAL_SPI_Init+0x90>
 800a1ca:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800a1ce:	4873      	ldr	r0, [pc, #460]	; (800a39c <HAL_SPI_Init+0x258>)
 800a1d0:	f7f7 fb77 	bl	80018c2 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1dc:	d008      	beq.n	800a1f0 <HAL_SPI_Init+0xac>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d004      	beq.n	800a1f0 <HAL_SPI_Init+0xac>
 800a1e6:	f240 1145 	movw	r1, #325	; 0x145
 800a1ea:	486c      	ldr	r0, [pc, #432]	; (800a39c <HAL_SPI_Init+0x258>)
 800a1ec:	f7f7 fb69 	bl	80018c2 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1f8:	d00d      	beq.n	800a216 <HAL_SPI_Init+0xd2>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d009      	beq.n	800a216 <HAL_SPI_Init+0xd2>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a20a:	d004      	beq.n	800a216 <HAL_SPI_Init+0xd2>
 800a20c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800a210:	4862      	ldr	r0, [pc, #392]	; (800a39c <HAL_SPI_Init+0x258>)
 800a212:	f7f7 fb56 	bl	80018c2 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	69db      	ldr	r3, [r3, #28]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d020      	beq.n	800a260 <HAL_SPI_Init+0x11c>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	69db      	ldr	r3, [r3, #28]
 800a222:	2b08      	cmp	r3, #8
 800a224:	d01c      	beq.n	800a260 <HAL_SPI_Init+0x11c>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	2b10      	cmp	r3, #16
 800a22c:	d018      	beq.n	800a260 <HAL_SPI_Init+0x11c>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	69db      	ldr	r3, [r3, #28]
 800a232:	2b18      	cmp	r3, #24
 800a234:	d014      	beq.n	800a260 <HAL_SPI_Init+0x11c>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	69db      	ldr	r3, [r3, #28]
 800a23a:	2b20      	cmp	r3, #32
 800a23c:	d010      	beq.n	800a260 <HAL_SPI_Init+0x11c>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	2b28      	cmp	r3, #40	; 0x28
 800a244:	d00c      	beq.n	800a260 <HAL_SPI_Init+0x11c>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	2b30      	cmp	r3, #48	; 0x30
 800a24c:	d008      	beq.n	800a260 <HAL_SPI_Init+0x11c>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	2b38      	cmp	r3, #56	; 0x38
 800a254:	d004      	beq.n	800a260 <HAL_SPI_Init+0x11c>
 800a256:	f240 1147 	movw	r1, #327	; 0x147
 800a25a:	4850      	ldr	r0, [pc, #320]	; (800a39c <HAL_SPI_Init+0x258>)
 800a25c:	f7f7 fb31 	bl	80018c2 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a1b      	ldr	r3, [r3, #32]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d008      	beq.n	800a27a <HAL_SPI_Init+0x136>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a1b      	ldr	r3, [r3, #32]
 800a26c:	2b80      	cmp	r3, #128	; 0x80
 800a26e:	d004      	beq.n	800a27a <HAL_SPI_Init+0x136>
 800a270:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800a274:	4849      	ldr	r0, [pc, #292]	; (800a39c <HAL_SPI_Init+0x258>)
 800a276:	f7f7 fb24 	bl	80018c2 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d008      	beq.n	800a294 <HAL_SPI_Init+0x150>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	2b10      	cmp	r3, #16
 800a288:	d004      	beq.n	800a294 <HAL_SPI_Init+0x150>
 800a28a:	f240 1149 	movw	r1, #329	; 0x149
 800a28e:	4843      	ldr	r0, [pc, #268]	; (800a39c <HAL_SPI_Init+0x258>)
 800a290:	f7f7 fb17 	bl	80018c2 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d119      	bne.n	800a2d0 <HAL_SPI_Init+0x18c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d008      	beq.n	800a2b6 <HAL_SPI_Init+0x172>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d004      	beq.n	800a2b6 <HAL_SPI_Init+0x172>
 800a2ac:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800a2b0:	483a      	ldr	r0, [pc, #232]	; (800a39c <HAL_SPI_Init+0x258>)
 800a2b2:	f7f7 fb06 	bl	80018c2 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d008      	beq.n	800a2d0 <HAL_SPI_Init+0x18c>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d004      	beq.n	800a2d0 <HAL_SPI_Init+0x18c>
 800a2c6:	f240 114d 	movw	r1, #333	; 0x14d
 800a2ca:	4834      	ldr	r0, [pc, #208]	; (800a39c <HAL_SPI_Init+0x258>)
 800a2cc:	f7f7 faf9 	bl	80018c2 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d106      	bne.n	800a2f0 <HAL_SPI_Init+0x1ac>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7f7 fc00 	bl	8001af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a306:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	431a      	orrs	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	431a      	orrs	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	431a      	orrs	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	431a      	orrs	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a32c:	431a      	orrs	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	69db      	ldr	r3, [r3, #28]
 800a332:	431a      	orrs	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a1b      	ldr	r3, [r3, #32]
 800a338:	ea42 0103 	orr.w	r1, r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	430a      	orrs	r2, r1
 800a346:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	699b      	ldr	r3, [r3, #24]
 800a34c:	0c1b      	lsrs	r3, r3, #16
 800a34e:	f003 0104 	and.w	r1, r3, #4
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69da      	ldr	r2, [r3, #28]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a36c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	40013000 	.word	0x40013000
 800a38c:	40003800 	.word	0x40003800
 800a390:	40003c00 	.word	0x40003c00
 800a394:	40013400 	.word	0x40013400
 800a398:	40015000 	.word	0x40015000
 800a39c:	0800f70c 	.word	0x0800f70c

0800a3a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e0a0      	b.n	800a4f4 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d02c      	beq.n	800a414 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a4f      	ldr	r2, [pc, #316]	; (800a4fc <HAL_UART_Init+0x15c>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d00e      	beq.n	800a3e2 <HAL_UART_Init+0x42>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a4d      	ldr	r2, [pc, #308]	; (800a500 <HAL_UART_Init+0x160>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d009      	beq.n	800a3e2 <HAL_UART_Init+0x42>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a4c      	ldr	r2, [pc, #304]	; (800a504 <HAL_UART_Init+0x164>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d004      	beq.n	800a3e2 <HAL_UART_Init+0x42>
 800a3d8:	f240 114b 	movw	r1, #331	; 0x14b
 800a3dc:	484a      	ldr	r0, [pc, #296]	; (800a508 <HAL_UART_Init+0x168>)
 800a3de:	f7f7 fa70 	bl	80018c2 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d028      	beq.n	800a43c <HAL_UART_Init+0x9c>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3f2:	d023      	beq.n	800a43c <HAL_UART_Init+0x9c>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3fc:	d01e      	beq.n	800a43c <HAL_UART_Init+0x9c>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a406:	d019      	beq.n	800a43c <HAL_UART_Init+0x9c>
 800a408:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800a40c:	483e      	ldr	r0, [pc, #248]	; (800a508 <HAL_UART_Init+0x168>)
 800a40e:	f7f7 fa58 	bl	80018c2 <assert_failed>
 800a412:	e013      	b.n	800a43c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a38      	ldr	r2, [pc, #224]	; (800a4fc <HAL_UART_Init+0x15c>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d00e      	beq.n	800a43c <HAL_UART_Init+0x9c>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a37      	ldr	r2, [pc, #220]	; (800a500 <HAL_UART_Init+0x160>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d009      	beq.n	800a43c <HAL_UART_Init+0x9c>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a35      	ldr	r2, [pc, #212]	; (800a504 <HAL_UART_Init+0x164>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d004      	beq.n	800a43c <HAL_UART_Init+0x9c>
 800a432:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800a436:	4834      	ldr	r0, [pc, #208]	; (800a508 <HAL_UART_Init+0x168>)
 800a438:	f7f7 fa43 	bl	80018c2 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d009      	beq.n	800a458 <HAL_UART_Init+0xb8>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44c:	d004      	beq.n	800a458 <HAL_UART_Init+0xb8>
 800a44e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800a452:	482d      	ldr	r0, [pc, #180]	; (800a508 <HAL_UART_Init+0x168>)
 800a454:	f7f7 fa35 	bl	80018c2 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	69db      	ldr	r3, [r3, #28]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d009      	beq.n	800a474 <HAL_UART_Init+0xd4>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	69db      	ldr	r3, [r3, #28]
 800a464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a468:	d004      	beq.n	800a474 <HAL_UART_Init+0xd4>
 800a46a:	f240 1153 	movw	r1, #339	; 0x153
 800a46e:	4826      	ldr	r0, [pc, #152]	; (800a508 <HAL_UART_Init+0x168>)
 800a470:	f7f7 fa27 	bl	80018c2 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d106      	bne.n	800a48e <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f7f7 fb89 	bl	8001ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2224      	movs	r2, #36	; 0x24
 800a492:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68da      	ldr	r2, [r3, #12]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fb54 	bl	800ab54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	691a      	ldr	r2, [r3, #16]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	695a      	ldr	r2, [r3, #20]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68da      	ldr	r2, [r3, #12]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2220      	movs	r2, #32
 800a4e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2220      	movs	r2, #32
 800a4ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	40011000 	.word	0x40011000
 800a500:	40004400 	.word	0x40004400
 800a504:	40011400 	.word	0x40011400
 800a508:	0800f744 	.word	0x0800f744

0800a50c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af02      	add	r7, sp, #8
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	603b      	str	r3, [r7, #0]
 800a518:	4613      	mov	r3, r2
 800a51a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a51c:	2300      	movs	r3, #0
 800a51e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a526:	b2db      	uxtb	r3, r3
 800a528:	2b20      	cmp	r3, #32
 800a52a:	f040 8083 	bne.w	800a634 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <HAL_UART_Transmit+0x2e>
 800a534:	88fb      	ldrh	r3, [r7, #6]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e07b      	b.n	800a636 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a544:	2b01      	cmp	r3, #1
 800a546:	d101      	bne.n	800a54c <HAL_UART_Transmit+0x40>
 800a548:	2302      	movs	r3, #2
 800a54a:	e074      	b.n	800a636 <HAL_UART_Transmit+0x12a>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2221      	movs	r2, #33	; 0x21
 800a55e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a562:	f7fc ff1d 	bl	80073a0 <HAL_GetTick>
 800a566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	88fa      	ldrh	r2, [r7, #6]
 800a56c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	88fa      	ldrh	r2, [r7, #6]
 800a572:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a57c:	e042      	b.n	800a604 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a582:	b29b      	uxth	r3, r3
 800a584:	3b01      	subs	r3, #1
 800a586:	b29a      	uxth	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a594:	d122      	bne.n	800a5dc <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	2200      	movs	r2, #0
 800a59e:	2180      	movs	r1, #128	; 0x80
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 f96b 	bl	800a87c <UART_WaitOnFlagUntilTimeout>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e042      	b.n	800a636 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5c2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d103      	bne.n	800a5d4 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	3302      	adds	r3, #2
 800a5d0:	60bb      	str	r3, [r7, #8]
 800a5d2:	e017      	b.n	800a604 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	60bb      	str	r3, [r7, #8]
 800a5da:	e013      	b.n	800a604 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2180      	movs	r1, #128	; 0x80
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f000 f948 	bl	800a87c <UART_WaitOnFlagUntilTimeout>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e01f      	b.n	800a636 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	1c5a      	adds	r2, r3, #1
 800a5fa:	60ba      	str	r2, [r7, #8]
 800a5fc:	781a      	ldrb	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a608:	b29b      	uxth	r3, r3
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1b7      	bne.n	800a57e <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2200      	movs	r2, #0
 800a616:	2140      	movs	r1, #64	; 0x40
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f000 f92f 	bl	800a87c <UART_WaitOnFlagUntilTimeout>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a624:	2303      	movs	r3, #3
 800a626:	e006      	b.n	800a636 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2220      	movs	r2, #32
 800a62c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	e000      	b.n	800a636 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a634:	2302      	movs	r3, #2
  }
}
 800a636:	4618      	mov	r0, r3
 800a638:	3718      	adds	r7, #24
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b088      	sub	sp, #32
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	695b      	ldr	r3, [r3, #20]
 800a65e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a660:	2300      	movs	r3, #0
 800a662:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a664:	2300      	movs	r3, #0
 800a666:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	f003 030f 	and.w	r3, r3, #15
 800a66e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10d      	bne.n	800a692 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	f003 0320 	and.w	r3, r3, #32
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d008      	beq.n	800a692 <HAL_UART_IRQHandler+0x52>
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	f003 0320 	and.w	r3, r3, #32
 800a686:	2b00      	cmp	r3, #0
 800a688:	d003      	beq.n	800a692 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f9e0 	bl	800aa50 <UART_Receive_IT>
      return;
 800a690:	e0d1      	b.n	800a836 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 80b0 	beq.w	800a7fa <HAL_UART_IRQHandler+0x1ba>
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	f003 0301 	and.w	r3, r3, #1
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d105      	bne.n	800a6b0 <HAL_UART_IRQHandler+0x70>
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 80a5 	beq.w	800a7fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00a      	beq.n	800a6d0 <HAL_UART_IRQHandler+0x90>
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d005      	beq.n	800a6d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c8:	f043 0201 	orr.w	r2, r3, #1
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	f003 0304 	and.w	r3, r3, #4
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00a      	beq.n	800a6f0 <HAL_UART_IRQHandler+0xb0>
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d005      	beq.n	800a6f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e8:	f043 0202 	orr.w	r2, r3, #2
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	f003 0302 	and.w	r3, r3, #2
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <HAL_UART_IRQHandler+0xd0>
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	f003 0301 	and.w	r3, r3, #1
 800a700:	2b00      	cmp	r3, #0
 800a702:	d005      	beq.n	800a710 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a708:	f043 0204 	orr.w	r2, r3, #4
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	f003 0308 	and.w	r3, r3, #8
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00f      	beq.n	800a73a <HAL_UART_IRQHandler+0xfa>
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	f003 0320 	and.w	r3, r3, #32
 800a720:	2b00      	cmp	r3, #0
 800a722:	d104      	bne.n	800a72e <HAL_UART_IRQHandler+0xee>
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f003 0301 	and.w	r3, r3, #1
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d005      	beq.n	800a73a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a732:	f043 0208 	orr.w	r2, r3, #8
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d078      	beq.n	800a834 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	f003 0320 	and.w	r3, r3, #32
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d007      	beq.n	800a75c <HAL_UART_IRQHandler+0x11c>
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	f003 0320 	and.w	r3, r3, #32
 800a752:	2b00      	cmp	r3, #0
 800a754:	d002      	beq.n	800a75c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f97a 	bl	800aa50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a766:	2b40      	cmp	r3, #64	; 0x40
 800a768:	bf0c      	ite	eq
 800a76a:	2301      	moveq	r3, #1
 800a76c:	2300      	movne	r3, #0
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a776:	f003 0308 	and.w	r3, r3, #8
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d102      	bne.n	800a784 <HAL_UART_IRQHandler+0x144>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d031      	beq.n	800a7e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f8c3 	bl	800a910 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a794:	2b40      	cmp	r3, #64	; 0x40
 800a796:	d123      	bne.n	800a7e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	695a      	ldr	r2, [r3, #20]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d013      	beq.n	800a7d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b4:	4a21      	ldr	r2, [pc, #132]	; (800a83c <HAL_UART_IRQHandler+0x1fc>)
 800a7b6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7fc ff5d 	bl	800767c <HAL_DMA_Abort_IT>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d016      	beq.n	800a7f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7d6:	e00e      	b.n	800a7f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f845 	bl	800a868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7de:	e00a      	b.n	800a7f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 f841 	bl	800a868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7e6:	e006      	b.n	800a7f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 f83d 	bl	800a868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a7f4:	e01e      	b.n	800a834 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7f6:	bf00      	nop
    return;
 800a7f8:	e01c      	b.n	800a834 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a800:	2b00      	cmp	r3, #0
 800a802:	d008      	beq.n	800a816 <HAL_UART_IRQHandler+0x1d6>
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d003      	beq.n	800a816 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f8b0 	bl	800a974 <UART_Transmit_IT>
    return;
 800a814:	e00f      	b.n	800a836 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00a      	beq.n	800a836 <HAL_UART_IRQHandler+0x1f6>
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a826:	2b00      	cmp	r3, #0
 800a828:	d005      	beq.n	800a836 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f8f8 	bl	800aa20 <UART_EndTransmit_IT>
    return;
 800a830:	bf00      	nop
 800a832:	e000      	b.n	800a836 <HAL_UART_IRQHandler+0x1f6>
    return;
 800a834:	bf00      	nop
  }
}
 800a836:	3720      	adds	r7, #32
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	0800a94d 	.word	0x0800a94d

0800a840 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a848:	bf00      	nop
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	603b      	str	r3, [r7, #0]
 800a888:	4613      	mov	r3, r2
 800a88a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a88c:	e02c      	b.n	800a8e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a894:	d028      	beq.n	800a8e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d007      	beq.n	800a8ac <UART_WaitOnFlagUntilTimeout+0x30>
 800a89c:	f7fc fd80 	bl	80073a0 <HAL_GetTick>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	69ba      	ldr	r2, [r7, #24]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d21d      	bcs.n	800a8e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68da      	ldr	r2, [r3, #12]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a8ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	695a      	ldr	r2, [r3, #20]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f022 0201 	bic.w	r2, r2, #1
 800a8ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2220      	movs	r2, #32
 800a8d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e00f      	b.n	800a908 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	bf0c      	ite	eq
 800a8f8:	2301      	moveq	r3, #1
 800a8fa:	2300      	movne	r3, #0
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	461a      	mov	r2, r3
 800a900:	79fb      	ldrb	r3, [r7, #7]
 800a902:	429a      	cmp	r2, r3
 800a904:	d0c3      	beq.n	800a88e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68da      	ldr	r2, [r3, #12]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a926:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	695a      	ldr	r2, [r3, #20]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f022 0201 	bic.w	r2, r2, #1
 800a936:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2220      	movs	r2, #32
 800a93c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a940:	bf00      	nop
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a958:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f7ff ff7e 	bl	800a868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a96c:	bf00      	nop
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b21      	cmp	r3, #33	; 0x21
 800a986:	d144      	bne.n	800aa12 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a990:	d11a      	bne.n	800a9c8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	461a      	mov	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9a6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d105      	bne.n	800a9bc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a1b      	ldr	r3, [r3, #32]
 800a9b4:	1c9a      	adds	r2, r3, #2
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	621a      	str	r2, [r3, #32]
 800a9ba:	e00e      	b.n	800a9da <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a1b      	ldr	r3, [r3, #32]
 800a9c0:	1c5a      	adds	r2, r3, #1
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	621a      	str	r2, [r3, #32]
 800a9c6:	e008      	b.n	800a9da <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a1b      	ldr	r3, [r3, #32]
 800a9cc:	1c59      	adds	r1, r3, #1
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	6211      	str	r1, [r2, #32]
 800a9d2:	781a      	ldrb	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d10f      	bne.n	800aa0e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68da      	ldr	r2, [r3, #12]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68da      	ldr	r2, [r3, #12]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e000      	b.n	800aa14 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800aa12:	2302      	movs	r3, #2
  }
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68da      	ldr	r2, [r3, #12]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7ff fefd 	bl	800a840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aa46:	2300      	movs	r3, #0
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	2b22      	cmp	r3, #34	; 0x22
 800aa62:	d171      	bne.n	800ab48 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa6c:	d123      	bne.n	800aab6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa72:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10e      	bne.n	800aa9a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa92:	1c9a      	adds	r2, r3, #2
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	629a      	str	r2, [r3, #40]	; 0x28
 800aa98:	e029      	b.n	800aaee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	629a      	str	r2, [r3, #40]	; 0x28
 800aab4:	e01b      	b.n	800aaee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10a      	bne.n	800aad4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6858      	ldr	r0, [r3, #4]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac8:	1c59      	adds	r1, r3, #1
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	6291      	str	r1, [r2, #40]	; 0x28
 800aace:	b2c2      	uxtb	r2, r0
 800aad0:	701a      	strb	r2, [r3, #0]
 800aad2:	e00c      	b.n	800aaee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	b2da      	uxtb	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae0:	1c58      	adds	r0, r3, #1
 800aae2:	6879      	ldr	r1, [r7, #4]
 800aae4:	6288      	str	r0, [r1, #40]	; 0x28
 800aae6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aaea:	b2d2      	uxtb	r2, r2
 800aaec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	4619      	mov	r1, r3
 800aafc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d120      	bne.n	800ab44 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	68da      	ldr	r2, [r3, #12]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f022 0220 	bic.w	r2, r2, #32
 800ab10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68da      	ldr	r2, [r3, #12]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	695a      	ldr	r2, [r3, #20]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f022 0201 	bic.w	r2, r2, #1
 800ab30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2220      	movs	r2, #32
 800ab36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f7ff fe8a 	bl	800a854 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	e002      	b.n	800ab4a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	e000      	b.n	800ab4a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ab48:	2302      	movs	r3, #2
  }
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab58:	b085      	sub	sp, #20
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	4a9a      	ldr	r2, [pc, #616]	; (800adcc <UART_SetConfig+0x278>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d904      	bls.n	800ab72 <UART_SetConfig+0x1e>
 800ab68:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800ab6c:	4898      	ldr	r0, [pc, #608]	; (800add0 <UART_SetConfig+0x27c>)
 800ab6e:	f7f6 fea8 	bl	80018c2 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d009      	beq.n	800ab8e <UART_SetConfig+0x3a>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab82:	d004      	beq.n	800ab8e <UART_SetConfig+0x3a>
 800ab84:	f640 31fc 	movw	r1, #3068	; 0xbfc
 800ab88:	4891      	ldr	r0, [pc, #580]	; (800add0 <UART_SetConfig+0x27c>)
 800ab8a:	f7f6 fe9a 	bl	80018c2 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00e      	beq.n	800abb4 <UART_SetConfig+0x60>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab9e:	d009      	beq.n	800abb4 <UART_SetConfig+0x60>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800aba8:	d004      	beq.n	800abb4 <UART_SetConfig+0x60>
 800abaa:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800abae:	4888      	ldr	r0, [pc, #544]	; (800add0 <UART_SetConfig+0x27c>)
 800abb0:	f7f6 fe87 	bl	80018c2 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	695a      	ldr	r2, [r3, #20]
 800abb8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800abbc:	4013      	ands	r3, r2
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d103      	bne.n	800abca <UART_SetConfig+0x76>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d104      	bne.n	800abd4 <UART_SetConfig+0x80>
 800abca:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800abce:	4880      	ldr	r0, [pc, #512]	; (800add0 <UART_SetConfig+0x27c>)
 800abd0:	f7f6 fe77 	bl	80018c2 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68da      	ldr	r2, [r3, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	430a      	orrs	r2, r1
 800abe8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	689a      	ldr	r2, [r3, #8]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	431a      	orrs	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	695b      	ldr	r3, [r3, #20]
 800abf8:	431a      	orrs	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ac0c:	f023 030c 	bic.w	r3, r3, #12
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	6812      	ldr	r2, [r2, #0]
 800ac14:	68f9      	ldr	r1, [r7, #12]
 800ac16:	430b      	orrs	r3, r1
 800ac18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	699a      	ldr	r2, [r3, #24]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	430a      	orrs	r2, r1
 800ac2e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	69db      	ldr	r3, [r3, #28]
 800ac34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac38:	f040 818f 	bne.w	800af5a <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a64      	ldr	r2, [pc, #400]	; (800add4 <UART_SetConfig+0x280>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d005      	beq.n	800ac52 <UART_SetConfig+0xfe>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a63      	ldr	r2, [pc, #396]	; (800add8 <UART_SetConfig+0x284>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	f040 80c7 	bne.w	800ade0 <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ac52:	f7ff fa63 	bl	800a11c <HAL_RCC_GetPCLK2Freq>
 800ac56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	461d      	mov	r5, r3
 800ac5c:	f04f 0600 	mov.w	r6, #0
 800ac60:	46a8      	mov	r8, r5
 800ac62:	46b1      	mov	r9, r6
 800ac64:	eb18 0308 	adds.w	r3, r8, r8
 800ac68:	eb49 0409 	adc.w	r4, r9, r9
 800ac6c:	4698      	mov	r8, r3
 800ac6e:	46a1      	mov	r9, r4
 800ac70:	eb18 0805 	adds.w	r8, r8, r5
 800ac74:	eb49 0906 	adc.w	r9, r9, r6
 800ac78:	f04f 0100 	mov.w	r1, #0
 800ac7c:	f04f 0200 	mov.w	r2, #0
 800ac80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ac84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ac88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ac8c:	4688      	mov	r8, r1
 800ac8e:	4691      	mov	r9, r2
 800ac90:	eb18 0005 	adds.w	r0, r8, r5
 800ac94:	eb49 0106 	adc.w	r1, r9, r6
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	461d      	mov	r5, r3
 800ac9e:	f04f 0600 	mov.w	r6, #0
 800aca2:	196b      	adds	r3, r5, r5
 800aca4:	eb46 0406 	adc.w	r4, r6, r6
 800aca8:	461a      	mov	r2, r3
 800acaa:	4623      	mov	r3, r4
 800acac:	f7f5 faf0 	bl	8000290 <__aeabi_uldivmod>
 800acb0:	4603      	mov	r3, r0
 800acb2:	460c      	mov	r4, r1
 800acb4:	461a      	mov	r2, r3
 800acb6:	4b49      	ldr	r3, [pc, #292]	; (800addc <UART_SetConfig+0x288>)
 800acb8:	fba3 2302 	umull	r2, r3, r3, r2
 800acbc:	095b      	lsrs	r3, r3, #5
 800acbe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	461d      	mov	r5, r3
 800acc6:	f04f 0600 	mov.w	r6, #0
 800acca:	46a9      	mov	r9, r5
 800accc:	46b2      	mov	sl, r6
 800acce:	eb19 0309 	adds.w	r3, r9, r9
 800acd2:	eb4a 040a 	adc.w	r4, sl, sl
 800acd6:	4699      	mov	r9, r3
 800acd8:	46a2      	mov	sl, r4
 800acda:	eb19 0905 	adds.w	r9, r9, r5
 800acde:	eb4a 0a06 	adc.w	sl, sl, r6
 800ace2:	f04f 0100 	mov.w	r1, #0
 800ace6:	f04f 0200 	mov.w	r2, #0
 800acea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800acee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800acf2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800acf6:	4689      	mov	r9, r1
 800acf8:	4692      	mov	sl, r2
 800acfa:	eb19 0005 	adds.w	r0, r9, r5
 800acfe:	eb4a 0106 	adc.w	r1, sl, r6
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	461d      	mov	r5, r3
 800ad08:	f04f 0600 	mov.w	r6, #0
 800ad0c:	196b      	adds	r3, r5, r5
 800ad0e:	eb46 0406 	adc.w	r4, r6, r6
 800ad12:	461a      	mov	r2, r3
 800ad14:	4623      	mov	r3, r4
 800ad16:	f7f5 fabb 	bl	8000290 <__aeabi_uldivmod>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	460c      	mov	r4, r1
 800ad1e:	461a      	mov	r2, r3
 800ad20:	4b2e      	ldr	r3, [pc, #184]	; (800addc <UART_SetConfig+0x288>)
 800ad22:	fba3 1302 	umull	r1, r3, r3, r2
 800ad26:	095b      	lsrs	r3, r3, #5
 800ad28:	2164      	movs	r1, #100	; 0x64
 800ad2a:	fb01 f303 	mul.w	r3, r1, r3
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	00db      	lsls	r3, r3, #3
 800ad32:	3332      	adds	r3, #50	; 0x32
 800ad34:	4a29      	ldr	r2, [pc, #164]	; (800addc <UART_SetConfig+0x288>)
 800ad36:	fba2 2303 	umull	r2, r3, r2, r3
 800ad3a:	095b      	lsrs	r3, r3, #5
 800ad3c:	005b      	lsls	r3, r3, #1
 800ad3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ad42:	4498      	add	r8, r3
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	461d      	mov	r5, r3
 800ad48:	f04f 0600 	mov.w	r6, #0
 800ad4c:	46a9      	mov	r9, r5
 800ad4e:	46b2      	mov	sl, r6
 800ad50:	eb19 0309 	adds.w	r3, r9, r9
 800ad54:	eb4a 040a 	adc.w	r4, sl, sl
 800ad58:	4699      	mov	r9, r3
 800ad5a:	46a2      	mov	sl, r4
 800ad5c:	eb19 0905 	adds.w	r9, r9, r5
 800ad60:	eb4a 0a06 	adc.w	sl, sl, r6
 800ad64:	f04f 0100 	mov.w	r1, #0
 800ad68:	f04f 0200 	mov.w	r2, #0
 800ad6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad78:	4689      	mov	r9, r1
 800ad7a:	4692      	mov	sl, r2
 800ad7c:	eb19 0005 	adds.w	r0, r9, r5
 800ad80:	eb4a 0106 	adc.w	r1, sl, r6
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	461d      	mov	r5, r3
 800ad8a:	f04f 0600 	mov.w	r6, #0
 800ad8e:	196b      	adds	r3, r5, r5
 800ad90:	eb46 0406 	adc.w	r4, r6, r6
 800ad94:	461a      	mov	r2, r3
 800ad96:	4623      	mov	r3, r4
 800ad98:	f7f5 fa7a 	bl	8000290 <__aeabi_uldivmod>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	460c      	mov	r4, r1
 800ada0:	461a      	mov	r2, r3
 800ada2:	4b0e      	ldr	r3, [pc, #56]	; (800addc <UART_SetConfig+0x288>)
 800ada4:	fba3 1302 	umull	r1, r3, r3, r2
 800ada8:	095b      	lsrs	r3, r3, #5
 800adaa:	2164      	movs	r1, #100	; 0x64
 800adac:	fb01 f303 	mul.w	r3, r1, r3
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	3332      	adds	r3, #50	; 0x32
 800adb6:	4a09      	ldr	r2, [pc, #36]	; (800addc <UART_SetConfig+0x288>)
 800adb8:	fba2 2303 	umull	r2, r3, r2, r3
 800adbc:	095b      	lsrs	r3, r3, #5
 800adbe:	f003 0207 	and.w	r2, r3, #7
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4442      	add	r2, r8
 800adc8:	609a      	str	r2, [r3, #8]
 800adca:	e27a      	b.n	800b2c2 <UART_SetConfig+0x76e>
 800adcc:	00a037a0 	.word	0x00a037a0
 800add0:	0800f744 	.word	0x0800f744
 800add4:	40011000 	.word	0x40011000
 800add8:	40011400 	.word	0x40011400
 800addc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ade0:	f7ff f988 	bl	800a0f4 <HAL_RCC_GetPCLK1Freq>
 800ade4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	461d      	mov	r5, r3
 800adea:	f04f 0600 	mov.w	r6, #0
 800adee:	46a8      	mov	r8, r5
 800adf0:	46b1      	mov	r9, r6
 800adf2:	eb18 0308 	adds.w	r3, r8, r8
 800adf6:	eb49 0409 	adc.w	r4, r9, r9
 800adfa:	4698      	mov	r8, r3
 800adfc:	46a1      	mov	r9, r4
 800adfe:	eb18 0805 	adds.w	r8, r8, r5
 800ae02:	eb49 0906 	adc.w	r9, r9, r6
 800ae06:	f04f 0100 	mov.w	r1, #0
 800ae0a:	f04f 0200 	mov.w	r2, #0
 800ae0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ae12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ae16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ae1a:	4688      	mov	r8, r1
 800ae1c:	4691      	mov	r9, r2
 800ae1e:	eb18 0005 	adds.w	r0, r8, r5
 800ae22:	eb49 0106 	adc.w	r1, r9, r6
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	461d      	mov	r5, r3
 800ae2c:	f04f 0600 	mov.w	r6, #0
 800ae30:	196b      	adds	r3, r5, r5
 800ae32:	eb46 0406 	adc.w	r4, r6, r6
 800ae36:	461a      	mov	r2, r3
 800ae38:	4623      	mov	r3, r4
 800ae3a:	f7f5 fa29 	bl	8000290 <__aeabi_uldivmod>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	460c      	mov	r4, r1
 800ae42:	461a      	mov	r2, r3
 800ae44:	4bb3      	ldr	r3, [pc, #716]	; (800b114 <UART_SetConfig+0x5c0>)
 800ae46:	fba3 2302 	umull	r2, r3, r3, r2
 800ae4a:	095b      	lsrs	r3, r3, #5
 800ae4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	461d      	mov	r5, r3
 800ae54:	f04f 0600 	mov.w	r6, #0
 800ae58:	46a9      	mov	r9, r5
 800ae5a:	46b2      	mov	sl, r6
 800ae5c:	eb19 0309 	adds.w	r3, r9, r9
 800ae60:	eb4a 040a 	adc.w	r4, sl, sl
 800ae64:	4699      	mov	r9, r3
 800ae66:	46a2      	mov	sl, r4
 800ae68:	eb19 0905 	adds.w	r9, r9, r5
 800ae6c:	eb4a 0a06 	adc.w	sl, sl, r6
 800ae70:	f04f 0100 	mov.w	r1, #0
 800ae74:	f04f 0200 	mov.w	r2, #0
 800ae78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ae80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ae84:	4689      	mov	r9, r1
 800ae86:	4692      	mov	sl, r2
 800ae88:	eb19 0005 	adds.w	r0, r9, r5
 800ae8c:	eb4a 0106 	adc.w	r1, sl, r6
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	461d      	mov	r5, r3
 800ae96:	f04f 0600 	mov.w	r6, #0
 800ae9a:	196b      	adds	r3, r5, r5
 800ae9c:	eb46 0406 	adc.w	r4, r6, r6
 800aea0:	461a      	mov	r2, r3
 800aea2:	4623      	mov	r3, r4
 800aea4:	f7f5 f9f4 	bl	8000290 <__aeabi_uldivmod>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	461a      	mov	r2, r3
 800aeae:	4b99      	ldr	r3, [pc, #612]	; (800b114 <UART_SetConfig+0x5c0>)
 800aeb0:	fba3 1302 	umull	r1, r3, r3, r2
 800aeb4:	095b      	lsrs	r3, r3, #5
 800aeb6:	2164      	movs	r1, #100	; 0x64
 800aeb8:	fb01 f303 	mul.w	r3, r1, r3
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	00db      	lsls	r3, r3, #3
 800aec0:	3332      	adds	r3, #50	; 0x32
 800aec2:	4a94      	ldr	r2, [pc, #592]	; (800b114 <UART_SetConfig+0x5c0>)
 800aec4:	fba2 2303 	umull	r2, r3, r2, r3
 800aec8:	095b      	lsrs	r3, r3, #5
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aed0:	4498      	add	r8, r3
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	461d      	mov	r5, r3
 800aed6:	f04f 0600 	mov.w	r6, #0
 800aeda:	46a9      	mov	r9, r5
 800aedc:	46b2      	mov	sl, r6
 800aede:	eb19 0309 	adds.w	r3, r9, r9
 800aee2:	eb4a 040a 	adc.w	r4, sl, sl
 800aee6:	4699      	mov	r9, r3
 800aee8:	46a2      	mov	sl, r4
 800aeea:	eb19 0905 	adds.w	r9, r9, r5
 800aeee:	eb4a 0a06 	adc.w	sl, sl, r6
 800aef2:	f04f 0100 	mov.w	r1, #0
 800aef6:	f04f 0200 	mov.w	r2, #0
 800aefa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aefe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800af02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800af06:	4689      	mov	r9, r1
 800af08:	4692      	mov	sl, r2
 800af0a:	eb19 0005 	adds.w	r0, r9, r5
 800af0e:	eb4a 0106 	adc.w	r1, sl, r6
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	461d      	mov	r5, r3
 800af18:	f04f 0600 	mov.w	r6, #0
 800af1c:	196b      	adds	r3, r5, r5
 800af1e:	eb46 0406 	adc.w	r4, r6, r6
 800af22:	461a      	mov	r2, r3
 800af24:	4623      	mov	r3, r4
 800af26:	f7f5 f9b3 	bl	8000290 <__aeabi_uldivmod>
 800af2a:	4603      	mov	r3, r0
 800af2c:	460c      	mov	r4, r1
 800af2e:	461a      	mov	r2, r3
 800af30:	4b78      	ldr	r3, [pc, #480]	; (800b114 <UART_SetConfig+0x5c0>)
 800af32:	fba3 1302 	umull	r1, r3, r3, r2
 800af36:	095b      	lsrs	r3, r3, #5
 800af38:	2164      	movs	r1, #100	; 0x64
 800af3a:	fb01 f303 	mul.w	r3, r1, r3
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	00db      	lsls	r3, r3, #3
 800af42:	3332      	adds	r3, #50	; 0x32
 800af44:	4a73      	ldr	r2, [pc, #460]	; (800b114 <UART_SetConfig+0x5c0>)
 800af46:	fba2 2303 	umull	r2, r3, r2, r3
 800af4a:	095b      	lsrs	r3, r3, #5
 800af4c:	f003 0207 	and.w	r2, r3, #7
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4442      	add	r2, r8
 800af56:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800af58:	e1b3      	b.n	800b2c2 <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a6e      	ldr	r2, [pc, #440]	; (800b118 <UART_SetConfig+0x5c4>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d005      	beq.n	800af70 <UART_SetConfig+0x41c>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a6c      	ldr	r2, [pc, #432]	; (800b11c <UART_SetConfig+0x5c8>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	f040 80d8 	bne.w	800b120 <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 800af70:	f7ff f8d4 	bl	800a11c <HAL_RCC_GetPCLK2Freq>
 800af74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	469a      	mov	sl, r3
 800af7a:	f04f 0b00 	mov.w	fp, #0
 800af7e:	46d0      	mov	r8, sl
 800af80:	46d9      	mov	r9, fp
 800af82:	eb18 0308 	adds.w	r3, r8, r8
 800af86:	eb49 0409 	adc.w	r4, r9, r9
 800af8a:	4698      	mov	r8, r3
 800af8c:	46a1      	mov	r9, r4
 800af8e:	eb18 080a 	adds.w	r8, r8, sl
 800af92:	eb49 090b 	adc.w	r9, r9, fp
 800af96:	f04f 0100 	mov.w	r1, #0
 800af9a:	f04f 0200 	mov.w	r2, #0
 800af9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800afa2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800afa6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800afaa:	4688      	mov	r8, r1
 800afac:	4691      	mov	r9, r2
 800afae:	eb1a 0508 	adds.w	r5, sl, r8
 800afb2:	eb4b 0609 	adc.w	r6, fp, r9
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	4619      	mov	r1, r3
 800afbc:	f04f 0200 	mov.w	r2, #0
 800afc0:	f04f 0300 	mov.w	r3, #0
 800afc4:	f04f 0400 	mov.w	r4, #0
 800afc8:	0094      	lsls	r4, r2, #2
 800afca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800afce:	008b      	lsls	r3, r1, #2
 800afd0:	461a      	mov	r2, r3
 800afd2:	4623      	mov	r3, r4
 800afd4:	4628      	mov	r0, r5
 800afd6:	4631      	mov	r1, r6
 800afd8:	f7f5 f95a 	bl	8000290 <__aeabi_uldivmod>
 800afdc:	4603      	mov	r3, r0
 800afde:	460c      	mov	r4, r1
 800afe0:	461a      	mov	r2, r3
 800afe2:	4b4c      	ldr	r3, [pc, #304]	; (800b114 <UART_SetConfig+0x5c0>)
 800afe4:	fba3 2302 	umull	r2, r3, r3, r2
 800afe8:	095b      	lsrs	r3, r3, #5
 800afea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	469b      	mov	fp, r3
 800aff2:	f04f 0c00 	mov.w	ip, #0
 800aff6:	46d9      	mov	r9, fp
 800aff8:	46e2      	mov	sl, ip
 800affa:	eb19 0309 	adds.w	r3, r9, r9
 800affe:	eb4a 040a 	adc.w	r4, sl, sl
 800b002:	4699      	mov	r9, r3
 800b004:	46a2      	mov	sl, r4
 800b006:	eb19 090b 	adds.w	r9, r9, fp
 800b00a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b00e:	f04f 0100 	mov.w	r1, #0
 800b012:	f04f 0200 	mov.w	r2, #0
 800b016:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b01a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b01e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b022:	4689      	mov	r9, r1
 800b024:	4692      	mov	sl, r2
 800b026:	eb1b 0509 	adds.w	r5, fp, r9
 800b02a:	eb4c 060a 	adc.w	r6, ip, sl
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	4619      	mov	r1, r3
 800b034:	f04f 0200 	mov.w	r2, #0
 800b038:	f04f 0300 	mov.w	r3, #0
 800b03c:	f04f 0400 	mov.w	r4, #0
 800b040:	0094      	lsls	r4, r2, #2
 800b042:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b046:	008b      	lsls	r3, r1, #2
 800b048:	461a      	mov	r2, r3
 800b04a:	4623      	mov	r3, r4
 800b04c:	4628      	mov	r0, r5
 800b04e:	4631      	mov	r1, r6
 800b050:	f7f5 f91e 	bl	8000290 <__aeabi_uldivmod>
 800b054:	4603      	mov	r3, r0
 800b056:	460c      	mov	r4, r1
 800b058:	461a      	mov	r2, r3
 800b05a:	4b2e      	ldr	r3, [pc, #184]	; (800b114 <UART_SetConfig+0x5c0>)
 800b05c:	fba3 1302 	umull	r1, r3, r3, r2
 800b060:	095b      	lsrs	r3, r3, #5
 800b062:	2164      	movs	r1, #100	; 0x64
 800b064:	fb01 f303 	mul.w	r3, r1, r3
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	011b      	lsls	r3, r3, #4
 800b06c:	3332      	adds	r3, #50	; 0x32
 800b06e:	4a29      	ldr	r2, [pc, #164]	; (800b114 <UART_SetConfig+0x5c0>)
 800b070:	fba2 2303 	umull	r2, r3, r2, r3
 800b074:	095b      	lsrs	r3, r3, #5
 800b076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b07a:	4498      	add	r8, r3
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	469b      	mov	fp, r3
 800b080:	f04f 0c00 	mov.w	ip, #0
 800b084:	46d9      	mov	r9, fp
 800b086:	46e2      	mov	sl, ip
 800b088:	eb19 0309 	adds.w	r3, r9, r9
 800b08c:	eb4a 040a 	adc.w	r4, sl, sl
 800b090:	4699      	mov	r9, r3
 800b092:	46a2      	mov	sl, r4
 800b094:	eb19 090b 	adds.w	r9, r9, fp
 800b098:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b09c:	f04f 0100 	mov.w	r1, #0
 800b0a0:	f04f 0200 	mov.w	r2, #0
 800b0a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b0ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b0b0:	4689      	mov	r9, r1
 800b0b2:	4692      	mov	sl, r2
 800b0b4:	eb1b 0509 	adds.w	r5, fp, r9
 800b0b8:	eb4c 060a 	adc.w	r6, ip, sl
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	f04f 0200 	mov.w	r2, #0
 800b0c6:	f04f 0300 	mov.w	r3, #0
 800b0ca:	f04f 0400 	mov.w	r4, #0
 800b0ce:	0094      	lsls	r4, r2, #2
 800b0d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b0d4:	008b      	lsls	r3, r1, #2
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	4623      	mov	r3, r4
 800b0da:	4628      	mov	r0, r5
 800b0dc:	4631      	mov	r1, r6
 800b0de:	f7f5 f8d7 	bl	8000290 <__aeabi_uldivmod>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	460c      	mov	r4, r1
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	4b0a      	ldr	r3, [pc, #40]	; (800b114 <UART_SetConfig+0x5c0>)
 800b0ea:	fba3 1302 	umull	r1, r3, r3, r2
 800b0ee:	095b      	lsrs	r3, r3, #5
 800b0f0:	2164      	movs	r1, #100	; 0x64
 800b0f2:	fb01 f303 	mul.w	r3, r1, r3
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	011b      	lsls	r3, r3, #4
 800b0fa:	3332      	adds	r3, #50	; 0x32
 800b0fc:	4a05      	ldr	r2, [pc, #20]	; (800b114 <UART_SetConfig+0x5c0>)
 800b0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b102:	095b      	lsrs	r3, r3, #5
 800b104:	f003 020f 	and.w	r2, r3, #15
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4442      	add	r2, r8
 800b10e:	609a      	str	r2, [r3, #8]
 800b110:	e0d7      	b.n	800b2c2 <UART_SetConfig+0x76e>
 800b112:	bf00      	nop
 800b114:	51eb851f 	.word	0x51eb851f
 800b118:	40011000 	.word	0x40011000
 800b11c:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 800b120:	f7fe ffe8 	bl	800a0f4 <HAL_RCC_GetPCLK1Freq>
 800b124:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	469a      	mov	sl, r3
 800b12a:	f04f 0b00 	mov.w	fp, #0
 800b12e:	46d0      	mov	r8, sl
 800b130:	46d9      	mov	r9, fp
 800b132:	eb18 0308 	adds.w	r3, r8, r8
 800b136:	eb49 0409 	adc.w	r4, r9, r9
 800b13a:	4698      	mov	r8, r3
 800b13c:	46a1      	mov	r9, r4
 800b13e:	eb18 080a 	adds.w	r8, r8, sl
 800b142:	eb49 090b 	adc.w	r9, r9, fp
 800b146:	f04f 0100 	mov.w	r1, #0
 800b14a:	f04f 0200 	mov.w	r2, #0
 800b14e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b152:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b156:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b15a:	4688      	mov	r8, r1
 800b15c:	4691      	mov	r9, r2
 800b15e:	eb1a 0508 	adds.w	r5, sl, r8
 800b162:	eb4b 0609 	adc.w	r6, fp, r9
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	4619      	mov	r1, r3
 800b16c:	f04f 0200 	mov.w	r2, #0
 800b170:	f04f 0300 	mov.w	r3, #0
 800b174:	f04f 0400 	mov.w	r4, #0
 800b178:	0094      	lsls	r4, r2, #2
 800b17a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b17e:	008b      	lsls	r3, r1, #2
 800b180:	461a      	mov	r2, r3
 800b182:	4623      	mov	r3, r4
 800b184:	4628      	mov	r0, r5
 800b186:	4631      	mov	r1, r6
 800b188:	f7f5 f882 	bl	8000290 <__aeabi_uldivmod>
 800b18c:	4603      	mov	r3, r0
 800b18e:	460c      	mov	r4, r1
 800b190:	461a      	mov	r2, r3
 800b192:	4b4e      	ldr	r3, [pc, #312]	; (800b2cc <UART_SetConfig+0x778>)
 800b194:	fba3 2302 	umull	r2, r3, r3, r2
 800b198:	095b      	lsrs	r3, r3, #5
 800b19a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	469b      	mov	fp, r3
 800b1a2:	f04f 0c00 	mov.w	ip, #0
 800b1a6:	46d9      	mov	r9, fp
 800b1a8:	46e2      	mov	sl, ip
 800b1aa:	eb19 0309 	adds.w	r3, r9, r9
 800b1ae:	eb4a 040a 	adc.w	r4, sl, sl
 800b1b2:	4699      	mov	r9, r3
 800b1b4:	46a2      	mov	sl, r4
 800b1b6:	eb19 090b 	adds.w	r9, r9, fp
 800b1ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b1be:	f04f 0100 	mov.w	r1, #0
 800b1c2:	f04f 0200 	mov.w	r2, #0
 800b1c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b1ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b1ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b1d2:	4689      	mov	r9, r1
 800b1d4:	4692      	mov	sl, r2
 800b1d6:	eb1b 0509 	adds.w	r5, fp, r9
 800b1da:	eb4c 060a 	adc.w	r6, ip, sl
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	f04f 0200 	mov.w	r2, #0
 800b1e8:	f04f 0300 	mov.w	r3, #0
 800b1ec:	f04f 0400 	mov.w	r4, #0
 800b1f0:	0094      	lsls	r4, r2, #2
 800b1f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b1f6:	008b      	lsls	r3, r1, #2
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	4623      	mov	r3, r4
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	4631      	mov	r1, r6
 800b200:	f7f5 f846 	bl	8000290 <__aeabi_uldivmod>
 800b204:	4603      	mov	r3, r0
 800b206:	460c      	mov	r4, r1
 800b208:	461a      	mov	r2, r3
 800b20a:	4b30      	ldr	r3, [pc, #192]	; (800b2cc <UART_SetConfig+0x778>)
 800b20c:	fba3 1302 	umull	r1, r3, r3, r2
 800b210:	095b      	lsrs	r3, r3, #5
 800b212:	2164      	movs	r1, #100	; 0x64
 800b214:	fb01 f303 	mul.w	r3, r1, r3
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	011b      	lsls	r3, r3, #4
 800b21c:	3332      	adds	r3, #50	; 0x32
 800b21e:	4a2b      	ldr	r2, [pc, #172]	; (800b2cc <UART_SetConfig+0x778>)
 800b220:	fba2 2303 	umull	r2, r3, r2, r3
 800b224:	095b      	lsrs	r3, r3, #5
 800b226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b22a:	4498      	add	r8, r3
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	469b      	mov	fp, r3
 800b230:	f04f 0c00 	mov.w	ip, #0
 800b234:	46d9      	mov	r9, fp
 800b236:	46e2      	mov	sl, ip
 800b238:	eb19 0309 	adds.w	r3, r9, r9
 800b23c:	eb4a 040a 	adc.w	r4, sl, sl
 800b240:	4699      	mov	r9, r3
 800b242:	46a2      	mov	sl, r4
 800b244:	eb19 090b 	adds.w	r9, r9, fp
 800b248:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b24c:	f04f 0100 	mov.w	r1, #0
 800b250:	f04f 0200 	mov.w	r2, #0
 800b254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b258:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b25c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b260:	4689      	mov	r9, r1
 800b262:	4692      	mov	sl, r2
 800b264:	eb1b 0509 	adds.w	r5, fp, r9
 800b268:	eb4c 060a 	adc.w	r6, ip, sl
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	4619      	mov	r1, r3
 800b272:	f04f 0200 	mov.w	r2, #0
 800b276:	f04f 0300 	mov.w	r3, #0
 800b27a:	f04f 0400 	mov.w	r4, #0
 800b27e:	0094      	lsls	r4, r2, #2
 800b280:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b284:	008b      	lsls	r3, r1, #2
 800b286:	461a      	mov	r2, r3
 800b288:	4623      	mov	r3, r4
 800b28a:	4628      	mov	r0, r5
 800b28c:	4631      	mov	r1, r6
 800b28e:	f7f4 ffff 	bl	8000290 <__aeabi_uldivmod>
 800b292:	4603      	mov	r3, r0
 800b294:	460c      	mov	r4, r1
 800b296:	461a      	mov	r2, r3
 800b298:	4b0c      	ldr	r3, [pc, #48]	; (800b2cc <UART_SetConfig+0x778>)
 800b29a:	fba3 1302 	umull	r1, r3, r3, r2
 800b29e:	095b      	lsrs	r3, r3, #5
 800b2a0:	2164      	movs	r1, #100	; 0x64
 800b2a2:	fb01 f303 	mul.w	r3, r1, r3
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	011b      	lsls	r3, r3, #4
 800b2aa:	3332      	adds	r3, #50	; 0x32
 800b2ac:	4a07      	ldr	r2, [pc, #28]	; (800b2cc <UART_SetConfig+0x778>)
 800b2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b2:	095b      	lsrs	r3, r3, #5
 800b2b4:	f003 020f 	and.w	r2, r3, #15
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4442      	add	r2, r8
 800b2be:	609a      	str	r2, [r3, #8]
}
 800b2c0:	e7ff      	b.n	800b2c2 <UART_SetConfig+0x76e>
 800b2c2:	bf00      	nop
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2cc:	51eb851f 	.word	0x51eb851f

0800b2d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	f107 001c 	add.w	r0, r7, #28
 800b2de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d122      	bne.n	800b32e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b2fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b312:	2b01      	cmp	r3, #1
 800b314:	d105      	bne.n	800b322 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f001 fab4 	bl	800c890 <USB_CoreReset>
 800b328:	4603      	mov	r3, r0
 800b32a:	73fb      	strb	r3, [r7, #15]
 800b32c:	e01a      	b.n	800b364 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f001 faa8 	bl	800c890 <USB_CoreReset>
 800b340:	4603      	mov	r3, r0
 800b342:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b346:	2b00      	cmp	r3, #0
 800b348:	d106      	bne.n	800b358 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	639a      	str	r2, [r3, #56]	; 0x38
 800b356:	e005      	b.n	800b364 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b35c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	2b01      	cmp	r3, #1
 800b368:	d10b      	bne.n	800b382 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	f043 0206 	orr.w	r2, r3, #6
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	f043 0220 	orr.w	r2, r3, #32
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b382:	7bfb      	ldrb	r3, [r7, #15]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b38e:	b004      	add	sp, #16
 800b390:	4770      	bx	lr
	...

0800b394 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b394:	b480      	push	{r7}
 800b396:	b087      	sub	sp, #28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b3a2:	79fb      	ldrb	r3, [r7, #7]
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d165      	bne.n	800b474 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	4a41      	ldr	r2, [pc, #260]	; (800b4b0 <USB_SetTurnaroundTime+0x11c>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d906      	bls.n	800b3be <USB_SetTurnaroundTime+0x2a>
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	4a40      	ldr	r2, [pc, #256]	; (800b4b4 <USB_SetTurnaroundTime+0x120>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d802      	bhi.n	800b3be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b3b8:	230f      	movs	r3, #15
 800b3ba:	617b      	str	r3, [r7, #20]
 800b3bc:	e062      	b.n	800b484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	4a3c      	ldr	r2, [pc, #240]	; (800b4b4 <USB_SetTurnaroundTime+0x120>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d906      	bls.n	800b3d4 <USB_SetTurnaroundTime+0x40>
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	4a3b      	ldr	r2, [pc, #236]	; (800b4b8 <USB_SetTurnaroundTime+0x124>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d802      	bhi.n	800b3d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b3ce:	230e      	movs	r3, #14
 800b3d0:	617b      	str	r3, [r7, #20]
 800b3d2:	e057      	b.n	800b484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	4a38      	ldr	r2, [pc, #224]	; (800b4b8 <USB_SetTurnaroundTime+0x124>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d906      	bls.n	800b3ea <USB_SetTurnaroundTime+0x56>
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	4a37      	ldr	r2, [pc, #220]	; (800b4bc <USB_SetTurnaroundTime+0x128>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d802      	bhi.n	800b3ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b3e4:	230d      	movs	r3, #13
 800b3e6:	617b      	str	r3, [r7, #20]
 800b3e8:	e04c      	b.n	800b484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	4a33      	ldr	r2, [pc, #204]	; (800b4bc <USB_SetTurnaroundTime+0x128>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d906      	bls.n	800b400 <USB_SetTurnaroundTime+0x6c>
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	4a32      	ldr	r2, [pc, #200]	; (800b4c0 <USB_SetTurnaroundTime+0x12c>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d802      	bhi.n	800b400 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b3fa:	230c      	movs	r3, #12
 800b3fc:	617b      	str	r3, [r7, #20]
 800b3fe:	e041      	b.n	800b484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	4a2f      	ldr	r2, [pc, #188]	; (800b4c0 <USB_SetTurnaroundTime+0x12c>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d906      	bls.n	800b416 <USB_SetTurnaroundTime+0x82>
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	4a2e      	ldr	r2, [pc, #184]	; (800b4c4 <USB_SetTurnaroundTime+0x130>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d802      	bhi.n	800b416 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b410:	230b      	movs	r3, #11
 800b412:	617b      	str	r3, [r7, #20]
 800b414:	e036      	b.n	800b484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	4a2a      	ldr	r2, [pc, #168]	; (800b4c4 <USB_SetTurnaroundTime+0x130>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d906      	bls.n	800b42c <USB_SetTurnaroundTime+0x98>
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	4a29      	ldr	r2, [pc, #164]	; (800b4c8 <USB_SetTurnaroundTime+0x134>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d802      	bhi.n	800b42c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b426:	230a      	movs	r3, #10
 800b428:	617b      	str	r3, [r7, #20]
 800b42a:	e02b      	b.n	800b484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	4a26      	ldr	r2, [pc, #152]	; (800b4c8 <USB_SetTurnaroundTime+0x134>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d906      	bls.n	800b442 <USB_SetTurnaroundTime+0xae>
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	4a25      	ldr	r2, [pc, #148]	; (800b4cc <USB_SetTurnaroundTime+0x138>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d802      	bhi.n	800b442 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b43c:	2309      	movs	r3, #9
 800b43e:	617b      	str	r3, [r7, #20]
 800b440:	e020      	b.n	800b484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	4a21      	ldr	r2, [pc, #132]	; (800b4cc <USB_SetTurnaroundTime+0x138>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d906      	bls.n	800b458 <USB_SetTurnaroundTime+0xc4>
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	4a20      	ldr	r2, [pc, #128]	; (800b4d0 <USB_SetTurnaroundTime+0x13c>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d802      	bhi.n	800b458 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b452:	2308      	movs	r3, #8
 800b454:	617b      	str	r3, [r7, #20]
 800b456:	e015      	b.n	800b484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	4a1d      	ldr	r2, [pc, #116]	; (800b4d0 <USB_SetTurnaroundTime+0x13c>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d906      	bls.n	800b46e <USB_SetTurnaroundTime+0xda>
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	4a1c      	ldr	r2, [pc, #112]	; (800b4d4 <USB_SetTurnaroundTime+0x140>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d802      	bhi.n	800b46e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b468:	2307      	movs	r3, #7
 800b46a:	617b      	str	r3, [r7, #20]
 800b46c:	e00a      	b.n	800b484 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b46e:	2306      	movs	r3, #6
 800b470:	617b      	str	r3, [r7, #20]
 800b472:	e007      	b.n	800b484 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b474:	79fb      	ldrb	r3, [r7, #7]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d102      	bne.n	800b480 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b47a:	2309      	movs	r3, #9
 800b47c:	617b      	str	r3, [r7, #20]
 800b47e:	e001      	b.n	800b484 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b480:	2309      	movs	r3, #9
 800b482:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	68da      	ldr	r2, [r3, #12]
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	029b      	lsls	r3, r3, #10
 800b498:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b49c:	431a      	orrs	r2, r3
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	371c      	adds	r7, #28
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	00d8acbf 	.word	0x00d8acbf
 800b4b4:	00e4e1bf 	.word	0x00e4e1bf
 800b4b8:	00f423ff 	.word	0x00f423ff
 800b4bc:	0106737f 	.word	0x0106737f
 800b4c0:	011a499f 	.word	0x011a499f
 800b4c4:	01312cff 	.word	0x01312cff
 800b4c8:	014ca43f 	.word	0x014ca43f
 800b4cc:	016e35ff 	.word	0x016e35ff
 800b4d0:	01a6ab1f 	.word	0x01a6ab1f
 800b4d4:	01e847ff 	.word	0x01e847ff

0800b4d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	f043 0201 	orr.w	r2, r3, #1
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b083      	sub	sp, #12
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	f023 0201 	bic.w	r2, r3, #1
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b534:	78fb      	ldrb	r3, [r7, #3]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d106      	bne.n	800b548 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	60da      	str	r2, [r3, #12]
 800b546:	e00b      	b.n	800b560 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b548:	78fb      	ldrb	r3, [r7, #3]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d106      	bne.n	800b55c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	60da      	str	r2, [r3, #12]
 800b55a:	e001      	b.n	800b560 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	e003      	b.n	800b568 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b560:	2032      	movs	r0, #50	; 0x32
 800b562:	f7fb ff29 	bl	80073b8 <HAL_Delay>

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b570:	b084      	sub	sp, #16
 800b572:	b580      	push	{r7, lr}
 800b574:	b086      	sub	sp, #24
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b57e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b582:	2300      	movs	r3, #0
 800b584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b58a:	2300      	movs	r3, #0
 800b58c:	613b      	str	r3, [r7, #16]
 800b58e:	e009      	b.n	800b5a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	3340      	adds	r3, #64	; 0x40
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	4413      	add	r3, r2
 800b59a:	2200      	movs	r2, #0
 800b59c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	613b      	str	r3, [r7, #16]
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	2b0e      	cmp	r3, #14
 800b5a8:	d9f2      	bls.n	800b590 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d11c      	bne.n	800b5ea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5be:	f043 0302 	orr.w	r3, r3, #2
 800b5c2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	639a      	str	r2, [r3, #56]	; 0x38
 800b5e8:	e00b      	b.n	800b602 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b608:	461a      	mov	r2, r3
 800b60a:	2300      	movs	r3, #0
 800b60c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b614:	4619      	mov	r1, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b61c:	461a      	mov	r2, r3
 800b61e:	680b      	ldr	r3, [r1, #0]
 800b620:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b624:	2b01      	cmp	r3, #1
 800b626:	d10c      	bne.n	800b642 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d104      	bne.n	800b638 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b62e:	2100      	movs	r1, #0
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f949 	bl	800b8c8 <USB_SetDevSpeed>
 800b636:	e008      	b.n	800b64a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b638:	2101      	movs	r1, #1
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f944 	bl	800b8c8 <USB_SetDevSpeed>
 800b640:	e003      	b.n	800b64a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b642:	2103      	movs	r1, #3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 f93f 	bl	800b8c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b64a:	2110      	movs	r1, #16
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f8f3 	bl	800b838 <USB_FlushTxFifo>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d001      	beq.n	800b65c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f911 	bl	800b884 <USB_FlushRxFifo>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d001      	beq.n	800b66c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b672:	461a      	mov	r2, r3
 800b674:	2300      	movs	r3, #0
 800b676:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b67e:	461a      	mov	r2, r3
 800b680:	2300      	movs	r3, #0
 800b682:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b68a:	461a      	mov	r2, r3
 800b68c:	2300      	movs	r3, #0
 800b68e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b690:	2300      	movs	r3, #0
 800b692:	613b      	str	r3, [r7, #16]
 800b694:	e043      	b.n	800b71e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	015a      	lsls	r2, r3, #5
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	4413      	add	r3, r2
 800b69e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6ac:	d118      	bne.n	800b6e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d10a      	bne.n	800b6ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	015a      	lsls	r2, r3, #5
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6c6:	6013      	str	r3, [r2, #0]
 800b6c8:	e013      	b.n	800b6f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	015a      	lsls	r2, r3, #5
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b6dc:	6013      	str	r3, [r2, #0]
 800b6de:	e008      	b.n	800b6f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	015a      	lsls	r2, r3, #5
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6fe:	461a      	mov	r2, r3
 800b700:	2300      	movs	r3, #0
 800b702:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	015a      	lsls	r2, r3, #5
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	4413      	add	r3, r2
 800b70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b710:	461a      	mov	r2, r3
 800b712:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b716:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	3301      	adds	r3, #1
 800b71c:	613b      	str	r3, [r7, #16]
 800b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	429a      	cmp	r2, r3
 800b724:	d3b7      	bcc.n	800b696 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b726:	2300      	movs	r3, #0
 800b728:	613b      	str	r3, [r7, #16]
 800b72a:	e043      	b.n	800b7b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	015a      	lsls	r2, r3, #5
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	4413      	add	r3, r2
 800b734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b73e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b742:	d118      	bne.n	800b776 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10a      	bne.n	800b760 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	015a      	lsls	r2, r3, #5
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	4413      	add	r3, r2
 800b752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b756:	461a      	mov	r2, r3
 800b758:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b75c:	6013      	str	r3, [r2, #0]
 800b75e:	e013      	b.n	800b788 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	015a      	lsls	r2, r3, #5
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	4413      	add	r3, r2
 800b768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b76c:	461a      	mov	r2, r3
 800b76e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b772:	6013      	str	r3, [r2, #0]
 800b774:	e008      	b.n	800b788 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	015a      	lsls	r2, r3, #5
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	4413      	add	r3, r2
 800b77e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b782:	461a      	mov	r2, r3
 800b784:	2300      	movs	r3, #0
 800b786:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	015a      	lsls	r2, r3, #5
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	4413      	add	r3, r2
 800b790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b794:	461a      	mov	r2, r3
 800b796:	2300      	movs	r3, #0
 800b798:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b7ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	613b      	str	r3, [r7, #16]
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d3b7      	bcc.n	800b72c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b7dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d105      	bne.n	800b7f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	699b      	ldr	r3, [r3, #24]
 800b7e8:	f043 0210 	orr.w	r2, r3, #16
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	699a      	ldr	r2, [r3, #24]
 800b7f4:	4b0f      	ldr	r3, [pc, #60]	; (800b834 <USB_DevInit+0x2c4>)
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d005      	beq.n	800b80e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	699b      	ldr	r3, [r3, #24]
 800b806:	f043 0208 	orr.w	r2, r3, #8
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b80e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b810:	2b01      	cmp	r3, #1
 800b812:	d107      	bne.n	800b824 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b81c:	f043 0304 	orr.w	r3, r3, #4
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b824:	7dfb      	ldrb	r3, [r7, #23]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3718      	adds	r7, #24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b830:	b004      	add	sp, #16
 800b832:	4770      	bx	lr
 800b834:	803c3800 	.word	0x803c3800

0800b838 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b842:	2300      	movs	r3, #0
 800b844:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	019b      	lsls	r3, r3, #6
 800b84a:	f043 0220 	orr.w	r2, r3, #32
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	3301      	adds	r3, #1
 800b856:	60fb      	str	r3, [r7, #12]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	4a09      	ldr	r2, [pc, #36]	; (800b880 <USB_FlushTxFifo+0x48>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d901      	bls.n	800b864 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b860:	2303      	movs	r3, #3
 800b862:	e006      	b.n	800b872 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	f003 0320 	and.w	r3, r3, #32
 800b86c:	2b20      	cmp	r3, #32
 800b86e:	d0f0      	beq.n	800b852 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	00030d40 	.word	0x00030d40

0800b884 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b88c:	2300      	movs	r3, #0
 800b88e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2210      	movs	r2, #16
 800b894:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	3301      	adds	r3, #1
 800b89a:	60fb      	str	r3, [r7, #12]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	4a09      	ldr	r2, [pc, #36]	; (800b8c4 <USB_FlushRxFifo+0x40>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d901      	bls.n	800b8a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b8a4:	2303      	movs	r3, #3
 800b8a6:	e006      	b.n	800b8b6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	f003 0310 	and.w	r3, r3, #16
 800b8b0:	2b10      	cmp	r3, #16
 800b8b2:	d0f0      	beq.n	800b896 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	00030d40 	.word	0x00030d40

0800b8c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	78fb      	ldrb	r3, [r7, #3]
 800b8e2:	68f9      	ldr	r1, [r7, #12]
 800b8e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3714      	adds	r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	b087      	sub	sp, #28
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	f003 0306 	and.w	r3, r3, #6
 800b912:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d102      	bne.n	800b920 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b91a:	2300      	movs	r3, #0
 800b91c:	75fb      	strb	r3, [r7, #23]
 800b91e:	e00a      	b.n	800b936 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2b02      	cmp	r3, #2
 800b924:	d002      	beq.n	800b92c <USB_GetDevSpeed+0x32>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2b06      	cmp	r3, #6
 800b92a:	d102      	bne.n	800b932 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b92c:	2302      	movs	r3, #2
 800b92e:	75fb      	strb	r3, [r7, #23]
 800b930:	e001      	b.n	800b936 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b932:	230f      	movs	r3, #15
 800b934:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b936:	7dfb      	ldrb	r3, [r7, #23]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	371c      	adds	r7, #28
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b944:	b480      	push	{r7}
 800b946:	b085      	sub	sp, #20
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	785b      	ldrb	r3, [r3, #1]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d13a      	bne.n	800b9d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b966:	69da      	ldr	r2, [r3, #28]
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	f003 030f 	and.w	r3, r3, #15
 800b970:	2101      	movs	r1, #1
 800b972:	fa01 f303 	lsl.w	r3, r1, r3
 800b976:	b29b      	uxth	r3, r3
 800b978:	68f9      	ldr	r1, [r7, #12]
 800b97a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b97e:	4313      	orrs	r3, r2
 800b980:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	015a      	lsls	r2, r3, #5
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	4413      	add	r3, r2
 800b98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d155      	bne.n	800ba44 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	015a      	lsls	r2, r3, #5
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	4413      	add	r3, r2
 800b9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	78db      	ldrb	r3, [r3, #3]
 800b9b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b9b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	059b      	lsls	r3, r3, #22
 800b9ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	68ba      	ldr	r2, [r7, #8]
 800b9c0:	0151      	lsls	r1, r2, #5
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	440a      	add	r2, r1
 800b9c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9d2:	6013      	str	r3, [r2, #0]
 800b9d4:	e036      	b.n	800ba44 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9dc:	69da      	ldr	r2, [r3, #28]
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	f003 030f 	and.w	r3, r3, #15
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b9ec:	041b      	lsls	r3, r3, #16
 800b9ee:	68f9      	ldr	r1, [r7, #12]
 800b9f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	015a      	lsls	r2, r3, #5
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	4413      	add	r3, r2
 800ba00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d11a      	bne.n	800ba44 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	015a      	lsls	r2, r3, #5
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	4413      	add	r3, r2
 800ba16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	78db      	ldrb	r3, [r3, #3]
 800ba28:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ba2a:	430b      	orrs	r3, r1
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	0151      	lsls	r1, r2, #5
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	440a      	add	r2, r1
 800ba36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba42:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
	...

0800ba54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	785b      	ldrb	r3, [r3, #1]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d161      	bne.n	800bb34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	015a      	lsls	r2, r3, #5
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	4413      	add	r3, r2
 800ba78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba86:	d11f      	bne.n	800bac8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	0151      	lsls	r1, r2, #5
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	440a      	add	r2, r1
 800ba9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800baa6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	0151      	lsls	r1, r2, #5
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	440a      	add	r2, r1
 800babe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bac6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	f003 030f 	and.w	r3, r3, #15
 800bad8:	2101      	movs	r1, #1
 800bada:	fa01 f303 	lsl.w	r3, r1, r3
 800bade:	b29b      	uxth	r3, r3
 800bae0:	43db      	mvns	r3, r3
 800bae2:	68f9      	ldr	r1, [r7, #12]
 800bae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bae8:	4013      	ands	r3, r2
 800baea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baf2:	69da      	ldr	r2, [r3, #28]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	f003 030f 	and.w	r3, r3, #15
 800bafc:	2101      	movs	r1, #1
 800bafe:	fa01 f303 	lsl.w	r3, r1, r3
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	43db      	mvns	r3, r3
 800bb06:	68f9      	ldr	r1, [r7, #12]
 800bb08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	015a      	lsls	r2, r3, #5
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	4413      	add	r3, r2
 800bb18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	0159      	lsls	r1, r3, #5
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	440b      	add	r3, r1
 800bb26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4b35      	ldr	r3, [pc, #212]	; (800bc04 <USB_DeactivateEndpoint+0x1b0>)
 800bb2e:	4013      	ands	r3, r2
 800bb30:	600b      	str	r3, [r1, #0]
 800bb32:	e060      	b.n	800bbf6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	015a      	lsls	r2, r3, #5
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb4a:	d11f      	bne.n	800bb8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	015a      	lsls	r2, r3, #5
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4413      	add	r3, r2
 800bb54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	0151      	lsls	r1, r2, #5
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	440a      	add	r2, r1
 800bb62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	015a      	lsls	r2, r3, #5
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	4413      	add	r3, r2
 800bb74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	68ba      	ldr	r2, [r7, #8]
 800bb7c:	0151      	lsls	r1, r2, #5
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	440a      	add	r2, r1
 800bb82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	f003 030f 	and.w	r3, r3, #15
 800bb9c:	2101      	movs	r1, #1
 800bb9e:	fa01 f303 	lsl.w	r3, r1, r3
 800bba2:	041b      	lsls	r3, r3, #16
 800bba4:	43db      	mvns	r3, r3
 800bba6:	68f9      	ldr	r1, [r7, #12]
 800bba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbac:	4013      	ands	r3, r2
 800bbae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbb6:	69da      	ldr	r2, [r3, #28]
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	f003 030f 	and.w	r3, r3, #15
 800bbc0:	2101      	movs	r1, #1
 800bbc2:	fa01 f303 	lsl.w	r3, r1, r3
 800bbc6:	041b      	lsls	r3, r3, #16
 800bbc8:	43db      	mvns	r3, r3
 800bbca:	68f9      	ldr	r1, [r7, #12]
 800bbcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbd0:	4013      	ands	r3, r2
 800bbd2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	015a      	lsls	r2, r3, #5
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	4413      	add	r3, r2
 800bbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	0159      	lsls	r1, r3, #5
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	440b      	add	r3, r1
 800bbea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbee:	4619      	mov	r1, r3
 800bbf0:	4b05      	ldr	r3, [pc, #20]	; (800bc08 <USB_DeactivateEndpoint+0x1b4>)
 800bbf2:	4013      	ands	r3, r2
 800bbf4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3714      	adds	r7, #20
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	ec337800 	.word	0xec337800
 800bc08:	eff37800 	.word	0xeff37800

0800bc0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08a      	sub	sp, #40	; 0x28
 800bc10:	af02      	add	r7, sp, #8
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	4613      	mov	r3, r2
 800bc18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	785b      	ldrb	r3, [r3, #1]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	f040 815c 	bne.w	800bee6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	695b      	ldr	r3, [r3, #20]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d132      	bne.n	800bc9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	015a      	lsls	r2, r3, #5
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	69ba      	ldr	r2, [r7, #24]
 800bc46:	0151      	lsls	r1, r2, #5
 800bc48:	69fa      	ldr	r2, [r7, #28]
 800bc4a:	440a      	add	r2, r1
 800bc4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	015a      	lsls	r2, r3, #5
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	4413      	add	r3, r2
 800bc62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	69ba      	ldr	r2, [r7, #24]
 800bc6a:	0151      	lsls	r1, r2, #5
 800bc6c:	69fa      	ldr	r2, [r7, #28]
 800bc6e:	440a      	add	r2, r1
 800bc70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	015a      	lsls	r2, r3, #5
 800bc7e:	69fb      	ldr	r3, [r7, #28]
 800bc80:	4413      	add	r3, r2
 800bc82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	69ba      	ldr	r2, [r7, #24]
 800bc8a:	0151      	lsls	r1, r2, #5
 800bc8c:	69fa      	ldr	r2, [r7, #28]
 800bc8e:	440a      	add	r2, r1
 800bc90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc94:	0cdb      	lsrs	r3, r3, #19
 800bc96:	04db      	lsls	r3, r3, #19
 800bc98:	6113      	str	r3, [r2, #16]
 800bc9a:	e074      	b.n	800bd86 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	015a      	lsls	r2, r3, #5
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	4413      	add	r3, r2
 800bca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bca8:	691b      	ldr	r3, [r3, #16]
 800bcaa:	69ba      	ldr	r2, [r7, #24]
 800bcac:	0151      	lsls	r1, r2, #5
 800bcae:	69fa      	ldr	r2, [r7, #28]
 800bcb0:	440a      	add	r2, r1
 800bcb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcb6:	0cdb      	lsrs	r3, r3, #19
 800bcb8:	04db      	lsls	r3, r3, #19
 800bcba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	015a      	lsls	r2, r3, #5
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	69ba      	ldr	r2, [r7, #24]
 800bccc:	0151      	lsls	r1, r2, #5
 800bcce:	69fa      	ldr	r2, [r7, #28]
 800bcd0:	440a      	add	r2, r1
 800bcd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bcda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bcde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcec:	691a      	ldr	r2, [r3, #16]
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	6959      	ldr	r1, [r3, #20]
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	440b      	add	r3, r1
 800bcf8:	1e59      	subs	r1, r3, #1
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	fbb1 f3f3 	udiv	r3, r1, r3
 800bd02:	04d9      	lsls	r1, r3, #19
 800bd04:	4b9d      	ldr	r3, [pc, #628]	; (800bf7c <USB_EPStartXfer+0x370>)
 800bd06:	400b      	ands	r3, r1
 800bd08:	69b9      	ldr	r1, [r7, #24]
 800bd0a:	0148      	lsls	r0, r1, #5
 800bd0c:	69f9      	ldr	r1, [r7, #28]
 800bd0e:	4401      	add	r1, r0
 800bd10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bd14:	4313      	orrs	r3, r2
 800bd16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd24:	691a      	ldr	r2, [r3, #16]
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	695b      	ldr	r3, [r3, #20]
 800bd2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd2e:	69b9      	ldr	r1, [r7, #24]
 800bd30:	0148      	lsls	r0, r1, #5
 800bd32:	69f9      	ldr	r1, [r7, #28]
 800bd34:	4401      	add	r1, r0
 800bd36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	78db      	ldrb	r3, [r3, #3]
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d11f      	bne.n	800bd86 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	015a      	lsls	r2, r3, #5
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	69ba      	ldr	r2, [r7, #24]
 800bd56:	0151      	lsls	r1, r2, #5
 800bd58:	69fa      	ldr	r2, [r7, #28]
 800bd5a:	440a      	add	r2, r1
 800bd5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bd64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	015a      	lsls	r2, r3, #5
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	69ba      	ldr	r2, [r7, #24]
 800bd76:	0151      	lsls	r1, r2, #5
 800bd78:	69fa      	ldr	r2, [r7, #28]
 800bd7a:	440a      	add	r2, r1
 800bd7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd84:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bd86:	79fb      	ldrb	r3, [r7, #7]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d14b      	bne.n	800be24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d009      	beq.n	800bda8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	015a      	lsls	r2, r3, #5
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda0:	461a      	mov	r2, r3
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	78db      	ldrb	r3, [r3, #3]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d128      	bne.n	800be02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d110      	bne.n	800bde2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	015a      	lsls	r2, r3, #5
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	69ba      	ldr	r2, [r7, #24]
 800bdd0:	0151      	lsls	r1, r2, #5
 800bdd2:	69fa      	ldr	r2, [r7, #28]
 800bdd4:	440a      	add	r2, r1
 800bdd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	e00f      	b.n	800be02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	015a      	lsls	r2, r3, #5
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	4413      	add	r3, r2
 800bdea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	69ba      	ldr	r2, [r7, #24]
 800bdf2:	0151      	lsls	r1, r2, #5
 800bdf4:	69fa      	ldr	r2, [r7, #28]
 800bdf6:	440a      	add	r2, r1
 800bdf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	015a      	lsls	r2, r3, #5
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	4413      	add	r3, r2
 800be0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	69ba      	ldr	r2, [r7, #24]
 800be12:	0151      	lsls	r1, r2, #5
 800be14:	69fa      	ldr	r2, [r7, #28]
 800be16:	440a      	add	r2, r1
 800be18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be20:	6013      	str	r3, [r2, #0]
 800be22:	e12f      	b.n	800c084 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	015a      	lsls	r2, r3, #5
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	4413      	add	r3, r2
 800be2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	69ba      	ldr	r2, [r7, #24]
 800be34:	0151      	lsls	r1, r2, #5
 800be36:	69fa      	ldr	r2, [r7, #28]
 800be38:	440a      	add	r2, r1
 800be3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	78db      	ldrb	r3, [r3, #3]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d015      	beq.n	800be78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	695b      	ldr	r3, [r3, #20]
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 8117 	beq.w	800c084 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	f003 030f 	and.w	r3, r3, #15
 800be66:	2101      	movs	r1, #1
 800be68:	fa01 f303 	lsl.w	r3, r1, r3
 800be6c:	69f9      	ldr	r1, [r7, #28]
 800be6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be72:	4313      	orrs	r3, r2
 800be74:	634b      	str	r3, [r1, #52]	; 0x34
 800be76:	e105      	b.n	800c084 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be84:	2b00      	cmp	r3, #0
 800be86:	d110      	bne.n	800beaa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800be88:	69bb      	ldr	r3, [r7, #24]
 800be8a:	015a      	lsls	r2, r3, #5
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	4413      	add	r3, r2
 800be90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	69ba      	ldr	r2, [r7, #24]
 800be98:	0151      	lsls	r1, r2, #5
 800be9a:	69fa      	ldr	r2, [r7, #28]
 800be9c:	440a      	add	r2, r1
 800be9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bea2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bea6:	6013      	str	r3, [r2, #0]
 800bea8:	e00f      	b.n	800beca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	015a      	lsls	r2, r3, #5
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	4413      	add	r3, r2
 800beb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	69ba      	ldr	r2, [r7, #24]
 800beba:	0151      	lsls	r1, r2, #5
 800bebc:	69fa      	ldr	r2, [r7, #28]
 800bebe:	440a      	add	r2, r1
 800bec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bec8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	68d9      	ldr	r1, [r3, #12]
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	781a      	ldrb	r2, [r3, #0]
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	695b      	ldr	r3, [r3, #20]
 800bed6:	b298      	uxth	r0, r3
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	4603      	mov	r3, r0
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f000 fa2b 	bl	800c33a <USB_WritePacket>
 800bee4:	e0ce      	b.n	800c084 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	015a      	lsls	r2, r3, #5
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	4413      	add	r3, r2
 800beee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	69ba      	ldr	r2, [r7, #24]
 800bef6:	0151      	lsls	r1, r2, #5
 800bef8:	69fa      	ldr	r2, [r7, #28]
 800befa:	440a      	add	r2, r1
 800befc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf00:	0cdb      	lsrs	r3, r3, #19
 800bf02:	04db      	lsls	r3, r3, #19
 800bf04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	015a      	lsls	r2, r3, #5
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	0151      	lsls	r1, r2, #5
 800bf18:	69fa      	ldr	r2, [r7, #28]
 800bf1a:	440a      	add	r2, r1
 800bf1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	695b      	ldr	r3, [r3, #20]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d126      	bne.n	800bf80 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	015a      	lsls	r2, r3, #5
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	4413      	add	r3, r2
 800bf3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf3e:	691a      	ldr	r2, [r3, #16]
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf48:	69b9      	ldr	r1, [r7, #24]
 800bf4a:	0148      	lsls	r0, r1, #5
 800bf4c:	69f9      	ldr	r1, [r7, #28]
 800bf4e:	4401      	add	r1, r0
 800bf50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf54:	4313      	orrs	r3, r2
 800bf56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	015a      	lsls	r2, r3, #5
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	4413      	add	r3, r2
 800bf60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	69ba      	ldr	r2, [r7, #24]
 800bf68:	0151      	lsls	r1, r2, #5
 800bf6a:	69fa      	ldr	r2, [r7, #28]
 800bf6c:	440a      	add	r2, r1
 800bf6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf76:	6113      	str	r3, [r2, #16]
 800bf78:	e036      	b.n	800bfe8 <USB_EPStartXfer+0x3dc>
 800bf7a:	bf00      	nop
 800bf7c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	695a      	ldr	r2, [r3, #20]
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	4413      	add	r3, r2
 800bf8a:	1e5a      	subs	r2, r3, #1
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf94:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	015a      	lsls	r2, r3, #5
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfa2:	691a      	ldr	r2, [r3, #16]
 800bfa4:	8afb      	ldrh	r3, [r7, #22]
 800bfa6:	04d9      	lsls	r1, r3, #19
 800bfa8:	4b39      	ldr	r3, [pc, #228]	; (800c090 <USB_EPStartXfer+0x484>)
 800bfaa:	400b      	ands	r3, r1
 800bfac:	69b9      	ldr	r1, [r7, #24]
 800bfae:	0148      	lsls	r0, r1, #5
 800bfb0:	69f9      	ldr	r1, [r7, #28]
 800bfb2:	4401      	add	r1, r0
 800bfb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	015a      	lsls	r2, r3, #5
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfc8:	691a      	ldr	r2, [r3, #16]
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	8af9      	ldrh	r1, [r7, #22]
 800bfd0:	fb01 f303 	mul.w	r3, r1, r3
 800bfd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfd8:	69b9      	ldr	r1, [r7, #24]
 800bfda:	0148      	lsls	r0, r1, #5
 800bfdc:	69f9      	ldr	r1, [r7, #28]
 800bfde:	4401      	add	r1, r0
 800bfe0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bfe8:	79fb      	ldrb	r3, [r7, #7]
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d10d      	bne.n	800c00a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d009      	beq.n	800c00a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	68d9      	ldr	r1, [r3, #12]
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	015a      	lsls	r2, r3, #5
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	4413      	add	r3, r2
 800c002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c006:	460a      	mov	r2, r1
 800c008:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	78db      	ldrb	r3, [r3, #3]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d128      	bne.n	800c064 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d110      	bne.n	800c044 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	015a      	lsls	r2, r3, #5
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	4413      	add	r3, r2
 800c02a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	69ba      	ldr	r2, [r7, #24]
 800c032:	0151      	lsls	r1, r2, #5
 800c034:	69fa      	ldr	r2, [r7, #28]
 800c036:	440a      	add	r2, r1
 800c038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c03c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c040:	6013      	str	r3, [r2, #0]
 800c042:	e00f      	b.n	800c064 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	015a      	lsls	r2, r3, #5
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	4413      	add	r3, r2
 800c04c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	69ba      	ldr	r2, [r7, #24]
 800c054:	0151      	lsls	r1, r2, #5
 800c056:	69fa      	ldr	r2, [r7, #28]
 800c058:	440a      	add	r2, r1
 800c05a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c05e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c062:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	015a      	lsls	r2, r3, #5
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	4413      	add	r3, r2
 800c06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	69ba      	ldr	r2, [r7, #24]
 800c074:	0151      	lsls	r1, r2, #5
 800c076:	69fa      	ldr	r2, [r7, #28]
 800c078:	440a      	add	r2, r1
 800c07a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c07e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c082:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3720      	adds	r7, #32
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	1ff80000 	.word	0x1ff80000

0800c094 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c094:	b480      	push	{r7}
 800c096:	b087      	sub	sp, #28
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	785b      	ldrb	r3, [r3, #1]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	f040 80cd 	bne.w	800c250 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	695b      	ldr	r3, [r3, #20]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d132      	bne.n	800c124 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	015a      	lsls	r2, r3, #5
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	693a      	ldr	r2, [r7, #16]
 800c0ce:	0151      	lsls	r1, r2, #5
 800c0d0:	697a      	ldr	r2, [r7, #20]
 800c0d2:	440a      	add	r2, r1
 800c0d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c0dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c0e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	015a      	lsls	r2, r3, #5
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ee:	691b      	ldr	r3, [r3, #16]
 800c0f0:	693a      	ldr	r2, [r7, #16]
 800c0f2:	0151      	lsls	r1, r2, #5
 800c0f4:	697a      	ldr	r2, [r7, #20]
 800c0f6:	440a      	add	r2, r1
 800c0f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c100:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	015a      	lsls	r2, r3, #5
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	4413      	add	r3, r2
 800c10a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	693a      	ldr	r2, [r7, #16]
 800c112:	0151      	lsls	r1, r2, #5
 800c114:	697a      	ldr	r2, [r7, #20]
 800c116:	440a      	add	r2, r1
 800c118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c11c:	0cdb      	lsrs	r3, r3, #19
 800c11e:	04db      	lsls	r3, r3, #19
 800c120:	6113      	str	r3, [r2, #16]
 800c122:	e04e      	b.n	800c1c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	015a      	lsls	r2, r3, #5
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	4413      	add	r3, r2
 800c12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	0151      	lsls	r1, r2, #5
 800c136:	697a      	ldr	r2, [r7, #20]
 800c138:	440a      	add	r2, r1
 800c13a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c13e:	0cdb      	lsrs	r3, r3, #19
 800c140:	04db      	lsls	r3, r3, #19
 800c142:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	015a      	lsls	r2, r3, #5
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	4413      	add	r3, r2
 800c14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c150:	691b      	ldr	r3, [r3, #16]
 800c152:	693a      	ldr	r2, [r7, #16]
 800c154:	0151      	lsls	r1, r2, #5
 800c156:	697a      	ldr	r2, [r7, #20]
 800c158:	440a      	add	r2, r1
 800c15a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c15e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c162:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c166:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	695a      	ldr	r2, [r3, #20]
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	429a      	cmp	r2, r3
 800c172:	d903      	bls.n	800c17c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	689a      	ldr	r2, [r3, #8]
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	015a      	lsls	r2, r3, #5
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	4413      	add	r3, r2
 800c184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	693a      	ldr	r2, [r7, #16]
 800c18c:	0151      	lsls	r1, r2, #5
 800c18e:	697a      	ldr	r2, [r7, #20]
 800c190:	440a      	add	r2, r1
 800c192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c19a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	015a      	lsls	r2, r3, #5
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a8:	691a      	ldr	r2, [r3, #16]
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	695b      	ldr	r3, [r3, #20]
 800c1ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1b2:	6939      	ldr	r1, [r7, #16]
 800c1b4:	0148      	lsls	r0, r1, #5
 800c1b6:	6979      	ldr	r1, [r7, #20]
 800c1b8:	4401      	add	r1, r0
 800c1ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c1c2:	79fb      	ldrb	r3, [r7, #7]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d11e      	bne.n	800c206 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	691b      	ldr	r3, [r3, #16]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d009      	beq.n	800c1e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	015a      	lsls	r2, r3, #5
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1dc:	461a      	mov	r2, r3
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	015a      	lsls	r2, r3, #5
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	693a      	ldr	r2, [r7, #16]
 800c1f4:	0151      	lsls	r1, r2, #5
 800c1f6:	697a      	ldr	r2, [r7, #20]
 800c1f8:	440a      	add	r2, r1
 800c1fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c202:	6013      	str	r3, [r2, #0]
 800c204:	e092      	b.n	800c32c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	015a      	lsls	r2, r3, #5
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	4413      	add	r3, r2
 800c20e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	693a      	ldr	r2, [r7, #16]
 800c216:	0151      	lsls	r1, r2, #5
 800c218:	697a      	ldr	r2, [r7, #20]
 800c21a:	440a      	add	r2, r1
 800c21c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c220:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c224:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	695b      	ldr	r3, [r3, #20]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d07e      	beq.n	800c32c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	f003 030f 	and.w	r3, r3, #15
 800c23e:	2101      	movs	r1, #1
 800c240:	fa01 f303 	lsl.w	r3, r1, r3
 800c244:	6979      	ldr	r1, [r7, #20]
 800c246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c24a:	4313      	orrs	r3, r2
 800c24c:	634b      	str	r3, [r1, #52]	; 0x34
 800c24e:	e06d      	b.n	800c32c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	015a      	lsls	r2, r3, #5
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	4413      	add	r3, r2
 800c258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c25c:	691b      	ldr	r3, [r3, #16]
 800c25e:	693a      	ldr	r2, [r7, #16]
 800c260:	0151      	lsls	r1, r2, #5
 800c262:	697a      	ldr	r2, [r7, #20]
 800c264:	440a      	add	r2, r1
 800c266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c26a:	0cdb      	lsrs	r3, r3, #19
 800c26c:	04db      	lsls	r3, r3, #19
 800c26e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	015a      	lsls	r2, r3, #5
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	4413      	add	r3, r2
 800c278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c27c:	691b      	ldr	r3, [r3, #16]
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	0151      	lsls	r1, r2, #5
 800c282:	697a      	ldr	r2, [r7, #20]
 800c284:	440a      	add	r2, r1
 800c286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c28a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c28e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c292:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	695b      	ldr	r3, [r3, #20]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d003      	beq.n	800c2a4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	689a      	ldr	r2, [r3, #8]
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	015a      	lsls	r2, r3, #5
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b0:	691b      	ldr	r3, [r3, #16]
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	0151      	lsls	r1, r2, #5
 800c2b6:	697a      	ldr	r2, [r7, #20]
 800c2b8:	440a      	add	r2, r1
 800c2ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	015a      	lsls	r2, r3, #5
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2d0:	691a      	ldr	r2, [r3, #16]
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2da:	6939      	ldr	r1, [r7, #16]
 800c2dc:	0148      	lsls	r0, r1, #5
 800c2de:	6979      	ldr	r1, [r7, #20]
 800c2e0:	4401      	add	r1, r0
 800c2e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c2ea:	79fb      	ldrb	r3, [r7, #7]
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d10d      	bne.n	800c30c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d009      	beq.n	800c30c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	68d9      	ldr	r1, [r3, #12]
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	015a      	lsls	r2, r3, #5
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	4413      	add	r3, r2
 800c304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c308:	460a      	mov	r2, r1
 800c30a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	015a      	lsls	r2, r3, #5
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	4413      	add	r3, r2
 800c314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	693a      	ldr	r2, [r7, #16]
 800c31c:	0151      	lsls	r1, r2, #5
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	440a      	add	r2, r1
 800c322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c326:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c32a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	371c      	adds	r7, #28
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr

0800c33a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c33a:	b480      	push	{r7}
 800c33c:	b089      	sub	sp, #36	; 0x24
 800c33e:	af00      	add	r7, sp, #0
 800c340:	60f8      	str	r0, [r7, #12]
 800c342:	60b9      	str	r1, [r7, #8]
 800c344:	4611      	mov	r1, r2
 800c346:	461a      	mov	r2, r3
 800c348:	460b      	mov	r3, r1
 800c34a:	71fb      	strb	r3, [r7, #7]
 800c34c:	4613      	mov	r3, r2
 800c34e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c358:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d11a      	bne.n	800c396 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c360:	88bb      	ldrh	r3, [r7, #4]
 800c362:	3303      	adds	r3, #3
 800c364:	089b      	lsrs	r3, r3, #2
 800c366:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c368:	2300      	movs	r3, #0
 800c36a:	61bb      	str	r3, [r7, #24]
 800c36c:	e00f      	b.n	800c38e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c36e:	79fb      	ldrb	r3, [r7, #7]
 800c370:	031a      	lsls	r2, r3, #12
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	4413      	add	r3, r2
 800c376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c37a:	461a      	mov	r2, r3
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	3304      	adds	r3, #4
 800c386:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	3301      	adds	r3, #1
 800c38c:	61bb      	str	r3, [r7, #24]
 800c38e:	69ba      	ldr	r2, [r7, #24]
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	429a      	cmp	r2, r3
 800c394:	d3eb      	bcc.n	800c36e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c396:	2300      	movs	r3, #0
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3724      	adds	r7, #36	; 0x24
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b089      	sub	sp, #36	; 0x24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c3ba:	88fb      	ldrh	r3, [r7, #6]
 800c3bc:	3303      	adds	r3, #3
 800c3be:	089b      	lsrs	r3, r3, #2
 800c3c0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	61bb      	str	r3, [r7, #24]
 800c3c6:	e00b      	b.n	800c3e0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	601a      	str	r2, [r3, #0]
    pDest++;
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	61bb      	str	r3, [r7, #24]
 800c3e0:	69ba      	ldr	r2, [r7, #24]
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d3ef      	bcc.n	800c3c8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c3e8:	69fb      	ldr	r3, [r7, #28]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3724      	adds	r7, #36	; 0x24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr

0800c3f6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3f6:	b480      	push	{r7}
 800c3f8:	b085      	sub	sp, #20
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
 800c3fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	785b      	ldrb	r3, [r3, #1]
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d12c      	bne.n	800c46c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	015a      	lsls	r2, r3, #5
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	4413      	add	r3, r2
 800c41a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	db12      	blt.n	800c44a <USB_EPSetStall+0x54>
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d00f      	beq.n	800c44a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	015a      	lsls	r2, r3, #5
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	4413      	add	r3, r2
 800c432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	0151      	lsls	r1, r2, #5
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	440a      	add	r2, r1
 800c440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c444:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c448:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	015a      	lsls	r2, r3, #5
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	4413      	add	r3, r2
 800c452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	0151      	lsls	r1, r2, #5
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	440a      	add	r2, r1
 800c460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	e02b      	b.n	800c4c4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	015a      	lsls	r2, r3, #5
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	4413      	add	r3, r2
 800c474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	db12      	blt.n	800c4a4 <USB_EPSetStall+0xae>
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00f      	beq.n	800c4a4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	015a      	lsls	r2, r3, #5
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	4413      	add	r3, r2
 800c48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	0151      	lsls	r1, r2, #5
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	440a      	add	r2, r1
 800c49a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c49e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c4a2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	015a      	lsls	r2, r3, #5
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	0151      	lsls	r1, r2, #5
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	440a      	add	r2, r1
 800c4ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c4c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3714      	adds	r7, #20
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4d2:	b480      	push	{r7}
 800c4d4:	b085      	sub	sp, #20
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	785b      	ldrb	r3, [r3, #1]
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d128      	bne.n	800c540 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	015a      	lsls	r2, r3, #5
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	0151      	lsls	r1, r2, #5
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	440a      	add	r2, r1
 800c504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c508:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c50c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	78db      	ldrb	r3, [r3, #3]
 800c512:	2b03      	cmp	r3, #3
 800c514:	d003      	beq.n	800c51e <USB_EPClearStall+0x4c>
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	78db      	ldrb	r3, [r3, #3]
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d138      	bne.n	800c590 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	015a      	lsls	r2, r3, #5
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	4413      	add	r3, r2
 800c526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	0151      	lsls	r1, r2, #5
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	440a      	add	r2, r1
 800c534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	e027      	b.n	800c590 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	015a      	lsls	r2, r3, #5
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	4413      	add	r3, r2
 800c548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	0151      	lsls	r1, r2, #5
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	440a      	add	r2, r1
 800c556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c55a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c55e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	78db      	ldrb	r3, [r3, #3]
 800c564:	2b03      	cmp	r3, #3
 800c566:	d003      	beq.n	800c570 <USB_EPClearStall+0x9e>
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	78db      	ldrb	r3, [r3, #3]
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d10f      	bne.n	800c590 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	015a      	lsls	r2, r3, #5
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	4413      	add	r3, r2
 800c578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	0151      	lsls	r1, r2, #5
 800c582:	68fa      	ldr	r2, [r7, #12]
 800c584:	440a      	add	r2, r1
 800c586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c58a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c58e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3714      	adds	r7, #20
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr

0800c59e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c59e:	b480      	push	{r7}
 800c5a0:	b085      	sub	sp, #20
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c5c0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	78fb      	ldrb	r3, [r7, #3]
 800c5cc:	011b      	lsls	r3, r3, #4
 800c5ce:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c5d2:	68f9      	ldr	r1, [r7, #12]
 800c5d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c5dc:	2300      	movs	r3, #0
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3714      	adds	r7, #20
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr

0800c5ea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b084      	sub	sp, #16
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c604:	f023 0302 	bic.w	r3, r3, #2
 800c608:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c60a:	2003      	movs	r0, #3
 800c60c:	f7fa fed4 	bl	80073b8 <HAL_Delay>

  return HAL_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b084      	sub	sp, #16
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c634:	f043 0302 	orr.w	r3, r3, #2
 800c638:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c63a:	2003      	movs	r0, #3
 800c63c:	f7fa febc 	bl	80073b8 <HAL_Delay>

  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c64a:	b480      	push	{r7}
 800c64c:	b085      	sub	sp, #20
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	695b      	ldr	r3, [r3, #20]
 800c656:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	699b      	ldr	r3, [r3, #24]
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	4013      	ands	r3, r2
 800c660:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c662:	68fb      	ldr	r3, [r7, #12]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3714      	adds	r7, #20
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c670:	b480      	push	{r7}
 800c672:	b085      	sub	sp, #20
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c682:	699b      	ldr	r3, [r3, #24]
 800c684:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c68c:	69db      	ldr	r3, [r3, #28]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	4013      	ands	r3, r2
 800c692:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	0c1b      	lsrs	r3, r3, #16
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3714      	adds	r7, #20
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6b6:	699b      	ldr	r3, [r3, #24]
 800c6b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6c0:	69db      	ldr	r3, [r3, #28]
 800c6c2:	68ba      	ldr	r2, [r7, #8]
 800c6c4:	4013      	ands	r3, r2
 800c6c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	b29b      	uxth	r3, r3
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3714      	adds	r7, #20
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c6e8:	78fb      	ldrb	r3, [r7, #3]
 800c6ea:	015a      	lsls	r2, r3, #5
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6f4:	689b      	ldr	r3, [r3, #8]
 800c6f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6fe:	695b      	ldr	r3, [r3, #20]
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	4013      	ands	r3, r2
 800c704:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c706:	68bb      	ldr	r3, [r7, #8]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3714      	adds	r7, #20
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c714:	b480      	push	{r7}
 800c716:	b087      	sub	sp, #28
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	460b      	mov	r3, r1
 800c71e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c72a:	691b      	ldr	r3, [r3, #16]
 800c72c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c736:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c738:	78fb      	ldrb	r3, [r7, #3]
 800c73a:	f003 030f 	and.w	r3, r3, #15
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	fa22 f303 	lsr.w	r3, r2, r3
 800c744:	01db      	lsls	r3, r3, #7
 800c746:	b2db      	uxtb	r3, r3
 800c748:	693a      	ldr	r2, [r7, #16]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c74e:	78fb      	ldrb	r3, [r7, #3]
 800c750:	015a      	lsls	r2, r3, #5
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	4413      	add	r3, r2
 800c756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	693a      	ldr	r2, [r7, #16]
 800c75e:	4013      	ands	r3, r2
 800c760:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c762:	68bb      	ldr	r3, [r7, #8]
}
 800c764:	4618      	mov	r0, r3
 800c766:	371c      	adds	r7, #28
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr

0800c770 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	695b      	ldr	r3, [r3, #20]
 800c77c:	f003 0301 	and.w	r3, r3, #1
}
 800c780:	4618      	mov	r0, r3
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c7aa:	f023 0307 	bic.w	r3, r3, #7
 800c7ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
	...

0800c7d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b087      	sub	sp, #28
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	607a      	str	r2, [r7, #4]
 800c7e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	333c      	adds	r3, #60	; 0x3c
 800c7ea:	3304      	adds	r3, #4
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	4a26      	ldr	r2, [pc, #152]	; (800c88c <USB_EP0_OutStart+0xb8>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d90a      	bls.n	800c80e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c808:	d101      	bne.n	800c80e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c80a:	2300      	movs	r3, #0
 800c80c:	e037      	b.n	800c87e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c814:	461a      	mov	r2, r3
 800c816:	2300      	movs	r3, #0
 800c818:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c828:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c82c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	697a      	ldr	r2, [r7, #20]
 800c838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c83c:	f043 0318 	orr.w	r3, r3, #24
 800c840:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c848:	691b      	ldr	r3, [r3, #16]
 800c84a:	697a      	ldr	r2, [r7, #20]
 800c84c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c850:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c854:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c856:	7afb      	ldrb	r3, [r7, #11]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d10f      	bne.n	800c87c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c862:	461a      	mov	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	697a      	ldr	r2, [r7, #20]
 800c872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c876:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c87a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	371c      	adds	r7, #28
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr
 800c88a:	bf00      	nop
 800c88c:	4f54300a 	.word	0x4f54300a

0800c890 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c898:	2300      	movs	r3, #0
 800c89a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	60fb      	str	r3, [r7, #12]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	4a13      	ldr	r2, [pc, #76]	; (800c8f4 <USB_CoreReset+0x64>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d901      	bls.n	800c8ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	e01b      	b.n	800c8e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	daf2      	bge.n	800c89c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	691b      	ldr	r3, [r3, #16]
 800c8be:	f043 0201 	orr.w	r2, r3, #1
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	60fb      	str	r3, [r7, #12]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	4a09      	ldr	r2, [pc, #36]	; (800c8f4 <USB_CoreReset+0x64>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d901      	bls.n	800c8d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	e006      	b.n	800c8e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	691b      	ldr	r3, [r3, #16]
 800c8dc:	f003 0301 	and.w	r3, r3, #1
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d0f0      	beq.n	800c8c6 <USB_CoreReset+0x36>

  return HAL_OK;
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3714      	adds	r7, #20
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	00030d40 	.word	0x00030d40

0800c8f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c904:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c908:	f002 f8cc 	bl	800eaa4 <malloc>
 800c90c:	4603      	mov	r3, r0
 800c90e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d105      	bne.n	800c922 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2200      	movs	r2, #0
 800c91a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c91e:	2302      	movs	r3, #2
 800c920:	e066      	b.n	800c9f0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	7c1b      	ldrb	r3, [r3, #16]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d119      	bne.n	800c966 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c932:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c936:	2202      	movs	r2, #2
 800c938:	2181      	movs	r1, #129	; 0x81
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f001 ff39 	bl	800e7b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2201      	movs	r2, #1
 800c944:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c94a:	2202      	movs	r2, #2
 800c94c:	2101      	movs	r1, #1
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f001 ff2f 	bl	800e7b2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2201      	movs	r2, #1
 800c958:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2210      	movs	r2, #16
 800c960:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c964:	e016      	b.n	800c994 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c966:	2340      	movs	r3, #64	; 0x40
 800c968:	2202      	movs	r2, #2
 800c96a:	2181      	movs	r1, #129	; 0x81
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f001 ff20 	bl	800e7b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2201      	movs	r2, #1
 800c976:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c978:	2340      	movs	r3, #64	; 0x40
 800c97a:	2202      	movs	r2, #2
 800c97c:	2101      	movs	r1, #1
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f001 ff17 	bl	800e7b2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2210      	movs	r2, #16
 800c990:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c994:	2308      	movs	r3, #8
 800c996:	2203      	movs	r2, #3
 800c998:	2182      	movs	r1, #130	; 0x82
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f001 ff09 	bl	800e7b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	7c1b      	ldrb	r3, [r3, #16]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d109      	bne.n	800c9de <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c9d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9d4:	2101      	movs	r1, #1
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f001 ffda 	bl	800e990 <USBD_LL_PrepareReceive>
 800c9dc:	e007      	b.n	800c9ee <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c9e4:	2340      	movs	r3, #64	; 0x40
 800c9e6:	2101      	movs	r1, #1
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f001 ffd1 	bl	800e990 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3710      	adds	r7, #16
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	460b      	mov	r3, r1
 800ca02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800ca04:	2300      	movs	r3, #0
 800ca06:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ca08:	2181      	movs	r1, #129	; 0x81
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f001 fef7 	bl	800e7fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ca16:	2101      	movs	r1, #1
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f001 fef0 	bl	800e7fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ca26:	2182      	movs	r1, #130	; 0x82
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f001 fee8 	bl	800e7fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2200      	movs	r2, #0
 800ca32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00e      	beq.n	800ca66 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f002 f82b 	bl	800eab4 <free>
    pdev->pClassData = NULL;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3710      	adds	r7, #16
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca80:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ca82:	2300      	movs	r3, #0
 800ca84:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ca86:	2300      	movs	r3, #0
 800ca88:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d03a      	beq.n	800cb10 <USBD_CDC_Setup+0xa0>
 800ca9a:	2b20      	cmp	r3, #32
 800ca9c:	f040 8097 	bne.w	800cbce <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	88db      	ldrh	r3, [r3, #6]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d029      	beq.n	800cafc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	b25b      	sxtb	r3, r3
 800caae:	2b00      	cmp	r3, #0
 800cab0:	da11      	bge.n	800cad6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	683a      	ldr	r2, [r7, #0]
 800cabc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800cabe:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cac0:	683a      	ldr	r2, [r7, #0]
 800cac2:	88d2      	ldrh	r2, [r2, #6]
 800cac4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800cac6:	6939      	ldr	r1, [r7, #16]
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	88db      	ldrh	r3, [r3, #6]
 800cacc:	461a      	mov	r2, r3
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f001 fa6d 	bl	800dfae <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800cad4:	e082      	b.n	800cbdc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	785a      	ldrb	r2, [r3, #1]
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	88db      	ldrh	r3, [r3, #6]
 800cae4:	b2da      	uxtb	r2, r3
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800caec:	6939      	ldr	r1, [r7, #16]
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	88db      	ldrh	r3, [r3, #6]
 800caf2:	461a      	mov	r2, r3
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f001 fa86 	bl	800e006 <USBD_CtlPrepareRx>
    break;
 800cafa:	e06f      	b.n	800cbdc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb02:	689b      	ldr	r3, [r3, #8]
 800cb04:	683a      	ldr	r2, [r7, #0]
 800cb06:	7850      	ldrb	r0, [r2, #1]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	6839      	ldr	r1, [r7, #0]
 800cb0c:	4798      	blx	r3
    break;
 800cb0e:	e065      	b.n	800cbdc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	785b      	ldrb	r3, [r3, #1]
 800cb14:	2b0b      	cmp	r3, #11
 800cb16:	d84f      	bhi.n	800cbb8 <USBD_CDC_Setup+0x148>
 800cb18:	a201      	add	r2, pc, #4	; (adr r2, 800cb20 <USBD_CDC_Setup+0xb0>)
 800cb1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1e:	bf00      	nop
 800cb20:	0800cb51 	.word	0x0800cb51
 800cb24:	0800cbc7 	.word	0x0800cbc7
 800cb28:	0800cbb9 	.word	0x0800cbb9
 800cb2c:	0800cbb9 	.word	0x0800cbb9
 800cb30:	0800cbb9 	.word	0x0800cbb9
 800cb34:	0800cbb9 	.word	0x0800cbb9
 800cb38:	0800cbb9 	.word	0x0800cbb9
 800cb3c:	0800cbb9 	.word	0x0800cbb9
 800cb40:	0800cbb9 	.word	0x0800cbb9
 800cb44:	0800cbb9 	.word	0x0800cbb9
 800cb48:	0800cb79 	.word	0x0800cb79
 800cb4c:	0800cba1 	.word	0x0800cba1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb56:	2b03      	cmp	r3, #3
 800cb58:	d107      	bne.n	800cb6a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cb5a:	f107 030c 	add.w	r3, r7, #12
 800cb5e:	2202      	movs	r2, #2
 800cb60:	4619      	mov	r1, r3
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f001 fa23 	bl	800dfae <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cb68:	e030      	b.n	800cbcc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800cb6a:	6839      	ldr	r1, [r7, #0]
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f001 f9ad 	bl	800decc <USBD_CtlError>
        ret = USBD_FAIL;
 800cb72:	2303      	movs	r3, #3
 800cb74:	75fb      	strb	r3, [r7, #23]
      break;
 800cb76:	e029      	b.n	800cbcc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	d107      	bne.n	800cb92 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cb82:	f107 030f 	add.w	r3, r7, #15
 800cb86:	2201      	movs	r2, #1
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f001 fa0f 	bl	800dfae <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cb90:	e01c      	b.n	800cbcc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800cb92:	6839      	ldr	r1, [r7, #0]
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f001 f999 	bl	800decc <USBD_CtlError>
        ret = USBD_FAIL;
 800cb9a:	2303      	movs	r3, #3
 800cb9c:	75fb      	strb	r3, [r7, #23]
      break;
 800cb9e:	e015      	b.n	800cbcc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cba6:	2b03      	cmp	r3, #3
 800cba8:	d00f      	beq.n	800cbca <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800cbaa:	6839      	ldr	r1, [r7, #0]
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f001 f98d 	bl	800decc <USBD_CtlError>
        ret = USBD_FAIL;
 800cbb2:	2303      	movs	r3, #3
 800cbb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800cbb6:	e008      	b.n	800cbca <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800cbb8:	6839      	ldr	r1, [r7, #0]
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f001 f986 	bl	800decc <USBD_CtlError>
      ret = USBD_FAIL;
 800cbc0:	2303      	movs	r3, #3
 800cbc2:	75fb      	strb	r3, [r7, #23]
      break;
 800cbc4:	e002      	b.n	800cbcc <USBD_CDC_Setup+0x15c>
      break;
 800cbc6:	bf00      	nop
 800cbc8:	e008      	b.n	800cbdc <USBD_CDC_Setup+0x16c>
      break;
 800cbca:	bf00      	nop
    }
    break;
 800cbcc:	e006      	b.n	800cbdc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800cbce:	6839      	ldr	r1, [r7, #0]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f001 f97b 	bl	800decc <USBD_CtlError>
    ret = USBD_FAIL;
 800cbd6:	2303      	movs	r3, #3
 800cbd8:	75fb      	strb	r3, [r7, #23]
    break;
 800cbda:	bf00      	nop
  }

  return (uint8_t)ret;
 800cbdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3718      	adds	r7, #24
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop

0800cbe8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbfa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d101      	bne.n	800cc0a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cc06:	2303      	movs	r3, #3
 800cc08:	e049      	b.n	800cc9e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cc12:	78fa      	ldrb	r2, [r7, #3]
 800cc14:	6879      	ldr	r1, [r7, #4]
 800cc16:	4613      	mov	r3, r2
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	4413      	add	r3, r2
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	440b      	add	r3, r1
 800cc20:	3318      	adds	r3, #24
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d029      	beq.n	800cc7c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cc28:	78fa      	ldrb	r2, [r7, #3]
 800cc2a:	6879      	ldr	r1, [r7, #4]
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	440b      	add	r3, r1
 800cc36:	3318      	adds	r3, #24
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	78f9      	ldrb	r1, [r7, #3]
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	460b      	mov	r3, r1
 800cc40:	00db      	lsls	r3, r3, #3
 800cc42:	1a5b      	subs	r3, r3, r1
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	4403      	add	r3, r0
 800cc48:	3344      	adds	r3, #68	; 0x44
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	fbb2 f1f3 	udiv	r1, r2, r3
 800cc50:	fb03 f301 	mul.w	r3, r3, r1
 800cc54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d110      	bne.n	800cc7c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cc5a:	78fa      	ldrb	r2, [r7, #3]
 800cc5c:	6879      	ldr	r1, [r7, #4]
 800cc5e:	4613      	mov	r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	4413      	add	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	440b      	add	r3, r1
 800cc68:	3318      	adds	r3, #24
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cc6e:	78f9      	ldrb	r1, [r7, #3]
 800cc70:	2300      	movs	r3, #0
 800cc72:	2200      	movs	r2, #0
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f001 fe6a 	bl	800e94e <USBD_LL_Transmit>
 800cc7a:	e00f      	b.n	800cc9c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc8a:	691b      	ldr	r3, [r3, #16]
 800cc8c:	68ba      	ldr	r2, [r7, #8]
 800cc8e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cc92:	68ba      	ldr	r2, [r7, #8]
 800cc94:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cc98:	78fa      	ldrb	r2, [r7, #3]
 800cc9a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800cc9c:	2300      	movs	r3, #0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b084      	sub	sp, #16
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	460b      	mov	r3, r1
 800ccb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ccb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d101      	bne.n	800ccc8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ccc4:	2303      	movs	r3, #3
 800ccc6:	e015      	b.n	800ccf4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ccc8:	78fb      	ldrb	r3, [r7, #3]
 800ccca:	4619      	mov	r1, r3
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f001 fe80 	bl	800e9d2 <USBD_LL_GetRxDataSize>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ccee:	4611      	mov	r1, r2
 800ccf0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd0a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d015      	beq.n	800cd42 <USBD_CDC_EP0_RxReady+0x46>
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cd1c:	2bff      	cmp	r3, #255	; 0xff
 800cd1e:	d010      	beq.n	800cd42 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	68fa      	ldr	r2, [r7, #12]
 800cd2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800cd2e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cd36:	b292      	uxth	r2, r2
 800cd38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	22ff      	movs	r2, #255	; 0xff
 800cd3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3710      	adds	r7, #16
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2243      	movs	r2, #67	; 0x43
 800cd58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800cd5a:	4b03      	ldr	r3, [pc, #12]	; (800cd68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr
 800cd68:	200000f8 	.word	0x200000f8

0800cd6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2243      	movs	r2, #67	; 0x43
 800cd78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800cd7a:	4b03      	ldr	r3, [pc, #12]	; (800cd88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr
 800cd88:	200000b4 	.word	0x200000b4

0800cd8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b083      	sub	sp, #12
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2243      	movs	r2, #67	; 0x43
 800cd98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800cd9a:	4b03      	ldr	r3, [pc, #12]	; (800cda8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	370c      	adds	r7, #12
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr
 800cda8:	2000013c 	.word	0x2000013c

0800cdac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	220a      	movs	r2, #10
 800cdb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cdba:	4b03      	ldr	r3, [pc, #12]	; (800cdc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr
 800cdc8:	20000070 	.word	0x20000070

0800cdcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b083      	sub	sp, #12
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d101      	bne.n	800cde0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cddc:	2303      	movs	r3, #3
 800cdde:	e004      	b.n	800cdea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	370c      	adds	r7, #12
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr

0800cdf6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cdf6:	b480      	push	{r7}
 800cdf8:	b087      	sub	sp, #28
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	60f8      	str	r0, [r7, #12]
 800cdfe:	60b9      	str	r1, [r7, #8]
 800ce00:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce08:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	371c      	adds	r7, #28
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce38:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	683a      	ldr	r2, [r7, #0]
 800ce3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d101      	bne.n	800ce6e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ce6a:	2303      	movs	r3, #3
 800ce6c:	e016      	b.n	800ce9c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	7c1b      	ldrb	r3, [r3, #16]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d109      	bne.n	800ce8a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce80:	2101      	movs	r1, #1
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f001 fd84 	bl	800e990 <USBD_LL_PrepareReceive>
 800ce88:	e007      	b.n	800ce9a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce90:	2340      	movs	r3, #64	; 0x40
 800ce92:	2101      	movs	r1, #1
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f001 fd7b 	bl	800e990 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	4613      	mov	r3, r2
 800ceb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d101      	bne.n	800cebc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	e025      	b.n	800cf08 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d003      	beq.n	800cece <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d003      	beq.n	800cee0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d003      	beq.n	800ceee <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	68ba      	ldr	r2, [r7, #8]
 800ceea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2201      	movs	r2, #1
 800cef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	79fa      	ldrb	r2, [r7, #7]
 800cefa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	f001 fbf1 	bl	800e6e4 <USBD_LL_Init>
 800cf02:	4603      	mov	r3, r0
 800cf04:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cf06:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3718      	adds	r7, #24
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d101      	bne.n	800cf28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cf24:	2303      	movs	r3, #3
 800cf26:	e010      	b.n	800cf4a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	683a      	ldr	r2, [r7, #0]
 800cf2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf38:	f107 020e 	add.w	r2, r7, #14
 800cf3c:	4610      	mov	r0, r2
 800cf3e:	4798      	blx	r3
 800cf40:	4602      	mov	r2, r0
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800cf48:	2300      	movs	r3, #0
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b082      	sub	sp, #8
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f001 fc0e 	bl	800e77c <USBD_LL_Start>
 800cf60:	4603      	mov	r3, r0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cf6a:	b480      	push	{r7}
 800cf6c:	b083      	sub	sp, #12
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d009      	beq.n	800cfae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	78fa      	ldrb	r2, [r7, #3]
 800cfa4:	4611      	mov	r1, r2
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	4798      	blx	r3
 800cfaa:	4603      	mov	r3, r0
 800cfac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cfae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d007      	beq.n	800cfde <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	78fa      	ldrb	r2, [r7, #3]
 800cfd8:	4611      	mov	r1, r2
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	4798      	blx	r3
  }

  return USBD_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cff8:	6839      	ldr	r1, [r7, #0]
 800cffa:	4618      	mov	r0, r3
 800cffc:	f000 ff2c 	bl	800de58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d00e:	461a      	mov	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d01c:	f003 031f 	and.w	r3, r3, #31
 800d020:	2b01      	cmp	r3, #1
 800d022:	d00e      	beq.n	800d042 <USBD_LL_SetupStage+0x5a>
 800d024:	2b01      	cmp	r3, #1
 800d026:	d302      	bcc.n	800d02e <USBD_LL_SetupStage+0x46>
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d014      	beq.n	800d056 <USBD_LL_SetupStage+0x6e>
 800d02c:	e01d      	b.n	800d06a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d034:	4619      	mov	r1, r3
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 fa18 	bl	800d46c <USBD_StdDevReq>
 800d03c:	4603      	mov	r3, r0
 800d03e:	73fb      	strb	r3, [r7, #15]
      break;
 800d040:	e020      	b.n	800d084 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d048:	4619      	mov	r1, r3
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 fa7c 	bl	800d548 <USBD_StdItfReq>
 800d050:	4603      	mov	r3, r0
 800d052:	73fb      	strb	r3, [r7, #15]
      break;
 800d054:	e016      	b.n	800d084 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d05c:	4619      	mov	r1, r3
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fab8 	bl	800d5d4 <USBD_StdEPReq>
 800d064:	4603      	mov	r3, r0
 800d066:	73fb      	strb	r3, [r7, #15]
      break;
 800d068:	e00c      	b.n	800d084 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d070:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d074:	b2db      	uxtb	r3, r3
 800d076:	4619      	mov	r1, r3
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f001 fbdf 	bl	800e83c <USBD_LL_StallEP>
 800d07e:	4603      	mov	r3, r0
 800d080:	73fb      	strb	r3, [r7, #15]
      break;
 800d082:	bf00      	nop
  }

  return ret;
 800d084:	7bfb      	ldrb	r3, [r7, #15]
}
 800d086:	4618      	mov	r0, r3
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b086      	sub	sp, #24
 800d092:	af00      	add	r7, sp, #0
 800d094:	60f8      	str	r0, [r7, #12]
 800d096:	460b      	mov	r3, r1
 800d098:	607a      	str	r2, [r7, #4]
 800d09a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d09c:	7afb      	ldrb	r3, [r7, #11]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d137      	bne.n	800d112 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d0a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d0b0:	2b03      	cmp	r3, #3
 800d0b2:	d14a      	bne.n	800d14a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	689a      	ldr	r2, [r3, #8]
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d913      	bls.n	800d0e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	689a      	ldr	r2, [r3, #8]
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	1ad2      	subs	r2, r2, r3
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	68da      	ldr	r2, [r3, #12]
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	bf28      	it	cs
 800d0da:	4613      	movcs	r3, r2
 800d0dc:	461a      	mov	r2, r3
 800d0de:	6879      	ldr	r1, [r7, #4]
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f000 ffad 	bl	800e040 <USBD_CtlContinueRx>
 800d0e6:	e030      	b.n	800d14a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d00a      	beq.n	800d10a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d0fa:	2b03      	cmp	r3, #3
 800d0fc:	d105      	bne.n	800d10a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d104:	691b      	ldr	r3, [r3, #16]
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f000 ffa9 	bl	800e062 <USBD_CtlSendStatus>
 800d110:	e01b      	b.n	800d14a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d118:	699b      	ldr	r3, [r3, #24]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d013      	beq.n	800d146 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d124:	2b03      	cmp	r3, #3
 800d126:	d10e      	bne.n	800d146 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d12e:	699b      	ldr	r3, [r3, #24]
 800d130:	7afa      	ldrb	r2, [r7, #11]
 800d132:	4611      	mov	r1, r2
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	4798      	blx	r3
 800d138:	4603      	mov	r3, r0
 800d13a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d13c:	7dfb      	ldrb	r3, [r7, #23]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d003      	beq.n	800d14a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800d142:	7dfb      	ldrb	r3, [r7, #23]
 800d144:	e002      	b.n	800d14c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d146:	2303      	movs	r3, #3
 800d148:	e000      	b.n	800d14c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3718      	adds	r7, #24
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b086      	sub	sp, #24
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	460b      	mov	r3, r1
 800d15e:	607a      	str	r2, [r7, #4]
 800d160:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d162:	7afb      	ldrb	r3, [r7, #11]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d16a      	bne.n	800d23e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	3314      	adds	r3, #20
 800d16c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d174:	2b02      	cmp	r3, #2
 800d176:	d155      	bne.n	800d224 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	689a      	ldr	r2, [r3, #8]
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	429a      	cmp	r2, r3
 800d182:	d914      	bls.n	800d1ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	689a      	ldr	r2, [r3, #8]
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	1ad2      	subs	r2, r2, r3
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	461a      	mov	r2, r3
 800d198:	6879      	ldr	r1, [r7, #4]
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f000 ff22 	bl	800dfe4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	2100      	movs	r1, #0
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f001 fbf2 	bl	800e990 <USBD_LL_PrepareReceive>
 800d1ac:	e03a      	b.n	800d224 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	68da      	ldr	r2, [r3, #12]
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	689b      	ldr	r3, [r3, #8]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d11c      	bne.n	800d1f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	685a      	ldr	r2, [r3, #4]
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d316      	bcc.n	800d1f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	685a      	ldr	r2, [r3, #4]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d20f      	bcs.n	800d1f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	2100      	movs	r1, #0
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f000 ff03 	bl	800dfe4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	2100      	movs	r1, #0
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f001 fbcf 	bl	800e990 <USBD_LL_PrepareReceive>
 800d1f2:	e017      	b.n	800d224 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00a      	beq.n	800d216 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d206:	2b03      	cmp	r3, #3
 800d208:	d105      	bne.n	800d216 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d216:	2180      	movs	r1, #128	; 0x80
 800d218:	68f8      	ldr	r0, [r7, #12]
 800d21a:	f001 fb0f 	bl	800e83c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f000 ff32 	bl	800e088 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d123      	bne.n	800d276 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f7ff fe9b 	bl	800cf6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2200      	movs	r2, #0
 800d238:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d23c:	e01b      	b.n	800d276 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d244:	695b      	ldr	r3, [r3, #20]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d013      	beq.n	800d272 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d250:	2b03      	cmp	r3, #3
 800d252:	d10e      	bne.n	800d272 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d25a:	695b      	ldr	r3, [r3, #20]
 800d25c:	7afa      	ldrb	r2, [r7, #11]
 800d25e:	4611      	mov	r1, r2
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	4798      	blx	r3
 800d264:	4603      	mov	r3, r0
 800d266:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d268:	7dfb      	ldrb	r3, [r7, #23]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d003      	beq.n	800d276 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800d26e:	7dfb      	ldrb	r3, [r7, #23]
 800d270:	e002      	b.n	800d278 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d272:	2303      	movs	r3, #3
 800d274:	e000      	b.n	800d278 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3718      	adds	r7, #24
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d009      	beq.n	800d2c4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	6852      	ldr	r2, [r2, #4]
 800d2bc:	b2d2      	uxtb	r2, r2
 800d2be:	4611      	mov	r1, r2
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2c4:	2340      	movs	r3, #64	; 0x40
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f001 fa71 	bl	800e7b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2240      	movs	r2, #64	; 0x40
 800d2dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2e0:	2340      	movs	r3, #64	; 0x40
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	2180      	movs	r1, #128	; 0x80
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f001 fa63 	bl	800e7b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2240      	movs	r2, #64	; 0x40
 800d2f6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d2f8:	2300      	movs	r3, #0
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d302:	b480      	push	{r7}
 800d304:	b083      	sub	sp, #12
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
 800d30a:	460b      	mov	r3, r1
 800d30c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	78fa      	ldrb	r2, [r7, #3]
 800d312:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d314:	2300      	movs	r3, #0
}
 800d316:	4618      	mov	r0, r3
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr

0800d322 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d322:	b480      	push	{r7}
 800d324:	b083      	sub	sp, #12
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2204      	movs	r2, #4
 800d33a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d33e:	2300      	movs	r3, #0
}
 800d340:	4618      	mov	r0, r3
 800d342:	370c      	adds	r7, #12
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr

0800d34c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d35a:	2b04      	cmp	r3, #4
 800d35c:	d105      	bne.n	800d36a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d36a:	2300      	movs	r3, #0
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr

0800d378 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d386:	2b03      	cmp	r3, #3
 800d388:	d10b      	bne.n	800d3a2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d390:	69db      	ldr	r3, [r3, #28]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d005      	beq.n	800d3a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d39c:	69db      	ldr	r3, [r3, #28]
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3708      	adds	r7, #8
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d3b8:	2300      	movs	r3, #0
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	370c      	adds	r7, #12
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr

0800d3c6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d3c6:	b480      	push	{r7}
 800d3c8:	b083      	sub	sp, #12
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d3e8:	2300      	movs	r3, #0
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	370c      	adds	r7, #12
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr

0800d3f6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b082      	sub	sp, #8
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2201      	movs	r2, #1
 800d402:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d009      	beq.n	800d424 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	6852      	ldr	r2, [r2, #4]
 800d41c:	b2d2      	uxtb	r2, r2
 800d41e:	4611      	mov	r1, r2
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	4798      	blx	r3
  }

  return USBD_OK;
 800d424:	2300      	movs	r3, #0
}
 800d426:	4618      	mov	r0, r3
 800d428:	3708      	adds	r7, #8
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}

0800d42e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d42e:	b480      	push	{r7}
 800d430:	b087      	sub	sp, #28
 800d432:	af00      	add	r7, sp, #0
 800d434:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	3301      	adds	r3, #1
 800d444:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d44c:	8a3b      	ldrh	r3, [r7, #16]
 800d44e:	021b      	lsls	r3, r3, #8
 800d450:	b21a      	sxth	r2, r3
 800d452:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d456:	4313      	orrs	r3, r2
 800d458:	b21b      	sxth	r3, r3
 800d45a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d45c:	89fb      	ldrh	r3, [r7, #14]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	371c      	adds	r7, #28
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr
	...

0800d46c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d476:	2300      	movs	r3, #0
 800d478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d482:	2b20      	cmp	r3, #32
 800d484:	d004      	beq.n	800d490 <USBD_StdDevReq+0x24>
 800d486:	2b40      	cmp	r3, #64	; 0x40
 800d488:	d002      	beq.n	800d490 <USBD_StdDevReq+0x24>
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d00a      	beq.n	800d4a4 <USBD_StdDevReq+0x38>
 800d48e:	e050      	b.n	800d532 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	6839      	ldr	r1, [r7, #0]
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	4798      	blx	r3
 800d49e:	4603      	mov	r3, r0
 800d4a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d4a2:	e04b      	b.n	800d53c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	785b      	ldrb	r3, [r3, #1]
 800d4a8:	2b09      	cmp	r3, #9
 800d4aa:	d83c      	bhi.n	800d526 <USBD_StdDevReq+0xba>
 800d4ac:	a201      	add	r2, pc, #4	; (adr r2, 800d4b4 <USBD_StdDevReq+0x48>)
 800d4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b2:	bf00      	nop
 800d4b4:	0800d509 	.word	0x0800d509
 800d4b8:	0800d51d 	.word	0x0800d51d
 800d4bc:	0800d527 	.word	0x0800d527
 800d4c0:	0800d513 	.word	0x0800d513
 800d4c4:	0800d527 	.word	0x0800d527
 800d4c8:	0800d4e7 	.word	0x0800d4e7
 800d4cc:	0800d4dd 	.word	0x0800d4dd
 800d4d0:	0800d527 	.word	0x0800d527
 800d4d4:	0800d4ff 	.word	0x0800d4ff
 800d4d8:	0800d4f1 	.word	0x0800d4f1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800d4dc:	6839      	ldr	r1, [r7, #0]
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 f9ce 	bl	800d880 <USBD_GetDescriptor>
      break;
 800d4e4:	e024      	b.n	800d530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800d4e6:	6839      	ldr	r1, [r7, #0]
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 fb33 	bl	800db54 <USBD_SetAddress>
      break;
 800d4ee:	e01f      	b.n	800d530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800d4f0:	6839      	ldr	r1, [r7, #0]
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 fb70 	bl	800dbd8 <USBD_SetConfig>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800d4fc:	e018      	b.n	800d530 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800d4fe:	6839      	ldr	r1, [r7, #0]
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 fc0d 	bl	800dd20 <USBD_GetConfig>
      break;
 800d506:	e013      	b.n	800d530 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800d508:	6839      	ldr	r1, [r7, #0]
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 fc3c 	bl	800dd88 <USBD_GetStatus>
      break;
 800d510:	e00e      	b.n	800d530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800d512:	6839      	ldr	r1, [r7, #0]
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 fc6a 	bl	800ddee <USBD_SetFeature>
      break;
 800d51a:	e009      	b.n	800d530 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800d51c:	6839      	ldr	r1, [r7, #0]
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 fc79 	bl	800de16 <USBD_ClrFeature>
      break;
 800d524:	e004      	b.n	800d530 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800d526:	6839      	ldr	r1, [r7, #0]
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f000 fccf 	bl	800decc <USBD_CtlError>
      break;
 800d52e:	bf00      	nop
    }
    break;
 800d530:	e004      	b.n	800d53c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800d532:	6839      	ldr	r1, [r7, #0]
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 fcc9 	bl	800decc <USBD_CtlError>
    break;
 800d53a:	bf00      	nop
  }

  return ret;
 800d53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop

0800d548 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d55e:	2b20      	cmp	r3, #32
 800d560:	d003      	beq.n	800d56a <USBD_StdItfReq+0x22>
 800d562:	2b40      	cmp	r3, #64	; 0x40
 800d564:	d001      	beq.n	800d56a <USBD_StdItfReq+0x22>
 800d566:	2b00      	cmp	r3, #0
 800d568:	d12a      	bne.n	800d5c0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d570:	3b01      	subs	r3, #1
 800d572:	2b02      	cmp	r3, #2
 800d574:	d81d      	bhi.n	800d5b2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	889b      	ldrh	r3, [r3, #4]
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d813      	bhi.n	800d5a8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d586:	689b      	ldr	r3, [r3, #8]
 800d588:	6839      	ldr	r1, [r7, #0]
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	4798      	blx	r3
 800d58e:	4603      	mov	r3, r0
 800d590:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	88db      	ldrh	r3, [r3, #6]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d110      	bne.n	800d5bc <USBD_StdItfReq+0x74>
 800d59a:	7bfb      	ldrb	r3, [r7, #15]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d10d      	bne.n	800d5bc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 fd5e 	bl	800e062 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d5a6:	e009      	b.n	800d5bc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800d5a8:	6839      	ldr	r1, [r7, #0]
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fc8e 	bl	800decc <USBD_CtlError>
      break;
 800d5b0:	e004      	b.n	800d5bc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800d5b2:	6839      	ldr	r1, [r7, #0]
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 fc89 	bl	800decc <USBD_CtlError>
      break;
 800d5ba:	e000      	b.n	800d5be <USBD_StdItfReq+0x76>
      break;
 800d5bc:	bf00      	nop
    }
    break;
 800d5be:	e004      	b.n	800d5ca <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800d5c0:	6839      	ldr	r1, [r7, #0]
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 fc82 	bl	800decc <USBD_CtlError>
    break;
 800d5c8:	bf00      	nop
  }

  return ret;
 800d5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	889b      	ldrh	r3, [r3, #4]
 800d5e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d5f0:	2b20      	cmp	r3, #32
 800d5f2:	d004      	beq.n	800d5fe <USBD_StdEPReq+0x2a>
 800d5f4:	2b40      	cmp	r3, #64	; 0x40
 800d5f6:	d002      	beq.n	800d5fe <USBD_StdEPReq+0x2a>
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d00a      	beq.n	800d612 <USBD_StdEPReq+0x3e>
 800d5fc:	e135      	b.n	800d86a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	6839      	ldr	r1, [r7, #0]
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	4798      	blx	r3
 800d60c:	4603      	mov	r3, r0
 800d60e:	73fb      	strb	r3, [r7, #15]
    break;
 800d610:	e130      	b.n	800d874 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	785b      	ldrb	r3, [r3, #1]
 800d616:	2b01      	cmp	r3, #1
 800d618:	d03e      	beq.n	800d698 <USBD_StdEPReq+0xc4>
 800d61a:	2b03      	cmp	r3, #3
 800d61c:	d002      	beq.n	800d624 <USBD_StdEPReq+0x50>
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d077      	beq.n	800d712 <USBD_StdEPReq+0x13e>
 800d622:	e11c      	b.n	800d85e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d002      	beq.n	800d634 <USBD_StdEPReq+0x60>
 800d62e:	2b03      	cmp	r3, #3
 800d630:	d015      	beq.n	800d65e <USBD_StdEPReq+0x8a>
 800d632:	e02b      	b.n	800d68c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d634:	7bbb      	ldrb	r3, [r7, #14]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d00c      	beq.n	800d654 <USBD_StdEPReq+0x80>
 800d63a:	7bbb      	ldrb	r3, [r7, #14]
 800d63c:	2b80      	cmp	r3, #128	; 0x80
 800d63e:	d009      	beq.n	800d654 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800d640:	7bbb      	ldrb	r3, [r7, #14]
 800d642:	4619      	mov	r1, r3
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f001 f8f9 	bl	800e83c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d64a:	2180      	movs	r1, #128	; 0x80
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f001 f8f5 	bl	800e83c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d652:	e020      	b.n	800d696 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800d654:	6839      	ldr	r1, [r7, #0]
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 fc38 	bl	800decc <USBD_CtlError>
        break;
 800d65c:	e01b      	b.n	800d696 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	885b      	ldrh	r3, [r3, #2]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d10e      	bne.n	800d684 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d666:	7bbb      	ldrb	r3, [r7, #14]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00b      	beq.n	800d684 <USBD_StdEPReq+0xb0>
 800d66c:	7bbb      	ldrb	r3, [r7, #14]
 800d66e:	2b80      	cmp	r3, #128	; 0x80
 800d670:	d008      	beq.n	800d684 <USBD_StdEPReq+0xb0>
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	88db      	ldrh	r3, [r3, #6]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d104      	bne.n	800d684 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800d67a:	7bbb      	ldrb	r3, [r7, #14]
 800d67c:	4619      	mov	r1, r3
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f001 f8dc 	bl	800e83c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 fcec 	bl	800e062 <USBD_CtlSendStatus>

        break;
 800d68a:	e004      	b.n	800d696 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800d68c:	6839      	ldr	r1, [r7, #0]
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 fc1c 	bl	800decc <USBD_CtlError>
        break;
 800d694:	bf00      	nop
      }
      break;
 800d696:	e0e7      	b.n	800d868 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d69e:	2b02      	cmp	r3, #2
 800d6a0:	d002      	beq.n	800d6a8 <USBD_StdEPReq+0xd4>
 800d6a2:	2b03      	cmp	r3, #3
 800d6a4:	d015      	beq.n	800d6d2 <USBD_StdEPReq+0xfe>
 800d6a6:	e02d      	b.n	800d704 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d6a8:	7bbb      	ldrb	r3, [r7, #14]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00c      	beq.n	800d6c8 <USBD_StdEPReq+0xf4>
 800d6ae:	7bbb      	ldrb	r3, [r7, #14]
 800d6b0:	2b80      	cmp	r3, #128	; 0x80
 800d6b2:	d009      	beq.n	800d6c8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800d6b4:	7bbb      	ldrb	r3, [r7, #14]
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f001 f8bf 	bl	800e83c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d6be:	2180      	movs	r1, #128	; 0x80
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f001 f8bb 	bl	800e83c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d6c6:	e023      	b.n	800d710 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fbfe 	bl	800decc <USBD_CtlError>
        break;
 800d6d0:	e01e      	b.n	800d710 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	885b      	ldrh	r3, [r3, #2]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d119      	bne.n	800d70e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d6da:	7bbb      	ldrb	r3, [r7, #14]
 800d6dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d004      	beq.n	800d6ee <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d6e4:	7bbb      	ldrb	r3, [r7, #14]
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f001 f8c6 	bl	800e87a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 fcb7 	bl	800e062 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	6839      	ldr	r1, [r7, #0]
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	4798      	blx	r3
        }
        break;
 800d702:	e004      	b.n	800d70e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fbe0 	bl	800decc <USBD_CtlError>
        break;
 800d70c:	e000      	b.n	800d710 <USBD_StdEPReq+0x13c>
        break;
 800d70e:	bf00      	nop
      }
      break;
 800d710:	e0aa      	b.n	800d868 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d718:	2b02      	cmp	r3, #2
 800d71a:	d002      	beq.n	800d722 <USBD_StdEPReq+0x14e>
 800d71c:	2b03      	cmp	r3, #3
 800d71e:	d032      	beq.n	800d786 <USBD_StdEPReq+0x1b2>
 800d720:	e097      	b.n	800d852 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d722:	7bbb      	ldrb	r3, [r7, #14]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d007      	beq.n	800d738 <USBD_StdEPReq+0x164>
 800d728:	7bbb      	ldrb	r3, [r7, #14]
 800d72a:	2b80      	cmp	r3, #128	; 0x80
 800d72c:	d004      	beq.n	800d738 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800d72e:	6839      	ldr	r1, [r7, #0]
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f000 fbcb 	bl	800decc <USBD_CtlError>
          break;
 800d736:	e091      	b.n	800d85c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	da0b      	bge.n	800d758 <USBD_StdEPReq+0x184>
 800d740:	7bbb      	ldrb	r3, [r7, #14]
 800d742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d746:	4613      	mov	r3, r2
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	4413      	add	r3, r2
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	3310      	adds	r3, #16
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	4413      	add	r3, r2
 800d754:	3304      	adds	r3, #4
 800d756:	e00b      	b.n	800d770 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800d758:	7bbb      	ldrb	r3, [r7, #14]
 800d75a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d75e:	4613      	mov	r3, r2
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	4413      	add	r3, r2
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	4413      	add	r3, r2
 800d76e:	3304      	adds	r3, #4
 800d770:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	2200      	movs	r2, #0
 800d776:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	2202      	movs	r2, #2
 800d77c:	4619      	mov	r1, r3
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 fc15 	bl	800dfae <USBD_CtlSendData>
        break;
 800d784:	e06a      	b.n	800d85c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800d786:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	da11      	bge.n	800d7b2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d78e:	7bbb      	ldrb	r3, [r7, #14]
 800d790:	f003 020f 	and.w	r2, r3, #15
 800d794:	6879      	ldr	r1, [r7, #4]
 800d796:	4613      	mov	r3, r2
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	4413      	add	r3, r2
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	440b      	add	r3, r1
 800d7a0:	3324      	adds	r3, #36	; 0x24
 800d7a2:	881b      	ldrh	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d117      	bne.n	800d7d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800d7a8:	6839      	ldr	r1, [r7, #0]
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 fb8e 	bl	800decc <USBD_CtlError>
            break;
 800d7b0:	e054      	b.n	800d85c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d7b2:	7bbb      	ldrb	r3, [r7, #14]
 800d7b4:	f003 020f 	and.w	r2, r3, #15
 800d7b8:	6879      	ldr	r1, [r7, #4]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	4413      	add	r3, r2
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	440b      	add	r3, r1
 800d7c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d7c8:	881b      	ldrh	r3, [r3, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d104      	bne.n	800d7d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 fb7b 	bl	800decc <USBD_CtlError>
            break;
 800d7d6:	e041      	b.n	800d85c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	da0b      	bge.n	800d7f8 <USBD_StdEPReq+0x224>
 800d7e0:	7bbb      	ldrb	r3, [r7, #14]
 800d7e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	4413      	add	r3, r2
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	3310      	adds	r3, #16
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	3304      	adds	r3, #4
 800d7f6:	e00b      	b.n	800d810 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800d7f8:	7bbb      	ldrb	r3, [r7, #14]
 800d7fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7fe:	4613      	mov	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4413      	add	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	4413      	add	r3, r2
 800d80e:	3304      	adds	r3, #4
 800d810:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d812:	7bbb      	ldrb	r3, [r7, #14]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d002      	beq.n	800d81e <USBD_StdEPReq+0x24a>
 800d818:	7bbb      	ldrb	r3, [r7, #14]
 800d81a:	2b80      	cmp	r3, #128	; 0x80
 800d81c:	d103      	bne.n	800d826 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	2200      	movs	r2, #0
 800d822:	601a      	str	r2, [r3, #0]
 800d824:	e00e      	b.n	800d844 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d826:	7bbb      	ldrb	r3, [r7, #14]
 800d828:	4619      	mov	r1, r3
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f001 f844 	bl	800e8b8 <USBD_LL_IsStallEP>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d003      	beq.n	800d83e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	2201      	movs	r2, #1
 800d83a:	601a      	str	r2, [r3, #0]
 800d83c:	e002      	b.n	800d844 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	2200      	movs	r2, #0
 800d842:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	2202      	movs	r2, #2
 800d848:	4619      	mov	r1, r3
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 fbaf 	bl	800dfae <USBD_CtlSendData>
          break;
 800d850:	e004      	b.n	800d85c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800d852:	6839      	ldr	r1, [r7, #0]
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 fb39 	bl	800decc <USBD_CtlError>
        break;
 800d85a:	bf00      	nop
      }
      break;
 800d85c:	e004      	b.n	800d868 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800d85e:	6839      	ldr	r1, [r7, #0]
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 fb33 	bl	800decc <USBD_CtlError>
      break;
 800d866:	bf00      	nop
    }
    break;
 800d868:	e004      	b.n	800d874 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800d86a:	6839      	ldr	r1, [r7, #0]
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 fb2d 	bl	800decc <USBD_CtlError>
    break;
 800d872:	bf00      	nop
  }

  return ret;
 800d874:	7bfb      	ldrb	r3, [r7, #15]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
	...

0800d880 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d88a:	2300      	movs	r3, #0
 800d88c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d88e:	2300      	movs	r3, #0
 800d890:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d892:	2300      	movs	r3, #0
 800d894:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	885b      	ldrh	r3, [r3, #2]
 800d89a:	0a1b      	lsrs	r3, r3, #8
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	2b06      	cmp	r3, #6
 800d8a2:	f200 8128 	bhi.w	800daf6 <USBD_GetDescriptor+0x276>
 800d8a6:	a201      	add	r2, pc, #4	; (adr r2, 800d8ac <USBD_GetDescriptor+0x2c>)
 800d8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ac:	0800d8c9 	.word	0x0800d8c9
 800d8b0:	0800d8e1 	.word	0x0800d8e1
 800d8b4:	0800d921 	.word	0x0800d921
 800d8b8:	0800daf7 	.word	0x0800daf7
 800d8bc:	0800daf7 	.word	0x0800daf7
 800d8c0:	0800da97 	.word	0x0800da97
 800d8c4:	0800dac3 	.word	0x0800dac3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	7c12      	ldrb	r2, [r2, #16]
 800d8d4:	f107 0108 	add.w	r1, r7, #8
 800d8d8:	4610      	mov	r0, r2
 800d8da:	4798      	blx	r3
 800d8dc:	60f8      	str	r0, [r7, #12]
    break;
 800d8de:	e112      	b.n	800db06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	7c1b      	ldrb	r3, [r3, #16]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d10d      	bne.n	800d904 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8f0:	f107 0208 	add.w	r2, r7, #8
 800d8f4:	4610      	mov	r0, r2
 800d8f6:	4798      	blx	r3
 800d8f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	2202      	movs	r2, #2
 800d900:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d902:	e100      	b.n	800db06 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d90c:	f107 0208 	add.w	r2, r7, #8
 800d910:	4610      	mov	r0, r2
 800d912:	4798      	blx	r3
 800d914:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	3301      	adds	r3, #1
 800d91a:	2202      	movs	r2, #2
 800d91c:	701a      	strb	r2, [r3, #0]
    break;
 800d91e:	e0f2      	b.n	800db06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	885b      	ldrh	r3, [r3, #2]
 800d924:	b2db      	uxtb	r3, r3
 800d926:	2b05      	cmp	r3, #5
 800d928:	f200 80ac 	bhi.w	800da84 <USBD_GetDescriptor+0x204>
 800d92c:	a201      	add	r2, pc, #4	; (adr r2, 800d934 <USBD_GetDescriptor+0xb4>)
 800d92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d932:	bf00      	nop
 800d934:	0800d94d 	.word	0x0800d94d
 800d938:	0800d981 	.word	0x0800d981
 800d93c:	0800d9b5 	.word	0x0800d9b5
 800d940:	0800d9e9 	.word	0x0800d9e9
 800d944:	0800da1d 	.word	0x0800da1d
 800d948:	0800da51 	.word	0x0800da51
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00b      	beq.n	800d970 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	7c12      	ldrb	r2, [r2, #16]
 800d964:	f107 0108 	add.w	r1, r7, #8
 800d968:	4610      	mov	r0, r2
 800d96a:	4798      	blx	r3
 800d96c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d96e:	e091      	b.n	800da94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d970:	6839      	ldr	r1, [r7, #0]
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f000 faaa 	bl	800decc <USBD_CtlError>
        err++;
 800d978:	7afb      	ldrb	r3, [r7, #11]
 800d97a:	3301      	adds	r3, #1
 800d97c:	72fb      	strb	r3, [r7, #11]
      break;
 800d97e:	e089      	b.n	800da94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00b      	beq.n	800d9a4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	7c12      	ldrb	r2, [r2, #16]
 800d998:	f107 0108 	add.w	r1, r7, #8
 800d99c:	4610      	mov	r0, r2
 800d99e:	4798      	blx	r3
 800d9a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d9a2:	e077      	b.n	800da94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d9a4:	6839      	ldr	r1, [r7, #0]
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 fa90 	bl	800decc <USBD_CtlError>
        err++;
 800d9ac:	7afb      	ldrb	r3, [r7, #11]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	72fb      	strb	r3, [r7, #11]
      break;
 800d9b2:	e06f      	b.n	800da94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00b      	beq.n	800d9d8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	7c12      	ldrb	r2, [r2, #16]
 800d9cc:	f107 0108 	add.w	r1, r7, #8
 800d9d0:	4610      	mov	r0, r2
 800d9d2:	4798      	blx	r3
 800d9d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d9d6:	e05d      	b.n	800da94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d9d8:	6839      	ldr	r1, [r7, #0]
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 fa76 	bl	800decc <USBD_CtlError>
        err++;
 800d9e0:	7afb      	ldrb	r3, [r7, #11]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	72fb      	strb	r3, [r7, #11]
      break;
 800d9e6:	e055      	b.n	800da94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9ee:	691b      	ldr	r3, [r3, #16]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d00b      	beq.n	800da0c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9fa:	691b      	ldr	r3, [r3, #16]
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	7c12      	ldrb	r2, [r2, #16]
 800da00:	f107 0108 	add.w	r1, r7, #8
 800da04:	4610      	mov	r0, r2
 800da06:	4798      	blx	r3
 800da08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da0a:	e043      	b.n	800da94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800da0c:	6839      	ldr	r1, [r7, #0]
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f000 fa5c 	bl	800decc <USBD_CtlError>
        err++;
 800da14:	7afb      	ldrb	r3, [r7, #11]
 800da16:	3301      	adds	r3, #1
 800da18:	72fb      	strb	r3, [r7, #11]
      break;
 800da1a:	e03b      	b.n	800da94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da22:	695b      	ldr	r3, [r3, #20]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00b      	beq.n	800da40 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da2e:	695b      	ldr	r3, [r3, #20]
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	7c12      	ldrb	r2, [r2, #16]
 800da34:	f107 0108 	add.w	r1, r7, #8
 800da38:	4610      	mov	r0, r2
 800da3a:	4798      	blx	r3
 800da3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da3e:	e029      	b.n	800da94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800da40:	6839      	ldr	r1, [r7, #0]
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 fa42 	bl	800decc <USBD_CtlError>
        err++;
 800da48:	7afb      	ldrb	r3, [r7, #11]
 800da4a:	3301      	adds	r3, #1
 800da4c:	72fb      	strb	r3, [r7, #11]
      break;
 800da4e:	e021      	b.n	800da94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da56:	699b      	ldr	r3, [r3, #24]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00b      	beq.n	800da74 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da62:	699b      	ldr	r3, [r3, #24]
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	7c12      	ldrb	r2, [r2, #16]
 800da68:	f107 0108 	add.w	r1, r7, #8
 800da6c:	4610      	mov	r0, r2
 800da6e:	4798      	blx	r3
 800da70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da72:	e00f      	b.n	800da94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800da74:	6839      	ldr	r1, [r7, #0]
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 fa28 	bl	800decc <USBD_CtlError>
        err++;
 800da7c:	7afb      	ldrb	r3, [r7, #11]
 800da7e:	3301      	adds	r3, #1
 800da80:	72fb      	strb	r3, [r7, #11]
      break;
 800da82:	e007      	b.n	800da94 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800da84:	6839      	ldr	r1, [r7, #0]
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 fa20 	bl	800decc <USBD_CtlError>
      err++;
 800da8c:	7afb      	ldrb	r3, [r7, #11]
 800da8e:	3301      	adds	r3, #1
 800da90:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800da92:	bf00      	nop
    }
    break;
 800da94:	e037      	b.n	800db06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	7c1b      	ldrb	r3, [r3, #16]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d109      	bne.n	800dab2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa6:	f107 0208 	add.w	r2, r7, #8
 800daaa:	4610      	mov	r0, r2
 800daac:	4798      	blx	r3
 800daae:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800dab0:	e029      	b.n	800db06 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800dab2:	6839      	ldr	r1, [r7, #0]
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 fa09 	bl	800decc <USBD_CtlError>
      err++;
 800daba:	7afb      	ldrb	r3, [r7, #11]
 800dabc:	3301      	adds	r3, #1
 800dabe:	72fb      	strb	r3, [r7, #11]
    break;
 800dac0:	e021      	b.n	800db06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	7c1b      	ldrb	r3, [r3, #16]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d10d      	bne.n	800dae6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dad2:	f107 0208 	add.w	r2, r7, #8
 800dad6:	4610      	mov	r0, r2
 800dad8:	4798      	blx	r3
 800dada:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	3301      	adds	r3, #1
 800dae0:	2207      	movs	r2, #7
 800dae2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800dae4:	e00f      	b.n	800db06 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800dae6:	6839      	ldr	r1, [r7, #0]
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 f9ef 	bl	800decc <USBD_CtlError>
      err++;
 800daee:	7afb      	ldrb	r3, [r7, #11]
 800daf0:	3301      	adds	r3, #1
 800daf2:	72fb      	strb	r3, [r7, #11]
    break;
 800daf4:	e007      	b.n	800db06 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800daf6:	6839      	ldr	r1, [r7, #0]
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f000 f9e7 	bl	800decc <USBD_CtlError>
    err++;
 800dafe:	7afb      	ldrb	r3, [r7, #11]
 800db00:	3301      	adds	r3, #1
 800db02:	72fb      	strb	r3, [r7, #11]
    break;
 800db04:	bf00      	nop
  }

  if (err != 0U)
 800db06:	7afb      	ldrb	r3, [r7, #11]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d11e      	bne.n	800db4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	88db      	ldrh	r3, [r3, #6]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d016      	beq.n	800db42 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800db14:	893b      	ldrh	r3, [r7, #8]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d00e      	beq.n	800db38 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	88da      	ldrh	r2, [r3, #6]
 800db1e:	893b      	ldrh	r3, [r7, #8]
 800db20:	4293      	cmp	r3, r2
 800db22:	bf28      	it	cs
 800db24:	4613      	movcs	r3, r2
 800db26:	b29b      	uxth	r3, r3
 800db28:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800db2a:	893b      	ldrh	r3, [r7, #8]
 800db2c:	461a      	mov	r2, r3
 800db2e:	68f9      	ldr	r1, [r7, #12]
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 fa3c 	bl	800dfae <USBD_CtlSendData>
 800db36:	e009      	b.n	800db4c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800db38:	6839      	ldr	r1, [r7, #0]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 f9c6 	bl	800decc <USBD_CtlError>
 800db40:	e004      	b.n	800db4c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 fa8d 	bl	800e062 <USBD_CtlSendStatus>
 800db48:	e000      	b.n	800db4c <USBD_GetDescriptor+0x2cc>
    return;
 800db4a:	bf00      	nop
    }
  }
}
 800db4c:	3710      	adds	r7, #16
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop

0800db54 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	889b      	ldrh	r3, [r3, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d130      	bne.n	800dbc8 <USBD_SetAddress+0x74>
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	88db      	ldrh	r3, [r3, #6]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d12c      	bne.n	800dbc8 <USBD_SetAddress+0x74>
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	885b      	ldrh	r3, [r3, #2]
 800db72:	2b7f      	cmp	r3, #127	; 0x7f
 800db74:	d828      	bhi.n	800dbc8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	885b      	ldrh	r3, [r3, #2]
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db88:	2b03      	cmp	r3, #3
 800db8a:	d104      	bne.n	800db96 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800db8c:	6839      	ldr	r1, [r7, #0]
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 f99c 	bl	800decc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db94:	e01c      	b.n	800dbd0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	7bfa      	ldrb	r2, [r7, #15]
 800db9a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800db9e:	7bfb      	ldrb	r3, [r7, #15]
 800dba0:	4619      	mov	r1, r3
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 feb4 	bl	800e910 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f000 fa5a 	bl	800e062 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dbae:	7bfb      	ldrb	r3, [r7, #15]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d004      	beq.n	800dbbe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2202      	movs	r2, #2
 800dbb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbbc:	e008      	b.n	800dbd0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbc6:	e003      	b.n	800dbd0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dbc8:	6839      	ldr	r1, [r7, #0]
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 f97e 	bl	800decc <USBD_CtlError>
  }
}
 800dbd0:	bf00      	nop
 800dbd2:	3710      	adds	r7, #16
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	885b      	ldrh	r3, [r3, #2]
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	4b4b      	ldr	r3, [pc, #300]	; (800dd1c <USBD_SetConfig+0x144>)
 800dbee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dbf0:	4b4a      	ldr	r3, [pc, #296]	; (800dd1c <USBD_SetConfig+0x144>)
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d905      	bls.n	800dc04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dbf8:	6839      	ldr	r1, [r7, #0]
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 f966 	bl	800decc <USBD_CtlError>
    return USBD_FAIL;
 800dc00:	2303      	movs	r3, #3
 800dc02:	e087      	b.n	800dd14 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d002      	beq.n	800dc14 <USBD_SetConfig+0x3c>
 800dc0e:	2b03      	cmp	r3, #3
 800dc10:	d025      	beq.n	800dc5e <USBD_SetConfig+0x86>
 800dc12:	e071      	b.n	800dcf8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800dc14:	4b41      	ldr	r3, [pc, #260]	; (800dd1c <USBD_SetConfig+0x144>)
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d01c      	beq.n	800dc56 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800dc1c:	4b3f      	ldr	r3, [pc, #252]	; (800dd1c <USBD_SetConfig+0x144>)
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	461a      	mov	r2, r3
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800dc26:	4b3d      	ldr	r3, [pc, #244]	; (800dd1c <USBD_SetConfig+0x144>)
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f7ff f9a7 	bl	800cf80 <USBD_SetClassConfig>
 800dc32:	4603      	mov	r3, r0
 800dc34:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800dc36:	7bfb      	ldrb	r3, [r7, #15]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d004      	beq.n	800dc46 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800dc3c:	6839      	ldr	r1, [r7, #0]
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 f944 	bl	800decc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800dc44:	e065      	b.n	800dd12 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 fa0b 	bl	800e062 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2203      	movs	r2, #3
 800dc50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800dc54:	e05d      	b.n	800dd12 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 fa03 	bl	800e062 <USBD_CtlSendStatus>
    break;
 800dc5c:	e059      	b.n	800dd12 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800dc5e:	4b2f      	ldr	r3, [pc, #188]	; (800dd1c <USBD_SetConfig+0x144>)
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d112      	bne.n	800dc8c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2202      	movs	r2, #2
 800dc6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800dc6e:	4b2b      	ldr	r3, [pc, #172]	; (800dd1c <USBD_SetConfig+0x144>)
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	461a      	mov	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc78:	4b28      	ldr	r3, [pc, #160]	; (800dd1c <USBD_SetConfig+0x144>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f7ff f99a 	bl	800cfb8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 f9ec 	bl	800e062 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800dc8a:	e042      	b.n	800dd12 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800dc8c:	4b23      	ldr	r3, [pc, #140]	; (800dd1c <USBD_SetConfig+0x144>)
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	461a      	mov	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d02a      	beq.n	800dcf0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	4619      	mov	r1, r3
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f7ff f988 	bl	800cfb8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800dca8:	4b1c      	ldr	r3, [pc, #112]	; (800dd1c <USBD_SetConfig+0x144>)
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	461a      	mov	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800dcb2:	4b1a      	ldr	r3, [pc, #104]	; (800dd1c <USBD_SetConfig+0x144>)
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7ff f961 	bl	800cf80 <USBD_SetClassConfig>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800dcc2:	7bfb      	ldrb	r3, [r7, #15]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d00f      	beq.n	800dce8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800dcc8:	6839      	ldr	r1, [r7, #0]
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 f8fe 	bl	800decc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f7ff f96d 	bl	800cfb8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2202      	movs	r2, #2
 800dce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800dce6:	e014      	b.n	800dd12 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 f9ba 	bl	800e062 <USBD_CtlSendStatus>
    break;
 800dcee:	e010      	b.n	800dd12 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 f9b6 	bl	800e062 <USBD_CtlSendStatus>
    break;
 800dcf6:	e00c      	b.n	800dd12 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800dcf8:	6839      	ldr	r1, [r7, #0]
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 f8e6 	bl	800decc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dd00:	4b06      	ldr	r3, [pc, #24]	; (800dd1c <USBD_SetConfig+0x144>)
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	4619      	mov	r1, r3
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f7ff f956 	bl	800cfb8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800dd0c:	2303      	movs	r3, #3
 800dd0e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd10:	bf00      	nop
  }

  return ret;
 800dd12:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3710      	adds	r7, #16
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	20000274 	.word	0x20000274

0800dd20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	88db      	ldrh	r3, [r3, #6]
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d004      	beq.n	800dd3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dd32:	6839      	ldr	r1, [r7, #0]
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 f8c9 	bl	800decc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800dd3a:	e021      	b.n	800dd80 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	db17      	blt.n	800dd76 <USBD_GetConfig+0x56>
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	dd02      	ble.n	800dd50 <USBD_GetConfig+0x30>
 800dd4a:	2b03      	cmp	r3, #3
 800dd4c:	d00b      	beq.n	800dd66 <USBD_GetConfig+0x46>
 800dd4e:	e012      	b.n	800dd76 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2200      	movs	r2, #0
 800dd54:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	3308      	adds	r3, #8
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f925 	bl	800dfae <USBD_CtlSendData>
      break;
 800dd64:	e00c      	b.n	800dd80 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	3304      	adds	r3, #4
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 f91d 	bl	800dfae <USBD_CtlSendData>
      break;
 800dd74:	e004      	b.n	800dd80 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800dd76:	6839      	ldr	r1, [r7, #0]
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 f8a7 	bl	800decc <USBD_CtlError>
      break;
 800dd7e:	bf00      	nop
}
 800dd80:	bf00      	nop
 800dd82:	3708      	adds	r7, #8
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd98:	3b01      	subs	r3, #1
 800dd9a:	2b02      	cmp	r3, #2
 800dd9c:	d81e      	bhi.n	800dddc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	88db      	ldrh	r3, [r3, #6]
 800dda2:	2b02      	cmp	r3, #2
 800dda4:	d004      	beq.n	800ddb0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800dda6:	6839      	ldr	r1, [r7, #0]
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 f88f 	bl	800decc <USBD_CtlError>
      break;
 800ddae:	e01a      	b.n	800dde6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d005      	beq.n	800ddcc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	f043 0202 	orr.w	r2, r3, #2
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	330c      	adds	r3, #12
 800ddd0:	2202      	movs	r2, #2
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 f8ea 	bl	800dfae <USBD_CtlSendData>
    break;
 800ddda:	e004      	b.n	800dde6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800dddc:	6839      	ldr	r1, [r7, #0]
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 f874 	bl	800decc <USBD_CtlError>
    break;
 800dde4:	bf00      	nop
  }
}
 800dde6:	bf00      	nop
 800dde8:	3708      	adds	r7, #8
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b082      	sub	sp, #8
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
 800ddf6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	885b      	ldrh	r3, [r3, #2]
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d106      	bne.n	800de0e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2201      	movs	r2, #1
 800de04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 f92a 	bl	800e062 <USBD_CtlSendStatus>
  }
}
 800de0e:	bf00      	nop
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b082      	sub	sp, #8
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
 800de1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de26:	3b01      	subs	r3, #1
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d80b      	bhi.n	800de44 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	885b      	ldrh	r3, [r3, #2]
 800de30:	2b01      	cmp	r3, #1
 800de32:	d10c      	bne.n	800de4e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2200      	movs	r2, #0
 800de38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 f910 	bl	800e062 <USBD_CtlSendStatus>
      }
      break;
 800de42:	e004      	b.n	800de4e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800de44:	6839      	ldr	r1, [r7, #0]
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 f840 	bl	800decc <USBD_CtlError>
      break;
 800de4c:	e000      	b.n	800de50 <USBD_ClrFeature+0x3a>
      break;
 800de4e:	bf00      	nop
  }
}
 800de50:	bf00      	nop
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	781a      	ldrb	r2, [r3, #0]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	3301      	adds	r3, #1
 800de72:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	781a      	ldrb	r2, [r3, #0]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	3301      	adds	r3, #1
 800de80:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800de82:	68f8      	ldr	r0, [r7, #12]
 800de84:	f7ff fad3 	bl	800d42e <SWAPBYTE>
 800de88:	4603      	mov	r3, r0
 800de8a:	461a      	mov	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	3301      	adds	r3, #1
 800de94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	3301      	adds	r3, #1
 800de9a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f7ff fac6 	bl	800d42e <SWAPBYTE>
 800dea2:	4603      	mov	r3, r0
 800dea4:	461a      	mov	r2, r3
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3301      	adds	r3, #1
 800deae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	3301      	adds	r3, #1
 800deb4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	f7ff fab9 	bl	800d42e <SWAPBYTE>
 800debc:	4603      	mov	r3, r0
 800debe:	461a      	mov	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	80da      	strh	r2, [r3, #6]
}
 800dec4:	bf00      	nop
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ded6:	2180      	movs	r1, #128	; 0x80
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 fcaf 	bl	800e83c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dede:	2100      	movs	r1, #0
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 fcab 	bl	800e83c <USBD_LL_StallEP>
}
 800dee6:	bf00      	nop
 800dee8:	3708      	adds	r7, #8
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800deee:	b580      	push	{r7, lr}
 800def0:	b086      	sub	sp, #24
 800def2:	af00      	add	r7, sp, #0
 800def4:	60f8      	str	r0, [r7, #12]
 800def6:	60b9      	str	r1, [r7, #8]
 800def8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800defa:	2300      	movs	r3, #0
 800defc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d036      	beq.n	800df72 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800df08:	6938      	ldr	r0, [r7, #16]
 800df0a:	f000 f836 	bl	800df7a <USBD_GetLen>
 800df0e:	4603      	mov	r3, r0
 800df10:	3301      	adds	r3, #1
 800df12:	b29b      	uxth	r3, r3
 800df14:	005b      	lsls	r3, r3, #1
 800df16:	b29a      	uxth	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800df1c:	7dfb      	ldrb	r3, [r7, #23]
 800df1e:	68ba      	ldr	r2, [r7, #8]
 800df20:	4413      	add	r3, r2
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	7812      	ldrb	r2, [r2, #0]
 800df26:	701a      	strb	r2, [r3, #0]
  idx++;
 800df28:	7dfb      	ldrb	r3, [r7, #23]
 800df2a:	3301      	adds	r3, #1
 800df2c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800df2e:	7dfb      	ldrb	r3, [r7, #23]
 800df30:	68ba      	ldr	r2, [r7, #8]
 800df32:	4413      	add	r3, r2
 800df34:	2203      	movs	r2, #3
 800df36:	701a      	strb	r2, [r3, #0]
  idx++;
 800df38:	7dfb      	ldrb	r3, [r7, #23]
 800df3a:	3301      	adds	r3, #1
 800df3c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800df3e:	e013      	b.n	800df68 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800df40:	7dfb      	ldrb	r3, [r7, #23]
 800df42:	68ba      	ldr	r2, [r7, #8]
 800df44:	4413      	add	r3, r2
 800df46:	693a      	ldr	r2, [r7, #16]
 800df48:	7812      	ldrb	r2, [r2, #0]
 800df4a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	3301      	adds	r3, #1
 800df50:	613b      	str	r3, [r7, #16]
    idx++;
 800df52:	7dfb      	ldrb	r3, [r7, #23]
 800df54:	3301      	adds	r3, #1
 800df56:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800df58:	7dfb      	ldrb	r3, [r7, #23]
 800df5a:	68ba      	ldr	r2, [r7, #8]
 800df5c:	4413      	add	r3, r2
 800df5e:	2200      	movs	r2, #0
 800df60:	701a      	strb	r2, [r3, #0]
    idx++;
 800df62:	7dfb      	ldrb	r3, [r7, #23]
 800df64:	3301      	adds	r3, #1
 800df66:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d1e7      	bne.n	800df40 <USBD_GetString+0x52>
 800df70:	e000      	b.n	800df74 <USBD_GetString+0x86>
    return;
 800df72:	bf00      	nop
  }
}
 800df74:	3718      	adds	r7, #24
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800df7a:	b480      	push	{r7}
 800df7c:	b085      	sub	sp, #20
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800df82:	2300      	movs	r3, #0
 800df84:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800df8a:	e005      	b.n	800df98 <USBD_GetLen+0x1e>
  {
    len++;
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
 800df8e:	3301      	adds	r3, #1
 800df90:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	3301      	adds	r3, #1
 800df96:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1f5      	bne.n	800df8c <USBD_GetLen+0x12>
  }

  return len;
 800dfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3714      	adds	r7, #20
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr

0800dfae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b084      	sub	sp, #16
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	60f8      	str	r0, [r7, #12]
 800dfb6:	60b9      	str	r1, [r7, #8]
 800dfb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2202      	movs	r2, #2
 800dfbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	68ba      	ldr	r2, [r7, #8]
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f000 fcba 	bl	800e94e <USBD_LL_Transmit>

  return USBD_OK;
 800dfda:	2300      	movs	r3, #0
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	2100      	movs	r1, #0
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	f000 fca9 	bl	800e94e <USBD_LL_Transmit>

  return USBD_OK;
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b084      	sub	sp, #16
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	60f8      	str	r0, [r7, #12]
 800e00e:	60b9      	str	r1, [r7, #8]
 800e010:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2203      	movs	r2, #3
 800e016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	68ba      	ldr	r2, [r7, #8]
 800e02e:	2100      	movs	r1, #0
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f000 fcad 	bl	800e990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3710      	adds	r7, #16
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	68ba      	ldr	r2, [r7, #8]
 800e050:	2100      	movs	r1, #0
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f000 fc9c 	bl	800e990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e062:	b580      	push	{r7, lr}
 800e064:	b082      	sub	sp, #8
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2204      	movs	r2, #4
 800e06e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e072:	2300      	movs	r3, #0
 800e074:	2200      	movs	r2, #0
 800e076:	2100      	movs	r1, #0
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 fc68 	bl	800e94e <USBD_LL_Transmit>

  return USBD_OK;
 800e07e:	2300      	movs	r3, #0
}
 800e080:	4618      	mov	r0, r3
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2205      	movs	r2, #5
 800e094:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e098:	2300      	movs	r3, #0
 800e09a:	2200      	movs	r2, #0
 800e09c:	2100      	movs	r1, #0
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 fc76 	bl	800e990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
	...

0800e0b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	4912      	ldr	r1, [pc, #72]	; (800e100 <MX_USB_DEVICE_Init+0x50>)
 800e0b8:	4812      	ldr	r0, [pc, #72]	; (800e104 <MX_USB_DEVICE_Init+0x54>)
 800e0ba:	f7fe fef3 	bl	800cea4 <USBD_Init>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d001      	beq.n	800e0c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e0c4:	f7f3 fbf6 	bl	80018b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e0c8:	490f      	ldr	r1, [pc, #60]	; (800e108 <MX_USB_DEVICE_Init+0x58>)
 800e0ca:	480e      	ldr	r0, [pc, #56]	; (800e104 <MX_USB_DEVICE_Init+0x54>)
 800e0cc:	f7fe ff20 	bl	800cf10 <USBD_RegisterClass>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d001      	beq.n	800e0da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e0d6:	f7f3 fbed 	bl	80018b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e0da:	490c      	ldr	r1, [pc, #48]	; (800e10c <MX_USB_DEVICE_Init+0x5c>)
 800e0dc:	4809      	ldr	r0, [pc, #36]	; (800e104 <MX_USB_DEVICE_Init+0x54>)
 800e0de:	f7fe fe75 	bl	800cdcc <USBD_CDC_RegisterInterface>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d001      	beq.n	800e0ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e0e8:	f7f3 fbe4 	bl	80018b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e0ec:	4805      	ldr	r0, [pc, #20]	; (800e104 <MX_USB_DEVICE_Init+0x54>)
 800e0ee:	f7fe ff30 	bl	800cf52 <USBD_Start>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d001      	beq.n	800e0fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e0f8:	f7f3 fbdc 	bl	80018b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e0fc:	bf00      	nop
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	20000194 	.word	0x20000194
 800e104:	20003ee8 	.word	0x20003ee8
 800e108:	2000007c 	.word	0x2000007c
 800e10c:	20000180 	.word	0x20000180

0800e110 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e114:	2200      	movs	r2, #0
 800e116:	4905      	ldr	r1, [pc, #20]	; (800e12c <CDC_Init_FS+0x1c>)
 800e118:	4805      	ldr	r0, [pc, #20]	; (800e130 <CDC_Init_FS+0x20>)
 800e11a:	f7fe fe6c 	bl	800cdf6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e11e:	4905      	ldr	r1, [pc, #20]	; (800e134 <CDC_Init_FS+0x24>)
 800e120:	4803      	ldr	r0, [pc, #12]	; (800e130 <CDC_Init_FS+0x20>)
 800e122:	f7fe fe81 	bl	800ce28 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e126:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e128:	4618      	mov	r0, r3
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	200049b8 	.word	0x200049b8
 800e130:	20003ee8 	.word	0x20003ee8
 800e134:	200041b8 	.word	0x200041b8

0800e138 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e138:	b480      	push	{r7}
 800e13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e13c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e13e:	4618      	mov	r0, r3
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	4603      	mov	r3, r0
 800e150:	6039      	str	r1, [r7, #0]
 800e152:	71fb      	strb	r3, [r7, #7]
 800e154:	4613      	mov	r3, r2
 800e156:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e158:	79fb      	ldrb	r3, [r7, #7]
 800e15a:	2b23      	cmp	r3, #35	; 0x23
 800e15c:	d84a      	bhi.n	800e1f4 <CDC_Control_FS+0xac>
 800e15e:	a201      	add	r2, pc, #4	; (adr r2, 800e164 <CDC_Control_FS+0x1c>)
 800e160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e164:	0800e1f5 	.word	0x0800e1f5
 800e168:	0800e1f5 	.word	0x0800e1f5
 800e16c:	0800e1f5 	.word	0x0800e1f5
 800e170:	0800e1f5 	.word	0x0800e1f5
 800e174:	0800e1f5 	.word	0x0800e1f5
 800e178:	0800e1f5 	.word	0x0800e1f5
 800e17c:	0800e1f5 	.word	0x0800e1f5
 800e180:	0800e1f5 	.word	0x0800e1f5
 800e184:	0800e1f5 	.word	0x0800e1f5
 800e188:	0800e1f5 	.word	0x0800e1f5
 800e18c:	0800e1f5 	.word	0x0800e1f5
 800e190:	0800e1f5 	.word	0x0800e1f5
 800e194:	0800e1f5 	.word	0x0800e1f5
 800e198:	0800e1f5 	.word	0x0800e1f5
 800e19c:	0800e1f5 	.word	0x0800e1f5
 800e1a0:	0800e1f5 	.word	0x0800e1f5
 800e1a4:	0800e1f5 	.word	0x0800e1f5
 800e1a8:	0800e1f5 	.word	0x0800e1f5
 800e1ac:	0800e1f5 	.word	0x0800e1f5
 800e1b0:	0800e1f5 	.word	0x0800e1f5
 800e1b4:	0800e1f5 	.word	0x0800e1f5
 800e1b8:	0800e1f5 	.word	0x0800e1f5
 800e1bc:	0800e1f5 	.word	0x0800e1f5
 800e1c0:	0800e1f5 	.word	0x0800e1f5
 800e1c4:	0800e1f5 	.word	0x0800e1f5
 800e1c8:	0800e1f5 	.word	0x0800e1f5
 800e1cc:	0800e1f5 	.word	0x0800e1f5
 800e1d0:	0800e1f5 	.word	0x0800e1f5
 800e1d4:	0800e1f5 	.word	0x0800e1f5
 800e1d8:	0800e1f5 	.word	0x0800e1f5
 800e1dc:	0800e1f5 	.word	0x0800e1f5
 800e1e0:	0800e1f5 	.word	0x0800e1f5
 800e1e4:	0800e1f5 	.word	0x0800e1f5
 800e1e8:	0800e1f5 	.word	0x0800e1f5
 800e1ec:	0800e1f5 	.word	0x0800e1f5
 800e1f0:	0800e1f5 	.word	0x0800e1f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e1f4:	bf00      	nop
  }

  return (USBD_OK);
 800e1f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr

0800e204 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e20e:	6879      	ldr	r1, [r7, #4]
 800e210:	4805      	ldr	r0, [pc, #20]	; (800e228 <CDC_Receive_FS+0x24>)
 800e212:	f7fe fe09 	bl	800ce28 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e216:	4804      	ldr	r0, [pc, #16]	; (800e228 <CDC_Receive_FS+0x24>)
 800e218:	f7fe fe1a 	bl	800ce50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e21c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	20003ee8 	.word	0x20003ee8

0800e22c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b087      	sub	sp, #28
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	4613      	mov	r3, r2
 800e238:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e23a:	2300      	movs	r3, #0
 800e23c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e23e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e242:	4618      	mov	r0, r3
 800e244:	371c      	adds	r7, #28
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr
	...

0800e250 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e250:	b480      	push	{r7}
 800e252:	b083      	sub	sp, #12
 800e254:	af00      	add	r7, sp, #0
 800e256:	4603      	mov	r3, r0
 800e258:	6039      	str	r1, [r7, #0]
 800e25a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	2212      	movs	r2, #18
 800e260:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e262:	4b03      	ldr	r3, [pc, #12]	; (800e270 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e264:	4618      	mov	r0, r3
 800e266:	370c      	adds	r7, #12
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr
 800e270:	200001b0 	.word	0x200001b0

0800e274 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e274:	b480      	push	{r7}
 800e276:	b083      	sub	sp, #12
 800e278:	af00      	add	r7, sp, #0
 800e27a:	4603      	mov	r3, r0
 800e27c:	6039      	str	r1, [r7, #0]
 800e27e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	2204      	movs	r2, #4
 800e284:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e286:	4b03      	ldr	r3, [pc, #12]	; (800e294 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e288:	4618      	mov	r0, r3
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr
 800e294:	200001c4 	.word	0x200001c4

0800e298 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	4603      	mov	r3, r0
 800e2a0:	6039      	str	r1, [r7, #0]
 800e2a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e2a4:	79fb      	ldrb	r3, [r7, #7]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d105      	bne.n	800e2b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e2aa:	683a      	ldr	r2, [r7, #0]
 800e2ac:	4907      	ldr	r1, [pc, #28]	; (800e2cc <USBD_FS_ProductStrDescriptor+0x34>)
 800e2ae:	4808      	ldr	r0, [pc, #32]	; (800e2d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e2b0:	f7ff fe1d 	bl	800deee <USBD_GetString>
 800e2b4:	e004      	b.n	800e2c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e2b6:	683a      	ldr	r2, [r7, #0]
 800e2b8:	4904      	ldr	r1, [pc, #16]	; (800e2cc <USBD_FS_ProductStrDescriptor+0x34>)
 800e2ba:	4805      	ldr	r0, [pc, #20]	; (800e2d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e2bc:	f7ff fe17 	bl	800deee <USBD_GetString>
  }
  return USBD_StrDesc;
 800e2c0:	4b02      	ldr	r3, [pc, #8]	; (800e2cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	200051b8 	.word	0x200051b8
 800e2d0:	0800f780 	.word	0x0800f780

0800e2d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	4603      	mov	r3, r0
 800e2dc:	6039      	str	r1, [r7, #0]
 800e2de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e2e0:	683a      	ldr	r2, [r7, #0]
 800e2e2:	4904      	ldr	r1, [pc, #16]	; (800e2f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e2e4:	4804      	ldr	r0, [pc, #16]	; (800e2f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e2e6:	f7ff fe02 	bl	800deee <USBD_GetString>
  return USBD_StrDesc;
 800e2ea:	4b02      	ldr	r3, [pc, #8]	; (800e2f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3708      	adds	r7, #8
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	200051b8 	.word	0x200051b8
 800e2f8:	0800f798 	.word	0x0800f798

0800e2fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
 800e302:	4603      	mov	r3, r0
 800e304:	6039      	str	r1, [r7, #0]
 800e306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	221a      	movs	r2, #26
 800e30c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e30e:	f000 f843 	bl	800e398 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e312:	4b02      	ldr	r3, [pc, #8]	; (800e31c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e314:	4618      	mov	r0, r3
 800e316:	3708      	adds	r7, #8
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	200001c8 	.word	0x200001c8

0800e320 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	4603      	mov	r3, r0
 800e328:	6039      	str	r1, [r7, #0]
 800e32a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e32c:	79fb      	ldrb	r3, [r7, #7]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d105      	bne.n	800e33e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e332:	683a      	ldr	r2, [r7, #0]
 800e334:	4907      	ldr	r1, [pc, #28]	; (800e354 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e336:	4808      	ldr	r0, [pc, #32]	; (800e358 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e338:	f7ff fdd9 	bl	800deee <USBD_GetString>
 800e33c:	e004      	b.n	800e348 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e33e:	683a      	ldr	r2, [r7, #0]
 800e340:	4904      	ldr	r1, [pc, #16]	; (800e354 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e342:	4805      	ldr	r0, [pc, #20]	; (800e358 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e344:	f7ff fdd3 	bl	800deee <USBD_GetString>
  }
  return USBD_StrDesc;
 800e348:	4b02      	ldr	r3, [pc, #8]	; (800e354 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3708      	adds	r7, #8
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	200051b8 	.word	0x200051b8
 800e358:	0800f7ac 	.word	0x0800f7ac

0800e35c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	4603      	mov	r3, r0
 800e364:	6039      	str	r1, [r7, #0]
 800e366:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e368:	79fb      	ldrb	r3, [r7, #7]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d105      	bne.n	800e37a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e36e:	683a      	ldr	r2, [r7, #0]
 800e370:	4907      	ldr	r1, [pc, #28]	; (800e390 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e372:	4808      	ldr	r0, [pc, #32]	; (800e394 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e374:	f7ff fdbb 	bl	800deee <USBD_GetString>
 800e378:	e004      	b.n	800e384 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e37a:	683a      	ldr	r2, [r7, #0]
 800e37c:	4904      	ldr	r1, [pc, #16]	; (800e390 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e37e:	4805      	ldr	r0, [pc, #20]	; (800e394 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e380:	f7ff fdb5 	bl	800deee <USBD_GetString>
  }
  return USBD_StrDesc;
 800e384:	4b02      	ldr	r3, [pc, #8]	; (800e390 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e386:	4618      	mov	r0, r3
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	200051b8 	.word	0x200051b8
 800e394:	0800f7b8 	.word	0x0800f7b8

0800e398 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b084      	sub	sp, #16
 800e39c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e39e:	4b0f      	ldr	r3, [pc, #60]	; (800e3dc <Get_SerialNum+0x44>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e3a4:	4b0e      	ldr	r3, [pc, #56]	; (800e3e0 <Get_SerialNum+0x48>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e3aa:	4b0e      	ldr	r3, [pc, #56]	; (800e3e4 <Get_SerialNum+0x4c>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	4413      	add	r3, r2
 800e3b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d009      	beq.n	800e3d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e3be:	2208      	movs	r2, #8
 800e3c0:	4909      	ldr	r1, [pc, #36]	; (800e3e8 <Get_SerialNum+0x50>)
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f000 f814 	bl	800e3f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e3c8:	2204      	movs	r2, #4
 800e3ca:	4908      	ldr	r1, [pc, #32]	; (800e3ec <Get_SerialNum+0x54>)
 800e3cc:	68b8      	ldr	r0, [r7, #8]
 800e3ce:	f000 f80f 	bl	800e3f0 <IntToUnicode>
  }
}
 800e3d2:	bf00      	nop
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	1fff7a10 	.word	0x1fff7a10
 800e3e0:	1fff7a14 	.word	0x1fff7a14
 800e3e4:	1fff7a18 	.word	0x1fff7a18
 800e3e8:	200001ca 	.word	0x200001ca
 800e3ec:	200001da 	.word	0x200001da

0800e3f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b087      	sub	sp, #28
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	60f8      	str	r0, [r7, #12]
 800e3f8:	60b9      	str	r1, [r7, #8]
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e3fe:	2300      	movs	r3, #0
 800e400:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e402:	2300      	movs	r3, #0
 800e404:	75fb      	strb	r3, [r7, #23]
 800e406:	e027      	b.n	800e458 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	0f1b      	lsrs	r3, r3, #28
 800e40c:	2b09      	cmp	r3, #9
 800e40e:	d80b      	bhi.n	800e428 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	0f1b      	lsrs	r3, r3, #28
 800e414:	b2da      	uxtb	r2, r3
 800e416:	7dfb      	ldrb	r3, [r7, #23]
 800e418:	005b      	lsls	r3, r3, #1
 800e41a:	4619      	mov	r1, r3
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	440b      	add	r3, r1
 800e420:	3230      	adds	r2, #48	; 0x30
 800e422:	b2d2      	uxtb	r2, r2
 800e424:	701a      	strb	r2, [r3, #0]
 800e426:	e00a      	b.n	800e43e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	0f1b      	lsrs	r3, r3, #28
 800e42c:	b2da      	uxtb	r2, r3
 800e42e:	7dfb      	ldrb	r3, [r7, #23]
 800e430:	005b      	lsls	r3, r3, #1
 800e432:	4619      	mov	r1, r3
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	440b      	add	r3, r1
 800e438:	3237      	adds	r2, #55	; 0x37
 800e43a:	b2d2      	uxtb	r2, r2
 800e43c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	011b      	lsls	r3, r3, #4
 800e442:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e444:	7dfb      	ldrb	r3, [r7, #23]
 800e446:	005b      	lsls	r3, r3, #1
 800e448:	3301      	adds	r3, #1
 800e44a:	68ba      	ldr	r2, [r7, #8]
 800e44c:	4413      	add	r3, r2
 800e44e:	2200      	movs	r2, #0
 800e450:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e452:	7dfb      	ldrb	r3, [r7, #23]
 800e454:	3301      	adds	r3, #1
 800e456:	75fb      	strb	r3, [r7, #23]
 800e458:	7dfa      	ldrb	r2, [r7, #23]
 800e45a:	79fb      	ldrb	r3, [r7, #7]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d3d3      	bcc.n	800e408 <IntToUnicode+0x18>
  }
}
 800e460:	bf00      	nop
 800e462:	371c      	adds	r7, #28
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr

0800e46c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b08a      	sub	sp, #40	; 0x28
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e474:	f107 0314 	add.w	r3, r7, #20
 800e478:	2200      	movs	r2, #0
 800e47a:	601a      	str	r2, [r3, #0]
 800e47c:	605a      	str	r2, [r3, #4]
 800e47e:	609a      	str	r2, [r3, #8]
 800e480:	60da      	str	r2, [r3, #12]
 800e482:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e48c:	d13a      	bne.n	800e504 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e48e:	2300      	movs	r3, #0
 800e490:	613b      	str	r3, [r7, #16]
 800e492:	4b1e      	ldr	r3, [pc, #120]	; (800e50c <HAL_PCD_MspInit+0xa0>)
 800e494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e496:	4a1d      	ldr	r2, [pc, #116]	; (800e50c <HAL_PCD_MspInit+0xa0>)
 800e498:	f043 0301 	orr.w	r3, r3, #1
 800e49c:	6313      	str	r3, [r2, #48]	; 0x30
 800e49e:	4b1b      	ldr	r3, [pc, #108]	; (800e50c <HAL_PCD_MspInit+0xa0>)
 800e4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a2:	f003 0301 	and.w	r3, r3, #1
 800e4a6:	613b      	str	r3, [r7, #16]
 800e4a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e4aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e4ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4b0:	2302      	movs	r3, #2
 800e4b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4b8:	2303      	movs	r3, #3
 800e4ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e4bc:	230a      	movs	r3, #10
 800e4be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4c0:	f107 0314 	add.w	r3, r7, #20
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	4812      	ldr	r0, [pc, #72]	; (800e510 <HAL_PCD_MspInit+0xa4>)
 800e4c8:	f7f9 f8fa 	bl	80076c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e4cc:	4b0f      	ldr	r3, [pc, #60]	; (800e50c <HAL_PCD_MspInit+0xa0>)
 800e4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d0:	4a0e      	ldr	r2, [pc, #56]	; (800e50c <HAL_PCD_MspInit+0xa0>)
 800e4d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4d6:	6353      	str	r3, [r2, #52]	; 0x34
 800e4d8:	2300      	movs	r3, #0
 800e4da:	60fb      	str	r3, [r7, #12]
 800e4dc:	4b0b      	ldr	r3, [pc, #44]	; (800e50c <HAL_PCD_MspInit+0xa0>)
 800e4de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4e0:	4a0a      	ldr	r2, [pc, #40]	; (800e50c <HAL_PCD_MspInit+0xa0>)
 800e4e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e4e6:	6453      	str	r3, [r2, #68]	; 0x44
 800e4e8:	4b08      	ldr	r3, [pc, #32]	; (800e50c <HAL_PCD_MspInit+0xa0>)
 800e4ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4f0:	60fb      	str	r3, [r7, #12]
 800e4f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	2100      	movs	r1, #0
 800e4f8:	2043      	movs	r0, #67	; 0x43
 800e4fa:	f7f9 f86f 	bl	80075dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e4fe:	2043      	movs	r0, #67	; 0x43
 800e500:	f7f9 f898 	bl	8007634 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e504:	bf00      	nop
 800e506:	3728      	adds	r7, #40	; 0x28
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}
 800e50c:	40023800 	.word	0x40023800
 800e510:	40020000 	.word	0x40020000

0800e514 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e528:	4619      	mov	r1, r3
 800e52a:	4610      	mov	r0, r2
 800e52c:	f7fe fd5c 	bl	800cfe8 <USBD_LL_SetupStage>
}
 800e530:	bf00      	nop
 800e532:	3708      	adds	r7, #8
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	460b      	mov	r3, r1
 800e542:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e54a:	78fa      	ldrb	r2, [r7, #3]
 800e54c:	6879      	ldr	r1, [r7, #4]
 800e54e:	4613      	mov	r3, r2
 800e550:	00db      	lsls	r3, r3, #3
 800e552:	1a9b      	subs	r3, r3, r2
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	440b      	add	r3, r1
 800e558:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	78fb      	ldrb	r3, [r7, #3]
 800e560:	4619      	mov	r1, r3
 800e562:	f7fe fd94 	bl	800d08e <USBD_LL_DataOutStage>
}
 800e566:	bf00      	nop
 800e568:	3708      	adds	r7, #8
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}

0800e56e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e56e:	b580      	push	{r7, lr}
 800e570:	b082      	sub	sp, #8
 800e572:	af00      	add	r7, sp, #0
 800e574:	6078      	str	r0, [r7, #4]
 800e576:	460b      	mov	r3, r1
 800e578:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e580:	78fa      	ldrb	r2, [r7, #3]
 800e582:	6879      	ldr	r1, [r7, #4]
 800e584:	4613      	mov	r3, r2
 800e586:	00db      	lsls	r3, r3, #3
 800e588:	1a9b      	subs	r3, r3, r2
 800e58a:	009b      	lsls	r3, r3, #2
 800e58c:	440b      	add	r3, r1
 800e58e:	3348      	adds	r3, #72	; 0x48
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	78fb      	ldrb	r3, [r7, #3]
 800e594:	4619      	mov	r1, r3
 800e596:	f7fe fddd 	bl	800d154 <USBD_LL_DataInStage>
}
 800e59a:	bf00      	nop
 800e59c:	3708      	adds	r7, #8
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}

0800e5a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5a2:	b580      	push	{r7, lr}
 800e5a4:	b082      	sub	sp, #8
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fe fee1 	bl	800d378 <USBD_LL_SOF>
}
 800e5b6:	bf00      	nop
 800e5b8:	3708      	adds	r7, #8
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800e5be:	b580      	push	{r7, lr}
 800e5c0:	b084      	sub	sp, #16
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	2b02      	cmp	r3, #2
 800e5d0:	d001      	beq.n	800e5d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e5d2:	f7f3 f96f 	bl	80018b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e5dc:	7bfa      	ldrb	r2, [r7, #15]
 800e5de:	4611      	mov	r1, r2
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f7fe fe8e 	bl	800d302 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7fe fe47 	bl	800d280 <USBD_LL_Reset>
}
 800e5f2:	bf00      	nop
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
	...

0800e5fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fe fe89 	bl	800d322 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	6812      	ldr	r2, [r2, #0]
 800e61e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e622:	f043 0301 	orr.w	r3, r3, #1
 800e626:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6a1b      	ldr	r3, [r3, #32]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d005      	beq.n	800e63c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e630:	4b04      	ldr	r3, [pc, #16]	; (800e644 <HAL_PCD_SuspendCallback+0x48>)
 800e632:	691b      	ldr	r3, [r3, #16]
 800e634:	4a03      	ldr	r2, [pc, #12]	; (800e644 <HAL_PCD_SuspendCallback+0x48>)
 800e636:	f043 0306 	orr.w	r3, r3, #6
 800e63a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e63c:	bf00      	nop
 800e63e:	3708      	adds	r7, #8
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	e000ed00 	.word	0xe000ed00

0800e648 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e656:	4618      	mov	r0, r3
 800e658:	f7fe fe78 	bl	800d34c <USBD_LL_Resume>
}
 800e65c:	bf00      	nop
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	460b      	mov	r3, r1
 800e66e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e676:	78fa      	ldrb	r2, [r7, #3]
 800e678:	4611      	mov	r1, r2
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7fe fea3 	bl	800d3c6 <USBD_LL_IsoOUTIncomplete>
}
 800e680:	bf00      	nop
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	460b      	mov	r3, r1
 800e692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e69a:	78fa      	ldrb	r2, [r7, #3]
 800e69c:	4611      	mov	r1, r2
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7fe fe84 	bl	800d3ac <USBD_LL_IsoINIncomplete>
}
 800e6a4:	bf00      	nop
 800e6a6:	3708      	adds	r7, #8
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7fe fe90 	bl	800d3e0 <USBD_LL_DevConnected>
}
 800e6c0:	bf00      	nop
 800e6c2:	3708      	adds	r7, #8
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7fe fe8d 	bl	800d3f6 <USBD_LL_DevDisconnected>
}
 800e6dc:	bf00      	nop
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d13c      	bne.n	800e76e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e6f4:	4a20      	ldr	r2, [pc, #128]	; (800e778 <USBD_LL_Init+0x94>)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4a1e      	ldr	r2, [pc, #120]	; (800e778 <USBD_LL_Init+0x94>)
 800e700:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e704:	4b1c      	ldr	r3, [pc, #112]	; (800e778 <USBD_LL_Init+0x94>)
 800e706:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e70a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e70c:	4b1a      	ldr	r3, [pc, #104]	; (800e778 <USBD_LL_Init+0x94>)
 800e70e:	2204      	movs	r2, #4
 800e710:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e712:	4b19      	ldr	r3, [pc, #100]	; (800e778 <USBD_LL_Init+0x94>)
 800e714:	2202      	movs	r2, #2
 800e716:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e718:	4b17      	ldr	r3, [pc, #92]	; (800e778 <USBD_LL_Init+0x94>)
 800e71a:	2200      	movs	r2, #0
 800e71c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e71e:	4b16      	ldr	r3, [pc, #88]	; (800e778 <USBD_LL_Init+0x94>)
 800e720:	2202      	movs	r2, #2
 800e722:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e724:	4b14      	ldr	r3, [pc, #80]	; (800e778 <USBD_LL_Init+0x94>)
 800e726:	2200      	movs	r2, #0
 800e728:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e72a:	4b13      	ldr	r3, [pc, #76]	; (800e778 <USBD_LL_Init+0x94>)
 800e72c:	2200      	movs	r2, #0
 800e72e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e730:	4b11      	ldr	r3, [pc, #68]	; (800e778 <USBD_LL_Init+0x94>)
 800e732:	2200      	movs	r2, #0
 800e734:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e736:	4b10      	ldr	r3, [pc, #64]	; (800e778 <USBD_LL_Init+0x94>)
 800e738:	2200      	movs	r2, #0
 800e73a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e73c:	4b0e      	ldr	r3, [pc, #56]	; (800e778 <USBD_LL_Init+0x94>)
 800e73e:	2200      	movs	r2, #0
 800e740:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e742:	480d      	ldr	r0, [pc, #52]	; (800e778 <USBD_LL_Init+0x94>)
 800e744:	f7f9 fddc 	bl	8008300 <HAL_PCD_Init>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e74e:	f7f3 f8b1 	bl	80018b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e752:	2180      	movs	r1, #128	; 0x80
 800e754:	4808      	ldr	r0, [pc, #32]	; (800e778 <USBD_LL_Init+0x94>)
 800e756:	f7fa ff44 	bl	80095e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e75a:	2240      	movs	r2, #64	; 0x40
 800e75c:	2100      	movs	r1, #0
 800e75e:	4806      	ldr	r0, [pc, #24]	; (800e778 <USBD_LL_Init+0x94>)
 800e760:	f7fa fef8 	bl	8009554 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e764:	2280      	movs	r2, #128	; 0x80
 800e766:	2101      	movs	r1, #1
 800e768:	4803      	ldr	r0, [pc, #12]	; (800e778 <USBD_LL_Init+0x94>)
 800e76a:	f7fa fef3 	bl	8009554 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e76e:	2300      	movs	r3, #0
}
 800e770:	4618      	mov	r0, r3
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	200053b8 	.word	0x200053b8

0800e77c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b084      	sub	sp, #16
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e784:	2300      	movs	r3, #0
 800e786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e788:	2300      	movs	r3, #0
 800e78a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e792:	4618      	mov	r0, r3
 800e794:	f7f9 fedc 	bl	8008550 <HAL_PCD_Start>
 800e798:	4603      	mov	r3, r0
 800e79a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800e79c:	7bfb      	ldrb	r3, [r7, #15]
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 f92a 	bl	800e9f8 <USBD_Get_USB_Status>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e7a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b084      	sub	sp, #16
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	4608      	mov	r0, r1
 800e7bc:	4611      	mov	r1, r2
 800e7be:	461a      	mov	r2, r3
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	70fb      	strb	r3, [r7, #3]
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	70bb      	strb	r3, [r7, #2]
 800e7c8:	4613      	mov	r3, r2
 800e7ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e7da:	78bb      	ldrb	r3, [r7, #2]
 800e7dc:	883a      	ldrh	r2, [r7, #0]
 800e7de:	78f9      	ldrb	r1, [r7, #3]
 800e7e0:	f7fa fac0 	bl	8008d64 <HAL_PCD_EP_Open>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7e8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f000 f904 	bl	800e9f8 <USBD_Get_USB_Status>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e7f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}

0800e7fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7fe:	b580      	push	{r7, lr}
 800e800:	b084      	sub	sp, #16
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
 800e806:	460b      	mov	r3, r1
 800e808:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e80a:	2300      	movs	r3, #0
 800e80c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e80e:	2300      	movs	r3, #0
 800e810:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e818:	78fa      	ldrb	r2, [r7, #3]
 800e81a:	4611      	mov	r1, r2
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7fa fb09 	bl	8008e34 <HAL_PCD_EP_Close>
 800e822:	4603      	mov	r3, r0
 800e824:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800e826:	7bfb      	ldrb	r3, [r7, #15]
 800e828:	4618      	mov	r0, r3
 800e82a:	f000 f8e5 	bl	800e9f8 <USBD_Get_USB_Status>
 800e82e:	4603      	mov	r3, r0
 800e830:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800e832:	7bbb      	ldrb	r3, [r7, #14]
}
 800e834:	4618      	mov	r0, r3
 800e836:	3710      	adds	r7, #16
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	460b      	mov	r3, r1
 800e846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e848:	2300      	movs	r3, #0
 800e84a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e84c:	2300      	movs	r3, #0
 800e84e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e856:	78fa      	ldrb	r2, [r7, #3]
 800e858:	4611      	mov	r1, r2
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7fa fbe1 	bl	8009022 <HAL_PCD_EP_SetStall>
 800e860:	4603      	mov	r3, r0
 800e862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e864:	7bfb      	ldrb	r3, [r7, #15]
 800e866:	4618      	mov	r0, r3
 800e868:	f000 f8c6 	bl	800e9f8 <USBD_Get_USB_Status>
 800e86c:	4603      	mov	r3, r0
 800e86e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800e870:	7bbb      	ldrb	r3, [r7, #14]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e87a:	b580      	push	{r7, lr}
 800e87c:	b084      	sub	sp, #16
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
 800e882:	460b      	mov	r3, r1
 800e884:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e886:	2300      	movs	r3, #0
 800e888:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e88a:	2300      	movs	r3, #0
 800e88c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e894:	78fa      	ldrb	r2, [r7, #3]
 800e896:	4611      	mov	r1, r2
 800e898:	4618      	mov	r0, r3
 800e89a:	f7fa fc26 	bl	80090ea <HAL_PCD_EP_ClrStall>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800e8a2:	7bfb      	ldrb	r3, [r7, #15]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f000 f8a7 	bl	800e9f8 <USBD_Get_USB_Status>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800e8ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3710      	adds	r7, #16
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b085      	sub	sp, #20
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e8ca:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800e8cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	da0b      	bge.n	800e8ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800e8d4:	78fb      	ldrb	r3, [r7, #3]
 800e8d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8da:	68f9      	ldr	r1, [r7, #12]
 800e8dc:	4613      	mov	r3, r2
 800e8de:	00db      	lsls	r3, r3, #3
 800e8e0:	1a9b      	subs	r3, r3, r2
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	440b      	add	r3, r1
 800e8e6:	333e      	adds	r3, #62	; 0x3e
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	e00b      	b.n	800e904 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800e8ec:	78fb      	ldrb	r3, [r7, #3]
 800e8ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8f2:	68f9      	ldr	r1, [r7, #12]
 800e8f4:	4613      	mov	r3, r2
 800e8f6:	00db      	lsls	r3, r3, #3
 800e8f8:	1a9b      	subs	r3, r3, r2
 800e8fa:	009b      	lsls	r3, r3, #2
 800e8fc:	440b      	add	r3, r1
 800e8fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e902:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e904:	4618      	mov	r0, r3
 800e906:	3714      	adds	r7, #20
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	460b      	mov	r3, r1
 800e91a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e91c:	2300      	movs	r3, #0
 800e91e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e920:	2300      	movs	r3, #0
 800e922:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e92a:	78fa      	ldrb	r2, [r7, #3]
 800e92c:	4611      	mov	r1, r2
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fa f9f3 	bl	8008d1a <HAL_PCD_SetAddress>
 800e934:	4603      	mov	r3, r0
 800e936:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e938:	7bfb      	ldrb	r3, [r7, #15]
 800e93a:	4618      	mov	r0, r3
 800e93c:	f000 f85c 	bl	800e9f8 <USBD_Get_USB_Status>
 800e940:	4603      	mov	r3, r0
 800e942:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800e944:	7bbb      	ldrb	r3, [r7, #14]
}
 800e946:	4618      	mov	r0, r3
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b086      	sub	sp, #24
 800e952:	af00      	add	r7, sp, #0
 800e954:	60f8      	str	r0, [r7, #12]
 800e956:	607a      	str	r2, [r7, #4]
 800e958:	603b      	str	r3, [r7, #0]
 800e95a:	460b      	mov	r3, r1
 800e95c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e95e:	2300      	movs	r3, #0
 800e960:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e962:	2300      	movs	r3, #0
 800e964:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e96c:	7af9      	ldrb	r1, [r7, #11]
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	f7fa fb0c 	bl	8008f8e <HAL_PCD_EP_Transmit>
 800e976:	4603      	mov	r3, r0
 800e978:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800e97a:	7dfb      	ldrb	r3, [r7, #23]
 800e97c:	4618      	mov	r0, r3
 800e97e:	f000 f83b 	bl	800e9f8 <USBD_Get_USB_Status>
 800e982:	4603      	mov	r3, r0
 800e984:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800e986:	7dbb      	ldrb	r3, [r7, #22]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3718      	adds	r7, #24
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b086      	sub	sp, #24
 800e994:	af00      	add	r7, sp, #0
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	607a      	str	r2, [r7, #4]
 800e99a:	603b      	str	r3, [r7, #0]
 800e99c:	460b      	mov	r3, r1
 800e99e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e9ae:	7af9      	ldrb	r1, [r7, #11]
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	f7fa fa88 	bl	8008ec8 <HAL_PCD_EP_Receive>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800e9bc:	7dfb      	ldrb	r3, [r7, #23]
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f000 f81a 	bl	800e9f8 <USBD_Get_USB_Status>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800e9c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3718      	adds	r7, #24
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}

0800e9d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9d2:	b580      	push	{r7, lr}
 800e9d4:	b082      	sub	sp, #8
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	6078      	str	r0, [r7, #4]
 800e9da:	460b      	mov	r3, r1
 800e9dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e9e4:	78fa      	ldrb	r2, [r7, #3]
 800e9e6:	4611      	mov	r1, r2
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fa fab8 	bl	8008f5e <HAL_PCD_EP_GetRxCount>
 800e9ee:	4603      	mov	r3, r0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3708      	adds	r7, #8
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b085      	sub	sp, #20
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	4603      	mov	r3, r0
 800ea00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea02:	2300      	movs	r3, #0
 800ea04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ea06:	79fb      	ldrb	r3, [r7, #7]
 800ea08:	2b03      	cmp	r3, #3
 800ea0a:	d817      	bhi.n	800ea3c <USBD_Get_USB_Status+0x44>
 800ea0c:	a201      	add	r2, pc, #4	; (adr r2, 800ea14 <USBD_Get_USB_Status+0x1c>)
 800ea0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea12:	bf00      	nop
 800ea14:	0800ea25 	.word	0x0800ea25
 800ea18:	0800ea2b 	.word	0x0800ea2b
 800ea1c:	0800ea31 	.word	0x0800ea31
 800ea20:	0800ea37 	.word	0x0800ea37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ea24:	2300      	movs	r3, #0
 800ea26:	73fb      	strb	r3, [r7, #15]
    break;
 800ea28:	e00b      	b.n	800ea42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea2a:	2303      	movs	r3, #3
 800ea2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ea2e:	e008      	b.n	800ea42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea30:	2301      	movs	r3, #1
 800ea32:	73fb      	strb	r3, [r7, #15]
    break;
 800ea34:	e005      	b.n	800ea42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea36:	2303      	movs	r3, #3
 800ea38:	73fb      	strb	r3, [r7, #15]
    break;
 800ea3a:	e002      	b.n	800ea42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ea3c:	2303      	movs	r3, #3
 800ea3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea40:	bf00      	nop
  }
  return usb_status;
 800ea42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3714      	adds	r7, #20
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr

0800ea50 <__errno>:
 800ea50:	4b01      	ldr	r3, [pc, #4]	; (800ea58 <__errno+0x8>)
 800ea52:	6818      	ldr	r0, [r3, #0]
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	200001e4 	.word	0x200001e4

0800ea5c <__libc_init_array>:
 800ea5c:	b570      	push	{r4, r5, r6, lr}
 800ea5e:	4e0d      	ldr	r6, [pc, #52]	; (800ea94 <__libc_init_array+0x38>)
 800ea60:	4c0d      	ldr	r4, [pc, #52]	; (800ea98 <__libc_init_array+0x3c>)
 800ea62:	1ba4      	subs	r4, r4, r6
 800ea64:	10a4      	asrs	r4, r4, #2
 800ea66:	2500      	movs	r5, #0
 800ea68:	42a5      	cmp	r5, r4
 800ea6a:	d109      	bne.n	800ea80 <__libc_init_array+0x24>
 800ea6c:	4e0b      	ldr	r6, [pc, #44]	; (800ea9c <__libc_init_array+0x40>)
 800ea6e:	4c0c      	ldr	r4, [pc, #48]	; (800eaa0 <__libc_init_array+0x44>)
 800ea70:	f000 fc38 	bl	800f2e4 <_init>
 800ea74:	1ba4      	subs	r4, r4, r6
 800ea76:	10a4      	asrs	r4, r4, #2
 800ea78:	2500      	movs	r5, #0
 800ea7a:	42a5      	cmp	r5, r4
 800ea7c:	d105      	bne.n	800ea8a <__libc_init_array+0x2e>
 800ea7e:	bd70      	pop	{r4, r5, r6, pc}
 800ea80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ea84:	4798      	blx	r3
 800ea86:	3501      	adds	r5, #1
 800ea88:	e7ee      	b.n	800ea68 <__libc_init_array+0xc>
 800ea8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ea8e:	4798      	blx	r3
 800ea90:	3501      	adds	r5, #1
 800ea92:	e7f2      	b.n	800ea7a <__libc_init_array+0x1e>
 800ea94:	0800f81c 	.word	0x0800f81c
 800ea98:	0800f81c 	.word	0x0800f81c
 800ea9c:	0800f81c 	.word	0x0800f81c
 800eaa0:	0800f820 	.word	0x0800f820

0800eaa4 <malloc>:
 800eaa4:	4b02      	ldr	r3, [pc, #8]	; (800eab0 <malloc+0xc>)
 800eaa6:	4601      	mov	r1, r0
 800eaa8:	6818      	ldr	r0, [r3, #0]
 800eaaa:	f000 b86d 	b.w	800eb88 <_malloc_r>
 800eaae:	bf00      	nop
 800eab0:	200001e4 	.word	0x200001e4

0800eab4 <free>:
 800eab4:	4b02      	ldr	r3, [pc, #8]	; (800eac0 <free+0xc>)
 800eab6:	4601      	mov	r1, r0
 800eab8:	6818      	ldr	r0, [r3, #0]
 800eaba:	f000 b817 	b.w	800eaec <_free_r>
 800eabe:	bf00      	nop
 800eac0:	200001e4 	.word	0x200001e4

0800eac4 <memcpy>:
 800eac4:	b510      	push	{r4, lr}
 800eac6:	1e43      	subs	r3, r0, #1
 800eac8:	440a      	add	r2, r1
 800eaca:	4291      	cmp	r1, r2
 800eacc:	d100      	bne.n	800ead0 <memcpy+0xc>
 800eace:	bd10      	pop	{r4, pc}
 800ead0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ead4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ead8:	e7f7      	b.n	800eaca <memcpy+0x6>

0800eada <memset>:
 800eada:	4402      	add	r2, r0
 800eadc:	4603      	mov	r3, r0
 800eade:	4293      	cmp	r3, r2
 800eae0:	d100      	bne.n	800eae4 <memset+0xa>
 800eae2:	4770      	bx	lr
 800eae4:	f803 1b01 	strb.w	r1, [r3], #1
 800eae8:	e7f9      	b.n	800eade <memset+0x4>
	...

0800eaec <_free_r>:
 800eaec:	b538      	push	{r3, r4, r5, lr}
 800eaee:	4605      	mov	r5, r0
 800eaf0:	2900      	cmp	r1, #0
 800eaf2:	d045      	beq.n	800eb80 <_free_r+0x94>
 800eaf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaf8:	1f0c      	subs	r4, r1, #4
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	bfb8      	it	lt
 800eafe:	18e4      	addlt	r4, r4, r3
 800eb00:	f000 f8cc 	bl	800ec9c <__malloc_lock>
 800eb04:	4a1f      	ldr	r2, [pc, #124]	; (800eb84 <_free_r+0x98>)
 800eb06:	6813      	ldr	r3, [r2, #0]
 800eb08:	4610      	mov	r0, r2
 800eb0a:	b933      	cbnz	r3, 800eb1a <_free_r+0x2e>
 800eb0c:	6063      	str	r3, [r4, #4]
 800eb0e:	6014      	str	r4, [r2, #0]
 800eb10:	4628      	mov	r0, r5
 800eb12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb16:	f000 b8c2 	b.w	800ec9e <__malloc_unlock>
 800eb1a:	42a3      	cmp	r3, r4
 800eb1c:	d90c      	bls.n	800eb38 <_free_r+0x4c>
 800eb1e:	6821      	ldr	r1, [r4, #0]
 800eb20:	1862      	adds	r2, r4, r1
 800eb22:	4293      	cmp	r3, r2
 800eb24:	bf04      	itt	eq
 800eb26:	681a      	ldreq	r2, [r3, #0]
 800eb28:	685b      	ldreq	r3, [r3, #4]
 800eb2a:	6063      	str	r3, [r4, #4]
 800eb2c:	bf04      	itt	eq
 800eb2e:	1852      	addeq	r2, r2, r1
 800eb30:	6022      	streq	r2, [r4, #0]
 800eb32:	6004      	str	r4, [r0, #0]
 800eb34:	e7ec      	b.n	800eb10 <_free_r+0x24>
 800eb36:	4613      	mov	r3, r2
 800eb38:	685a      	ldr	r2, [r3, #4]
 800eb3a:	b10a      	cbz	r2, 800eb40 <_free_r+0x54>
 800eb3c:	42a2      	cmp	r2, r4
 800eb3e:	d9fa      	bls.n	800eb36 <_free_r+0x4a>
 800eb40:	6819      	ldr	r1, [r3, #0]
 800eb42:	1858      	adds	r0, r3, r1
 800eb44:	42a0      	cmp	r0, r4
 800eb46:	d10b      	bne.n	800eb60 <_free_r+0x74>
 800eb48:	6820      	ldr	r0, [r4, #0]
 800eb4a:	4401      	add	r1, r0
 800eb4c:	1858      	adds	r0, r3, r1
 800eb4e:	4282      	cmp	r2, r0
 800eb50:	6019      	str	r1, [r3, #0]
 800eb52:	d1dd      	bne.n	800eb10 <_free_r+0x24>
 800eb54:	6810      	ldr	r0, [r2, #0]
 800eb56:	6852      	ldr	r2, [r2, #4]
 800eb58:	605a      	str	r2, [r3, #4]
 800eb5a:	4401      	add	r1, r0
 800eb5c:	6019      	str	r1, [r3, #0]
 800eb5e:	e7d7      	b.n	800eb10 <_free_r+0x24>
 800eb60:	d902      	bls.n	800eb68 <_free_r+0x7c>
 800eb62:	230c      	movs	r3, #12
 800eb64:	602b      	str	r3, [r5, #0]
 800eb66:	e7d3      	b.n	800eb10 <_free_r+0x24>
 800eb68:	6820      	ldr	r0, [r4, #0]
 800eb6a:	1821      	adds	r1, r4, r0
 800eb6c:	428a      	cmp	r2, r1
 800eb6e:	bf04      	itt	eq
 800eb70:	6811      	ldreq	r1, [r2, #0]
 800eb72:	6852      	ldreq	r2, [r2, #4]
 800eb74:	6062      	str	r2, [r4, #4]
 800eb76:	bf04      	itt	eq
 800eb78:	1809      	addeq	r1, r1, r0
 800eb7a:	6021      	streq	r1, [r4, #0]
 800eb7c:	605c      	str	r4, [r3, #4]
 800eb7e:	e7c7      	b.n	800eb10 <_free_r+0x24>
 800eb80:	bd38      	pop	{r3, r4, r5, pc}
 800eb82:	bf00      	nop
 800eb84:	20000278 	.word	0x20000278

0800eb88 <_malloc_r>:
 800eb88:	b570      	push	{r4, r5, r6, lr}
 800eb8a:	1ccd      	adds	r5, r1, #3
 800eb8c:	f025 0503 	bic.w	r5, r5, #3
 800eb90:	3508      	adds	r5, #8
 800eb92:	2d0c      	cmp	r5, #12
 800eb94:	bf38      	it	cc
 800eb96:	250c      	movcc	r5, #12
 800eb98:	2d00      	cmp	r5, #0
 800eb9a:	4606      	mov	r6, r0
 800eb9c:	db01      	blt.n	800eba2 <_malloc_r+0x1a>
 800eb9e:	42a9      	cmp	r1, r5
 800eba0:	d903      	bls.n	800ebaa <_malloc_r+0x22>
 800eba2:	230c      	movs	r3, #12
 800eba4:	6033      	str	r3, [r6, #0]
 800eba6:	2000      	movs	r0, #0
 800eba8:	bd70      	pop	{r4, r5, r6, pc}
 800ebaa:	f000 f877 	bl	800ec9c <__malloc_lock>
 800ebae:	4a21      	ldr	r2, [pc, #132]	; (800ec34 <_malloc_r+0xac>)
 800ebb0:	6814      	ldr	r4, [r2, #0]
 800ebb2:	4621      	mov	r1, r4
 800ebb4:	b991      	cbnz	r1, 800ebdc <_malloc_r+0x54>
 800ebb6:	4c20      	ldr	r4, [pc, #128]	; (800ec38 <_malloc_r+0xb0>)
 800ebb8:	6823      	ldr	r3, [r4, #0]
 800ebba:	b91b      	cbnz	r3, 800ebc4 <_malloc_r+0x3c>
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	f000 f83d 	bl	800ec3c <_sbrk_r>
 800ebc2:	6020      	str	r0, [r4, #0]
 800ebc4:	4629      	mov	r1, r5
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f000 f838 	bl	800ec3c <_sbrk_r>
 800ebcc:	1c43      	adds	r3, r0, #1
 800ebce:	d124      	bne.n	800ec1a <_malloc_r+0x92>
 800ebd0:	230c      	movs	r3, #12
 800ebd2:	6033      	str	r3, [r6, #0]
 800ebd4:	4630      	mov	r0, r6
 800ebd6:	f000 f862 	bl	800ec9e <__malloc_unlock>
 800ebda:	e7e4      	b.n	800eba6 <_malloc_r+0x1e>
 800ebdc:	680b      	ldr	r3, [r1, #0]
 800ebde:	1b5b      	subs	r3, r3, r5
 800ebe0:	d418      	bmi.n	800ec14 <_malloc_r+0x8c>
 800ebe2:	2b0b      	cmp	r3, #11
 800ebe4:	d90f      	bls.n	800ec06 <_malloc_r+0x7e>
 800ebe6:	600b      	str	r3, [r1, #0]
 800ebe8:	50cd      	str	r5, [r1, r3]
 800ebea:	18cc      	adds	r4, r1, r3
 800ebec:	4630      	mov	r0, r6
 800ebee:	f000 f856 	bl	800ec9e <__malloc_unlock>
 800ebf2:	f104 000b 	add.w	r0, r4, #11
 800ebf6:	1d23      	adds	r3, r4, #4
 800ebf8:	f020 0007 	bic.w	r0, r0, #7
 800ebfc:	1ac3      	subs	r3, r0, r3
 800ebfe:	d0d3      	beq.n	800eba8 <_malloc_r+0x20>
 800ec00:	425a      	negs	r2, r3
 800ec02:	50e2      	str	r2, [r4, r3]
 800ec04:	e7d0      	b.n	800eba8 <_malloc_r+0x20>
 800ec06:	428c      	cmp	r4, r1
 800ec08:	684b      	ldr	r3, [r1, #4]
 800ec0a:	bf16      	itet	ne
 800ec0c:	6063      	strne	r3, [r4, #4]
 800ec0e:	6013      	streq	r3, [r2, #0]
 800ec10:	460c      	movne	r4, r1
 800ec12:	e7eb      	b.n	800ebec <_malloc_r+0x64>
 800ec14:	460c      	mov	r4, r1
 800ec16:	6849      	ldr	r1, [r1, #4]
 800ec18:	e7cc      	b.n	800ebb4 <_malloc_r+0x2c>
 800ec1a:	1cc4      	adds	r4, r0, #3
 800ec1c:	f024 0403 	bic.w	r4, r4, #3
 800ec20:	42a0      	cmp	r0, r4
 800ec22:	d005      	beq.n	800ec30 <_malloc_r+0xa8>
 800ec24:	1a21      	subs	r1, r4, r0
 800ec26:	4630      	mov	r0, r6
 800ec28:	f000 f808 	bl	800ec3c <_sbrk_r>
 800ec2c:	3001      	adds	r0, #1
 800ec2e:	d0cf      	beq.n	800ebd0 <_malloc_r+0x48>
 800ec30:	6025      	str	r5, [r4, #0]
 800ec32:	e7db      	b.n	800ebec <_malloc_r+0x64>
 800ec34:	20000278 	.word	0x20000278
 800ec38:	2000027c 	.word	0x2000027c

0800ec3c <_sbrk_r>:
 800ec3c:	b538      	push	{r3, r4, r5, lr}
 800ec3e:	4c06      	ldr	r4, [pc, #24]	; (800ec58 <_sbrk_r+0x1c>)
 800ec40:	2300      	movs	r3, #0
 800ec42:	4605      	mov	r5, r0
 800ec44:	4608      	mov	r0, r1
 800ec46:	6023      	str	r3, [r4, #0]
 800ec48:	f7f3 f870 	bl	8001d2c <_sbrk>
 800ec4c:	1c43      	adds	r3, r0, #1
 800ec4e:	d102      	bne.n	800ec56 <_sbrk_r+0x1a>
 800ec50:	6823      	ldr	r3, [r4, #0]
 800ec52:	b103      	cbz	r3, 800ec56 <_sbrk_r+0x1a>
 800ec54:	602b      	str	r3, [r5, #0]
 800ec56:	bd38      	pop	{r3, r4, r5, pc}
 800ec58:	200057c0 	.word	0x200057c0

0800ec5c <siprintf>:
 800ec5c:	b40e      	push	{r1, r2, r3}
 800ec5e:	b500      	push	{lr}
 800ec60:	b09c      	sub	sp, #112	; 0x70
 800ec62:	ab1d      	add	r3, sp, #116	; 0x74
 800ec64:	9002      	str	r0, [sp, #8]
 800ec66:	9006      	str	r0, [sp, #24]
 800ec68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec6c:	4809      	ldr	r0, [pc, #36]	; (800ec94 <siprintf+0x38>)
 800ec6e:	9107      	str	r1, [sp, #28]
 800ec70:	9104      	str	r1, [sp, #16]
 800ec72:	4909      	ldr	r1, [pc, #36]	; (800ec98 <siprintf+0x3c>)
 800ec74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec78:	9105      	str	r1, [sp, #20]
 800ec7a:	6800      	ldr	r0, [r0, #0]
 800ec7c:	9301      	str	r3, [sp, #4]
 800ec7e:	a902      	add	r1, sp, #8
 800ec80:	f000 f868 	bl	800ed54 <_svfiprintf_r>
 800ec84:	9b02      	ldr	r3, [sp, #8]
 800ec86:	2200      	movs	r2, #0
 800ec88:	701a      	strb	r2, [r3, #0]
 800ec8a:	b01c      	add	sp, #112	; 0x70
 800ec8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec90:	b003      	add	sp, #12
 800ec92:	4770      	bx	lr
 800ec94:	200001e4 	.word	0x200001e4
 800ec98:	ffff0208 	.word	0xffff0208

0800ec9c <__malloc_lock>:
 800ec9c:	4770      	bx	lr

0800ec9e <__malloc_unlock>:
 800ec9e:	4770      	bx	lr

0800eca0 <__ssputs_r>:
 800eca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eca4:	688e      	ldr	r6, [r1, #8]
 800eca6:	429e      	cmp	r6, r3
 800eca8:	4682      	mov	sl, r0
 800ecaa:	460c      	mov	r4, r1
 800ecac:	4690      	mov	r8, r2
 800ecae:	4699      	mov	r9, r3
 800ecb0:	d837      	bhi.n	800ed22 <__ssputs_r+0x82>
 800ecb2:	898a      	ldrh	r2, [r1, #12]
 800ecb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ecb8:	d031      	beq.n	800ed1e <__ssputs_r+0x7e>
 800ecba:	6825      	ldr	r5, [r4, #0]
 800ecbc:	6909      	ldr	r1, [r1, #16]
 800ecbe:	1a6f      	subs	r7, r5, r1
 800ecc0:	6965      	ldr	r5, [r4, #20]
 800ecc2:	2302      	movs	r3, #2
 800ecc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ecc8:	fb95 f5f3 	sdiv	r5, r5, r3
 800eccc:	f109 0301 	add.w	r3, r9, #1
 800ecd0:	443b      	add	r3, r7
 800ecd2:	429d      	cmp	r5, r3
 800ecd4:	bf38      	it	cc
 800ecd6:	461d      	movcc	r5, r3
 800ecd8:	0553      	lsls	r3, r2, #21
 800ecda:	d530      	bpl.n	800ed3e <__ssputs_r+0x9e>
 800ecdc:	4629      	mov	r1, r5
 800ecde:	f7ff ff53 	bl	800eb88 <_malloc_r>
 800ece2:	4606      	mov	r6, r0
 800ece4:	b950      	cbnz	r0, 800ecfc <__ssputs_r+0x5c>
 800ece6:	230c      	movs	r3, #12
 800ece8:	f8ca 3000 	str.w	r3, [sl]
 800ecec:	89a3      	ldrh	r3, [r4, #12]
 800ecee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecf2:	81a3      	strh	r3, [r4, #12]
 800ecf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecfc:	463a      	mov	r2, r7
 800ecfe:	6921      	ldr	r1, [r4, #16]
 800ed00:	f7ff fee0 	bl	800eac4 <memcpy>
 800ed04:	89a3      	ldrh	r3, [r4, #12]
 800ed06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed0e:	81a3      	strh	r3, [r4, #12]
 800ed10:	6126      	str	r6, [r4, #16]
 800ed12:	6165      	str	r5, [r4, #20]
 800ed14:	443e      	add	r6, r7
 800ed16:	1bed      	subs	r5, r5, r7
 800ed18:	6026      	str	r6, [r4, #0]
 800ed1a:	60a5      	str	r5, [r4, #8]
 800ed1c:	464e      	mov	r6, r9
 800ed1e:	454e      	cmp	r6, r9
 800ed20:	d900      	bls.n	800ed24 <__ssputs_r+0x84>
 800ed22:	464e      	mov	r6, r9
 800ed24:	4632      	mov	r2, r6
 800ed26:	4641      	mov	r1, r8
 800ed28:	6820      	ldr	r0, [r4, #0]
 800ed2a:	f000 fa93 	bl	800f254 <memmove>
 800ed2e:	68a3      	ldr	r3, [r4, #8]
 800ed30:	1b9b      	subs	r3, r3, r6
 800ed32:	60a3      	str	r3, [r4, #8]
 800ed34:	6823      	ldr	r3, [r4, #0]
 800ed36:	441e      	add	r6, r3
 800ed38:	6026      	str	r6, [r4, #0]
 800ed3a:	2000      	movs	r0, #0
 800ed3c:	e7dc      	b.n	800ecf8 <__ssputs_r+0x58>
 800ed3e:	462a      	mov	r2, r5
 800ed40:	f000 faa1 	bl	800f286 <_realloc_r>
 800ed44:	4606      	mov	r6, r0
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d1e2      	bne.n	800ed10 <__ssputs_r+0x70>
 800ed4a:	6921      	ldr	r1, [r4, #16]
 800ed4c:	4650      	mov	r0, sl
 800ed4e:	f7ff fecd 	bl	800eaec <_free_r>
 800ed52:	e7c8      	b.n	800ece6 <__ssputs_r+0x46>

0800ed54 <_svfiprintf_r>:
 800ed54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed58:	461d      	mov	r5, r3
 800ed5a:	898b      	ldrh	r3, [r1, #12]
 800ed5c:	061f      	lsls	r7, r3, #24
 800ed5e:	b09d      	sub	sp, #116	; 0x74
 800ed60:	4680      	mov	r8, r0
 800ed62:	460c      	mov	r4, r1
 800ed64:	4616      	mov	r6, r2
 800ed66:	d50f      	bpl.n	800ed88 <_svfiprintf_r+0x34>
 800ed68:	690b      	ldr	r3, [r1, #16]
 800ed6a:	b96b      	cbnz	r3, 800ed88 <_svfiprintf_r+0x34>
 800ed6c:	2140      	movs	r1, #64	; 0x40
 800ed6e:	f7ff ff0b 	bl	800eb88 <_malloc_r>
 800ed72:	6020      	str	r0, [r4, #0]
 800ed74:	6120      	str	r0, [r4, #16]
 800ed76:	b928      	cbnz	r0, 800ed84 <_svfiprintf_r+0x30>
 800ed78:	230c      	movs	r3, #12
 800ed7a:	f8c8 3000 	str.w	r3, [r8]
 800ed7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed82:	e0c8      	b.n	800ef16 <_svfiprintf_r+0x1c2>
 800ed84:	2340      	movs	r3, #64	; 0x40
 800ed86:	6163      	str	r3, [r4, #20]
 800ed88:	2300      	movs	r3, #0
 800ed8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed8c:	2320      	movs	r3, #32
 800ed8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed92:	2330      	movs	r3, #48	; 0x30
 800ed94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed98:	9503      	str	r5, [sp, #12]
 800ed9a:	f04f 0b01 	mov.w	fp, #1
 800ed9e:	4637      	mov	r7, r6
 800eda0:	463d      	mov	r5, r7
 800eda2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eda6:	b10b      	cbz	r3, 800edac <_svfiprintf_r+0x58>
 800eda8:	2b25      	cmp	r3, #37	; 0x25
 800edaa:	d13e      	bne.n	800ee2a <_svfiprintf_r+0xd6>
 800edac:	ebb7 0a06 	subs.w	sl, r7, r6
 800edb0:	d00b      	beq.n	800edca <_svfiprintf_r+0x76>
 800edb2:	4653      	mov	r3, sl
 800edb4:	4632      	mov	r2, r6
 800edb6:	4621      	mov	r1, r4
 800edb8:	4640      	mov	r0, r8
 800edba:	f7ff ff71 	bl	800eca0 <__ssputs_r>
 800edbe:	3001      	adds	r0, #1
 800edc0:	f000 80a4 	beq.w	800ef0c <_svfiprintf_r+0x1b8>
 800edc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edc6:	4453      	add	r3, sl
 800edc8:	9309      	str	r3, [sp, #36]	; 0x24
 800edca:	783b      	ldrb	r3, [r7, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f000 809d 	beq.w	800ef0c <_svfiprintf_r+0x1b8>
 800edd2:	2300      	movs	r3, #0
 800edd4:	f04f 32ff 	mov.w	r2, #4294967295
 800edd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eddc:	9304      	str	r3, [sp, #16]
 800edde:	9307      	str	r3, [sp, #28]
 800ede0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ede4:	931a      	str	r3, [sp, #104]	; 0x68
 800ede6:	462f      	mov	r7, r5
 800ede8:	2205      	movs	r2, #5
 800edea:	f817 1b01 	ldrb.w	r1, [r7], #1
 800edee:	4850      	ldr	r0, [pc, #320]	; (800ef30 <_svfiprintf_r+0x1dc>)
 800edf0:	f7f1 f9fe 	bl	80001f0 <memchr>
 800edf4:	9b04      	ldr	r3, [sp, #16]
 800edf6:	b9d0      	cbnz	r0, 800ee2e <_svfiprintf_r+0xda>
 800edf8:	06d9      	lsls	r1, r3, #27
 800edfa:	bf44      	itt	mi
 800edfc:	2220      	movmi	r2, #32
 800edfe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ee02:	071a      	lsls	r2, r3, #28
 800ee04:	bf44      	itt	mi
 800ee06:	222b      	movmi	r2, #43	; 0x2b
 800ee08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ee0c:	782a      	ldrb	r2, [r5, #0]
 800ee0e:	2a2a      	cmp	r2, #42	; 0x2a
 800ee10:	d015      	beq.n	800ee3e <_svfiprintf_r+0xea>
 800ee12:	9a07      	ldr	r2, [sp, #28]
 800ee14:	462f      	mov	r7, r5
 800ee16:	2000      	movs	r0, #0
 800ee18:	250a      	movs	r5, #10
 800ee1a:	4639      	mov	r1, r7
 800ee1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee20:	3b30      	subs	r3, #48	; 0x30
 800ee22:	2b09      	cmp	r3, #9
 800ee24:	d94d      	bls.n	800eec2 <_svfiprintf_r+0x16e>
 800ee26:	b1b8      	cbz	r0, 800ee58 <_svfiprintf_r+0x104>
 800ee28:	e00f      	b.n	800ee4a <_svfiprintf_r+0xf6>
 800ee2a:	462f      	mov	r7, r5
 800ee2c:	e7b8      	b.n	800eda0 <_svfiprintf_r+0x4c>
 800ee2e:	4a40      	ldr	r2, [pc, #256]	; (800ef30 <_svfiprintf_r+0x1dc>)
 800ee30:	1a80      	subs	r0, r0, r2
 800ee32:	fa0b f000 	lsl.w	r0, fp, r0
 800ee36:	4318      	orrs	r0, r3
 800ee38:	9004      	str	r0, [sp, #16]
 800ee3a:	463d      	mov	r5, r7
 800ee3c:	e7d3      	b.n	800ede6 <_svfiprintf_r+0x92>
 800ee3e:	9a03      	ldr	r2, [sp, #12]
 800ee40:	1d11      	adds	r1, r2, #4
 800ee42:	6812      	ldr	r2, [r2, #0]
 800ee44:	9103      	str	r1, [sp, #12]
 800ee46:	2a00      	cmp	r2, #0
 800ee48:	db01      	blt.n	800ee4e <_svfiprintf_r+0xfa>
 800ee4a:	9207      	str	r2, [sp, #28]
 800ee4c:	e004      	b.n	800ee58 <_svfiprintf_r+0x104>
 800ee4e:	4252      	negs	r2, r2
 800ee50:	f043 0302 	orr.w	r3, r3, #2
 800ee54:	9207      	str	r2, [sp, #28]
 800ee56:	9304      	str	r3, [sp, #16]
 800ee58:	783b      	ldrb	r3, [r7, #0]
 800ee5a:	2b2e      	cmp	r3, #46	; 0x2e
 800ee5c:	d10c      	bne.n	800ee78 <_svfiprintf_r+0x124>
 800ee5e:	787b      	ldrb	r3, [r7, #1]
 800ee60:	2b2a      	cmp	r3, #42	; 0x2a
 800ee62:	d133      	bne.n	800eecc <_svfiprintf_r+0x178>
 800ee64:	9b03      	ldr	r3, [sp, #12]
 800ee66:	1d1a      	adds	r2, r3, #4
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	9203      	str	r2, [sp, #12]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	bfb8      	it	lt
 800ee70:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee74:	3702      	adds	r7, #2
 800ee76:	9305      	str	r3, [sp, #20]
 800ee78:	4d2e      	ldr	r5, [pc, #184]	; (800ef34 <_svfiprintf_r+0x1e0>)
 800ee7a:	7839      	ldrb	r1, [r7, #0]
 800ee7c:	2203      	movs	r2, #3
 800ee7e:	4628      	mov	r0, r5
 800ee80:	f7f1 f9b6 	bl	80001f0 <memchr>
 800ee84:	b138      	cbz	r0, 800ee96 <_svfiprintf_r+0x142>
 800ee86:	2340      	movs	r3, #64	; 0x40
 800ee88:	1b40      	subs	r0, r0, r5
 800ee8a:	fa03 f000 	lsl.w	r0, r3, r0
 800ee8e:	9b04      	ldr	r3, [sp, #16]
 800ee90:	4303      	orrs	r3, r0
 800ee92:	3701      	adds	r7, #1
 800ee94:	9304      	str	r3, [sp, #16]
 800ee96:	7839      	ldrb	r1, [r7, #0]
 800ee98:	4827      	ldr	r0, [pc, #156]	; (800ef38 <_svfiprintf_r+0x1e4>)
 800ee9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee9e:	2206      	movs	r2, #6
 800eea0:	1c7e      	adds	r6, r7, #1
 800eea2:	f7f1 f9a5 	bl	80001f0 <memchr>
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d038      	beq.n	800ef1c <_svfiprintf_r+0x1c8>
 800eeaa:	4b24      	ldr	r3, [pc, #144]	; (800ef3c <_svfiprintf_r+0x1e8>)
 800eeac:	bb13      	cbnz	r3, 800eef4 <_svfiprintf_r+0x1a0>
 800eeae:	9b03      	ldr	r3, [sp, #12]
 800eeb0:	3307      	adds	r3, #7
 800eeb2:	f023 0307 	bic.w	r3, r3, #7
 800eeb6:	3308      	adds	r3, #8
 800eeb8:	9303      	str	r3, [sp, #12]
 800eeba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eebc:	444b      	add	r3, r9
 800eebe:	9309      	str	r3, [sp, #36]	; 0x24
 800eec0:	e76d      	b.n	800ed9e <_svfiprintf_r+0x4a>
 800eec2:	fb05 3202 	mla	r2, r5, r2, r3
 800eec6:	2001      	movs	r0, #1
 800eec8:	460f      	mov	r7, r1
 800eeca:	e7a6      	b.n	800ee1a <_svfiprintf_r+0xc6>
 800eecc:	2300      	movs	r3, #0
 800eece:	3701      	adds	r7, #1
 800eed0:	9305      	str	r3, [sp, #20]
 800eed2:	4619      	mov	r1, r3
 800eed4:	250a      	movs	r5, #10
 800eed6:	4638      	mov	r0, r7
 800eed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eedc:	3a30      	subs	r2, #48	; 0x30
 800eede:	2a09      	cmp	r2, #9
 800eee0:	d903      	bls.n	800eeea <_svfiprintf_r+0x196>
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d0c8      	beq.n	800ee78 <_svfiprintf_r+0x124>
 800eee6:	9105      	str	r1, [sp, #20]
 800eee8:	e7c6      	b.n	800ee78 <_svfiprintf_r+0x124>
 800eeea:	fb05 2101 	mla	r1, r5, r1, r2
 800eeee:	2301      	movs	r3, #1
 800eef0:	4607      	mov	r7, r0
 800eef2:	e7f0      	b.n	800eed6 <_svfiprintf_r+0x182>
 800eef4:	ab03      	add	r3, sp, #12
 800eef6:	9300      	str	r3, [sp, #0]
 800eef8:	4622      	mov	r2, r4
 800eefa:	4b11      	ldr	r3, [pc, #68]	; (800ef40 <_svfiprintf_r+0x1ec>)
 800eefc:	a904      	add	r1, sp, #16
 800eefe:	4640      	mov	r0, r8
 800ef00:	f3af 8000 	nop.w
 800ef04:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ef08:	4681      	mov	r9, r0
 800ef0a:	d1d6      	bne.n	800eeba <_svfiprintf_r+0x166>
 800ef0c:	89a3      	ldrh	r3, [r4, #12]
 800ef0e:	065b      	lsls	r3, r3, #25
 800ef10:	f53f af35 	bmi.w	800ed7e <_svfiprintf_r+0x2a>
 800ef14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef16:	b01d      	add	sp, #116	; 0x74
 800ef18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef1c:	ab03      	add	r3, sp, #12
 800ef1e:	9300      	str	r3, [sp, #0]
 800ef20:	4622      	mov	r2, r4
 800ef22:	4b07      	ldr	r3, [pc, #28]	; (800ef40 <_svfiprintf_r+0x1ec>)
 800ef24:	a904      	add	r1, sp, #16
 800ef26:	4640      	mov	r0, r8
 800ef28:	f000 f882 	bl	800f030 <_printf_i>
 800ef2c:	e7ea      	b.n	800ef04 <_svfiprintf_r+0x1b0>
 800ef2e:	bf00      	nop
 800ef30:	0800f7e0 	.word	0x0800f7e0
 800ef34:	0800f7e6 	.word	0x0800f7e6
 800ef38:	0800f7ea 	.word	0x0800f7ea
 800ef3c:	00000000 	.word	0x00000000
 800ef40:	0800eca1 	.word	0x0800eca1

0800ef44 <_printf_common>:
 800ef44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef48:	4691      	mov	r9, r2
 800ef4a:	461f      	mov	r7, r3
 800ef4c:	688a      	ldr	r2, [r1, #8]
 800ef4e:	690b      	ldr	r3, [r1, #16]
 800ef50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef54:	4293      	cmp	r3, r2
 800ef56:	bfb8      	it	lt
 800ef58:	4613      	movlt	r3, r2
 800ef5a:	f8c9 3000 	str.w	r3, [r9]
 800ef5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef62:	4606      	mov	r6, r0
 800ef64:	460c      	mov	r4, r1
 800ef66:	b112      	cbz	r2, 800ef6e <_printf_common+0x2a>
 800ef68:	3301      	adds	r3, #1
 800ef6a:	f8c9 3000 	str.w	r3, [r9]
 800ef6e:	6823      	ldr	r3, [r4, #0]
 800ef70:	0699      	lsls	r1, r3, #26
 800ef72:	bf42      	ittt	mi
 800ef74:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ef78:	3302      	addmi	r3, #2
 800ef7a:	f8c9 3000 	strmi.w	r3, [r9]
 800ef7e:	6825      	ldr	r5, [r4, #0]
 800ef80:	f015 0506 	ands.w	r5, r5, #6
 800ef84:	d107      	bne.n	800ef96 <_printf_common+0x52>
 800ef86:	f104 0a19 	add.w	sl, r4, #25
 800ef8a:	68e3      	ldr	r3, [r4, #12]
 800ef8c:	f8d9 2000 	ldr.w	r2, [r9]
 800ef90:	1a9b      	subs	r3, r3, r2
 800ef92:	42ab      	cmp	r3, r5
 800ef94:	dc28      	bgt.n	800efe8 <_printf_common+0xa4>
 800ef96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ef9a:	6822      	ldr	r2, [r4, #0]
 800ef9c:	3300      	adds	r3, #0
 800ef9e:	bf18      	it	ne
 800efa0:	2301      	movne	r3, #1
 800efa2:	0692      	lsls	r2, r2, #26
 800efa4:	d42d      	bmi.n	800f002 <_printf_common+0xbe>
 800efa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efaa:	4639      	mov	r1, r7
 800efac:	4630      	mov	r0, r6
 800efae:	47c0      	blx	r8
 800efb0:	3001      	adds	r0, #1
 800efb2:	d020      	beq.n	800eff6 <_printf_common+0xb2>
 800efb4:	6823      	ldr	r3, [r4, #0]
 800efb6:	68e5      	ldr	r5, [r4, #12]
 800efb8:	f8d9 2000 	ldr.w	r2, [r9]
 800efbc:	f003 0306 	and.w	r3, r3, #6
 800efc0:	2b04      	cmp	r3, #4
 800efc2:	bf08      	it	eq
 800efc4:	1aad      	subeq	r5, r5, r2
 800efc6:	68a3      	ldr	r3, [r4, #8]
 800efc8:	6922      	ldr	r2, [r4, #16]
 800efca:	bf0c      	ite	eq
 800efcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efd0:	2500      	movne	r5, #0
 800efd2:	4293      	cmp	r3, r2
 800efd4:	bfc4      	itt	gt
 800efd6:	1a9b      	subgt	r3, r3, r2
 800efd8:	18ed      	addgt	r5, r5, r3
 800efda:	f04f 0900 	mov.w	r9, #0
 800efde:	341a      	adds	r4, #26
 800efe0:	454d      	cmp	r5, r9
 800efe2:	d11a      	bne.n	800f01a <_printf_common+0xd6>
 800efe4:	2000      	movs	r0, #0
 800efe6:	e008      	b.n	800effa <_printf_common+0xb6>
 800efe8:	2301      	movs	r3, #1
 800efea:	4652      	mov	r2, sl
 800efec:	4639      	mov	r1, r7
 800efee:	4630      	mov	r0, r6
 800eff0:	47c0      	blx	r8
 800eff2:	3001      	adds	r0, #1
 800eff4:	d103      	bne.n	800effe <_printf_common+0xba>
 800eff6:	f04f 30ff 	mov.w	r0, #4294967295
 800effa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800effe:	3501      	adds	r5, #1
 800f000:	e7c3      	b.n	800ef8a <_printf_common+0x46>
 800f002:	18e1      	adds	r1, r4, r3
 800f004:	1c5a      	adds	r2, r3, #1
 800f006:	2030      	movs	r0, #48	; 0x30
 800f008:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f00c:	4422      	add	r2, r4
 800f00e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f012:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f016:	3302      	adds	r3, #2
 800f018:	e7c5      	b.n	800efa6 <_printf_common+0x62>
 800f01a:	2301      	movs	r3, #1
 800f01c:	4622      	mov	r2, r4
 800f01e:	4639      	mov	r1, r7
 800f020:	4630      	mov	r0, r6
 800f022:	47c0      	blx	r8
 800f024:	3001      	adds	r0, #1
 800f026:	d0e6      	beq.n	800eff6 <_printf_common+0xb2>
 800f028:	f109 0901 	add.w	r9, r9, #1
 800f02c:	e7d8      	b.n	800efe0 <_printf_common+0x9c>
	...

0800f030 <_printf_i>:
 800f030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f034:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f038:	460c      	mov	r4, r1
 800f03a:	7e09      	ldrb	r1, [r1, #24]
 800f03c:	b085      	sub	sp, #20
 800f03e:	296e      	cmp	r1, #110	; 0x6e
 800f040:	4617      	mov	r7, r2
 800f042:	4606      	mov	r6, r0
 800f044:	4698      	mov	r8, r3
 800f046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f048:	f000 80b3 	beq.w	800f1b2 <_printf_i+0x182>
 800f04c:	d822      	bhi.n	800f094 <_printf_i+0x64>
 800f04e:	2963      	cmp	r1, #99	; 0x63
 800f050:	d036      	beq.n	800f0c0 <_printf_i+0x90>
 800f052:	d80a      	bhi.n	800f06a <_printf_i+0x3a>
 800f054:	2900      	cmp	r1, #0
 800f056:	f000 80b9 	beq.w	800f1cc <_printf_i+0x19c>
 800f05a:	2958      	cmp	r1, #88	; 0x58
 800f05c:	f000 8083 	beq.w	800f166 <_printf_i+0x136>
 800f060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f064:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f068:	e032      	b.n	800f0d0 <_printf_i+0xa0>
 800f06a:	2964      	cmp	r1, #100	; 0x64
 800f06c:	d001      	beq.n	800f072 <_printf_i+0x42>
 800f06e:	2969      	cmp	r1, #105	; 0x69
 800f070:	d1f6      	bne.n	800f060 <_printf_i+0x30>
 800f072:	6820      	ldr	r0, [r4, #0]
 800f074:	6813      	ldr	r3, [r2, #0]
 800f076:	0605      	lsls	r5, r0, #24
 800f078:	f103 0104 	add.w	r1, r3, #4
 800f07c:	d52a      	bpl.n	800f0d4 <_printf_i+0xa4>
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	6011      	str	r1, [r2, #0]
 800f082:	2b00      	cmp	r3, #0
 800f084:	da03      	bge.n	800f08e <_printf_i+0x5e>
 800f086:	222d      	movs	r2, #45	; 0x2d
 800f088:	425b      	negs	r3, r3
 800f08a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f08e:	486f      	ldr	r0, [pc, #444]	; (800f24c <_printf_i+0x21c>)
 800f090:	220a      	movs	r2, #10
 800f092:	e039      	b.n	800f108 <_printf_i+0xd8>
 800f094:	2973      	cmp	r1, #115	; 0x73
 800f096:	f000 809d 	beq.w	800f1d4 <_printf_i+0x1a4>
 800f09a:	d808      	bhi.n	800f0ae <_printf_i+0x7e>
 800f09c:	296f      	cmp	r1, #111	; 0x6f
 800f09e:	d020      	beq.n	800f0e2 <_printf_i+0xb2>
 800f0a0:	2970      	cmp	r1, #112	; 0x70
 800f0a2:	d1dd      	bne.n	800f060 <_printf_i+0x30>
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	f043 0320 	orr.w	r3, r3, #32
 800f0aa:	6023      	str	r3, [r4, #0]
 800f0ac:	e003      	b.n	800f0b6 <_printf_i+0x86>
 800f0ae:	2975      	cmp	r1, #117	; 0x75
 800f0b0:	d017      	beq.n	800f0e2 <_printf_i+0xb2>
 800f0b2:	2978      	cmp	r1, #120	; 0x78
 800f0b4:	d1d4      	bne.n	800f060 <_printf_i+0x30>
 800f0b6:	2378      	movs	r3, #120	; 0x78
 800f0b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f0bc:	4864      	ldr	r0, [pc, #400]	; (800f250 <_printf_i+0x220>)
 800f0be:	e055      	b.n	800f16c <_printf_i+0x13c>
 800f0c0:	6813      	ldr	r3, [r2, #0]
 800f0c2:	1d19      	adds	r1, r3, #4
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	6011      	str	r1, [r2, #0]
 800f0c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	e08c      	b.n	800f1ee <_printf_i+0x1be>
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	6011      	str	r1, [r2, #0]
 800f0d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f0dc:	bf18      	it	ne
 800f0de:	b21b      	sxthne	r3, r3
 800f0e0:	e7cf      	b.n	800f082 <_printf_i+0x52>
 800f0e2:	6813      	ldr	r3, [r2, #0]
 800f0e4:	6825      	ldr	r5, [r4, #0]
 800f0e6:	1d18      	adds	r0, r3, #4
 800f0e8:	6010      	str	r0, [r2, #0]
 800f0ea:	0628      	lsls	r0, r5, #24
 800f0ec:	d501      	bpl.n	800f0f2 <_printf_i+0xc2>
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	e002      	b.n	800f0f8 <_printf_i+0xc8>
 800f0f2:	0668      	lsls	r0, r5, #25
 800f0f4:	d5fb      	bpl.n	800f0ee <_printf_i+0xbe>
 800f0f6:	881b      	ldrh	r3, [r3, #0]
 800f0f8:	4854      	ldr	r0, [pc, #336]	; (800f24c <_printf_i+0x21c>)
 800f0fa:	296f      	cmp	r1, #111	; 0x6f
 800f0fc:	bf14      	ite	ne
 800f0fe:	220a      	movne	r2, #10
 800f100:	2208      	moveq	r2, #8
 800f102:	2100      	movs	r1, #0
 800f104:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f108:	6865      	ldr	r5, [r4, #4]
 800f10a:	60a5      	str	r5, [r4, #8]
 800f10c:	2d00      	cmp	r5, #0
 800f10e:	f2c0 8095 	blt.w	800f23c <_printf_i+0x20c>
 800f112:	6821      	ldr	r1, [r4, #0]
 800f114:	f021 0104 	bic.w	r1, r1, #4
 800f118:	6021      	str	r1, [r4, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d13d      	bne.n	800f19a <_printf_i+0x16a>
 800f11e:	2d00      	cmp	r5, #0
 800f120:	f040 808e 	bne.w	800f240 <_printf_i+0x210>
 800f124:	4665      	mov	r5, ip
 800f126:	2a08      	cmp	r2, #8
 800f128:	d10b      	bne.n	800f142 <_printf_i+0x112>
 800f12a:	6823      	ldr	r3, [r4, #0]
 800f12c:	07db      	lsls	r3, r3, #31
 800f12e:	d508      	bpl.n	800f142 <_printf_i+0x112>
 800f130:	6923      	ldr	r3, [r4, #16]
 800f132:	6862      	ldr	r2, [r4, #4]
 800f134:	429a      	cmp	r2, r3
 800f136:	bfde      	ittt	le
 800f138:	2330      	movle	r3, #48	; 0x30
 800f13a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f13e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f142:	ebac 0305 	sub.w	r3, ip, r5
 800f146:	6123      	str	r3, [r4, #16]
 800f148:	f8cd 8000 	str.w	r8, [sp]
 800f14c:	463b      	mov	r3, r7
 800f14e:	aa03      	add	r2, sp, #12
 800f150:	4621      	mov	r1, r4
 800f152:	4630      	mov	r0, r6
 800f154:	f7ff fef6 	bl	800ef44 <_printf_common>
 800f158:	3001      	adds	r0, #1
 800f15a:	d14d      	bne.n	800f1f8 <_printf_i+0x1c8>
 800f15c:	f04f 30ff 	mov.w	r0, #4294967295
 800f160:	b005      	add	sp, #20
 800f162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f166:	4839      	ldr	r0, [pc, #228]	; (800f24c <_printf_i+0x21c>)
 800f168:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f16c:	6813      	ldr	r3, [r2, #0]
 800f16e:	6821      	ldr	r1, [r4, #0]
 800f170:	1d1d      	adds	r5, r3, #4
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	6015      	str	r5, [r2, #0]
 800f176:	060a      	lsls	r2, r1, #24
 800f178:	d50b      	bpl.n	800f192 <_printf_i+0x162>
 800f17a:	07ca      	lsls	r2, r1, #31
 800f17c:	bf44      	itt	mi
 800f17e:	f041 0120 	orrmi.w	r1, r1, #32
 800f182:	6021      	strmi	r1, [r4, #0]
 800f184:	b91b      	cbnz	r3, 800f18e <_printf_i+0x15e>
 800f186:	6822      	ldr	r2, [r4, #0]
 800f188:	f022 0220 	bic.w	r2, r2, #32
 800f18c:	6022      	str	r2, [r4, #0]
 800f18e:	2210      	movs	r2, #16
 800f190:	e7b7      	b.n	800f102 <_printf_i+0xd2>
 800f192:	064d      	lsls	r5, r1, #25
 800f194:	bf48      	it	mi
 800f196:	b29b      	uxthmi	r3, r3
 800f198:	e7ef      	b.n	800f17a <_printf_i+0x14a>
 800f19a:	4665      	mov	r5, ip
 800f19c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f1a0:	fb02 3311 	mls	r3, r2, r1, r3
 800f1a4:	5cc3      	ldrb	r3, [r0, r3]
 800f1a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f1aa:	460b      	mov	r3, r1
 800f1ac:	2900      	cmp	r1, #0
 800f1ae:	d1f5      	bne.n	800f19c <_printf_i+0x16c>
 800f1b0:	e7b9      	b.n	800f126 <_printf_i+0xf6>
 800f1b2:	6813      	ldr	r3, [r2, #0]
 800f1b4:	6825      	ldr	r5, [r4, #0]
 800f1b6:	6961      	ldr	r1, [r4, #20]
 800f1b8:	1d18      	adds	r0, r3, #4
 800f1ba:	6010      	str	r0, [r2, #0]
 800f1bc:	0628      	lsls	r0, r5, #24
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	d501      	bpl.n	800f1c6 <_printf_i+0x196>
 800f1c2:	6019      	str	r1, [r3, #0]
 800f1c4:	e002      	b.n	800f1cc <_printf_i+0x19c>
 800f1c6:	066a      	lsls	r2, r5, #25
 800f1c8:	d5fb      	bpl.n	800f1c2 <_printf_i+0x192>
 800f1ca:	8019      	strh	r1, [r3, #0]
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	6123      	str	r3, [r4, #16]
 800f1d0:	4665      	mov	r5, ip
 800f1d2:	e7b9      	b.n	800f148 <_printf_i+0x118>
 800f1d4:	6813      	ldr	r3, [r2, #0]
 800f1d6:	1d19      	adds	r1, r3, #4
 800f1d8:	6011      	str	r1, [r2, #0]
 800f1da:	681d      	ldr	r5, [r3, #0]
 800f1dc:	6862      	ldr	r2, [r4, #4]
 800f1de:	2100      	movs	r1, #0
 800f1e0:	4628      	mov	r0, r5
 800f1e2:	f7f1 f805 	bl	80001f0 <memchr>
 800f1e6:	b108      	cbz	r0, 800f1ec <_printf_i+0x1bc>
 800f1e8:	1b40      	subs	r0, r0, r5
 800f1ea:	6060      	str	r0, [r4, #4]
 800f1ec:	6863      	ldr	r3, [r4, #4]
 800f1ee:	6123      	str	r3, [r4, #16]
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1f6:	e7a7      	b.n	800f148 <_printf_i+0x118>
 800f1f8:	6923      	ldr	r3, [r4, #16]
 800f1fa:	462a      	mov	r2, r5
 800f1fc:	4639      	mov	r1, r7
 800f1fe:	4630      	mov	r0, r6
 800f200:	47c0      	blx	r8
 800f202:	3001      	adds	r0, #1
 800f204:	d0aa      	beq.n	800f15c <_printf_i+0x12c>
 800f206:	6823      	ldr	r3, [r4, #0]
 800f208:	079b      	lsls	r3, r3, #30
 800f20a:	d413      	bmi.n	800f234 <_printf_i+0x204>
 800f20c:	68e0      	ldr	r0, [r4, #12]
 800f20e:	9b03      	ldr	r3, [sp, #12]
 800f210:	4298      	cmp	r0, r3
 800f212:	bfb8      	it	lt
 800f214:	4618      	movlt	r0, r3
 800f216:	e7a3      	b.n	800f160 <_printf_i+0x130>
 800f218:	2301      	movs	r3, #1
 800f21a:	464a      	mov	r2, r9
 800f21c:	4639      	mov	r1, r7
 800f21e:	4630      	mov	r0, r6
 800f220:	47c0      	blx	r8
 800f222:	3001      	adds	r0, #1
 800f224:	d09a      	beq.n	800f15c <_printf_i+0x12c>
 800f226:	3501      	adds	r5, #1
 800f228:	68e3      	ldr	r3, [r4, #12]
 800f22a:	9a03      	ldr	r2, [sp, #12]
 800f22c:	1a9b      	subs	r3, r3, r2
 800f22e:	42ab      	cmp	r3, r5
 800f230:	dcf2      	bgt.n	800f218 <_printf_i+0x1e8>
 800f232:	e7eb      	b.n	800f20c <_printf_i+0x1dc>
 800f234:	2500      	movs	r5, #0
 800f236:	f104 0919 	add.w	r9, r4, #25
 800f23a:	e7f5      	b.n	800f228 <_printf_i+0x1f8>
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d1ac      	bne.n	800f19a <_printf_i+0x16a>
 800f240:	7803      	ldrb	r3, [r0, #0]
 800f242:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f246:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f24a:	e76c      	b.n	800f126 <_printf_i+0xf6>
 800f24c:	0800f7f1 	.word	0x0800f7f1
 800f250:	0800f802 	.word	0x0800f802

0800f254 <memmove>:
 800f254:	4288      	cmp	r0, r1
 800f256:	b510      	push	{r4, lr}
 800f258:	eb01 0302 	add.w	r3, r1, r2
 800f25c:	d807      	bhi.n	800f26e <memmove+0x1a>
 800f25e:	1e42      	subs	r2, r0, #1
 800f260:	4299      	cmp	r1, r3
 800f262:	d00a      	beq.n	800f27a <memmove+0x26>
 800f264:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f268:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f26c:	e7f8      	b.n	800f260 <memmove+0xc>
 800f26e:	4283      	cmp	r3, r0
 800f270:	d9f5      	bls.n	800f25e <memmove+0xa>
 800f272:	1881      	adds	r1, r0, r2
 800f274:	1ad2      	subs	r2, r2, r3
 800f276:	42d3      	cmn	r3, r2
 800f278:	d100      	bne.n	800f27c <memmove+0x28>
 800f27a:	bd10      	pop	{r4, pc}
 800f27c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f280:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f284:	e7f7      	b.n	800f276 <memmove+0x22>

0800f286 <_realloc_r>:
 800f286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f288:	4607      	mov	r7, r0
 800f28a:	4614      	mov	r4, r2
 800f28c:	460e      	mov	r6, r1
 800f28e:	b921      	cbnz	r1, 800f29a <_realloc_r+0x14>
 800f290:	4611      	mov	r1, r2
 800f292:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f296:	f7ff bc77 	b.w	800eb88 <_malloc_r>
 800f29a:	b922      	cbnz	r2, 800f2a6 <_realloc_r+0x20>
 800f29c:	f7ff fc26 	bl	800eaec <_free_r>
 800f2a0:	4625      	mov	r5, r4
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2a6:	f000 f814 	bl	800f2d2 <_malloc_usable_size_r>
 800f2aa:	42a0      	cmp	r0, r4
 800f2ac:	d20f      	bcs.n	800f2ce <_realloc_r+0x48>
 800f2ae:	4621      	mov	r1, r4
 800f2b0:	4638      	mov	r0, r7
 800f2b2:	f7ff fc69 	bl	800eb88 <_malloc_r>
 800f2b6:	4605      	mov	r5, r0
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	d0f2      	beq.n	800f2a2 <_realloc_r+0x1c>
 800f2bc:	4631      	mov	r1, r6
 800f2be:	4622      	mov	r2, r4
 800f2c0:	f7ff fc00 	bl	800eac4 <memcpy>
 800f2c4:	4631      	mov	r1, r6
 800f2c6:	4638      	mov	r0, r7
 800f2c8:	f7ff fc10 	bl	800eaec <_free_r>
 800f2cc:	e7e9      	b.n	800f2a2 <_realloc_r+0x1c>
 800f2ce:	4635      	mov	r5, r6
 800f2d0:	e7e7      	b.n	800f2a2 <_realloc_r+0x1c>

0800f2d2 <_malloc_usable_size_r>:
 800f2d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2d6:	1f18      	subs	r0, r3, #4
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	bfbc      	itt	lt
 800f2dc:	580b      	ldrlt	r3, [r1, r0]
 800f2de:	18c0      	addlt	r0, r0, r3
 800f2e0:	4770      	bx	lr
	...

0800f2e4 <_init>:
 800f2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2e6:	bf00      	nop
 800f2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ea:	bc08      	pop	{r3}
 800f2ec:	469e      	mov	lr, r3
 800f2ee:	4770      	bx	lr

0800f2f0 <_fini>:
 800f2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2f2:	bf00      	nop
 800f2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2f6:	bc08      	pop	{r3}
 800f2f8:	469e      	mov	lr, r3
 800f2fa:	4770      	bx	lr
