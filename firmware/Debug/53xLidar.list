
53xLidar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b98c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800bb2c  0800bb2c  0001bb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c090  0800c090  00020230  2**0
                  CONTENTS
  4 .ARM          00000008  0800c090  0800c090  0001c090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c098  0800c098  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c098  0800c098  0001c098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c09c  0800c09c  0001c09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800c0a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c3c  20000230  0800c2d0  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e6c  0800c2d0  00021e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c201  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b3e  00000000  00000000  0003c461  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001480  00000000  00000000  0003ffa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e8  00000000  00000000  00041420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a157  00000000  00000000  00042708  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013406  00000000  00000000  0005c85f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008eb8e  00000000  00000000  0006fc65  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe7f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005958  00000000  00000000  000fe870  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000230 	.word	0x20000230
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb14 	.word	0x0800bb14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000234 	.word	0x20000234
 80001dc:	0800bb14 	.word	0x0800bb14

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <sendReset>:

#include "stm32f4xx_hal.h"

// Based on devararendy library on mbed.com

void sendReset() {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d76:	4802      	ldr	r0, [pc, #8]	; (8000d80 <sendReset+0x14>)
 8000d78:	f002 fd6a 	bl	8003850 <HAL_GPIO_WritePin>
	//wait_us(60);
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40020000 	.word	0x40020000

08000d84 <send0>:

void send0() {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8e:	4823      	ldr	r0, [pc, #140]	; (8000e1c <send0+0x98>)
 8000d90:	f002 fd5e 	bl	8003850 <HAL_GPIO_WritePin>

//--------------hitung manual
	asm("nop");
 8000d94:	bf00      	nop
	asm("nop");
 8000d96:	bf00      	nop
	asm("nop");
 8000d98:	bf00      	nop
	asm("nop");
 8000d9a:	bf00      	nop
	asm("nop");
 8000d9c:	bf00      	nop
	asm("nop");
 8000d9e:	bf00      	nop
	asm("nop");
 8000da0:	bf00      	nop
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da8:	481c      	ldr	r0, [pc, #112]	; (8000e1c <send0+0x98>)
 8000daa:	f002 fd51 	bl	8003850 <HAL_GPIO_WritePin>

//-----------------hitung manual
	asm("nop");
 8000dae:	bf00      	nop
	asm("nop");
 8000db0:	bf00      	nop
	asm("nop");
 8000db2:	bf00      	nop
	asm("nop");
 8000db4:	bf00      	nop
	asm("nop");
 8000db6:	bf00      	nop

	asm("nop");
 8000db8:	bf00      	nop
	asm("nop");
 8000dba:	bf00      	nop
	asm("nop");
 8000dbc:	bf00      	nop
	asm("nop");
 8000dbe:	bf00      	nop
	asm("nop");
 8000dc0:	bf00      	nop

	asm("nop");
 8000dc2:	bf00      	nop
	asm("nop");
 8000dc4:	bf00      	nop
	asm("nop");
 8000dc6:	bf00      	nop
	asm("nop");
 8000dc8:	bf00      	nop
	asm("nop");
 8000dca:	bf00      	nop

	asm("nop");
 8000dcc:	bf00      	nop
	asm("nop");
 8000dce:	bf00      	nop
	asm("nop");
 8000dd0:	bf00      	nop
	asm("nop");
 8000dd2:	bf00      	nop
	asm("nop");
 8000dd4:	bf00      	nop

	asm("nop");
 8000dd6:	bf00      	nop
	asm("nop");
 8000dd8:	bf00      	nop
	asm("nop");
 8000dda:	bf00      	nop
	asm("nop");
 8000ddc:	bf00      	nop
	asm("nop");
 8000dde:	bf00      	nop

	asm("nop");
 8000de0:	bf00      	nop
	asm("nop");
 8000de2:	bf00      	nop
	asm("nop");
 8000de4:	bf00      	nop
	asm("nop");
 8000de6:	bf00      	nop
	asm("nop");
 8000de8:	bf00      	nop

	asm("nop");
 8000dea:	bf00      	nop
	asm("nop");
 8000dec:	bf00      	nop
	asm("nop");
 8000dee:	bf00      	nop
	asm("nop");
 8000df0:	bf00      	nop
	asm("nop");
 8000df2:	bf00      	nop

	asm("nop");
 8000df4:	bf00      	nop
	asm("nop");
 8000df6:	bf00      	nop
	asm("nop");
 8000df8:	bf00      	nop
	asm("nop");
 8000dfa:	bf00      	nop
	asm("nop");
 8000dfc:	bf00      	nop
	asm("nop");
 8000dfe:	bf00      	nop
	asm("nop");
 8000e00:	bf00      	nop
	asm("nop");
 8000e02:	bf00      	nop
	asm("nop");
 8000e04:	bf00      	nop
	asm("nop");
 8000e06:	bf00      	nop

	asm("nop");
 8000e08:	bf00      	nop
	asm("nop");
 8000e0a:	bf00      	nop
	asm("nop");
 8000e0c:	bf00      	nop
	asm("nop");
 8000e0e:	bf00      	nop
	asm("nop");
 8000e10:	bf00      	nop

	asm("nop");
 8000e12:	bf00      	nop
	asm("nop");
 8000e14:	bf00      	nop
	asm("nop");
 8000e16:	bf00      	nop
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40020000 	.word	0x40020000

08000e20 <send1>:
void send1() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e2a:	482b      	ldr	r0, [pc, #172]	; (8000ed8 <send1+0xb8>)
 8000e2c:	f002 fd10 	bl	8003850 <HAL_GPIO_WritePin>

	//-----------------------------------
	asm("nop");
 8000e30:	bf00      	nop
	asm("nop");
 8000e32:	bf00      	nop
	asm("nop");
 8000e34:	bf00      	nop
	asm("nop");
 8000e36:	bf00      	nop
	asm("nop");
 8000e38:	bf00      	nop

	asm("nop");
 8000e3a:	bf00      	nop
	asm("nop");
 8000e3c:	bf00      	nop
	asm("nop");
 8000e3e:	bf00      	nop
	asm("nop");
 8000e40:	bf00      	nop
	asm("nop");
 8000e42:	bf00      	nop

	asm("nop");
 8000e44:	bf00      	nop
	asm("nop");
 8000e46:	bf00      	nop
	asm("nop");
 8000e48:	bf00      	nop
	asm("nop");
 8000e4a:	bf00      	nop
	asm("nop");
 8000e4c:	bf00      	nop

	asm("nop");
 8000e4e:	bf00      	nop
	asm("nop");
 8000e50:	bf00      	nop
	asm("nop");
 8000e52:	bf00      	nop
	asm("nop");
 8000e54:	bf00      	nop
	asm("nop");
 8000e56:	bf00      	nop

	asm("nop");
 8000e58:	bf00      	nop
	asm("nop");
 8000e5a:	bf00      	nop
	asm("nop");
 8000e5c:	bf00      	nop
	asm("nop");
 8000e5e:	bf00      	nop
	asm("nop");
 8000e60:	bf00      	nop

	asm("nop");
 8000e62:	bf00      	nop
	asm("nop");
 8000e64:	bf00      	nop
	asm("nop");
 8000e66:	bf00      	nop
	asm("nop");
 8000e68:	bf00      	nop
	asm("nop");
 8000e6a:	bf00      	nop

	asm("nop");
 8000e6c:	bf00      	nop
	asm("nop");
 8000e6e:	bf00      	nop
	asm("nop");
 8000e70:	bf00      	nop
	asm("nop");
 8000e72:	bf00      	nop
	asm("nop");
 8000e74:	bf00      	nop

	asm("nop");
 8000e76:	bf00      	nop
	asm("nop");
 8000e78:	bf00      	nop
	asm("nop");
 8000e7a:	bf00      	nop
	asm("nop");
 8000e7c:	bf00      	nop
	asm("nop");
 8000e7e:	bf00      	nop

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e86:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <send1+0xb8>)
 8000e88:	f002 fce2 	bl	8003850 <HAL_GPIO_WritePin>
	//-----------------hitung manual
	asm("nop");
 8000e8c:	bf00      	nop
	asm("nop");
 8000e8e:	bf00      	nop
	asm("nop");
 8000e90:	bf00      	nop
	asm("nop");
 8000e92:	bf00      	nop
	asm("nop");
 8000e94:	bf00      	nop

	asm("nop");
 8000e96:	bf00      	nop
	asm("nop");
 8000e98:	bf00      	nop
	asm("nop");
 8000e9a:	bf00      	nop
	asm("nop");
 8000e9c:	bf00      	nop
	asm("nop");
 8000e9e:	bf00      	nop

	asm("nop");
 8000ea0:	bf00      	nop
	asm("nop");
 8000ea2:	bf00      	nop
	asm("nop");
 8000ea4:	bf00      	nop
	asm("nop");
 8000ea6:	bf00      	nop
	asm("nop");
 8000ea8:	bf00      	nop

	asm("nop");
 8000eaa:	bf00      	nop
	asm("nop");
 8000eac:	bf00      	nop
	asm("nop");
 8000eae:	bf00      	nop
	asm("nop");
 8000eb0:	bf00      	nop
	asm("nop");
 8000eb2:	bf00      	nop

	asm("nop");
 8000eb4:	bf00      	nop
	asm("nop");
 8000eb6:	bf00      	nop
	asm("nop");
 8000eb8:	bf00      	nop
	asm("nop");
 8000eba:	bf00      	nop
	asm("nop");
 8000ebc:	bf00      	nop

	asm("nop");
 8000ebe:	bf00      	nop
	asm("nop");
 8000ec0:	bf00      	nop
	asm("nop");
 8000ec2:	bf00      	nop
	asm("nop");
 8000ec4:	bf00      	nop
	asm("nop");
 8000ec6:	bf00      	nop

	asm("nop");
 8000ec8:	bf00      	nop
	asm("nop");
 8000eca:	bf00      	nop
	asm("nop");
 8000ecc:	bf00      	nop
	asm("nop");
 8000ece:	bf00      	nop
	asm("nop");
 8000ed0:	bf00      	nop
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40020000 	.word	0x40020000

08000edc <writeByte>:

void writeByte(uint8_t data) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	for (int x = 7; x >= 0; x--) {
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	e00f      	b.n	8000f0c <writeByte+0x30>
		if (data & (1 << x)) {
 8000eec:	79fa      	ldrb	r2, [r7, #7]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	fa42 f303 	asr.w	r3, r2, r3
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <writeByte+0x26>
			//bit is high
			send1();
 8000efc:	f7ff ff90 	bl	8000e20 <send1>
 8000f00:	e001      	b.n	8000f06 <writeByte+0x2a>
		} else {
			//bit is low
			send0();
 8000f02:	f7ff ff3f 	bl	8000d84 <send0>
	for (int x = 7; x >= 0; x--) {
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	daec      	bge.n	8000eec <writeByte+0x10>
		}
	}
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <writeColor>:

void writeColor(uint32_t RGB) {
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	writeByte((RGB & 0xFF00) >> 8); //green
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ffd7 	bl	8000edc <writeByte>
	writeByte((RGB & 0xFF0000) >> 16); //red
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	0c1b      	lsrs	r3, r3, #16
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ffd1 	bl	8000edc <writeByte>
	writeByte(RGB & 0xFF); //blue
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ffcc 	bl	8000edc <writeByte>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <sendColors>:

void send1Color(uint32_t RGB) {
	writeColor(RGB);
	sendReset();
}
void sendColors(uint32_t * const colorBuffer, size_t len) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
	for (int x = 0; x < len; x++) {
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	e00a      	b.n	8000f72 <sendColors+0x26>
		writeColor(colorBuffer[x]);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ffd7 	bl	8000f1a <writeColor>
	for (int x = 0; x < len; x++) {
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d8f0      	bhi.n	8000f5c <sendColors+0x10>
	}
	sendReset();
 8000f7a:	f7ff fef7 	bl	8000d6c <sendReset>
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <enableSensor>:
struct {
	uint16_t dev;
	uint8_t valid;
} sensors[16];

int enableSensor(int i) {
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b0c4      	sub	sp, #272	; 0x110
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	6018      	str	r0, [r3, #0]

	uint16_t dev = 0x29 << 1;
 8000f92:	2352      	movs	r3, #82	; 0x52
 8000f94:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	if (i >= 8) {
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	dd05      	ble.n	8000fac <enableSensor+0x24>
		dev |= 0x100; //if 9th bit is 0 it will use I2C1,if 1 will use i2c2
 8000fa0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	}
	
	VL53L1X_Error err;
	uint8_t is_booted = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
	do{
		err = VL53L1X_BootState(dev, &is_booted);
 8000fb2:	f107 02fe 	add.w	r2, r7, #254	; 0xfe
 8000fb6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 fde3 	bl	8002b88 <VL53L1X_BootState>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
		HAL_Delay(2);
 8000fc8:	2002      	movs	r0, #2
 8000fca:	f002 f815 	bl	8002ff8 <HAL_Delay>
	}while(!is_booted && err == VL53L1_ERROR_NONE);
 8000fce:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d103      	bne.n	8000fde <enableSensor+0x56>
 8000fd6:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0e9      	beq.n	8000fb2 <enableSensor+0x2a>
	
	if (err != VL53L1_ERROR_NONE) {
 8000fde:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d031      	beq.n	800104a <enableSensor+0xc2>
		uint8_t msg[] = "VL53L1X_BootState failed    \n";
 8000fe6:	4bb8      	ldr	r3, [pc, #736]	; (80012c8 <enableSensor+0x340>)
 8000fe8:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8000fec:	461d      	mov	r5, r3
 8000fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ff6:	c407      	stmia	r4!, {r0, r1, r2}
 8000ff8:	8023      	strh	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 8000ffa:	231d      	movs	r3, #29
 8000ffc:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
		msg[len - 1 - 1] = i + '0';
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800100a:	3b02      	subs	r3, #2
 800100c:	3230      	adds	r2, #48	; 0x30
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001014:	440b      	add	r3, r1
 8001016:	f803 2c30 	strb.w	r2, [r3, #-48]
		msg[len - 3 - 1] = err + '0';
 800101a:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800101e:	3b04      	subs	r3, #4
 8001020:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8001024:	3230      	adds	r2, #48	; 0x30
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800102c:	440b      	add	r3, r1
 800102e:	f803 2c30 	strb.w	r2, [r3, #-48]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8001032:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8001036:	b29a      	uxth	r2, r3
 8001038:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800103c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001040:	48a2      	ldr	r0, [pc, #648]	; (80012cc <enableSensor+0x344>)
 8001042:	f005 fe7b 	bl	8006d3c <HAL_UART_Transmit>
		return 1;
 8001046:	2301      	movs	r3, #1
 8001048:	e2a8      	b.n	800159c <enableSensor+0x614>
	} else {
		uint8_t msg[] = "VL53L1X_BootState OK  \n";
 800104a:	4ba1      	ldr	r3, [pc, #644]	; (80012d0 <enableSensor+0x348>)
 800104c:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8001050:	461d      	mov	r5, r3
 8001052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001056:	e895 0003 	ldmia.w	r5, {r0, r1}
 800105a:	e884 0003 	stmia.w	r4, {r0, r1}
		uint8_t len = sizeof(msg) - 1;
 800105e:	2317      	movs	r3, #23
 8001060:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
		msg[len - 1 - 1] = i + '0';
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800106e:	3b02      	subs	r3, #2
 8001070:	3230      	adds	r2, #48	; 0x30
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001078:	440b      	add	r3, r1
 800107a:	f803 2c48 	strb.w	r2, [r3, #-72]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 800107e:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8001082:	b29a      	uxth	r2, r3
 8001084:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001088:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800108c:	488f      	ldr	r0, [pc, #572]	; (80012cc <enableSensor+0x344>)
 800108e:	f005 fe55 	bl	8006d3c <HAL_UART_Transmit>
	}
	
	/* Sensor Initialization */
	err = VL53L1X_SensorInit(dev);
 8001092:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fa1a 	bl	80024d0 <VL53L1X_SensorInit>
 800109c:	4603      	mov	r3, r0
 800109e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	if (err != VL53L1_ERROR_NONE) {
 80010a2:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d034      	beq.n	8001114 <enableSensor+0x18c>
		uint8_t msg[] = "VL53L1X_SensorInit failed    \n";
 80010aa:	4b8a      	ldr	r3, [pc, #552]	; (80012d4 <enableSensor+0x34c>)
 80010ac:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80010b0:	461d      	mov	r5, r3
 80010b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010ba:	c407      	stmia	r4!, {r0, r1, r2}
 80010bc:	8023      	strh	r3, [r4, #0]
 80010be:	3402      	adds	r4, #2
 80010c0:	0c1b      	lsrs	r3, r3, #16
 80010c2:	7023      	strb	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 80010c4:	231e      	movs	r3, #30
 80010c6:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		msg[len - 1 - 1] = i + '0';
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 80010d4:	3b02      	subs	r3, #2
 80010d6:	3230      	adds	r2, #48	; 0x30
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80010de:	440b      	add	r3, r1
 80010e0:	f803 2c68 	strb.w	r2, [r3, #-104]
		msg[len - 3 - 1] = err + '0';
 80010e4:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 80010e8:	3b04      	subs	r3, #4
 80010ea:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80010ee:	3230      	adds	r2, #48	; 0x30
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80010f6:	440b      	add	r3, r1
 80010f8:	f803 2c68 	strb.w	r2, [r3, #-104]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80010fc:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8001100:	b29a      	uxth	r2, r3
 8001102:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001106:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800110a:	4870      	ldr	r0, [pc, #448]	; (80012cc <enableSensor+0x344>)
 800110c:	f005 fe16 	bl	8006d3c <HAL_UART_Transmit>
		return 3;
 8001110:	2303      	movs	r3, #3
 8001112:	e243      	b.n	800159c <enableSensor+0x614>
	} else {
		uint8_t msg[] = "VL53L1X_SensorInit OK  \n";
 8001114:	4b70      	ldr	r3, [pc, #448]	; (80012d8 <enableSensor+0x350>)
 8001116:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800111a:	461d      	mov	r5, r3
 800111c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001120:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001124:	c403      	stmia	r4!, {r0, r1}
 8001126:	7022      	strb	r2, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 8001128:	2318      	movs	r3, #24
 800112a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		msg[len - 1 - 1] = i + '0';
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8001138:	3b02      	subs	r3, #2
 800113a:	3230      	adds	r2, #48	; 0x30
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001142:	440b      	add	r3, r1
 8001144:	f803 2c84 	strb.w	r2, [r3, #-132]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8001148:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800114c:	b29a      	uxth	r2, r3
 800114e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001156:	485d      	ldr	r0, [pc, #372]	; (80012cc <enableSensor+0x344>)
 8001158:	f005 fdf0 	bl	8006d3c <HAL_UART_Transmit>
	}
	
	/* Modify the default configuration */
	err = VL53L1X_SetI2CAddress(dev, (0x29 + i + 1) << 1);
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	332a      	adds	r3, #42	; 0x2a
 8001164:	b2db      	uxtb	r3, r3
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f001 f992 	bl	800249a <VL53L1X_SetI2CAddress>
 8001176:	4603      	mov	r3, r0
 8001178:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	dev = (0x29 + i + 1) << 1;
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	b29b      	uxth	r3, r3
 8001182:	332a      	adds	r3, #42	; 0x2a
 8001184:	b29b      	uxth	r3, r3
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	if (i >= 8) {
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b07      	cmp	r3, #7
 8001192:	dd05      	ble.n	80011a0 <enableSensor+0x218>
		dev |= 0x100; //if 9th bit is 0 it will use I2C1,if 1 will use i2c2
 8001194:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	}
	if (err != VL53L1_ERROR_NONE) {
 80011a0:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d02e      	beq.n	8001206 <enableSensor+0x27e>
		uint8_t msg[] = "VL53L1X_SetI2CAddress failed    \n";
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4a4b      	ldr	r2, [pc, #300]	; (80012dc <enableSensor+0x354>)
 80011ae:	461c      	mov	r4, r3
 80011b0:	4615      	mov	r5, r2
 80011b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ba:	682b      	ldr	r3, [r5, #0]
 80011bc:	8023      	strh	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 80011be:	2321      	movs	r3, #33	; 0x21
 80011c0:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		msg[len - 1 - 1] = i + '0';
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80011ce:	3b02      	subs	r3, #2
 80011d0:	3230      	adds	r2, #48	; 0x30
 80011d2:	b2d1      	uxtb	r1, r2
 80011d4:	f107 0208 	add.w	r2, r7, #8
 80011d8:	54d1      	strb	r1, [r2, r3]
		msg[len - 3 - 1] = err + '0';
 80011da:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80011de:	3b04      	subs	r3, #4
 80011e0:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80011e4:	3230      	adds	r2, #48	; 0x30
 80011e6:	b2d1      	uxtb	r1, r2
 80011e8:	f107 0208 	add.w	r2, r7, #8
 80011ec:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80011ee:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f107 0108 	add.w	r1, r7, #8
 80011f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fc:	4833      	ldr	r0, [pc, #204]	; (80012cc <enableSensor+0x344>)
 80011fe:	f005 fd9d 	bl	8006d3c <HAL_UART_Transmit>
		return 2;
 8001202:	2302      	movs	r3, #2
 8001204:	e1ca      	b.n	800159c <enableSensor+0x614>
	} else {
		uint8_t msg[] = "VL53L1X_SetI2CAddress OK  \n";
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <enableSensor+0x358>)
 8001208:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800120c:	461d      	mov	r5, r3
 800120e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001212:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001216:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		uint8_t len = sizeof(msg) - 1;
 800121a:	231b      	movs	r3, #27
 800121c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
		msg[len - 1 - 1] = i + '0';
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800122a:	3b02      	subs	r3, #2
 800122c:	3230      	adds	r2, #48	; 0x30
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001234:	440b      	add	r3, r1
 8001236:	f803 2ca0 	strb.w	r2, [r3, #-160]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 800123a:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800123e:	b29a      	uxth	r2, r3
 8001240:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001248:	4820      	ldr	r0, [pc, #128]	; (80012cc <enableSensor+0x344>)
 800124a:	f005 fd77 	bl	8006d3c <HAL_UART_Transmit>
	}
	
	err = VL53L1X_SetDistanceMode(dev, 2); // 2 = VL53L1X_DISTANCEMODE_LONG
 800124e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001252:	2102      	movs	r1, #2
 8001254:	4618      	mov	r0, r3
 8001256:	f001 fb9c 	bl	8002992 <VL53L1X_SetDistanceMode>
 800125a:	4603      	mov	r3, r0
 800125c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	if (err != VL53L1_ERROR_NONE) {
 8001260:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001264:	2b00      	cmp	r3, #0
 8001266:	d03f      	beq.n	80012e8 <enableSensor+0x360>
		uint8_t msg[] = "VL53L1X_SetDistanceMode failed    \n";
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <enableSensor+0x35c>)
 800126e:	461c      	mov	r4, r3
 8001270:	4615      	mov	r5, r2
 8001272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800127a:	682b      	ldr	r3, [r5, #0]
 800127c:	6023      	str	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 800127e:	2323      	movs	r3, #35	; 0x23
 8001280:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		msg[len - 1 - 1] = i + '0';
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800128e:	3b02      	subs	r3, #2
 8001290:	3230      	adds	r2, #48	; 0x30
 8001292:	b2d1      	uxtb	r1, r2
 8001294:	f107 0208 	add.w	r2, r7, #8
 8001298:	54d1      	strb	r1, [r2, r3]
		msg[len - 3 - 1] = err + '0';
 800129a:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800129e:	3b04      	subs	r3, #4
 80012a0:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 80012a4:	3230      	adds	r2, #48	; 0x30
 80012a6:	b2d1      	uxtb	r1, r2
 80012a8:	f107 0208 	add.w	r2, r7, #8
 80012ac:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80012ae:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	f107 0108 	add.w	r1, r7, #8
 80012b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <enableSensor+0x344>)
 80012be:	f005 fd3d 	bl	8006d3c <HAL_UART_Transmit>
		return 5;
 80012c2:	2305      	movs	r3, #5
 80012c4:	e16a      	b.n	800159c <enableSensor+0x614>
 80012c6:	bf00      	nop
 80012c8:	0800bb2c 	.word	0x0800bb2c
 80012cc:	200003cc 	.word	0x200003cc
 80012d0:	0800bb4c 	.word	0x0800bb4c
 80012d4:	0800bb64 	.word	0x0800bb64
 80012d8:	0800bb84 	.word	0x0800bb84
 80012dc:	0800bba0 	.word	0x0800bba0
 80012e0:	0800bbc4 	.word	0x0800bbc4
 80012e4:	0800bbe0 	.word	0x0800bbe0
	} else {
		uint8_t msg[] = "VL53L1X_SetDistanceMode OK  \n";
 80012e8:	4baf      	ldr	r3, [pc, #700]	; (80015a8 <enableSensor+0x620>)
 80012ea:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80012ee:	461d      	mov	r5, r3
 80012f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012f8:	c407      	stmia	r4!, {r0, r1, r2}
 80012fa:	8023      	strh	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 80012fc:	231d      	movs	r3, #29
 80012fe:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
		msg[len - 1 - 1] = i + '0';
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 800130c:	3b02      	subs	r3, #2
 800130e:	3230      	adds	r2, #48	; 0x30
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001316:	440b      	add	r3, r1
 8001318:	f803 2cc0 	strb.w	r2, [r3, #-192]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 800131c:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8001320:	b29a      	uxth	r2, r3
 8001322:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800132a:	48a0      	ldr	r0, [pc, #640]	; (80015ac <enableSensor+0x624>)
 800132c:	f005 fd06 	bl	8006d3c <HAL_UART_Transmit>
	}

	err = VL53L1X_SetTimingBudgetInMs(dev, 20);
 8001330:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001334:	2114      	movs	r1, #20
 8001336:	4618      	mov	r0, r3
 8001338:	f001 f9b9 	bl	80026ae <VL53L1X_SetTimingBudgetInMs>
 800133c:	4603      	mov	r3, r0
 800133e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	if (err != VL53L1_ERROR_NONE) {
 8001342:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001346:	2b00      	cmp	r3, #0
 8001348:	d030      	beq.n	80013ac <enableSensor+0x424>
		uint8_t msg[] =
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4a98      	ldr	r2, [pc, #608]	; (80015b0 <enableSensor+0x628>)
 8001350:	461c      	mov	r4, r3
 8001352:	4615      	mov	r5, r2
 8001354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001360:	e884 0003 	stmia.w	r4, {r0, r1}
				"VL53L1X_SetTimingBudgetInMs failed    \n";
		uint8_t len = sizeof(msg) - 1;
 8001364:	2327      	movs	r3, #39	; 0x27
 8001366:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		msg[len - 1 - 1] = i + '0';
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8001374:	3b02      	subs	r3, #2
 8001376:	3230      	adds	r2, #48	; 0x30
 8001378:	b2d1      	uxtb	r1, r2
 800137a:	f107 0208 	add.w	r2, r7, #8
 800137e:	54d1      	strb	r1, [r2, r3]
		msg[len - 3 - 1] = err + '0';
 8001380:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8001384:	3b04      	subs	r3, #4
 8001386:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800138a:	3230      	adds	r2, #48	; 0x30
 800138c:	b2d1      	uxtb	r1, r2
 800138e:	f107 0208 	add.w	r2, r7, #8
 8001392:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8001394:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8001398:	b29a      	uxth	r2, r3
 800139a:	f107 0108 	add.w	r1, r7, #8
 800139e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a2:	4882      	ldr	r0, [pc, #520]	; (80015ac <enableSensor+0x624>)
 80013a4:	f005 fcca 	bl	8006d3c <HAL_UART_Transmit>
		return 6;
 80013a8:	2306      	movs	r3, #6
 80013aa:	e0f7      	b.n	800159c <enableSensor+0x614>
	} else {
		uint8_t msg[] = "VL53L1X_SetTimingBudgetInMs OK  \n";
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4a80      	ldr	r2, [pc, #512]	; (80015b4 <enableSensor+0x62c>)
 80013b2:	461c      	mov	r4, r3
 80013b4:	4615      	mov	r5, r2
 80013b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013be:	682b      	ldr	r3, [r5, #0]
 80013c0:	8023      	strh	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 80013c2:	2321      	movs	r3, #33	; 0x21
 80013c4:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
		msg[len - 1 - 1] = i + '0';
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 80013d2:	3b02      	subs	r3, #2
 80013d4:	3230      	adds	r2, #48	; 0x30
 80013d6:	b2d1      	uxtb	r1, r2
 80013d8:	f107 0208 	add.w	r2, r7, #8
 80013dc:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80013de:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f107 0108 	add.w	r1, r7, #8
 80013e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ec:	486f      	ldr	r0, [pc, #444]	; (80015ac <enableSensor+0x624>)
 80013ee:	f005 fca5 	bl	8006d3c <HAL_UART_Transmit>
	}

	err = VL53L1X_SetInterMeasurementInMs(dev, 25);
 80013f2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80013f6:	2119      	movs	r1, #25
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 fb89 	bl	8002b10 <VL53L1X_SetInterMeasurementInMs>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	if (err != VL53L1_ERROR_NONE) {
 8001404:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001408:	2b00      	cmp	r3, #0
 800140a:	d030      	beq.n	800146e <enableSensor+0x4e6>
		uint8_t msg[] =
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	4a69      	ldr	r2, [pc, #420]	; (80015b8 <enableSensor+0x630>)
 8001412:	461c      	mov	r4, r3
 8001414:	4615      	mov	r5, r2
 8001416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001422:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				"VL53L1X_SetInterMeasurementInMs failed    \n";
		uint8_t len = sizeof(msg) - 1;
 8001426:	232b      	movs	r3, #43	; 0x2b
 8001428:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		msg[len - 1 - 1] = i + '0';
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8001436:	3b02      	subs	r3, #2
 8001438:	3230      	adds	r2, #48	; 0x30
 800143a:	b2d1      	uxtb	r1, r2
 800143c:	f107 0208 	add.w	r2, r7, #8
 8001440:	54d1      	strb	r1, [r2, r3]
		msg[len - 3 - 1] = err + '0';
 8001442:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8001446:	3b04      	subs	r3, #4
 8001448:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800144c:	3230      	adds	r2, #48	; 0x30
 800144e:	b2d1      	uxtb	r1, r2
 8001450:	f107 0208 	add.w	r2, r7, #8
 8001454:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8001456:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 800145a:	b29a      	uxth	r2, r3
 800145c:	f107 0108 	add.w	r1, r7, #8
 8001460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001464:	4851      	ldr	r0, [pc, #324]	; (80015ac <enableSensor+0x624>)
 8001466:	f005 fc69 	bl	8006d3c <HAL_UART_Transmit>
		return 7;
 800146a:	2307      	movs	r3, #7
 800146c:	e096      	b.n	800159c <enableSensor+0x614>
	} else {
		uint8_t msg[] = "VL53L1X_SetInterMeasurementInMs OK  \n";
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	4a52      	ldr	r2, [pc, #328]	; (80015bc <enableSensor+0x634>)
 8001474:	461c      	mov	r4, r3
 8001476:	4615      	mov	r5, r2
 8001478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800147a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800147c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800147e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001480:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001484:	6020      	str	r0, [r4, #0]
 8001486:	3404      	adds	r4, #4
 8001488:	8021      	strh	r1, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 800148a:	2325      	movs	r3, #37	; 0x25
 800148c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		msg[len - 1 - 1] = i + '0';
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800149a:	3b02      	subs	r3, #2
 800149c:	3230      	adds	r2, #48	; 0x30
 800149e:	b2d1      	uxtb	r1, r2
 80014a0:	f107 0208 	add.w	r2, r7, #8
 80014a4:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80014a6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	f107 0108 	add.w	r1, r7, #8
 80014b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b4:	483d      	ldr	r0, [pc, #244]	; (80015ac <enableSensor+0x624>)
 80014b6:	f005 fc41 	bl	8006d3c <HAL_UART_Transmit>
	}

	err = VL53L1X_StartRanging(dev);
 80014ba:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 f89a 	bl	80025f8 <VL53L1X_StartRanging>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	if (err != VL53L1_ERROR_NONE) {
 80014ca:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d02e      	beq.n	8001530 <enableSensor+0x5a8>
		uint8_t msg[] = "VL53L1X_StartRanging failed    \n";
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	4a3a      	ldr	r2, [pc, #232]	; (80015c0 <enableSensor+0x638>)
 80014d8:	461c      	mov	r4, r3
 80014da:	4615      	mov	r5, r2
 80014dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	7023      	strb	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 80014e8:	2320      	movs	r3, #32
 80014ea:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		msg[len - 1 - 1] = i + '0';
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80014f8:	3b02      	subs	r3, #2
 80014fa:	3230      	adds	r2, #48	; 0x30
 80014fc:	b2d1      	uxtb	r1, r2
 80014fe:	f107 0208 	add.w	r2, r7, #8
 8001502:	54d1      	strb	r1, [r2, r3]
		msg[len - 3 - 1] = err + '0';
 8001504:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8001508:	3b04      	subs	r3, #4
 800150a:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800150e:	3230      	adds	r2, #48	; 0x30
 8001510:	b2d1      	uxtb	r1, r2
 8001512:	f107 0208 	add.w	r2, r7, #8
 8001516:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8001518:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800151c:	b29a      	uxth	r2, r3
 800151e:	f107 0108 	add.w	r1, r7, #8
 8001522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001526:	4821      	ldr	r0, [pc, #132]	; (80015ac <enableSensor+0x624>)
 8001528:	f005 fc08 	bl	8006d3c <HAL_UART_Transmit>
		return 8;
 800152c:	2308      	movs	r3, #8
 800152e:	e035      	b.n	800159c <enableSensor+0x614>
	} else {
		uint8_t msg[] = "VL53L1X_StartRanging OK  \n";
 8001530:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <enableSensor+0x63c>)
 8001532:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001536:	461d      	mov	r5, r3
 8001538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800153a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800153c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001540:	c403      	stmia	r4!, {r0, r1}
 8001542:	8022      	strh	r2, [r4, #0]
 8001544:	3402      	adds	r4, #2
 8001546:	0c13      	lsrs	r3, r2, #16
 8001548:	7023      	strb	r3, [r4, #0]
		uint8_t len = sizeof(msg) - 1;
 800154a:	231a      	movs	r3, #26
 800154c:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		msg[len - 1 - 1] = i + '0';
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800155a:	3b02      	subs	r3, #2
 800155c:	3230      	adds	r2, #48	; 0x30
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001564:	440b      	add	r3, r1
 8001566:	f803 2cdc 	strb.w	r2, [r3, #-220]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 800156a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800156e:	b29a      	uxth	r2, r3
 8001570:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <enableSensor+0x624>)
 800157a:	f005 fbdf 	bl	8006d3c <HAL_UART_Transmit>
	}
	
	sensors[i].dev = dev;
 800157e:	4912      	ldr	r1, [pc, #72]	; (80015c8 <enableSensor+0x640>)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8001588:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
	sensors[i].valid = 1;
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <enableSensor+0x640>)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	2201      	movs	r2, #1
 8001598:	709a      	strb	r2, [r3, #2]
	
	return 0;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bdb0      	pop	{r4, r5, r7, pc}
 80015a6:	bf00      	nop
 80015a8:	0800bc04 	.word	0x0800bc04
 80015ac:	200003cc 	.word	0x200003cc
 80015b0:	0800bc24 	.word	0x0800bc24
 80015b4:	0800bc4c 	.word	0x0800bc4c
 80015b8:	0800bc70 	.word	0x0800bc70
 80015bc:	0800bc9c 	.word	0x0800bc9c
 80015c0:	0800bcc4 	.word	0x0800bcc4
 80015c4:	0800bce8 	.word	0x0800bce8
 80015c8:	2000044c 	.word	0x2000044c

080015cc <scan>:

void scan(I2C_HandleTypeDef *hi2c) {
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b09d      	sub	sp, #116	; 0x74
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	for (int i = 1; i < 128; i++) {
 80015d4:	2301      	movs	r3, #1
 80015d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015d8:	e033      	b.n	8001642 <scan+0x76>
		 * &hi2c1 is the handle
		 * (uint16_t)(i<<1) is the i2c address left aligned
		 * retries 2
		 * timeout 2
		 */
		HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(hi2c, (i << 1), 2, 2);
 80015da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015dc:	b29b      	uxth	r3, r3
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	b299      	uxth	r1, r3
 80015e2:	2302      	movs	r3, #2
 80015e4:	2202      	movs	r2, #2
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f002 fe48 	bl	800427c <HAL_I2C_IsDeviceReady>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80015f2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <scan+0x3c>
				{
			HAL_UART_Transmit(&huart1, (uint8_t*)".", 1, 0xFFFF);
 80015fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015fe:	2201      	movs	r2, #1
 8001600:	491d      	ldr	r1, [pc, #116]	; (8001678 <scan+0xac>)
 8001602:	481e      	ldr	r0, [pc, #120]	; (800167c <scan+0xb0>)
 8001604:	f005 fb9a 	bl	8006d3c <HAL_UART_Transmit>
		}
		if (result == HAL_OK) {
 8001608:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800160c:	2b00      	cmp	r3, #0
 800160e:	d115      	bne.n	800163c <scan+0x70>
			char buff[80];
			sprintf(buff, "0x%X\n", i << 1);
 8001610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001612:	005a      	lsls	r2, r3, #1
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4919      	ldr	r1, [pc, #100]	; (8001680 <scan+0xb4>)
 800161a:	4618      	mov	r0, r3
 800161c:	f009 ff36 	bl	800b48c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), 0xFFFF);
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe fddb 	bl	80001e0 <strlen>
 800162a:	4603      	mov	r3, r0
 800162c:	b29a      	uxth	r2, r3
 800162e:	f107 010c 	add.w	r1, r7, #12
 8001632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001636:	4811      	ldr	r0, [pc, #68]	; (800167c <scan+0xb0>)
 8001638:	f005 fb80 	bl	8006d3c <HAL_UART_Transmit>
	for (int i = 1; i < 128; i++) {
 800163c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800163e:	3301      	adds	r3, #1
 8001640:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001644:	2b7f      	cmp	r3, #127	; 0x7f
 8001646:	ddc8      	ble.n	80015da <scan+0xe>
		}
	}
	char buff[] = "\nSCAN FINISH\n";
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <scan+0xb8>)
 800164a:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800164e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001650:	c407      	stmia	r4!, {r0, r1, r2}
 8001652:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), 0xFFFF);
 8001654:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe fdc1 	bl	80001e0 <strlen>
 800165e:	4603      	mov	r3, r0
 8001660:	b29a      	uxth	r2, r3
 8001662:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800166a:	4804      	ldr	r0, [pc, #16]	; (800167c <scan+0xb0>)
 800166c:	f005 fb66 	bl	8006d3c <HAL_UART_Transmit>
}
 8001670:	bf00      	nop
 8001672:	3774      	adds	r7, #116	; 0x74
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	0800bd04 	.word	0x0800bd04
 800167c:	200003cc 	.word	0x200003cc
 8001680:	0800bd08 	.word	0x0800bd08
 8001684:	0800bd10 	.word	0x0800bd10

08001688 <updateLed>:

uint32_t ledColor[4];

void updateLed() {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	static int lastGreen = 0;
	static uint8_t first = 1;
	static uint32_t last = 0;
	if (!first) {
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <updateLed+0x78>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d111      	bne.n	80016b8 <updateLed+0x30>
		// set back previus led
		if (lastGreen == 0) {
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <updateLed+0x7c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d104      	bne.n	80016a6 <updateLed+0x1e>
			ledColor[3] = last;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <updateLed+0x80>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1a      	ldr	r2, [pc, #104]	; (800170c <updateLed+0x84>)
 80016a2:	60d3      	str	r3, [r2, #12]
 80016a4:	e00b      	b.n	80016be <updateLed+0x36>
		} else {
			ledColor[lastGreen - 1] = last;
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <updateLed+0x7c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	4a16      	ldr	r2, [pc, #88]	; (8001708 <updateLed+0x80>)
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	4916      	ldr	r1, [pc, #88]	; (800170c <updateLed+0x84>)
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80016b6:	e002      	b.n	80016be <updateLed+0x36>
		}
	} else {
		first = 0;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <updateLed+0x78>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
	}
	//set current to blue and increment
	last = ledColor[lastGreen];
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <updateLed+0x7c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <updateLed+0x84>)
 80016c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c8:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <updateLed+0x80>)
 80016ca:	6013      	str	r3, [r2, #0]
	ledColor[lastGreen] = 0x00FF00; //blue
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <updateLed+0x7c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0e      	ldr	r2, [pc, #56]	; (800170c <updateLed+0x84>)
 80016d2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80016d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	lastGreen++;
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <updateLed+0x7c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	4a08      	ldr	r2, [pc, #32]	; (8001704 <updateLed+0x7c>)
 80016e2:	6013      	str	r3, [r2, #0]

	//avoid overflow
	if (lastGreen >= 4) {
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <updateLed+0x7c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	dd02      	ble.n	80016f2 <updateLed+0x6a>
		lastGreen = 0;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <updateLed+0x7c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
	}

	sendColors(ledColor, 4);
 80016f2:	2104      	movs	r1, #4
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <updateLed+0x84>)
 80016f6:	f7ff fc29 	bl	8000f4c <sendColors>
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000040 	.word	0x20000040
 8001704:	2000024c 	.word	0x2000024c
 8001708:	20000250 	.word	0x20000250
 800170c:	200003bc 	.word	0x200003bc

08001710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b09e      	sub	sp, #120	; 0x78
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001716:	f001 fbfd 	bl	8002f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171a:	f000 f9cb 	bl	8001ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800171e:	f000 fb45 	bl	8001dac <MX_GPIO_Init>
  MX_I2C1_Init();
 8001722:	f000 fa2f 	bl	8001b84 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001726:	f000 fa5b 	bl	8001be0 <MX_I2C2_Init>
  MX_I2C3_Init();
 800172a:	f000 fa87 	bl	8001c3c <MX_I2C3_Init>
  MX_SPI3_Init();
 800172e:	f000 fab3 	bl	8001c98 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001732:	f000 fae7 	bl	8001d04 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001736:	f000 fb0f 	bl	8001d58 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800173a:	f009 f8d1 	bl	800a8e0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	// be sure to put all xshut to low
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3,
 800173e:	2200      	movs	r2, #0
 8001740:	210f      	movs	r1, #15
 8001742:	48a2      	ldr	r0, [pc, #648]	; (80019cc <main+0x2bc>)
 8001744:	f002 f884 	bl	8003850 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7,
 8001748:	2200      	movs	r2, #0
 800174a:	21f0      	movs	r1, #240	; 0xf0
 800174c:	48a0      	ldr	r0, [pc, #640]	; (80019d0 <main+0x2c0>)
 800174e:	f002 f87f 	bl	8003850 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	for (int i = 0; i < 4; i++) {
 8001752:	2300      	movs	r3, #0
 8001754:	677b      	str	r3, [r7, #116]	; 0x74
 8001756:	e007      	b.n	8001768 <main+0x58>
		ledColor[i] = 0x0000FF; //set to blue
 8001758:	4a9e      	ldr	r2, [pc, #632]	; (80019d4 <main+0x2c4>)
 800175a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800175c:	21ff      	movs	r1, #255	; 0xff
 800175e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 8001762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001764:	3301      	adds	r3, #1
 8001766:	677b      	str	r3, [r7, #116]	; 0x74
 8001768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800176a:	2b03      	cmp	r3, #3
 800176c:	ddf4      	ble.n	8001758 <main+0x48>
	}
	sendColors(ledColor, 4);
 800176e:	2104      	movs	r1, #4
 8001770:	4898      	ldr	r0, [pc, #608]	; (80019d4 <main+0x2c4>)
 8001772:	f7ff fbeb 	bl	8000f4c <sendColors>

	HAL_Delay(1000);
 8001776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800177a:	f001 fc3d 	bl	8002ff8 <HAL_Delay>

	for (int i = 0; i < 8; i++) {
 800177e:	2300      	movs	r3, #0
 8001780:	673b      	str	r3, [r7, #112]	; 0x70
 8001782:	e04e      	b.n	8001822 <main+0x112>
		HAL_GPIO_WritePin(xshut[i].port, xshut[i].mask, GPIO_PIN_SET);
 8001784:	4a94      	ldr	r2, [pc, #592]	; (80019d8 <main+0x2c8>)
 8001786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001788:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800178c:	4a92      	ldr	r2, [pc, #584]	; (80019d8 <main+0x2c8>)
 800178e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4413      	add	r3, r2
 8001794:	889b      	ldrh	r3, [r3, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	4619      	mov	r1, r3
 800179a:	f002 f859 	bl	8003850 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800179e:	200a      	movs	r0, #10
 80017a0:	f001 fc2a 	bl	8002ff8 <HAL_Delay>
		int error = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	65fb      	str	r3, [r7, #92]	; 0x5c
		error += enableSensor(i); //i2c1
 80017a8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80017aa:	f7ff fbed 	bl	8000f88 <enableSensor>
 80017ae:	4602      	mov	r2, r0
 80017b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017b2:	4413      	add	r3, r2
 80017b4:	65fb      	str	r3, [r7, #92]	; 0x5c
		error += enableSensor(i + 8); //i2c2
 80017b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017b8:	3308      	adds	r3, #8
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fbe4 	bl	8000f88 <enableSensor>
 80017c0:	4602      	mov	r2, r0
 80017c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c4:	4413      	add	r3, r2
 80017c6:	65fb      	str	r3, [r7, #92]	; 0x5c

		if (error) {
 80017c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00e      	beq.n	80017ec <main+0xdc>
			//HAL_GPIO_WritePin(xshut[i].port, xshut[i].mask, GPIO_PIN_RESET);
			ledColor[i / 2] = 0xFF0000; //set to red
 80017ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017d0:	0fda      	lsrs	r2, r3, #31
 80017d2:	4413      	add	r3, r2
 80017d4:	105b      	asrs	r3, r3, #1
 80017d6:	4619      	mov	r1, r3
 80017d8:	4b7e      	ldr	r3, [pc, #504]	; (80019d4 <main+0x2c4>)
 80017da:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80017de:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			sendColors(ledColor, 4);
 80017e2:	2104      	movs	r1, #4
 80017e4:	487b      	ldr	r0, [pc, #492]	; (80019d4 <main+0x2c4>)
 80017e6:	f7ff fbb1 	bl	8000f4c <sendColors>
 80017ea:	e017      	b.n	800181c <main+0x10c>
		} else {
			if (ledColor[i / 2] != 0xFF0000) {
 80017ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017ee:	0fda      	lsrs	r2, r3, #31
 80017f0:	4413      	add	r3, r2
 80017f2:	105b      	asrs	r3, r3, #1
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b77      	ldr	r3, [pc, #476]	; (80019d4 <main+0x2c4>)
 80017f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001800:	d00c      	beq.n	800181c <main+0x10c>
				ledColor[i / 2] = 0; //turn off led
 8001802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001804:	0fda      	lsrs	r2, r3, #31
 8001806:	4413      	add	r3, r2
 8001808:	105b      	asrs	r3, r3, #1
 800180a:	4619      	mov	r1, r3
 800180c:	4b71      	ldr	r3, [pc, #452]	; (80019d4 <main+0x2c4>)
 800180e:	2200      	movs	r2, #0
 8001810:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				sendColors(ledColor, 4);
 8001814:	2104      	movs	r1, #4
 8001816:	486f      	ldr	r0, [pc, #444]	; (80019d4 <main+0x2c4>)
 8001818:	f7ff fb98 	bl	8000f4c <sendColors>
	for (int i = 0; i < 8; i++) {
 800181c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800181e:	3301      	adds	r3, #1
 8001820:	673b      	str	r3, [r7, #112]	; 0x70
 8001822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001824:	2b07      	cmp	r3, #7
 8001826:	ddad      	ble.n	8001784 <main+0x74>
			}
		}
	}
	scan(&hi2c1);
 8001828:	486c      	ldr	r0, [pc, #432]	; (80019dc <main+0x2cc>)
 800182a:	f7ff fecf 	bl	80015cc <scan>
	scan(&hi2c2);
 800182e:	486c      	ldr	r0, [pc, #432]	; (80019e0 <main+0x2d0>)
 8001830:	f7ff fecc 	bl	80015cc <scan>

	int fps = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint8_t buff[80];

	uint8_t msg[5]; // ~, 3 byte payload, checksum
	uint32_t start = HAL_GetTick();
 8001838:	f001 fbd2 	bl	8002fe0 <HAL_GetTick>
 800183c:	66b8      	str	r0, [r7, #104]	; 0x68
	while (1) {
	
		for (int i = 0; i < 16; i++) {
 800183e:	2300      	movs	r3, #0
 8001840:	667b      	str	r3, [r7, #100]	; 0x64
 8001842:	e0f8      	b.n	8001a36 <main+0x326>
		
			if (sensors[i].valid) {
 8001844:	4a67      	ldr	r2, [pc, #412]	; (80019e4 <main+0x2d4>)
 8001846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	789b      	ldrb	r3, [r3, #2]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80ee 	beq.w	8001a30 <main+0x320>
				uint8_t ready = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	70fb      	strb	r3, [r7, #3]
				VL53L1X_ERROR err = VL53L1X_CheckForDataReady(sensors[i].dev, &ready);
 8001858:	4a62      	ldr	r2, [pc, #392]	; (80019e4 <main+0x2d4>)
 800185a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800185c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001860:	1cfa      	adds	r2, r7, #3
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fef1 	bl	800264c <VL53L1X_CheckForDataReady>
 800186a:	4603      	mov	r3, r0
 800186c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
				
				if (!err && ready) {
 8001870:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 8001874:	2b00      	cmp	r3, #0
 8001876:	f040 80c1 	bne.w	80019fc <main+0x2ec>
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80bd 	beq.w	80019fc <main+0x2ec>
					uint8_t range_status;
					err = VL53L1X_GetRangeStatus(sensors[i].dev, &range_status);
 8001882:	4a58      	ldr	r2, [pc, #352]	; (80019e4 <main+0x2d4>)
 8001884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001886:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800188a:	1cba      	adds	r2, r7, #2
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f001 f9b0 	bl	8002bf4 <VL53L1X_GetRangeStatus>
 8001894:	4603      	mov	r3, r0
 8001896:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
					if (err) {
 800189a:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d016      	beq.n	80018d0 <main+0x1c0>
						sprintf((char*) buff, "VL53L1X_GetRangeStatus error %d on sensor %d\n", err, i);
 80018a2:	f997 2063 	ldrsb.w	r2, [r7, #99]	; 0x63
 80018a6:	f107 000c 	add.w	r0, r7, #12
 80018aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018ac:	494e      	ldr	r1, [pc, #312]	; (80019e8 <main+0x2d8>)
 80018ae:	f009 fded 	bl	800b48c <siprintf>
						HAL_UART_Transmit(&huart1, buff, strlen((char*) buff), 0xFFFF);
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fc92 	bl	80001e0 <strlen>
 80018bc:	4603      	mov	r3, r0
 80018be:	b29a      	uxth	r2, r3
 80018c0:	f107 010c 	add.w	r1, r7, #12
 80018c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c8:	4848      	ldr	r0, [pc, #288]	; (80019ec <main+0x2dc>)
 80018ca:	f005 fa37 	bl	8006d3c <HAL_UART_Transmit>
						continue;
 80018ce:	e0af      	b.n	8001a30 <main+0x320>
					}
					
					uint16_t distance_mm;
					err = VL53L1X_GetDistance(sensors[i].dev, &distance_mm);
 80018d0:	4a44      	ldr	r2, [pc, #272]	; (80019e4 <main+0x2d4>)
 80018d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018d4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80018d8:	463a      	mov	r2, r7
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f001 f96f 	bl	8002bc0 <VL53L1X_GetDistance>
 80018e2:	4603      	mov	r3, r0
 80018e4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
					if (err) {
 80018e8:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d016      	beq.n	800191e <main+0x20e>
						sprintf((char*) buff, "VL53L1X_GetDistance error %d on sensor %d\n", err, i);
 80018f0:	f997 2063 	ldrsb.w	r2, [r7, #99]	; 0x63
 80018f4:	f107 000c 	add.w	r0, r7, #12
 80018f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018fa:	493d      	ldr	r1, [pc, #244]	; (80019f0 <main+0x2e0>)
 80018fc:	f009 fdc6 	bl	800b48c <siprintf>
						HAL_UART_Transmit(&huart1, buff, strlen((char*) buff), 0xFFFF);
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fc6b 	bl	80001e0 <strlen>
 800190a:	4603      	mov	r3, r0
 800190c:	b29a      	uxth	r2, r3
 800190e:	f107 010c 	add.w	r1, r7, #12
 8001912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001916:	4835      	ldr	r0, [pc, #212]	; (80019ec <main+0x2dc>)
 8001918:	f005 fa10 	bl	8006d3c <HAL_UART_Transmit>
						continue;
 800191c:	e088      	b.n	8001a30 <main+0x320>
					}
					
					err = VL53L1X_ClearInterrupt(sensors[i].dev);
 800191e:	4a31      	ldr	r2, [pc, #196]	; (80019e4 <main+0x2d4>)
 8001920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001922:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fe2a 	bl	8002580 <VL53L1X_ClearInterrupt>
 800192c:	4603      	mov	r3, r0
 800192e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
					if (err) {
 8001932:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 8001936:	2b00      	cmp	r3, #0
 8001938:	d016      	beq.n	8001968 <main+0x258>
						sprintf((char*) buff, "VL53L1X_ClearInterrupt error %d on sensor %d\n", err, i);
 800193a:	f997 2063 	ldrsb.w	r2, [r7, #99]	; 0x63
 800193e:	f107 000c 	add.w	r0, r7, #12
 8001942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001944:	492b      	ldr	r1, [pc, #172]	; (80019f4 <main+0x2e4>)
 8001946:	f009 fda1 	bl	800b48c <siprintf>
						HAL_UART_Transmit(&huart1, buff, strlen((char*) buff), 0xFFFF);
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fc46 	bl	80001e0 <strlen>
 8001954:	4603      	mov	r3, r0
 8001956:	b29a      	uxth	r2, r3
 8001958:	f107 010c 	add.w	r1, r7, #12
 800195c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001960:	4822      	ldr	r0, [pc, #136]	; (80019ec <main+0x2dc>)
 8001962:	f005 f9eb 	bl	8006d3c <HAL_UART_Transmit>
						continue;
 8001966:	e063      	b.n	8001a30 <main+0x320>
					}

					msg[0] = '~';
 8001968:	237e      	movs	r3, #126	; 0x7e
 800196a:	713b      	strb	r3, [r7, #4]
					msg[1] = i;
 800196c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800196e:	b2db      	uxtb	r3, r3
 8001970:	717b      	strb	r3, [r7, #5]
					msg[2] = distance_mm;
 8001972:	883b      	ldrh	r3, [r7, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	71bb      	strb	r3, [r7, #6]
					msg[3] = distance_mm >> 8;
 8001978:	883b      	ldrh	r3, [r7, #0]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	b29b      	uxth	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	71fb      	strb	r3, [r7, #7]
					msg[4] = msg[0] + msg[1] + msg[2] + msg[3];
 8001982:	793a      	ldrb	r2, [r7, #4]
 8001984:	797b      	ldrb	r3, [r7, #5]
 8001986:	4413      	add	r3, r2
 8001988:	b2da      	uxtb	r2, r3
 800198a:	79bb      	ldrb	r3, [r7, #6]
 800198c:	4413      	add	r3, r2
 800198e:	b2da      	uxtb	r2, r3
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	4413      	add	r3, r2
 8001994:	b2db      	uxtb	r3, r3
 8001996:	723b      	strb	r3, [r7, #8]

					sprintf((char*) buff, "%x\t%d\n", i, distance_mm);
 8001998:	883b      	ldrh	r3, [r7, #0]
 800199a:	f107 000c 	add.w	r0, r7, #12
 800199e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80019a0:	4915      	ldr	r1, [pc, #84]	; (80019f8 <main+0x2e8>)
 80019a2:	f009 fd73 	bl	800b48c <siprintf>
					HAL_UART_Transmit(&huart1, buff, strlen((char*) buff), 0xFFFF);
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fc18 	bl	80001e0 <strlen>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f107 010c 	add.w	r1, r7, #12
 80019b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <main+0x2dc>)
 80019be:	f005 f9bd 	bl	8006d3c <HAL_UART_Transmit>

					fps++;
 80019c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019c4:	3301      	adds	r3, #1
 80019c6:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (!err && ready) {
 80019c8:	e032      	b.n	8001a30 <main+0x320>
 80019ca:	bf00      	nop
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	200003bc 	.word	0x200003bc
 80019d8:	20000000 	.word	0x20000000
 80019dc:	200002bc 	.word	0x200002bc
 80019e0:	20000310 	.word	0x20000310
 80019e4:	2000044c 	.word	0x2000044c
 80019e8:	0800bd20 	.word	0x0800bd20
 80019ec:	200003cc 	.word	0x200003cc
 80019f0:	0800bd50 	.word	0x0800bd50
 80019f4:	0800bd7c 	.word	0x0800bd7c
 80019f8:	0800bdac 	.word	0x0800bdac
				} else if (err) {
 80019fc:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d015      	beq.n	8001a30 <main+0x320>
					sprintf((char*) buff, "VL53L1X_CheckForDataReady error %d on sensor %d\n", err, i);
 8001a04:	f997 2063 	ldrsb.w	r2, [r7, #99]	; 0x63
 8001a08:	f107 000c 	add.w	r0, r7, #12
 8001a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a0e:	4925      	ldr	r1, [pc, #148]	; (8001aa4 <main+0x394>)
 8001a10:	f009 fd3c 	bl	800b48c <siprintf>
					HAL_UART_Transmit(&huart1, buff, strlen((char*) buff), 0xFFFF);
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fbe1 	bl	80001e0 <strlen>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	f107 010c 	add.w	r1, r7, #12
 8001a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a2a:	481f      	ldr	r0, [pc, #124]	; (8001aa8 <main+0x398>)
 8001a2c:	f005 f986 	bl	8006d3c <HAL_UART_Transmit>
		for (int i = 0; i < 16; i++) {
 8001a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a32:	3301      	adds	r3, #1
 8001a34:	667b      	str	r3, [r7, #100]	; 0x64
 8001a36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	f77f af03 	ble.w	8001844 <main+0x134>
				}
			}
		}

		static uint32_t startLedSpin = 0;
		if (HAL_GetTick() - startLedSpin >= 100) {
 8001a3e:	f001 facf 	bl	8002fe0 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <main+0x39c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b63      	cmp	r3, #99	; 0x63
 8001a4c:	d906      	bls.n	8001a5c <main+0x34c>
			startLedSpin = HAL_GetTick();
 8001a4e:	f001 fac7 	bl	8002fe0 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <main+0x39c>)
 8001a56:	601a      	str	r2, [r3, #0]
			updateLed();
 8001a58:	f7ff fe16 	bl	8001688 <updateLed>
		}

		if (HAL_GetTick() - start >= 1000) {
 8001a5c:	f001 fac0 	bl	8002fe0 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a6a:	f4ff aee8 	bcc.w	800183e <main+0x12e>
			start = HAL_GetTick();
 8001a6e:	f001 fab7 	bl	8002fe0 <HAL_GetTick>
 8001a72:	66b8      	str	r0, [r7, #104]	; 0x68
			sprintf((char*) buff, "FPS: %d\n", fps);
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a7a:	490d      	ldr	r1, [pc, #52]	; (8001ab0 <main+0x3a0>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f009 fd05 	bl	800b48c <siprintf>
			HAL_UART_Transmit(&huart1, buff, strlen((char*) buff), 0xFFFF);
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fbaa 	bl	80001e0 <strlen>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	f107 010c 	add.w	r1, r7, #12
 8001a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a98:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <main+0x398>)
 8001a9a:	f005 f94f 	bl	8006d3c <HAL_UART_Transmit>
			fps = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
	while (1) {
 8001aa2:	e6cc      	b.n	800183e <main+0x12e>
 8001aa4:	0800bdb4 	.word	0x0800bdb4
 8001aa8:	200003cc 	.word	0x200003cc
 8001aac:	20000254 	.word	0x20000254
 8001ab0:	0800bde8 	.word	0x0800bde8

08001ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b094      	sub	sp, #80	; 0x50
 8001ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aba:	f107 0320 	add.w	r3, r7, #32
 8001abe:	2230      	movs	r2, #48	; 0x30
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f009 fc21 	bl	800b30a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <SystemClock_Config+0xc8>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <SystemClock_Config+0xc8>)
 8001ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <SystemClock_Config+0xc8>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <SystemClock_Config+0xcc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <SystemClock_Config+0xcc>)
 8001afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <SystemClock_Config+0xcc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b10:	2301      	movs	r3, #1
 8001b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001b24:	230c      	movs	r3, #12
 8001b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001b28:	2360      	movs	r3, #96	; 0x60
 8001b2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b30:	2304      	movs	r3, #4
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b34:	f107 0320 	add.w	r3, r7, #32
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f004 f987 	bl	8005e4c <HAL_RCC_OscConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b44:	f000 fa02 	bl	8001f4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b48:	230f      	movs	r3, #15
 8001b4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2103      	movs	r1, #3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f004 fc91 	bl	800648c <HAL_RCC_ClockConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b70:	f000 f9ec 	bl	8001f4c <Error_Handler>
  }
}
 8001b74:	bf00      	nop
 8001b76:	3750      	adds	r7, #80	; 0x50
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40007000 	.word	0x40007000

08001b84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b8a:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <MX_I2C1_Init+0x54>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b90:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <MX_I2C1_Init+0x58>)
 8001b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ba6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bc0:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bc2:	f001 fe77 	bl	80038b4 <HAL_I2C_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bcc:	f000 f9be 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200002bc 	.word	0x200002bc
 8001bd8:	40005400 	.word	0x40005400
 8001bdc:	00061a80 	.word	0x00061a80

08001be0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001be6:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <MX_I2C2_Init+0x54>)
 8001be8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <MX_I2C2_Init+0x58>)
 8001bee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c02:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c1c:	4804      	ldr	r0, [pc, #16]	; (8001c30 <MX_I2C2_Init+0x50>)
 8001c1e:	f001 fe49 	bl	80038b4 <HAL_I2C_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c28:	f000 f990 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000310 	.word	0x20000310
 8001c34:	40005800 	.word	0x40005800
 8001c38:	00061a80 	.word	0x00061a80

08001c3c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <MX_I2C3_Init+0x50>)
 8001c42:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <MX_I2C3_Init+0x54>)
 8001c44:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_I2C3_Init+0x50>)
 8001c48:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <MX_I2C3_Init+0x58>)
 8001c4a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <MX_I2C3_Init+0x50>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_I2C3_Init+0x50>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_I2C3_Init+0x50>)
 8001c5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c5e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <MX_I2C3_Init+0x50>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_I2C3_Init+0x50>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <MX_I2C3_Init+0x50>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_I2C3_Init+0x50>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c78:	4804      	ldr	r0, [pc, #16]	; (8001c8c <MX_I2C3_Init+0x50>)
 8001c7a:	f001 fe1b 	bl	80038b4 <HAL_I2C_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c84:	f000 f962 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000268 	.word	0x20000268
 8001c90:	40005c00 	.word	0x40005c00
 8001c94:	00061a80 	.word	0x00061a80

08001c98 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <MX_SPI3_Init+0x64>)
 8001c9e:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <MX_SPI3_Init+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <MX_SPI3_Init+0x64>)
 8001ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ca8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <MX_SPI3_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <MX_SPI3_Init+0x64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <MX_SPI3_Init+0x64>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <MX_SPI3_Init+0x64>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <MX_SPI3_Init+0x64>)
 8001cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <MX_SPI3_Init+0x64>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <MX_SPI3_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_SPI3_Init+0x64>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <MX_SPI3_Init+0x64>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_SPI3_Init+0x64>)
 8001ce4:	220a      	movs	r2, #10
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <MX_SPI3_Init+0x64>)
 8001cea:	f004 fe43 	bl	8006974 <HAL_SPI_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001cf4:	f000 f92a 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000364 	.word	0x20000364
 8001d00:	40003c00 	.word	0x40003c00

08001d04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <MX_USART1_UART_Init+0x50>)
 8001d0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_USART1_UART_Init+0x4c>)
 8001d3c:	f004 ff48 	bl	8006bd0 <HAL_UART_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d46:	f000 f901 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200003cc 	.word	0x200003cc
 8001d54:	40011000 	.word	0x40011000

08001d58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <MX_USART2_UART_Init+0x4c>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <MX_USART2_UART_Init+0x50>)
 8001d60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <MX_USART2_UART_Init+0x4c>)
 8001d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <MX_USART2_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <MX_USART2_UART_Init+0x4c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <MX_USART2_UART_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <MX_USART2_UART_Init+0x4c>)
 8001d7e:	220c      	movs	r2, #12
 8001d80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <MX_USART2_UART_Init+0x4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <MX_USART2_UART_Init+0x4c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_USART2_UART_Init+0x4c>)
 8001d90:	f004 ff1e 	bl	8006bd0 <HAL_UART_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d9a:	f000 f8d7 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2000040c 	.word	0x2000040c
 8001da8:	40004400 	.word	0x40004400

08001dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
 8001dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	4b5c      	ldr	r3, [pc, #368]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a5b      	ldr	r2, [pc, #364]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b55      	ldr	r3, [pc, #340]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a54      	ldr	r2, [pc, #336]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b52      	ldr	r3, [pc, #328]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b4e      	ldr	r3, [pc, #312]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a4d      	ldr	r2, [pc, #308]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a46      	ldr	r2, [pc, #280]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4b40      	ldr	r3, [pc, #256]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a3f      	ldr	r2, [pc, #252]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <MX_GPIO_Init+0x18c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f241 010f 	movw	r1, #4111	; 0x100f
 8001e54:	4839      	ldr	r0, [pc, #228]	; (8001f3c <MX_GPIO_Init+0x190>)
 8001e56:	f001 fcfb 	bl	8003850 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f248 01f0 	movw	r1, #33008	; 0x80f0
 8001e60:	4837      	ldr	r0, [pc, #220]	; (8001f40 <MX_GPIO_Init+0x194>)
 8001e62:	f001 fcf5 	bl	8003850 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e6c:	4835      	ldr	r0, [pc, #212]	; (8001f44 <MX_GPIO_Init+0x198>)
 8001e6e:	f001 fcef 	bl	8003850 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC4 
                           PC5 PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4 
 8001e72:	f24e 13f0 	movw	r3, #57840	; 0xe1f0
 8001e76:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	482d      	ldr	r0, [pc, #180]	; (8001f3c <MX_GPIO_Init+0x190>)
 8001e88:	f001 fa3a 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001e8c:	f241 030f 	movw	r3, #4111	; 0x100f
 8001e90:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e92:	2301      	movs	r3, #1
 8001e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4825      	ldr	r0, [pc, #148]	; (8001f3c <MX_GPIO_Init+0x190>)
 8001ea6:	f001 fa2b 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4820      	ldr	r0, [pc, #128]	; (8001f40 <MX_GPIO_Init+0x194>)
 8001ebe:	f001 fa1f 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 8001ec2:	f248 03f0 	movw	r3, #33008	; 0x80f0
 8001ec6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4819      	ldr	r0, [pc, #100]	; (8001f40 <MX_GPIO_Init+0x194>)
 8001edc:	f001 fa10 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14 
                           PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14 
 8001ee0:	f24c 2307 	movw	r3, #49671	; 0xc207
 8001ee4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4813      	ldr	r0, [pc, #76]	; (8001f44 <MX_GPIO_Init+0x198>)
 8001ef6:	f001 fa03 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001efa:	2304      	movs	r3, #4
 8001efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480e      	ldr	r0, [pc, #56]	; (8001f48 <MX_GPIO_Init+0x19c>)
 8001f0e:	f001 f9f7 	bl	8003300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4806      	ldr	r0, [pc, #24]	; (8001f44 <MX_GPIO_Init+0x198>)
 8001f2c:	f001 f9e8 	bl	8003300 <HAL_GPIO_Init>

}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	; 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40020400 	.word	0x40020400
 8001f48:	40020c00 	.word	0x40020c00

08001f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <HAL_MspInit+0x4c>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_MspInit+0x4c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08e      	sub	sp, #56	; 0x38
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a63      	ldr	r2, [pc, #396]	; (800216c <HAL_I2C_MspInit+0x1ac>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d12c      	bne.n	800203c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
 8001fe6:	4b62      	ldr	r3, [pc, #392]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a61      	ldr	r2, [pc, #388]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b5f      	ldr	r3, [pc, #380]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ffe:	23c0      	movs	r3, #192	; 0xc0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002002:	2312      	movs	r3, #18
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002006:	2301      	movs	r3, #1
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800200e:	2304      	movs	r3, #4
 8002010:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002016:	4619      	mov	r1, r3
 8002018:	4856      	ldr	r0, [pc, #344]	; (8002174 <HAL_I2C_MspInit+0x1b4>)
 800201a:	f001 f971 	bl	8003300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	4b53      	ldr	r3, [pc, #332]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a52      	ldr	r2, [pc, #328]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 8002028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
 800202e:	4b50      	ldr	r3, [pc, #320]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800203a:	e093      	b.n	8002164 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a4d      	ldr	r2, [pc, #308]	; (8002178 <HAL_I2C_MspInit+0x1b8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d13d      	bne.n	80020c2 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	4b49      	ldr	r3, [pc, #292]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a48      	ldr	r2, [pc, #288]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b46      	ldr	r3, [pc, #280]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002068:	2312      	movs	r3, #18
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800206c:	2301      	movs	r3, #1
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002074:	2304      	movs	r3, #4
 8002076:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207c:	4619      	mov	r1, r3
 800207e:	483d      	ldr	r0, [pc, #244]	; (8002174 <HAL_I2C_MspInit+0x1b4>)
 8002080:	f001 f93e 	bl	8003300 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002084:	2308      	movs	r3, #8
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002088:	2312      	movs	r3, #18
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800208c:	2301      	movs	r3, #1
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002094:	2309      	movs	r3, #9
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209c:	4619      	mov	r1, r3
 800209e:	4835      	ldr	r0, [pc, #212]	; (8002174 <HAL_I2C_MspInit+0x1b4>)
 80020a0:	f001 f92e 	bl	8003300 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	4a30      	ldr	r2, [pc, #192]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 80020ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020b2:	6413      	str	r3, [r2, #64]	; 0x40
 80020b4:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697b      	ldr	r3, [r7, #20]
}
 80020c0:	e050      	b.n	8002164 <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a2d      	ldr	r2, [pc, #180]	; (800217c <HAL_I2C_MspInit+0x1bc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d14b      	bne.n	8002164 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4a26      	ldr	r2, [pc, #152]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 80020d6:	f043 0304 	orr.w	r3, r3, #4
 80020da:	6313      	str	r3, [r2, #48]	; 0x30
 80020dc:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	4b20      	ldr	r3, [pc, #128]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6313      	str	r3, [r2, #48]	; 0x30
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800210a:	2312      	movs	r3, #18
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800210e:	2301      	movs	r3, #1
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002116:	2304      	movs	r3, #4
 8002118:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211e:	4619      	mov	r1, r3
 8002120:	4817      	ldr	r0, [pc, #92]	; (8002180 <HAL_I2C_MspInit+0x1c0>)
 8002122:	f001 f8ed 	bl	8003300 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800212c:	2312      	movs	r3, #18
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002130:	2301      	movs	r3, #1
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002134:	2303      	movs	r3, #3
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002138:	2304      	movs	r3, #4
 800213a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002140:	4619      	mov	r1, r3
 8002142:	4810      	ldr	r0, [pc, #64]	; (8002184 <HAL_I2C_MspInit+0x1c4>)
 8002144:	f001 f8dc 	bl	8003300 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 8002152:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002156:	6413      	str	r3, [r2, #64]	; 0x40
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_I2C_MspInit+0x1b0>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
}
 8002164:	bf00      	nop
 8002166:	3738      	adds	r7, #56	; 0x38
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40005400 	.word	0x40005400
 8002170:	40023800 	.word	0x40023800
 8002174:	40020400 	.word	0x40020400
 8002178:	40005800 	.word	0x40005800
 800217c:	40005c00 	.word	0x40005c00
 8002180:	40020800 	.word	0x40020800
 8002184:	40020000 	.word	0x40020000

08002188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a21      	ldr	r2, [pc, #132]	; (800222c <HAL_SPI_MspInit+0xa4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d13c      	bne.n	8002224 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_SPI_MspInit+0xa8>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a1f      	ldr	r2, [pc, #124]	; (8002230 <HAL_SPI_MspInit+0xa8>)
 80021b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_SPI_MspInit+0xa8>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_SPI_MspInit+0xa8>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a18      	ldr	r2, [pc, #96]	; (8002230 <HAL_SPI_MspInit+0xa8>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_SPI_MspInit+0xa8>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB12     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80021f4:	2307      	movs	r3, #7
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	480d      	ldr	r0, [pc, #52]	; (8002234 <HAL_SPI_MspInit+0xac>)
 8002200:	f001 f87e 	bl	8003300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002204:	2330      	movs	r3, #48	; 0x30
 8002206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002214:	2306      	movs	r3, #6
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4619      	mov	r1, r3
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <HAL_SPI_MspInit+0xac>)
 8002220:	f001 f86e 	bl	8003300 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002224:	bf00      	nop
 8002226:	3728      	adds	r7, #40	; 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40003c00 	.word	0x40003c00
 8002230:	40023800 	.word	0x40023800
 8002234:	40020400 	.word	0x40020400

08002238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	; 0x30
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a36      	ldr	r2, [pc, #216]	; (8002330 <HAL_UART_MspInit+0xf8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d135      	bne.n	80022c6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	4b35      	ldr	r3, [pc, #212]	; (8002334 <HAL_UART_MspInit+0xfc>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a34      	ldr	r2, [pc, #208]	; (8002334 <HAL_UART_MspInit+0xfc>)
 8002264:	f043 0310 	orr.w	r3, r3, #16
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b32      	ldr	r3, [pc, #200]	; (8002334 <HAL_UART_MspInit+0xfc>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <HAL_UART_MspInit+0xfc>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a2d      	ldr	r2, [pc, #180]	; (8002334 <HAL_UART_MspInit+0xfc>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <HAL_UART_MspInit+0xfc>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002292:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022a4:	2307      	movs	r3, #7
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	4822      	ldr	r0, [pc, #136]	; (8002338 <HAL_UART_MspInit+0x100>)
 80022b0:	f001 f826 	bl	8003300 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	2025      	movs	r0, #37	; 0x25
 80022ba:	f000 ffaf 	bl	800321c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022be:	2025      	movs	r0, #37	; 0x25
 80022c0:	f000 ffd8 	bl	8003274 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022c4:	e030      	b.n	8002328 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_UART_MspInit+0x104>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d12b      	bne.n	8002328 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_UART_MspInit+0xfc>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <HAL_UART_MspInit+0xfc>)
 80022da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022de:	6413      	str	r3, [r2, #64]	; 0x40
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <HAL_UART_MspInit+0xfc>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_UART_MspInit+0xfc>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <HAL_UART_MspInit+0xfc>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6313      	str	r3, [r2, #48]	; 0x30
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_UART_MspInit+0xfc>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002308:	230c      	movs	r3, #12
 800230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002318:	2307      	movs	r3, #7
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4619      	mov	r1, r3
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <HAL_UART_MspInit+0x100>)
 8002324:	f000 ffec 	bl	8003300 <HAL_GPIO_Init>
}
 8002328:	bf00      	nop
 800232a:	3730      	adds	r7, #48	; 0x30
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40011000 	.word	0x40011000
 8002334:	40023800 	.word	0x40023800
 8002338:	40020000 	.word	0x40020000
 800233c:	40004400 	.word	0x40004400

08002340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <HardFault_Handler+0x4>

08002354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <MemManage_Handler+0x4>

0800235a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <BusFault_Handler+0x4>

08002360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <UsageFault_Handler+0x4>

08002366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002394:	f000 fe10 	bl	8002fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}

0800239c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <USART1_IRQHandler+0x10>)
 80023a2:	f004 fd65 	bl	8006e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200003cc 	.word	0x200003cc

080023b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <OTG_FS_IRQHandler+0x10>)
 80023b6:	f002 fd16 	bl	8004de6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20001a60 	.word	0x20001a60

080023c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <_sbrk+0x50>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <_sbrk+0x16>
		heap_end = &end;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <_sbrk+0x50>)
 80023d6:	4a10      	ldr	r2, [pc, #64]	; (8002418 <_sbrk+0x54>)
 80023d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <_sbrk+0x50>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <_sbrk+0x50>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	466a      	mov	r2, sp
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d907      	bls.n	80023fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80023ee:	f008 ff47 	bl	800b280 <__errno>
 80023f2:	4602      	mov	r2, r0
 80023f4:	230c      	movs	r3, #12
 80023f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023fc:	e006      	b.n	800240c <_sbrk+0x48>
	}

	heap_end += incr;
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <_sbrk+0x50>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	4a03      	ldr	r2, [pc, #12]	; (8002414 <_sbrk+0x50>)
 8002408:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800240a:	68fb      	ldr	r3, [r7, #12]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000258 	.word	0x20000258
 8002418:	20001e70 	.word	0x20001e70

0800241c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <SystemInit+0x28>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	4a07      	ldr	r2, [pc, #28]	; (8002444 <SystemInit+0x28>)
 8002428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800242c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <SystemInit+0x28>)
 8002432:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002436:	609a      	str	r2, [r3, #8]
#endif
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002480 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800244c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800244e:	e003      	b.n	8002458 <LoopCopyDataInit>

08002450 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002452:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002454:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002456:	3104      	adds	r1, #4

08002458 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002458:	480b      	ldr	r0, [pc, #44]	; (8002488 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800245c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800245e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002460:	d3f6      	bcc.n	8002450 <CopyDataInit>
  ldr  r2, =_sbss
 8002462:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002464:	e002      	b.n	800246c <LoopFillZerobss>

08002466 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002466:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002468:	f842 3b04 	str.w	r3, [r2], #4

0800246c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800246e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002470:	d3f9      	bcc.n	8002466 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002472:	f7ff ffd3 	bl	800241c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002476:	f008 ff09 	bl	800b28c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800247a:	f7ff f949 	bl	8001710 <main>
  bx  lr    
 800247e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002480:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002484:	0800c0a0 	.word	0x0800c0a0
  ldr  r0, =_sdata
 8002488:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800248c:	20000230 	.word	0x20000230
  ldr  r2, =_sbss
 8002490:	20000230 	.word	0x20000230
  ldr  r3, = _ebss
 8002494:	20001e6c 	.word	0x20001e6c

08002498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC_IRQHandler>

0800249a <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	460a      	mov	r2, r1
 80024a4:	80fb      	strh	r3, [r7, #6]
 80024a6:	4613      	mov	r3, r2
 80024a8:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 80024ae:	797b      	ldrb	r3, [r7, #5]
 80024b0:	085b      	lsrs	r3, r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	2101      	movs	r1, #1
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fc15 	bl	8002ce8 <VL53L1_WrByte>
 80024be:	4603      	mov	r3, r0
 80024c0:	73fb      	strb	r3, [r7, #15]
	return status;
 80024c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	73bb      	strb	r3, [r7, #14]
	uint8_t Addr = 0x00, tmp;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80024e2:	232d      	movs	r3, #45	; 0x2d
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	e00e      	b.n	8002506 <VL53L1X_SensorInit+0x36>
		status = VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	b299      	uxth	r1, r3
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	3b2d      	subs	r3, #45	; 0x2d
 80024f0:	4a22      	ldr	r2, [pc, #136]	; (800257c <VL53L1X_SensorInit+0xac>)
 80024f2:	5cd2      	ldrb	r2, [r2, r3]
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fbf6 	bl	8002ce8 <VL53L1_WrByte>
 80024fc:	4603      	mov	r3, r0
 80024fe:	73bb      	strb	r3, [r7, #14]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	3301      	adds	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	2b87      	cmp	r3, #135	; 0x87
 800250a:	d9ed      	bls.n	80024e8 <VL53L1X_SensorInit+0x18>
	}
	status = VL53L1X_StartRanging(dev);
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f872 	bl	80025f8 <VL53L1X_StartRanging>
 8002514:	4603      	mov	r3, r0
 8002516:	73bb      	strb	r3, [r7, #14]
	tmp  = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 800251c:	e008      	b.n	8002530 <VL53L1X_SensorInit+0x60>
			status = VL53L1X_CheckForDataReady(dev, &tmp);
 800251e:	f107 020d 	add.w	r2, r7, #13
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f890 	bl	800264c <VL53L1X_CheckForDataReady>
 800252c:	4603      	mov	r3, r0
 800252e:	73bb      	strb	r3, [r7, #14]
	while(tmp==0){
 8002530:	7b7b      	ldrb	r3, [r7, #13]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f3      	beq.n	800251e <VL53L1X_SensorInit+0x4e>
	}
	status = VL53L1X_ClearInterrupt(dev);
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	4618      	mov	r0, r3
 800253a:	f000 f821 	bl	8002580 <VL53L1X_ClearInterrupt>
 800253e:	4603      	mov	r3, r0
 8002540:	73bb      	strb	r3, [r7, #14]
	status = VL53L1X_StopRanging(dev);
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f86c 	bl	8002622 <VL53L1X_StopRanging>
 800254a:	4603      	mov	r3, r0
 800254c:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	2209      	movs	r2, #9
 8002552:	2108      	movs	r1, #8
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fbc7 	bl	8002ce8 <VL53L1_WrByte>
 800255a:	4603      	mov	r3, r0
 800255c:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	2200      	movs	r2, #0
 8002562:	210b      	movs	r1, #11
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fbbf 	bl	8002ce8 <VL53L1_WrByte>
 800256a:	4603      	mov	r3, r0
 800256c:	73bb      	strb	r3, [r7, #14]
	return status;
 800256e:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	0800bfe8 	.word	0x0800bfe8

08002580 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	2201      	movs	r2, #1
 8002592:	2186      	movs	r1, #134	; 0x86
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fba7 	bl	8002ce8 <VL53L1_WrByte>
 800259a:	4603      	mov	r3, r0
 800259c:	73fb      	strb	r3, [r7, #15]
	return status;
 800259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <VL53L1X_GetInterruptPolarity>:
	status = VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	6039      	str	r1, [r7, #0]
 80025b4:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 80025ba:	f107 020e 	add.w	r2, r7, #14
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	2130      	movs	r1, #48	; 0x30
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fc2c 	bl	8002e20 <VL53L1_RdByte>
 80025c8:	4603      	mov	r3, r0
 80025ca:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 80025cc:	7bbb      	ldrb	r3, [r7, #14]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 80025d6:	7bbb      	ldrb	r3, [r7, #14]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	701a      	strb	r2, [r3, #0]
	return status;
 80025ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	2240      	movs	r2, #64	; 0x40
 800260a:	2187      	movs	r1, #135	; 0x87
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fb6b 	bl	8002ce8 <VL53L1_WrByte>
 8002612:	4603      	mov	r3, r0
 8002614:	73fb      	strb	r3, [r7, #15]
	return status;
 8002616:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	2200      	movs	r2, #0
 8002634:	2187      	movs	r1, #135	; 0x87
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fb56 	bl	8002ce8 <VL53L1_WrByte>
 800263c:	4603      	mov	r3, r0
 800263e:	73fb      	strb	r3, [r7, #15]
	return status;
 8002640:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetInterruptPolarity(dev, &IntPol);
 800265c:	f107 020d 	add.w	r2, r7, #13
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ffa0 	bl	80025aa <VL53L1X_GetInterruptPolarity>
 800266a:	4603      	mov	r3, r0
 800266c:	73fb      	strb	r3, [r7, #15]
	status = VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 800266e:	f107 020e 	add.w	r2, r7, #14
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	2131      	movs	r1, #49	; 0x31
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fbd2 	bl	8002e20 <VL53L1_RdByte>
 800267c:	4603      	mov	r3, r0
 800267e:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8002680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10c      	bne.n	80026a2 <VL53L1X_CheckForDataReady+0x56>
		if ((Temp & 1) == IntPol)
 8002688:	7bbb      	ldrb	r3, [r7, #14]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	7b7a      	ldrb	r2, [r7, #13]
 8002690:	4293      	cmp	r3, r2
 8002692:	d103      	bne.n	800269c <VL53L1X_CheckForDataReady+0x50>
			*isDataReady = 1;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	e002      	b.n	80026a2 <VL53L1X_CheckForDataReady+0x56>
		else
			*isDataReady = 0;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
	}
	return status;
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	460a      	mov	r2, r1
 80026b8:	80fb      	strh	r3, [r7, #6]
 80026ba:	4613      	mov	r3, r2
 80026bc:	80bb      	strh	r3, [r7, #4]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetDistanceMode(dev, &DM);
 80026c2:	f107 020c 	add.w	r2, r7, #12
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f9fb 	bl	8002ac6 <VL53L1X_GetDistanceMode>
 80026d0:	4603      	mov	r3, r0
 80026d2:	73fb      	strb	r3, [r7, #15]
	if (DM == 0)
 80026d4:	89bb      	ldrh	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <VL53L1X_SetTimingBudgetInMs+0x30>
		return 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	e0e8      	b.n	80028b0 <VL53L1X_SetTimingBudgetInMs+0x202>
	else if (DM == 1) {	/* Short DistanceMode */
 80026de:	89bb      	ldrh	r3, [r7, #12]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d17a      	bne.n	80027da <VL53L1X_SetTimingBudgetInMs+0x12c>
		switch (TimingBudgetInMs) {
 80026e4:	88bb      	ldrh	r3, [r7, #4]
 80026e6:	2b32      	cmp	r3, #50	; 0x32
 80026e8:	d037      	beq.n	800275a <VL53L1X_SetTimingBudgetInMs+0xac>
 80026ea:	2b32      	cmp	r3, #50	; 0x32
 80026ec:	dc06      	bgt.n	80026fc <VL53L1X_SetTimingBudgetInMs+0x4e>
 80026ee:	2b14      	cmp	r3, #20
 80026f0:	d019      	beq.n	8002726 <VL53L1X_SetTimingBudgetInMs+0x78>
 80026f2:	2b21      	cmp	r3, #33	; 0x21
 80026f4:	d024      	beq.n	8002740 <VL53L1X_SetTimingBudgetInMs+0x92>
 80026f6:	2b0f      	cmp	r3, #15
 80026f8:	d008      	beq.n	800270c <VL53L1X_SetTimingBudgetInMs+0x5e>
 80026fa:	e06a      	b.n	80027d2 <VL53L1X_SetTimingBudgetInMs+0x124>
 80026fc:	2bc8      	cmp	r3, #200	; 0xc8
 80026fe:	d04a      	beq.n	8002796 <VL53L1X_SetTimingBudgetInMs+0xe8>
 8002700:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002704:	d056      	beq.n	80027b4 <VL53L1X_SetTimingBudgetInMs+0x106>
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d036      	beq.n	8002778 <VL53L1X_SetTimingBudgetInMs+0xca>
 800270a:	e062      	b.n	80027d2 <VL53L1X_SetTimingBudgetInMs+0x124>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	221d      	movs	r2, #29
 8002710:	215e      	movs	r1, #94	; 0x5e
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fb14 	bl	8002d40 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	2227      	movs	r2, #39	; 0x27
 800271c:	2161      	movs	r1, #97	; 0x61
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fb0e 	bl	8002d40 <VL53L1_WrWord>
					0x0027);
			break;
 8002724:	e0c2      	b.n	80028ac <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	2251      	movs	r2, #81	; 0x51
 800272a:	215e      	movs	r1, #94	; 0x5e
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fb07 	bl	8002d40 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	226e      	movs	r2, #110	; 0x6e
 8002736:	2161      	movs	r1, #97	; 0x61
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fb01 	bl	8002d40 <VL53L1_WrWord>
					0x006E);
			break;
 800273e:	e0b5      	b.n	80028ac <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	22d6      	movs	r2, #214	; 0xd6
 8002744:	215e      	movs	r1, #94	; 0x5e
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fafa 	bl	8002d40 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	226e      	movs	r2, #110	; 0x6e
 8002750:	2161      	movs	r1, #97	; 0x61
 8002752:	4618      	mov	r0, r3
 8002754:	f000 faf4 	bl	8002d40 <VL53L1_WrWord>
					0x006E);
			break;
 8002758:	e0a8      	b.n	80028ac <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8002760:	215e      	movs	r1, #94	; 0x5e
 8002762:	4618      	mov	r0, r3
 8002764:	f000 faec 	bl	8002d40 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800276e:	2161      	movs	r1, #97	; 0x61
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fae5 	bl	8002d40 <VL53L1_WrWord>
					0x01E8);
			break;
 8002776:	e099      	b.n	80028ac <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	f240 22e1 	movw	r2, #737	; 0x2e1
 800277e:	215e      	movs	r1, #94	; 0x5e
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fadd 	bl	8002d40 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	f44f 7262 	mov.w	r2, #904	; 0x388
 800278c:	2161      	movs	r1, #97	; 0x61
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fad6 	bl	8002d40 <VL53L1_WrWord>
					0x0388);
			break;
 8002794:	e08a      	b.n	80028ac <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	f240 32e1 	movw	r2, #993	; 0x3e1
 800279c:	215e      	movs	r1, #94	; 0x5e
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 face 	bl	8002d40 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	f240 4296 	movw	r2, #1174	; 0x496
 80027aa:	2161      	movs	r1, #97	; 0x61
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fac7 	bl	8002d40 <VL53L1_WrWord>
					0x0496);
			break;
 80027b2:	e07b      	b.n	80028ac <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	f240 5291 	movw	r2, #1425	; 0x591
 80027ba:	215e      	movs	r1, #94	; 0x5e
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fabf 	bl	8002d40 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	f240 52c1 	movw	r2, #1473	; 0x5c1
 80027c8:	2161      	movs	r1, #97	; 0x61
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fab8 	bl	8002d40 <VL53L1_WrWord>
					0x05C1);
			break;
 80027d0:	e06c      	b.n	80028ac <VL53L1X_SetTimingBudgetInMs+0x1fe>
		default:
			status = 1;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
			break;
 80027d6:	bf00      	nop
 80027d8:	e068      	b.n	80028ac <VL53L1X_SetTimingBudgetInMs+0x1fe>
		}
	} else {
		switch (TimingBudgetInMs) {
 80027da:	88bb      	ldrh	r3, [r7, #4]
 80027dc:	2b32      	cmp	r3, #50	; 0x32
 80027de:	d028      	beq.n	8002832 <VL53L1X_SetTimingBudgetInMs+0x184>
 80027e0:	2b32      	cmp	r3, #50	; 0x32
 80027e2:	dc04      	bgt.n	80027ee <VL53L1X_SetTimingBudgetInMs+0x140>
 80027e4:	2b14      	cmp	r3, #20
 80027e6:	d00a      	beq.n	80027fe <VL53L1X_SetTimingBudgetInMs+0x150>
 80027e8:	2b21      	cmp	r3, #33	; 0x21
 80027ea:	d015      	beq.n	8002818 <VL53L1X_SetTimingBudgetInMs+0x16a>
 80027ec:	e05b      	b.n	80028a6 <VL53L1X_SetTimingBudgetInMs+0x1f8>
 80027ee:	2bc8      	cmp	r3, #200	; 0xc8
 80027f0:	d03b      	beq.n	800286a <VL53L1X_SetTimingBudgetInMs+0x1bc>
 80027f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027f6:	d047      	beq.n	8002888 <VL53L1X_SetTimingBudgetInMs+0x1da>
 80027f8:	2b64      	cmp	r3, #100	; 0x64
 80027fa:	d027      	beq.n	800284c <VL53L1X_SetTimingBudgetInMs+0x19e>
 80027fc:	e053      	b.n	80028a6 <VL53L1X_SetTimingBudgetInMs+0x1f8>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	221e      	movs	r2, #30
 8002802:	215e      	movs	r1, #94	; 0x5e
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fa9b 	bl	8002d40 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2222      	movs	r2, #34	; 0x22
 800280e:	2161      	movs	r1, #97	; 0x61
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fa95 	bl	8002d40 <VL53L1_WrWord>
					0x0022);
			break;
 8002816:	e049      	b.n	80028ac <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	2260      	movs	r2, #96	; 0x60
 800281c:	215e      	movs	r1, #94	; 0x5e
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fa8e 	bl	8002d40 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	226e      	movs	r2, #110	; 0x6e
 8002828:	2161      	movs	r1, #97	; 0x61
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fa88 	bl	8002d40 <VL53L1_WrWord>
					0x006E);
			break;
 8002830:	e03c      	b.n	80028ac <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	22ad      	movs	r2, #173	; 0xad
 8002836:	215e      	movs	r1, #94	; 0x5e
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fa81 	bl	8002d40 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	22c6      	movs	r2, #198	; 0xc6
 8002842:	2161      	movs	r1, #97	; 0x61
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fa7b 	bl	8002d40 <VL53L1_WrWord>
					0x00C6);
			break;
 800284a:	e02f      	b.n	80028ac <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8002852:	215e      	movs	r1, #94	; 0x5e
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fa73 	bl	8002d40 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 8002860:	2161      	movs	r1, #97	; 0x61
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fa6c 	bl	8002d40 <VL53L1_WrWord>
					0x01EA);
			break;
 8002868:	e020      	b.n	80028ac <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	f240 22d9 	movw	r2, #729	; 0x2d9
 8002870:	215e      	movs	r1, #94	; 0x5e
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fa64 	bl	8002d40 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 800287e:	2161      	movs	r1, #97	; 0x61
 8002880:	4618      	mov	r0, r3
 8002882:	f000 fa5d 	bl	8002d40 <VL53L1_WrWord>
					0x02F8);
			break;
 8002886:	e011      	b.n	80028ac <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	f240 428f 	movw	r2, #1167	; 0x48f
 800288e:	215e      	movs	r1, #94	; 0x5e
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fa55 	bl	8002d40 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800289c:	2161      	movs	r1, #97	; 0x61
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fa4e 	bl	8002d40 <VL53L1_WrWord>
					0x04A4);
			break;
 80028a4:	e002      	b.n	80028ac <VL53L1X_SetTimingBudgetInMs+0x1fe>
		default:
			status = 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
			break;
 80028aa:	bf00      	nop
		}
	}
	return status;
 80028ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	80fb      	strh	r3, [r7, #6]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 80028c8:	f107 020c 	add.w	r2, r7, #12
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	215e      	movs	r1, #94	; 0x5e
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fadd 	bl	8002e90 <VL53L1_RdWord>
 80028d6:	4603      	mov	r3, r0
 80028d8:	73fb      	strb	r3, [r7, #15]
	switch (Temp) {
 80028da:	89bb      	ldrh	r3, [r7, #12]
 80028dc:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 80028e0:	d03b      	beq.n	800295a <VL53L1X_GetTimingBudgetInMs+0xa2>
 80028e2:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 80028e6:	dc0f      	bgt.n	8002908 <VL53L1X_GetTimingBudgetInMs+0x50>
 80028e8:	2b51      	cmp	r3, #81	; 0x51
 80028ea:	d02e      	beq.n	800294a <VL53L1X_GetTimingBudgetInMs+0x92>
 80028ec:	2b51      	cmp	r3, #81	; 0x51
 80028ee:	dc04      	bgt.n	80028fa <VL53L1X_GetTimingBudgetInMs+0x42>
 80028f0:	2b1d      	cmp	r3, #29
 80028f2:	d026      	beq.n	8002942 <VL53L1X_GetTimingBudgetInMs+0x8a>
 80028f4:	2b1e      	cmp	r3, #30
 80028f6:	d028      	beq.n	800294a <VL53L1X_GetTimingBudgetInMs+0x92>
 80028f8:	e040      	b.n	800297c <VL53L1X_GetTimingBudgetInMs+0xc4>
 80028fa:	2bad      	cmp	r3, #173	; 0xad
 80028fc:	d02d      	beq.n	800295a <VL53L1X_GetTimingBudgetInMs+0xa2>
 80028fe:	2bd6      	cmp	r3, #214	; 0xd6
 8002900:	d027      	beq.n	8002952 <VL53L1X_GetTimingBudgetInMs+0x9a>
 8002902:	2b60      	cmp	r3, #96	; 0x60
 8002904:	d025      	beq.n	8002952 <VL53L1X_GetTimingBudgetInMs+0x9a>
 8002906:	e039      	b.n	800297c <VL53L1X_GetTimingBudgetInMs+0xc4>
 8002908:	f240 22e1 	movw	r2, #737	; 0x2e1
 800290c:	4293      	cmp	r3, r2
 800290e:	d028      	beq.n	8002962 <VL53L1X_GetTimingBudgetInMs+0xaa>
 8002910:	f240 22e1 	movw	r2, #737	; 0x2e1
 8002914:	4293      	cmp	r3, r2
 8002916:	dc07      	bgt.n	8002928 <VL53L1X_GetTimingBudgetInMs+0x70>
 8002918:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800291c:	d021      	beq.n	8002962 <VL53L1X_GetTimingBudgetInMs+0xaa>
 800291e:	f240 22d9 	movw	r2, #729	; 0x2d9
 8002922:	4293      	cmp	r3, r2
 8002924:	d021      	beq.n	800296a <VL53L1X_GetTimingBudgetInMs+0xb2>
 8002926:	e029      	b.n	800297c <VL53L1X_GetTimingBudgetInMs+0xc4>
 8002928:	f240 428f 	movw	r2, #1167	; 0x48f
 800292c:	4293      	cmp	r3, r2
 800292e:	d020      	beq.n	8002972 <VL53L1X_GetTimingBudgetInMs+0xba>
 8002930:	f240 5291 	movw	r2, #1425	; 0x591
 8002934:	4293      	cmp	r3, r2
 8002936:	d01c      	beq.n	8002972 <VL53L1X_GetTimingBudgetInMs+0xba>
 8002938:	f240 32e1 	movw	r2, #993	; 0x3e1
 800293c:	4293      	cmp	r3, r2
 800293e:	d014      	beq.n	800296a <VL53L1X_GetTimingBudgetInMs+0xb2>
 8002940:	e01c      	b.n	800297c <VL53L1X_GetTimingBudgetInMs+0xc4>
		case 0x001D :
			*pTimingBudget = 15;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	220f      	movs	r2, #15
 8002946:	801a      	strh	r2, [r3, #0]
			break;
 8002948:	e01d      	b.n	8002986 <VL53L1X_GetTimingBudgetInMs+0xce>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2214      	movs	r2, #20
 800294e:	801a      	strh	r2, [r3, #0]
			break;
 8002950:	e019      	b.n	8002986 <VL53L1X_GetTimingBudgetInMs+0xce>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2221      	movs	r2, #33	; 0x21
 8002956:	801a      	strh	r2, [r3, #0]
			break;
 8002958:	e015      	b.n	8002986 <VL53L1X_GetTimingBudgetInMs+0xce>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2232      	movs	r2, #50	; 0x32
 800295e:	801a      	strh	r2, [r3, #0]
			break;
 8002960:	e011      	b.n	8002986 <VL53L1X_GetTimingBudgetInMs+0xce>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2264      	movs	r2, #100	; 0x64
 8002966:	801a      	strh	r2, [r3, #0]
			break;
 8002968:	e00d      	b.n	8002986 <VL53L1X_GetTimingBudgetInMs+0xce>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	22c8      	movs	r2, #200	; 0xc8
 800296e:	801a      	strh	r2, [r3, #0]
			break;
 8002970:	e009      	b.n	8002986 <VL53L1X_GetTimingBudgetInMs+0xce>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002978:	801a      	strh	r2, [r3, #0]
			break;
 800297a:	e004      	b.n	8002986 <VL53L1X_GetTimingBudgetInMs+0xce>
		default:
			status = 1;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
			*pTimingBudget = 0;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2200      	movs	r2, #0
 8002984:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8002986:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	460a      	mov	r2, r1
 800299c:	80fb      	strh	r3, [r7, #6]
 800299e:	4613      	mov	r3, r2
 80029a0:	80bb      	strh	r3, [r7, #4]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetTimingBudgetInMs(dev, &TB);
 80029a6:	f107 020c 	add.w	r2, r7, #12
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff82 	bl	80028b8 <VL53L1X_GetTimingBudgetInMs>
 80029b4:	4603      	mov	r3, r0
 80029b6:	73fb      	strb	r3, [r7, #15]
	if (status != 0)
 80029b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <VL53L1X_SetDistanceMode+0x32>
		return 1;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e07c      	b.n	8002abe <VL53L1X_SetDistanceMode+0x12c>
	switch (DM) {
 80029c4:	88bb      	ldrh	r3, [r7, #4]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d002      	beq.n	80029d0 <VL53L1X_SetDistanceMode+0x3e>
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d033      	beq.n	8002a36 <VL53L1X_SetDistanceMode+0xa4>
 80029ce:	e065      	b.n	8002a9c <VL53L1X_SetDistanceMode+0x10a>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	2214      	movs	r2, #20
 80029d4:	214b      	movs	r1, #75	; 0x4b
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f986 	bl	8002ce8 <VL53L1_WrByte>
 80029dc:	4603      	mov	r3, r0
 80029de:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	2207      	movs	r2, #7
 80029e4:	2160      	movs	r1, #96	; 0x60
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f97e 	bl	8002ce8 <VL53L1_WrByte>
 80029ec:	4603      	mov	r3, r0
 80029ee:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	2205      	movs	r2, #5
 80029f4:	2163      	movs	r1, #99	; 0x63
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f976 	bl	8002ce8 <VL53L1_WrByte>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	2238      	movs	r2, #56	; 0x38
 8002a04:	2169      	movs	r1, #105	; 0x69
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f96e 	bl	8002ce8 <VL53L1_WrByte>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	f240 7205 	movw	r2, #1797	; 0x705
 8002a16:	2178      	movs	r1, #120	; 0x78
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f991 	bl	8002d40 <VL53L1_WrWord>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	f240 6206 	movw	r2, #1542	; 0x606
 8002a28:	217a      	movs	r1, #122	; 0x7a
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f988 	bl	8002d40 <VL53L1_WrWord>
 8002a30:	4603      	mov	r3, r0
 8002a32:	73fb      	strb	r3, [r7, #15]
		break;
 8002a34:	e035      	b.n	8002aa2 <VL53L1X_SetDistanceMode+0x110>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	220a      	movs	r2, #10
 8002a3a:	214b      	movs	r1, #75	; 0x4b
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 f953 	bl	8002ce8 <VL53L1_WrByte>
 8002a42:	4603      	mov	r3, r0
 8002a44:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	220f      	movs	r2, #15
 8002a4a:	2160      	movs	r1, #96	; 0x60
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 f94b 	bl	8002ce8 <VL53L1_WrByte>
 8002a52:	4603      	mov	r3, r0
 8002a54:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	220d      	movs	r2, #13
 8002a5a:	2163      	movs	r1, #99	; 0x63
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 f943 	bl	8002ce8 <VL53L1_WrByte>
 8002a62:	4603      	mov	r3, r0
 8002a64:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	22b8      	movs	r2, #184	; 0xb8
 8002a6a:	2169      	movs	r1, #105	; 0x69
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 f93b 	bl	8002ce8 <VL53L1_WrByte>
 8002a72:	4603      	mov	r3, r0
 8002a74:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	f640 720d 	movw	r2, #3853	; 0xf0d
 8002a7c:	2178      	movs	r1, #120	; 0x78
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f95e 	bl	8002d40 <VL53L1_WrWord>
 8002a84:	4603      	mov	r3, r0
 8002a86:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	f640 620e 	movw	r2, #3598	; 0xe0e
 8002a8e:	217a      	movs	r1, #122	; 0x7a
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 f955 	bl	8002d40 <VL53L1_WrWord>
 8002a96:	4603      	mov	r3, r0
 8002a98:	73fb      	strb	r3, [r7, #15]
		break;
 8002a9a:	e002      	b.n	8002aa2 <VL53L1X_SetDistanceMode+0x110>
	default:
		status = 1;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
		break;
 8002aa0:	bf00      	nop
	}

	if (status == 0)
 8002aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d107      	bne.n	8002aba <VL53L1X_SetDistanceMode+0x128>
		status = VL53L1X_SetTimingBudgetInMs(dev, TB);
 8002aaa:	89ba      	ldrh	r2, [r7, #12]
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fdfc 	bl	80026ae <VL53L1X_SetTimingBudgetInMs>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	73fb      	strb	r3, [r7, #15]
	return status;
 8002aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	6039      	str	r1, [r7, #0]
 8002ad0:	80fb      	strh	r3, [r7, #6]
	uint8_t TempDM, status=0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8002ad6:	f107 020e 	add.w	r2, r7, #14
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	214b      	movs	r1, #75	; 0x4b
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f99e 	bl	8002e20 <VL53L1_RdByte>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	73fb      	strb	r3, [r7, #15]
	if (TempDM == 0x14)
 8002ae8:	7bbb      	ldrb	r3, [r7, #14]
 8002aea:	2b14      	cmp	r3, #20
 8002aec:	d102      	bne.n	8002af4 <VL53L1X_GetDistanceMode+0x2e>
		*DM=1;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2201      	movs	r2, #1
 8002af2:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8002af4:	7bbb      	ldrb	r3, [r7, #14]
 8002af6:	2b0a      	cmp	r3, #10
 8002af8:	d102      	bne.n	8002b00 <VL53L1X_GetDistanceMode+0x3a>
		*DM=2;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2202      	movs	r2, #2
 8002afe:	801a      	strh	r2, [r3, #0]
	return status;
 8002b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	0000      	movs	r0, r0
	...

08002b10 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	80fb      	strh	r3, [r7, #6]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8002b20:	f107 020c 	add.w	r2, r7, #12
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	21de      	movs	r1, #222	; 0xde
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 f9b1 	bl	8002e90 <VL53L1_RdWord>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	73fb      	strb	r3, [r7, #15]
	ClockPLL = ClockPLL&0x3FF;
 8002b32:	89bb      	ldrh	r3, [r7, #12]
 8002b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	81bb      	strh	r3, [r7, #12]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8002b3c:	89bb      	ldrh	r3, [r7, #12]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	fb03 f302 	mul.w	r3, r3, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fce4 	bl	8000514 <__aeabi_ui2d>
 8002b4c:	a30c      	add	r3, pc, #48	; (adr r3, 8002b80 <VL53L1X_SetInterMeasurementInMs+0x70>)
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	f7fd fd59 	bl	8000608 <__aeabi_dmul>
 8002b56:	4603      	mov	r3, r0
 8002b58:	460c      	mov	r4, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	f7fd ff65 	bl	8000a2c <__aeabi_d2uiz>
 8002b62:	4602      	mov	r2, r0
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	216c      	movs	r1, #108	; 0x6c
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 f91d 	bl	8002da8 <VL53L1_WrDWord>
	return status;
 8002b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd90      	pop	{r4, r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	f3af 8000 	nop.w
 8002b80:	33333333 	.word	0x33333333
 8002b84:	3ff13333 	.word	0x3ff13333

08002b88 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	6039      	str	r1, [r7, #0]
 8002b92:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73bb      	strb	r3, [r7, #14]

	status = VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8002b9c:	f107 020e 	add.w	r2, r7, #14
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	21e5      	movs	r1, #229	; 0xe5
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 f93b 	bl	8002e20 <VL53L1_RdByte>
 8002baa:	4603      	mov	r3, r0
 8002bac:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8002bae:	7bba      	ldrb	r2, [r7, #14]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	701a      	strb	r2, [r3, #0]
	return status;
 8002bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status = (VL53L1_RdWord(dev,
 8002bd0:	f107 020c 	add.w	r2, r7, #12
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	2196      	movs	r1, #150	; 0x96
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 f959 	bl	8002e90 <VL53L1_RdWord>
 8002bde:	4603      	mov	r3, r0
 8002be0:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8002be2:	89ba      	ldrh	r2, [r7, #12]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	801a      	strh	r2, [r3, #0]
	return status;
 8002be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <VL53L1X_GetRangeStatus>:
	*ambRate = tmp*8;
	return status;
}

VL53L1X_ERROR VL53L1X_GetRangeStatus(uint16_t dev, uint8_t *rangeStatus)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	73fb      	strb	r3, [r7, #15]
	uint8_t RgSt;

	*rangeStatus = 255;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	22ff      	movs	r2, #255	; 0xff
 8002c08:	701a      	strb	r2, [r3, #0]
	status = VL53L1_RdByte(dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 8002c0a:	f107 020e 	add.w	r2, r7, #14
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	2189      	movs	r1, #137	; 0x89
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f904 	bl	8002e20 <VL53L1_RdByte>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	73fb      	strb	r3, [r7, #15]
	RgSt = RgSt & 0x1F;
 8002c1c:	7bbb      	ldrb	r3, [r7, #14]
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	73bb      	strb	r3, [r7, #14]
	if (RgSt < 24)
 8002c26:	7bbb      	ldrb	r3, [r7, #14]
 8002c28:	2b17      	cmp	r3, #23
 8002c2a:	d805      	bhi.n	8002c38 <VL53L1X_GetRangeStatus+0x44>
		*rangeStatus = status_rtn[RgSt];
 8002c2c:	7bbb      	ldrb	r3, [r7, #14]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <VL53L1X_GetRangeStatus+0x50>)
 8002c32:	5c9a      	ldrb	r2, [r3, r2]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	701a      	strb	r2, [r3, #0]
	return status;
 8002c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	0800c044 	.word	0x0800c044

08002c48 <_I2CWrite>:
//horrible hack because those libs have become worse than before and i need to squize all info (i2c bus and address) in an uint16
extern I2C_HandleTypeDef hi2c1;
extern I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef *hw[2] = {&hi2c1, &hi2c2};

int _I2CWrite(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	4603      	mov	r3, r0
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	81fb      	strh	r3, [r7, #14]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	330a      	adds	r3, #10
 8002c5a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(hw[dev >> 8], dev & 0xFF, pdata, count, i2c_time_out);
 8002c5c:	89fb      	ldrh	r3, [r7, #14]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <_I2CWrite+0x48>)
 8002c66:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002c6a:	89fb      	ldrh	r3, [r7, #14]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	b299      	uxth	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	f000 ffda 	bl	8003c34 <HAL_I2C_Master_Transmit>
 8002c80:	4603      	mov	r3, r0
 8002c82:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev, count);
    }
    return status;
 8002c84:	693b      	ldr	r3, [r7, #16]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000048 	.word	0x20000048

08002c94 <_I2CRead>:

int _I2CRead(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	81fb      	strh	r3, [r7, #14]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	330a      	adds	r3, #10
 8002ca6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(hw[dev >> 8], (dev & 0xFF)|1, pdata, count, i2c_time_out);
 8002ca8:	89fb      	ldrh	r3, [r7, #14]
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <_I2CRead+0x50>)
 8002cb2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002cb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	b21b      	sxth	r3, r3
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	b21b      	sxth	r3, r3
 8002cc4:	b299      	uxth	r1, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	f001 f8ad 	bl	8003e30 <HAL_I2C_Master_Receive>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev, count);
    }
    return status;
 8002cda:	693b      	ldr	r3, [r7, #16]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000048 	.word	0x20000048

08002ce8 <VL53L1_WrByte>:
    }
done:
    return err;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	80fb      	strh	r3, [r7, #6]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	80bb      	strh	r3, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	70fb      	strb	r3, [r7, #3]
    VL53L1X_Error err = VL53L1_ERROR_NONE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8002cfe:	88bb      	ldrh	r3, [r7, #4]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <VL53L1_WrByte+0x54>)
 8002d08:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8002d0a:	88bb      	ldrh	r3, [r7, #4]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <VL53L1_WrByte+0x54>)
 8002d10:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <VL53L1_WrByte+0x54>)
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	4907      	ldr	r1, [pc, #28]	; (8002d3c <VL53L1_WrByte+0x54>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff92 	bl	8002c48 <_I2CWrite>
 8002d24:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <VL53L1_WrByte+0x48>
        err = VL53L1_ERROR_CONTROL_INTERFACE;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
    }
    return err;
 8002d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	2000048c 	.word	0x2000048c

08002d40 <VL53L1_WrWord>:

int8_t VL53L1_WrWord(uint16_t dev, uint16_t index, uint16_t data) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	80fb      	strh	r3, [r7, #6]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	80bb      	strh	r3, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	807b      	strh	r3, [r7, #2]
    VL53L1X_Error err = VL53L1_ERROR_NONE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8002d56:	88bb      	ldrh	r3, [r7, #4]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <VL53L1_WrWord+0x64>)
 8002d60:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8002d62:	88bb      	ldrh	r3, [r7, #4]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <VL53L1_WrWord+0x64>)
 8002d68:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8002d6a:	887b      	ldrh	r3, [r7, #2]
 8002d6c:	0a1b      	lsrs	r3, r3, #8
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <VL53L1_WrWord+0x64>)
 8002d74:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <VL53L1_WrWord+0x64>)
 8002d7c:	70da      	strb	r2, [r3, #3]

    status_int = _I2CWrite(dev, _I2CBuffer, 4);
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	2204      	movs	r2, #4
 8002d82:	4908      	ldr	r1, [pc, #32]	; (8002da4 <VL53L1_WrWord+0x64>)
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff5f 	bl	8002c48 <_I2CWrite>
 8002d8a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <VL53L1_WrWord+0x56>
        err = VL53L1_ERROR_CONTROL_INTERFACE;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
    }
    return err;
 8002d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	2000048c 	.word	0x2000048c

08002da8 <VL53L1_WrDWord>:

int8_t VL53L1_WrDWord(uint16_t dev, uint16_t index, uint32_t data) {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	603a      	str	r2, [r7, #0]
 8002db2:	80fb      	strh	r3, [r7, #6]
 8002db4:	460b      	mov	r3, r1
 8002db6:	80bb      	strh	r3, [r7, #4]
    VL53L1X_Error err = VL53L1_ERROR_NONE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
    _I2CBuffer[0] = index>>8;
 8002dbc:	88bb      	ldrh	r3, [r7, #4]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <VL53L1_WrDWord+0x74>)
 8002dc6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8002dc8:	88bb      	ldrh	r3, [r7, #4]
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <VL53L1_WrDWord+0x74>)
 8002dce:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 24) & 0xFF;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	0e1b      	lsrs	r3, r3, #24
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <VL53L1_WrDWord+0x74>)
 8002dd8:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 16) & 0xFF;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <VL53L1_WrDWord+0x74>)
 8002de2:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 8)  & 0xFF;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <VL53L1_WrDWord+0x74>)
 8002dec:	711a      	strb	r2, [r3, #4]
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <VL53L1_WrDWord+0x74>)
 8002df4:	715a      	strb	r2, [r3, #5]

    status_int = _I2CWrite(dev, _I2CBuffer, 6);
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	2206      	movs	r2, #6
 8002dfa:	4908      	ldr	r1, [pc, #32]	; (8002e1c <VL53L1_WrDWord+0x74>)
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff23 	bl	8002c48 <_I2CWrite>
 8002e02:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <VL53L1_WrDWord+0x66>
        err = VL53L1_ERROR_CONTROL_INTERFACE;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
    }
    return err;
 8002e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	2000048c 	.word	0x2000048c

08002e20 <VL53L1_RdByte>:

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	603a      	str	r2, [r7, #0]
 8002e2a:	80fb      	strh	r3, [r7, #6]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	80bb      	strh	r3, [r7, #4]
    VL53L1X_Error err = VL53L1_ERROR_NONE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8002e34:	88bb      	ldrh	r3, [r7, #4]
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <VL53L1_RdByte+0x6c>)
 8002e3e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8002e40:	88bb      	ldrh	r3, [r7, #4]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <VL53L1_RdByte+0x6c>)
 8002e46:	705a      	strb	r2, [r3, #1]

    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	490f      	ldr	r1, [pc, #60]	; (8002e8c <VL53L1_RdByte+0x6c>)
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fefa 	bl	8002c48 <_I2CWrite>
 8002e54:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <VL53L1_RdByte+0x42>
        err = VL53L1_ERROR_CONTROL_INTERFACE;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
        goto done;
 8002e60:	e00d      	b.n	8002e7e <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(dev, data, 1);
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	2201      	movs	r2, #1
 8002e66:	6839      	ldr	r1, [r7, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff13 	bl	8002c94 <_I2CRead>
 8002e6e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <VL53L1_RdByte+0x5c>
        err = VL53L1_ERROR_CONTROL_INTERFACE;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
 8002e7a:	e000      	b.n	8002e7e <VL53L1_RdByte+0x5e>
    }
done:
 8002e7c:	bf00      	nop
    return err;
 8002e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	2000048c 	.word	0x2000048c

08002e90 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	603a      	str	r2, [r7, #0]
 8002e9a:	80fb      	strh	r3, [r7, #6]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	80bb      	strh	r3, [r7, #4]
    VL53L1X_Error err = VL53L1_ERROR_NONE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8002ea4:	88bb      	ldrh	r3, [r7, #4]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <VL53L1_RdWord+0x80>)
 8002eae:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8002eb0:	88bb      	ldrh	r3, [r7, #4]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <VL53L1_RdWord+0x80>)
 8002eb6:	705a      	strb	r2, [r3, #1]

    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	4914      	ldr	r1, [pc, #80]	; (8002f10 <VL53L1_RdWord+0x80>)
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fec2 	bl	8002c48 <_I2CWrite>
 8002ec4:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <VL53L1_RdWord+0x42>
        err = VL53L1_ERROR_CONTROL_INTERFACE;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
        goto done;
 8002ed0:	e018      	b.n	8002f04 <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	490e      	ldr	r1, [pc, #56]	; (8002f10 <VL53L1_RdWord+0x80>)
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fedb 	bl	8002c94 <_I2CRead>
 8002ede:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <VL53L1_RdWord+0x5c>
        err = VL53L1_ERROR_CONTROL_INTERFACE;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
        goto done;
 8002eea:	e00b      	b.n	8002f04 <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <VL53L1_RdWord+0x80>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <VL53L1_RdWord+0x80>)
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	801a      	strh	r2, [r3, #0]
done:
    return err;
 8002f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	2000048c 	.word	0x2000048c

08002f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f18:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <HAL_Init+0x40>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <HAL_Init+0x40>)
 8002f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_Init+0x40>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <HAL_Init+0x40>)
 8002f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f30:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <HAL_Init+0x40>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <HAL_Init+0x40>)
 8002f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f3c:	2003      	movs	r0, #3
 8002f3e:	f000 f94d 	bl	80031dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f000 f808 	bl	8002f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f48:	f7ff f812 	bl	8001f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023c00 	.word	0x40023c00

08002f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_InitTick+0x54>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <HAL_InitTick+0x58>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f994 	bl	80032a4 <HAL_SYSTICK_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e00e      	b.n	8002fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b0f      	cmp	r3, #15
 8002f8a:	d80a      	bhi.n	8002fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f94:	f000 f942 	bl	800321c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f98:	4a06      	ldr	r2, [pc, #24]	; (8002fb4 <HAL_InitTick+0x5c>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e000      	b.n	8002fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000044 	.word	0x20000044
 8002fb0:	20000054 	.word	0x20000054
 8002fb4:	20000050 	.word	0x20000050

08002fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_IncTick+0x20>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_IncTick+0x24>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <HAL_IncTick+0x24>)
 8002fca:	6013      	str	r3, [r2, #0]
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000054 	.word	0x20000054
 8002fdc:	2000058c 	.word	0x2000058c

08002fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <HAL_GetTick+0x14>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	2000058c 	.word	0x2000058c

08002ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003000:	f7ff ffee 	bl	8002fe0 <HAL_GetTick>
 8003004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003010:	d005      	beq.n	800301e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_Delay+0x40>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800301e:	bf00      	nop
 8003020:	f7ff ffde 	bl	8002fe0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	429a      	cmp	r2, r3
 800302e:	d8f7      	bhi.n	8003020 <HAL_Delay+0x28>
  {
  }
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000054 	.word	0x20000054

0800303c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003058:	4013      	ands	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800306c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306e:	4a04      	ldr	r2, [pc, #16]	; (8003080 <__NVIC_SetPriorityGrouping+0x44>)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	60d3      	str	r3, [r2, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <__NVIC_GetPriorityGrouping+0x18>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	f003 0307 	and.w	r3, r3, #7
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	db0b      	blt.n	80030ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	f003 021f 	and.w	r2, r3, #31
 80030b8:	4907      	ldr	r1, [pc, #28]	; (80030d8 <__NVIC_EnableIRQ+0x38>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2001      	movs	r0, #1
 80030c2:	fa00 f202 	lsl.w	r2, r0, r2
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000e100 	.word	0xe000e100

080030dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	6039      	str	r1, [r7, #0]
 80030e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	db0a      	blt.n	8003106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	490c      	ldr	r1, [pc, #48]	; (8003128 <__NVIC_SetPriority+0x4c>)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	440b      	add	r3, r1
 8003100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003104:	e00a      	b.n	800311c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4908      	ldr	r1, [pc, #32]	; (800312c <__NVIC_SetPriority+0x50>)
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	3b04      	subs	r3, #4
 8003114:	0112      	lsls	r2, r2, #4
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	440b      	add	r3, r1
 800311a:	761a      	strb	r2, [r3, #24]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000e100 	.word	0xe000e100
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	; 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f1c3 0307 	rsb	r3, r3, #7
 800314a:	2b04      	cmp	r3, #4
 800314c:	bf28      	it	cs
 800314e:	2304      	movcs	r3, #4
 8003150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3304      	adds	r3, #4
 8003156:	2b06      	cmp	r3, #6
 8003158:	d902      	bls.n	8003160 <NVIC_EncodePriority+0x30>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3b03      	subs	r3, #3
 800315e:	e000      	b.n	8003162 <NVIC_EncodePriority+0x32>
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	401a      	ands	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	43d9      	mvns	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	4313      	orrs	r3, r2
         );
}
 800318a:	4618      	mov	r0, r3
 800318c:	3724      	adds	r7, #36	; 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a8:	d301      	bcc.n	80031ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031aa:	2301      	movs	r3, #1
 80031ac:	e00f      	b.n	80031ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ae:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <SysTick_Config+0x40>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b6:	210f      	movs	r1, #15
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031bc:	f7ff ff8e 	bl	80030dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <SysTick_Config+0x40>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c6:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <SysTick_Config+0x40>)
 80031c8:	2207      	movs	r2, #7
 80031ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	e000e010 	.word	0xe000e010

080031dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b07      	cmp	r3, #7
 80031e8:	d00f      	beq.n	800320a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b06      	cmp	r3, #6
 80031ee:	d00c      	beq.n	800320a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d009      	beq.n	800320a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d006      	beq.n	800320a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d003      	beq.n	800320a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003202:	2192      	movs	r1, #146	; 0x92
 8003204:	4804      	ldr	r0, [pc, #16]	; (8003218 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003206:	f7fe fea8 	bl	8001f5a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ff16 	bl	800303c <__NVIC_SetPriorityGrouping>
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	0800bdf4 	.word	0x0800bdf4

0800321c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b0f      	cmp	r3, #15
 8003232:	d903      	bls.n	800323c <HAL_NVIC_SetPriority+0x20>
 8003234:	21aa      	movs	r1, #170	; 0xaa
 8003236:	480e      	ldr	r0, [pc, #56]	; (8003270 <HAL_NVIC_SetPriority+0x54>)
 8003238:	f7fe fe8f 	bl	8001f5a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b0f      	cmp	r3, #15
 8003240:	d903      	bls.n	800324a <HAL_NVIC_SetPriority+0x2e>
 8003242:	21ab      	movs	r1, #171	; 0xab
 8003244:	480a      	ldr	r0, [pc, #40]	; (8003270 <HAL_NVIC_SetPriority+0x54>)
 8003246:	f7fe fe88 	bl	8001f5a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800324a:	f7ff ff1b 	bl	8003084 <__NVIC_GetPriorityGrouping>
 800324e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	6978      	ldr	r0, [r7, #20]
 8003256:	f7ff ff6b 	bl	8003130 <NVIC_EncodePriority>
 800325a:	4602      	mov	r2, r0
 800325c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ff3a 	bl	80030dc <__NVIC_SetPriority>
}
 8003268:	bf00      	nop
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	0800bdf4 	.word	0x0800bdf4

08003274 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	2b00      	cmp	r3, #0
 8003284:	da03      	bge.n	800328e <HAL_NVIC_EnableIRQ+0x1a>
 8003286:	21be      	movs	r1, #190	; 0xbe
 8003288:	4805      	ldr	r0, [pc, #20]	; (80032a0 <HAL_NVIC_EnableIRQ+0x2c>)
 800328a:	f7fe fe66 	bl	8001f5a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff ff04 	bl	80030a0 <__NVIC_EnableIRQ>
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	0800bdf4 	.word	0x0800bdf4

080032a4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff ff73 	bl	8003198 <SysTick_Config>
 80032b2:	4603      	mov	r3, r0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d004      	beq.n	80032da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2280      	movs	r2, #128	; 0x80
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00c      	b.n	80032f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2205      	movs	r2, #5
 80032de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003312:	2300      	movs	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a3b      	ldr	r2, [pc, #236]	; (8003408 <HAL_GPIO_Init+0x108>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d017      	beq.n	800334e <HAL_GPIO_Init+0x4e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a3a      	ldr	r2, [pc, #232]	; (800340c <HAL_GPIO_Init+0x10c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_GPIO_Init+0x4e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a39      	ldr	r2, [pc, #228]	; (8003410 <HAL_GPIO_Init+0x110>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00f      	beq.n	800334e <HAL_GPIO_Init+0x4e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a38      	ldr	r2, [pc, #224]	; (8003414 <HAL_GPIO_Init+0x114>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00b      	beq.n	800334e <HAL_GPIO_Init+0x4e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a37      	ldr	r2, [pc, #220]	; (8003418 <HAL_GPIO_Init+0x118>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <HAL_GPIO_Init+0x4e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a36      	ldr	r2, [pc, #216]	; (800341c <HAL_GPIO_Init+0x11c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x4e>
 8003346:	21b3      	movs	r1, #179	; 0xb3
 8003348:	4835      	ldr	r0, [pc, #212]	; (8003420 <HAL_GPIO_Init+0x120>)
 800334a:	f7fe fe06 	bl	8001f5a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_GPIO_Init+0x64>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_GPIO_Init+0x6c>
 8003364:	21b4      	movs	r1, #180	; 0xb4
 8003366:	482e      	ldr	r0, [pc, #184]	; (8003420 <HAL_GPIO_Init+0x120>)
 8003368:	f7fe fdf7 	bl	8001f5a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d035      	beq.n	80033e0 <HAL_GPIO_Init+0xe0>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d031      	beq.n	80033e0 <HAL_GPIO_Init+0xe0>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b11      	cmp	r3, #17
 8003382:	d02d      	beq.n	80033e0 <HAL_GPIO_Init+0xe0>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d029      	beq.n	80033e0 <HAL_GPIO_Init+0xe0>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b12      	cmp	r3, #18
 8003392:	d025      	beq.n	80033e0 <HAL_GPIO_Init+0xe0>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a22      	ldr	r2, [pc, #136]	; (8003424 <HAL_GPIO_Init+0x124>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d020      	beq.n	80033e0 <HAL_GPIO_Init+0xe0>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4a21      	ldr	r2, [pc, #132]	; (8003428 <HAL_GPIO_Init+0x128>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d01b      	beq.n	80033e0 <HAL_GPIO_Init+0xe0>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4a1f      	ldr	r2, [pc, #124]	; (800342c <HAL_GPIO_Init+0x12c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d016      	beq.n	80033e0 <HAL_GPIO_Init+0xe0>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4a1e      	ldr	r2, [pc, #120]	; (8003430 <HAL_GPIO_Init+0x130>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d011      	beq.n	80033e0 <HAL_GPIO_Init+0xe0>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <HAL_GPIO_Init+0x134>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00c      	beq.n	80033e0 <HAL_GPIO_Init+0xe0>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <HAL_GPIO_Init+0x138>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d007      	beq.n	80033e0 <HAL_GPIO_Init+0xe0>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0xe0>
 80033d8:	21b5      	movs	r1, #181	; 0xb5
 80033da:	4811      	ldr	r0, [pc, #68]	; (8003420 <HAL_GPIO_Init+0x120>)
 80033dc:	f7fe fdbd 	bl	8001f5a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00b      	beq.n	8003400 <HAL_GPIO_Init+0x100>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d007      	beq.n	8003400 <HAL_GPIO_Init+0x100>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0x100>
 80033f8:	21b6      	movs	r1, #182	; 0xb6
 80033fa:	4809      	ldr	r0, [pc, #36]	; (8003420 <HAL_GPIO_Init+0x120>)
 80033fc:	f7fe fdad 	bl	8001f5a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003400:	2300      	movs	r3, #0
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	e211      	b.n	800382a <HAL_GPIO_Init+0x52a>
 8003406:	bf00      	nop
 8003408:	40020000 	.word	0x40020000
 800340c:	40020400 	.word	0x40020400
 8003410:	40020800 	.word	0x40020800
 8003414:	40020c00 	.word	0x40020c00
 8003418:	40021000 	.word	0x40021000
 800341c:	40021c00 	.word	0x40021c00
 8003420:	0800be30 	.word	0x0800be30
 8003424:	10110000 	.word	0x10110000
 8003428:	10210000 	.word	0x10210000
 800342c:	10310000 	.word	0x10310000
 8003430:	10120000 	.word	0x10120000
 8003434:	10220000 	.word	0x10220000
 8003438:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800343c:	2201      	movs	r2, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4013      	ands	r3, r2
 800344e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	f040 81e5 	bne.w	8003824 <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d00b      	beq.n	800347a <HAL_GPIO_Init+0x17a>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d007      	beq.n	800347a <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800346e:	2b11      	cmp	r3, #17
 8003470:	d003      	beq.n	800347a <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b12      	cmp	r3, #18
 8003478:	d144      	bne.n	8003504 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00f      	beq.n	80034a2 <HAL_GPIO_Init+0x1a2>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d00b      	beq.n	80034a2 <HAL_GPIO_Init+0x1a2>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d007      	beq.n	80034a2 <HAL_GPIO_Init+0x1a2>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_Init+0x1a2>
 800349a:	21c8      	movs	r1, #200	; 0xc8
 800349c:	489f      	ldr	r0, [pc, #636]	; (800371c <HAL_GPIO_Init+0x41c>)
 800349e:	f7fe fd5c 	bl	8001f5a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2203      	movs	r2, #3
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034d8:	2201      	movs	r2, #1
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 0201 	and.w	r2, r3, #1
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	2203      	movs	r2, #3
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d004      	beq.n	8003546 <HAL_GPIO_Init+0x246>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b12      	cmp	r3, #18
 8003542:	f040 80a0 	bne.w	8003686 <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d077      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b09      	cmp	r3, #9
 8003554:	d073      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d06f      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d06b      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d067      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d063      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d05f      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d05b      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d057      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d053      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d04f      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d04b      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d047      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d043      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b05      	cmp	r3, #5
 80035bc:	d03f      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b05      	cmp	r3, #5
 80035c4:	d03b      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b05      	cmp	r3, #5
 80035cc:	d037      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d033      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b06      	cmp	r3, #6
 80035dc:	d02f      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d02b      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d027      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b07      	cmp	r3, #7
 80035f4:	d023      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b07      	cmp	r3, #7
 80035fc:	d01f      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b07      	cmp	r3, #7
 8003604:	d01b      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b08      	cmp	r3, #8
 800360c:	d017      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b0a      	cmp	r3, #10
 8003614:	d013      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b09      	cmp	r3, #9
 800361c:	d00f      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b09      	cmp	r3, #9
 8003624:	d00b      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b0c      	cmp	r3, #12
 800362c:	d007      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b0f      	cmp	r3, #15
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x33e>
 8003636:	21e0      	movs	r1, #224	; 0xe0
 8003638:	4838      	ldr	r0, [pc, #224]	; (800371c <HAL_GPIO_Init+0x41c>)
 800363a:	f7fe fc8e 	bl	8001f5a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	08da      	lsrs	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3208      	adds	r2, #8
 8003646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	220f      	movs	r2, #15
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	08da      	lsrs	r2, r3, #3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3208      	adds	r2, #8
 8003680:	69b9      	ldr	r1, [r7, #24]
 8003682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	2203      	movs	r2, #3
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 0203 	and.w	r2, r3, #3
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80ae 	beq.w	8003824 <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	4b14      	ldr	r3, [pc, #80]	; (8003720 <HAL_GPIO_Init+0x420>)
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	4a13      	ldr	r2, [pc, #76]	; (8003720 <HAL_GPIO_Init+0x420>)
 80036d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036d6:	6453      	str	r3, [r2, #68]	; 0x44
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <HAL_GPIO_Init+0x420>)
 80036da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036e4:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <HAL_GPIO_Init+0x424>)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	089b      	lsrs	r3, r3, #2
 80036ea:	3302      	adds	r3, #2
 80036ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	220f      	movs	r2, #15
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a07      	ldr	r2, [pc, #28]	; (8003728 <HAL_GPIO_Init+0x428>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d025      	beq.n	800375c <HAL_GPIO_Init+0x45c>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a06      	ldr	r2, [pc, #24]	; (800372c <HAL_GPIO_Init+0x42c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d01f      	beq.n	8003758 <HAL_GPIO_Init+0x458>
 8003718:	e00a      	b.n	8003730 <HAL_GPIO_Init+0x430>
 800371a:	bf00      	nop
 800371c:	0800be30 	.word	0x0800be30
 8003720:	40023800 	.word	0x40023800
 8003724:	40013800 	.word	0x40013800
 8003728:	40020000 	.word	0x40020000
 800372c:	40020400 	.word	0x40020400
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a42      	ldr	r2, [pc, #264]	; (800383c <HAL_GPIO_Init+0x53c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00d      	beq.n	8003754 <HAL_GPIO_Init+0x454>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a41      	ldr	r2, [pc, #260]	; (8003840 <HAL_GPIO_Init+0x540>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d007      	beq.n	8003750 <HAL_GPIO_Init+0x450>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a40      	ldr	r2, [pc, #256]	; (8003844 <HAL_GPIO_Init+0x544>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_GPIO_Init+0x44c>
 8003748:	2304      	movs	r3, #4
 800374a:	e008      	b.n	800375e <HAL_GPIO_Init+0x45e>
 800374c:	2307      	movs	r3, #7
 800374e:	e006      	b.n	800375e <HAL_GPIO_Init+0x45e>
 8003750:	2303      	movs	r3, #3
 8003752:	e004      	b.n	800375e <HAL_GPIO_Init+0x45e>
 8003754:	2302      	movs	r3, #2
 8003756:	e002      	b.n	800375e <HAL_GPIO_Init+0x45e>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <HAL_GPIO_Init+0x45e>
 800375c:	2300      	movs	r3, #0
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	f002 0203 	and.w	r2, r2, #3
 8003764:	0092      	lsls	r2, r2, #2
 8003766:	4093      	lsls	r3, r2
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800376e:	4936      	ldr	r1, [pc, #216]	; (8003848 <HAL_GPIO_Init+0x548>)
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	089b      	lsrs	r3, r3, #2
 8003774:	3302      	adds	r3, #2
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800377c:	4b33      	ldr	r3, [pc, #204]	; (800384c <HAL_GPIO_Init+0x54c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037a0:	4a2a      	ldr	r2, [pc, #168]	; (800384c <HAL_GPIO_Init+0x54c>)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037a6:	4b29      	ldr	r3, [pc, #164]	; (800384c <HAL_GPIO_Init+0x54c>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ca:	4a20      	ldr	r2, [pc, #128]	; (800384c <HAL_GPIO_Init+0x54c>)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037d0:	4b1e      	ldr	r3, [pc, #120]	; (800384c <HAL_GPIO_Init+0x54c>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037f4:	4a15      	ldr	r2, [pc, #84]	; (800384c <HAL_GPIO_Init+0x54c>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037fa:	4b14      	ldr	r3, [pc, #80]	; (800384c <HAL_GPIO_Init+0x54c>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800381e:	4a0b      	ldr	r2, [pc, #44]	; (800384c <HAL_GPIO_Init+0x54c>)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	3301      	adds	r3, #1
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2b0f      	cmp	r3, #15
 800382e:	f67f ae05 	bls.w	800343c <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8003832:	bf00      	nop
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40020800 	.word	0x40020800
 8003840:	40020c00 	.word	0x40020c00
 8003844:	40021000 	.word	0x40021000
 8003848:	40013800 	.word	0x40013800
 800384c:	40013c00 	.word	0x40013c00

08003850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
 800385c:	4613      	mov	r3, r2
 800385e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d004      	beq.n	8003870 <HAL_GPIO_WritePin+0x20>
 8003866:	887b      	ldrh	r3, [r7, #2]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	2b00      	cmp	r3, #0
 800386e:	d004      	beq.n	800387a <HAL_GPIO_WritePin+0x2a>
 8003870:	f240 119f 	movw	r1, #415	; 0x19f
 8003874:	480e      	ldr	r0, [pc, #56]	; (80038b0 <HAL_GPIO_WritePin+0x60>)
 8003876:	f7fe fb70 	bl	8001f5a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800387a:	787b      	ldrb	r3, [r7, #1]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_GPIO_WritePin+0x40>
 8003880:	787b      	ldrb	r3, [r7, #1]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d004      	beq.n	8003890 <HAL_GPIO_WritePin+0x40>
 8003886:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800388a:	4809      	ldr	r0, [pc, #36]	; (80038b0 <HAL_GPIO_WritePin+0x60>)
 800388c:	f7fe fb65 	bl	8001f5a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800389c:	e003      	b.n	80038a6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	0800be30 	.word	0x0800be30

080038b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e1b1      	b.n	8003c2a <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4aa2      	ldr	r2, [pc, #648]	; (8003b54 <HAL_I2C_Init+0x2a0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00e      	beq.n	80038ee <HAL_I2C_Init+0x3a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4aa0      	ldr	r2, [pc, #640]	; (8003b58 <HAL_I2C_Init+0x2a4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d009      	beq.n	80038ee <HAL_I2C_Init+0x3a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a9f      	ldr	r2, [pc, #636]	; (8003b5c <HAL_I2C_Init+0x2a8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d004      	beq.n	80038ee <HAL_I2C_Init+0x3a>
 80038e4:	f240 11bd 	movw	r1, #445	; 0x1bd
 80038e8:	489d      	ldr	r0, [pc, #628]	; (8003b60 <HAL_I2C_Init+0x2ac>)
 80038ea:	f7fe fb36 	bl	8001f5a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <HAL_I2C_Init+0x4c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4a9a      	ldr	r2, [pc, #616]	; (8003b64 <HAL_I2C_Init+0x2b0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d904      	bls.n	800390a <HAL_I2C_Init+0x56>
 8003900:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8003904:	4896      	ldr	r0, [pc, #600]	; (8003b60 <HAL_I2C_Init+0x2ac>)
 8003906:	f7fe fb28 	bl	8001f5a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <HAL_I2C_Init+0x72>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800391a:	d004      	beq.n	8003926 <HAL_I2C_Init+0x72>
 800391c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003920:	488f      	ldr	r0, [pc, #572]	; (8003b60 <HAL_I2C_Init+0x2ac>)
 8003922:	f7fe fb1a 	bl	8001f5a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800392e:	f023 0303 	bic.w	r3, r3, #3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d004      	beq.n	8003940 <HAL_I2C_Init+0x8c>
 8003936:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800393a:	4889      	ldr	r0, [pc, #548]	; (8003b60 <HAL_I2C_Init+0x2ac>)
 800393c:	f7fe fb0d 	bl	8001f5a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003948:	d009      	beq.n	800395e <HAL_I2C_Init+0xaa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003952:	d004      	beq.n	800395e <HAL_I2C_Init+0xaa>
 8003954:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003958:	4881      	ldr	r0, [pc, #516]	; (8003b60 <HAL_I2C_Init+0x2ac>)
 800395a:	f7fe fafe 	bl	8001f5a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_I2C_Init+0xc4>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d004      	beq.n	8003978 <HAL_I2C_Init+0xc4>
 800396e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003972:	487b      	ldr	r0, [pc, #492]	; (8003b60 <HAL_I2C_Init+0x2ac>)
 8003974:	f7fe faf1 	bl	8001f5a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003980:	2b00      	cmp	r3, #0
 8003982:	d004      	beq.n	800398e <HAL_I2C_Init+0xda>
 8003984:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003988:	4875      	ldr	r0, [pc, #468]	; (8003b60 <HAL_I2C_Init+0x2ac>)
 800398a:	f7fe fae6 	bl	8001f5a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_I2C_Init+0xf4>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	2b40      	cmp	r3, #64	; 0x40
 800399c:	d004      	beq.n	80039a8 <HAL_I2C_Init+0xf4>
 800399e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80039a2:	486f      	ldr	r0, [pc, #444]	; (8003b60 <HAL_I2C_Init+0x2ac>)
 80039a4:	f7fe fad9 	bl	8001f5a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_I2C_Init+0x10e>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	2b80      	cmp	r3, #128	; 0x80
 80039b6:	d004      	beq.n	80039c2 <HAL_I2C_Init+0x10e>
 80039b8:	f240 11c5 	movw	r1, #453	; 0x1c5
 80039bc:	4868      	ldr	r0, [pc, #416]	; (8003b60 <HAL_I2C_Init+0x2ac>)
 80039be:	f7fe facc 	bl	8001f5a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fe faf2 	bl	8001fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2224      	movs	r2, #36	; 0x24
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a14:	f002 ff86 	bl	8006924 <HAL_RCC_GetPCLK1Freq>
 8003a18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4a52      	ldr	r2, [pc, #328]	; (8003b68 <HAL_I2C_Init+0x2b4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d807      	bhi.n	8003a34 <HAL_I2C_Init+0x180>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4a51      	ldr	r2, [pc, #324]	; (8003b6c <HAL_I2C_Init+0x2b8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	bf94      	ite	ls
 8003a2c:	2301      	movls	r3, #1
 8003a2e:	2300      	movhi	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e006      	b.n	8003a42 <HAL_I2C_Init+0x18e>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4a4e      	ldr	r2, [pc, #312]	; (8003b70 <HAL_I2C_Init+0x2bc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	bf94      	ite	ls
 8003a3c:	2301      	movls	r3, #1
 8003a3e:	2300      	movhi	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e0ef      	b.n	8003c2a <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a49      	ldr	r2, [pc, #292]	; (8003b74 <HAL_I2C_Init+0x2c0>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	0c9b      	lsrs	r3, r3, #18
 8003a54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4a3b      	ldr	r2, [pc, #236]	; (8003b68 <HAL_I2C_Init+0x2b4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d802      	bhi.n	8003a84 <HAL_I2C_Init+0x1d0>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	3301      	adds	r3, #1
 8003a82:	e009      	b.n	8003a98 <HAL_I2C_Init+0x1e4>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	4a3a      	ldr	r2, [pc, #232]	; (8003b78 <HAL_I2C_Init+0x2c4>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	099b      	lsrs	r3, r3, #6
 8003a96:	3301      	adds	r3, #1
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003aaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	492d      	ldr	r1, [pc, #180]	; (8003b68 <HAL_I2C_Init+0x2b4>)
 8003ab4:	428b      	cmp	r3, r1
 8003ab6:	d80d      	bhi.n	8003ad4 <HAL_I2C_Init+0x220>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1e59      	subs	r1, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	bf38      	it	cc
 8003ad0:	2304      	movcc	r3, #4
 8003ad2:	e063      	b.n	8003b9c <HAL_I2C_Init+0x2e8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d111      	bne.n	8003b00 <HAL_I2C_Init+0x24c>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1e58      	subs	r0, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	440b      	add	r3, r1
 8003aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e012      	b.n	8003b26 <HAL_I2C_Init+0x272>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e58      	subs	r0, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	0099      	lsls	r1, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b16:	3301      	adds	r3, #1
 8003b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Init+0x27a>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e036      	b.n	8003b9c <HAL_I2C_Init+0x2e8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d122      	bne.n	8003b7c <HAL_I2C_Init+0x2c8>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1e58      	subs	r0, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	440b      	add	r3, r1
 8003b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b52:	e023      	b.n	8003b9c <HAL_I2C_Init+0x2e8>
 8003b54:	40005400 	.word	0x40005400
 8003b58:	40005800 	.word	0x40005800
 8003b5c:	40005c00 	.word	0x40005c00
 8003b60:	0800be6c 	.word	0x0800be6c
 8003b64:	00061a80 	.word	0x00061a80
 8003b68:	000186a0 	.word	0x000186a0
 8003b6c:	001e847f 	.word	0x001e847f
 8003b70:	003d08ff 	.word	0x003d08ff
 8003b74:	431bde83 	.word	0x431bde83
 8003b78:	10624dd3 	.word	0x10624dd3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1e58      	subs	r0, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6859      	ldr	r1, [r3, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	0099      	lsls	r1, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b92:	3301      	adds	r3, #1
 8003b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	6809      	ldr	r1, [r1, #0]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69da      	ldr	r2, [r3, #28]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6911      	ldr	r1, [r2, #16]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68d2      	ldr	r2, [r2, #12]
 8003bd6:	4311      	orrs	r1, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop

08003c34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	460b      	mov	r3, r1
 8003c42:	817b      	strh	r3, [r7, #10]
 8003c44:	4613      	mov	r3, r2
 8003c46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c48:	f7ff f9ca 	bl	8002fe0 <HAL_GetTick>
 8003c4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	f040 80e0 	bne.w	8003e1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	2319      	movs	r3, #25
 8003c62:	2201      	movs	r2, #1
 8003c64:	4970      	ldr	r1, [pc, #448]	; (8003e28 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fd84 	bl	8004774 <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c72:	2302      	movs	r3, #2
 8003c74:	e0d3      	b.n	8003e1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_I2C_Master_Transmit+0x50>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e0cc      	b.n	8003e1e <HAL_I2C_Master_Transmit+0x1ea>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d007      	beq.n	8003caa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0201 	orr.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2221      	movs	r2, #33	; 0x21
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2210      	movs	r2, #16
 8003cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	893a      	ldrh	r2, [r7, #8]
 8003cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4a50      	ldr	r2, [pc, #320]	; (8003e2c <HAL_I2C_Master_Transmit+0x1f8>)
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cec:	8979      	ldrh	r1, [r7, #10]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	6a3a      	ldr	r2, [r7, #32]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fbf0 	bl	80044d8 <I2C_MasterRequestWrite>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e08d      	b.n	8003e1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d02:	2300      	movs	r3, #0
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d18:	e066      	b.n	8003de8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	6a39      	ldr	r1, [r7, #32]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fdfe 	bl	8004920 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d107      	bne.n	8003d42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e06b      	b.n	8003e1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	781a      	ldrb	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d11b      	bne.n	8003dbc <HAL_I2C_Master_Transmit+0x188>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d017      	beq.n	8003dbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	781a      	ldrb	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	6a39      	ldr	r1, [r7, #32]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 fdee 	bl	80049a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00d      	beq.n	8003de8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d107      	bne.n	8003de4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e01a      	b.n	8003e1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d194      	bne.n	8003d1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	00100002 	.word	0x00100002
 8003e2c:	ffff0000 	.word	0xffff0000

08003e30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08c      	sub	sp, #48	; 0x30
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	817b      	strh	r3, [r7, #10]
 8003e40:	4613      	mov	r3, r2
 8003e42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e44:	f7ff f8cc 	bl	8002fe0 <HAL_GetTick>
 8003e48:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	f040 820b 	bne.w	800426e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2319      	movs	r3, #25
 8003e5e:	2201      	movs	r2, #1
 8003e60:	497c      	ldr	r1, [pc, #496]	; (8004054 <HAL_I2C_Master_Receive+0x224>)
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fc86 	bl	8004774 <I2C_WaitOnFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e1fe      	b.n	8004270 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_I2C_Master_Receive+0x50>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e1f7      	b.n	8004270 <HAL_I2C_Master_Receive+0x440>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d007      	beq.n	8003ea6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2222      	movs	r2, #34	; 0x22
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2210      	movs	r2, #16
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	893a      	ldrh	r2, [r7, #8]
 8003ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4a5c      	ldr	r2, [pc, #368]	; (8004058 <HAL_I2C_Master_Receive+0x228>)
 8003ee6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ee8:	8979      	ldrh	r1, [r7, #10]
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fb74 	bl	80045dc <I2C_MasterRequestRead>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e1b8      	b.n	8004270 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d113      	bne.n	8003f2e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f06:	2300      	movs	r3, #0
 8003f08:	623b      	str	r3, [r7, #32]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	623b      	str	r3, [r7, #32]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e18c      	b.n	8004248 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d11b      	bne.n	8003f6e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e16c      	b.n	8004248 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d11b      	bne.n	8003fae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	e14c      	b.n	8004248 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fd4:	e138      	b.n	8004248 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	f200 80f1 	bhi.w	80041c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d123      	bne.n	8004030 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 fd19 	bl	8004a24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e139      	b.n	8004270 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800402e:	e10b      	b.n	8004248 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004034:	2b02      	cmp	r3, #2
 8004036:	d14e      	bne.n	80040d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	2200      	movs	r2, #0
 8004040:	4906      	ldr	r1, [pc, #24]	; (800405c <HAL_I2C_Master_Receive+0x22c>)
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fb96 	bl	8004774 <I2C_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e10e      	b.n	8004270 <HAL_I2C_Master_Receive+0x440>
 8004052:	bf00      	nop
 8004054:	00100002 	.word	0x00100002
 8004058:	ffff0000 	.word	0xffff0000
 800405c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040d4:	e0b8      	b.n	8004248 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	2200      	movs	r2, #0
 80040de:	4966      	ldr	r1, [pc, #408]	; (8004278 <HAL_I2C_Master_Receive+0x448>)
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fb47 	bl	8004774 <I2C_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0bf      	b.n	8004270 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	2200      	movs	r2, #0
 800413a:	494f      	ldr	r1, [pc, #316]	; (8004278 <HAL_I2C_Master_Receive+0x448>)
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fb19 	bl	8004774 <I2C_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e091      	b.n	8004270 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041c0:	e042      	b.n	8004248 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fc2c 	bl	8004a24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e04c      	b.n	8004270 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b04      	cmp	r3, #4
 8004214:	d118      	bne.n	8004248 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424c:	2b00      	cmp	r3, #0
 800424e:	f47f aec2 	bne.w	8003fd6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e000      	b.n	8004270 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800426e:	2302      	movs	r3, #2
  }
}
 8004270:	4618      	mov	r0, r3
 8004272:	3728      	adds	r7, #40	; 0x28
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	00010004 	.word	0x00010004

0800427c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	460b      	mov	r3, r1
 800428a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800428c:	f7fe fea8 	bl	8002fe0 <HAL_GetTick>
 8004290:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004292:	2301      	movs	r3, #1
 8004294:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b20      	cmp	r3, #32
 80042a0:	f040 8110 	bne.w	80044c4 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	2319      	movs	r3, #25
 80042aa:	2201      	movs	r2, #1
 80042ac:	4988      	ldr	r1, [pc, #544]	; (80044d0 <HAL_I2C_IsDeviceReady+0x254>)
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fa60 	bl	8004774 <I2C_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80042ba:	2302      	movs	r3, #2
 80042bc:	e103      	b.n	80044c6 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_I2C_IsDeviceReady+0x50>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0fc      	b.n	80044c6 <HAL_I2C_IsDeviceReady+0x24a>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d007      	beq.n	80042f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004300:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2224      	movs	r2, #36	; 0x24
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a70      	ldr	r2, [pc, #448]	; (80044d4 <HAL_I2C_IsDeviceReady+0x258>)
 8004314:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004324:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2200      	movs	r2, #0
 800432e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fa1e 	bl	8004774 <I2C_WaitOnFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004352:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e0b6      	b.n	80044c6 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004358:	897b      	ldrh	r3, [r7, #10]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004366:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004368:	f7fe fe3a 	bl	8002fe0 <HAL_GetTick>
 800436c:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b02      	cmp	r3, #2
 800437a:	bf0c      	ite	eq
 800437c:	2301      	moveq	r3, #1
 800437e:	2300      	movne	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800439c:	e025      	b.n	80043ea <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800439e:	f7fe fe1f 	bl	8002fe0 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d302      	bcc.n	80043b4 <HAL_I2C_IsDeviceReady+0x138>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d103      	bne.n	80043bc <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	22a0      	movs	r2, #160	; 0xa0
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	bf0c      	ite	eq
 80043ca:	2301      	moveq	r3, #1
 80043cc:	2300      	movne	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e0:	bf0c      	ite	eq
 80043e2:	2301      	moveq	r3, #1
 80043e4:	2300      	movne	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2ba0      	cmp	r3, #160	; 0xa0
 80043f4:	d005      	beq.n	8004402 <HAL_I2C_IsDeviceReady+0x186>
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <HAL_I2C_IsDeviceReady+0x186>
 80043fc:	7dbb      	ldrb	r3, [r7, #22]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0cd      	beq.n	800439e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b02      	cmp	r3, #2
 8004416:	d129      	bne.n	800446c <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004426:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	2319      	movs	r3, #25
 8004444:	2201      	movs	r2, #1
 8004446:	4922      	ldr	r1, [pc, #136]	; (80044d0 <HAL_I2C_IsDeviceReady+0x254>)
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f993 	bl	8004774 <I2C_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e036      	b.n	80044c6 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	e02c      	b.n	80044c6 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004484:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	2319      	movs	r3, #25
 800448c:	2201      	movs	r2, #1
 800448e:	4910      	ldr	r1, [pc, #64]	; (80044d0 <HAL_I2C_IsDeviceReady+0x254>)
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f96f 	bl	8004774 <I2C_WaitOnFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e012      	b.n	80044c6 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	3301      	adds	r3, #1
 80044a4:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	f4ff af33 	bcc.w	8004316 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
  }
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	00100002 	.word	0x00100002
 80044d4:	ffff0000 	.word	0xffff0000

080044d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	460b      	mov	r3, r1
 80044e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d006      	beq.n	8004502 <I2C_MasterRequestWrite+0x2a>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d003      	beq.n	8004502 <I2C_MasterRequestWrite+0x2a>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004500:	d108      	bne.n	8004514 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e00b      	b.n	800452c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	2b12      	cmp	r3, #18
 800451a:	d107      	bne.n	800452c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800452a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f91b 	bl	8004774 <I2C_WaitOnFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00c      	beq.n	800455e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e035      	b.n	80045ca <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004566:	d108      	bne.n	800457a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004568:	897b      	ldrh	r3, [r7, #10]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004576:	611a      	str	r2, [r3, #16]
 8004578:	e01b      	b.n	80045b2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800457a:	897b      	ldrh	r3, [r7, #10]
 800457c:	11db      	asrs	r3, r3, #7
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f003 0306 	and.w	r3, r3, #6
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f063 030f 	orn	r3, r3, #15
 800458a:	b2da      	uxtb	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	490f      	ldr	r1, [pc, #60]	; (80045d4 <I2C_MasterRequestWrite+0xfc>)
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f942 	bl	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e010      	b.n	80045ca <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045a8:	897b      	ldrh	r3, [r7, #10]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	4908      	ldr	r1, [pc, #32]	; (80045d8 <I2C_MasterRequestWrite+0x100>)
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f932 	bl	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	00010008 	.word	0x00010008
 80045d8:	00010002 	.word	0x00010002

080045dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	607a      	str	r2, [r7, #4]
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	460b      	mov	r3, r1
 80045ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004600:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d006      	beq.n	8004616 <I2C_MasterRequestRead+0x3a>
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d003      	beq.n	8004616 <I2C_MasterRequestRead+0x3a>
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004614:	d108      	bne.n	8004628 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e00b      	b.n	8004640 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	2b11      	cmp	r3, #17
 800462e:	d107      	bne.n	8004640 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800463e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f891 	bl	8004774 <I2C_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00c      	beq.n	8004672 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e078      	b.n	8004764 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800467a:	d108      	bne.n	800468e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800467c:	897b      	ldrh	r3, [r7, #10]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	611a      	str	r2, [r3, #16]
 800468c:	e05e      	b.n	800474c <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800468e:	897b      	ldrh	r3, [r7, #10]
 8004690:	11db      	asrs	r3, r3, #7
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f003 0306 	and.w	r3, r3, #6
 8004698:	b2db      	uxtb	r3, r3
 800469a:	f063 030f 	orn	r3, r3, #15
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	4930      	ldr	r1, [pc, #192]	; (800476c <I2C_MasterRequestRead+0x190>)
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f8b8 	bl	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e053      	b.n	8004764 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046bc:	897b      	ldrh	r3, [r7, #10]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	4929      	ldr	r1, [pc, #164]	; (8004770 <I2C_MasterRequestRead+0x194>)
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f8a8 	bl	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e043      	b.n	8004764 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	613b      	str	r3, [r7, #16]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004700:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f830 	bl	8004774 <I2C_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00c      	beq.n	8004734 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800472e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e017      	b.n	8004764 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004734:	897b      	ldrh	r3, [r7, #10]
 8004736:	11db      	asrs	r3, r3, #7
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f003 0306 	and.w	r3, r3, #6
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f063 030e 	orn	r3, r3, #14
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4907      	ldr	r1, [pc, #28]	; (8004770 <I2C_MasterRequestRead+0x194>)
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f865 	bl	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	00010008 	.word	0x00010008
 8004770:	00010002 	.word	0x00010002

08004774 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	4613      	mov	r3, r2
 8004782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004784:	e025      	b.n	80047d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800478c:	d021      	beq.n	80047d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800478e:	f7fe fc27 	bl	8002fe0 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d302      	bcc.n	80047a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d116      	bne.n	80047d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f043 0220 	orr.w	r2, r3, #32
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e023      	b.n	800481a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	0c1b      	lsrs	r3, r3, #16
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d10d      	bne.n	80047f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	43da      	mvns	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4013      	ands	r3, r2
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	bf0c      	ite	eq
 80047ee:	2301      	moveq	r3, #1
 80047f0:	2300      	movne	r3, #0
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	e00c      	b.n	8004812 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	43da      	mvns	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4013      	ands	r3, r2
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	bf0c      	ite	eq
 800480a:	2301      	moveq	r3, #1
 800480c:	2300      	movne	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	429a      	cmp	r2, r3
 8004816:	d0b6      	beq.n	8004786 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	607a      	str	r2, [r7, #4]
 800482e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004830:	e051      	b.n	80048d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004840:	d123      	bne.n	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004850:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800485a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f043 0204 	orr.w	r2, r3, #4
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e046      	b.n	8004918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004890:	d021      	beq.n	80048d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004892:	f7fe fba5 	bl	8002fe0 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d116      	bne.n	80048d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f043 0220 	orr.w	r2, r3, #32
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e020      	b.n	8004918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	0c1b      	lsrs	r3, r3, #16
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d10c      	bne.n	80048fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	43da      	mvns	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4013      	ands	r3, r2
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bf14      	ite	ne
 80048f2:	2301      	movne	r3, #1
 80048f4:	2300      	moveq	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	e00b      	b.n	8004912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	43da      	mvns	r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4013      	ands	r3, r2
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d18d      	bne.n	8004832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800492c:	e02d      	b.n	800498a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f8ce 	bl	8004ad0 <I2C_IsAcknowledgeFailed>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e02d      	b.n	800499a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004944:	d021      	beq.n	800498a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fe fb4b 	bl	8002fe0 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d116      	bne.n	800498a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f043 0220 	orr.w	r2, r3, #32
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e007      	b.n	800499a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004994:	2b80      	cmp	r3, #128	; 0x80
 8004996:	d1ca      	bne.n	800492e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049ae:	e02d      	b.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f88d 	bl	8004ad0 <I2C_IsAcknowledgeFailed>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e02d      	b.n	8004a1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c6:	d021      	beq.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c8:	f7fe fb0a 	bl	8002fe0 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d302      	bcc.n	80049de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d116      	bne.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	f043 0220 	orr.w	r2, r3, #32
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e007      	b.n	8004a1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d1ca      	bne.n	80049b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a30:	e042      	b.n	8004ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d119      	bne.n	8004a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0210 	mvn.w	r2, #16
 8004a48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e029      	b.n	8004ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a74:	f7fe fab4 	bl	8002fe0 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d302      	bcc.n	8004a8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d116      	bne.n	8004ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	f043 0220 	orr.w	r2, r3, #32
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e007      	b.n	8004ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac2:	2b40      	cmp	r3, #64	; 0x40
 8004ac4:	d1b5      	bne.n	8004a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae6:	d11b      	bne.n	8004b20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004af0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	f043 0204 	orr.w	r2, r3, #4
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b32:	b08f      	sub	sp, #60	; 0x3c
 8004b34:	af0a      	add	r7, sp, #40	; 0x28
 8004b36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e118      	b.n	8004d74 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b4a:	d003      	beq.n	8004b54 <HAL_PCD_Init+0x24>
 8004b4c:	2187      	movs	r1, #135	; 0x87
 8004b4e:	488b      	ldr	r0, [pc, #556]	; (8004d7c <HAL_PCD_Init+0x24c>)
 8004b50:	f7fd fa03 	bl	8001f5a <assert_failed>

  USBx = hpcd->Instance;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f006 f894 	bl	800ac9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2203      	movs	r2, #3
 8004b78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d102      	bne.n	8004b8e <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f003 f8c9 	bl	8007d2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	603b      	str	r3, [r7, #0]
 8004b9e:	687e      	ldr	r6, [r7, #4]
 8004ba0:	466d      	mov	r5, sp
 8004ba2:	f106 0410 	add.w	r4, r6, #16
 8004ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bb6:	1d33      	adds	r3, r6, #4
 8004bb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bba:	6838      	ldr	r0, [r7, #0]
 8004bbc:	f002 ffa0 	bl	8007b00 <USB_CoreInit>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e0d0      	b.n	8004d74 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f003 f8b7 	bl	8007d4c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bde:	2300      	movs	r3, #0
 8004be0:	73fb      	strb	r3, [r7, #15]
 8004be2:	e04a      	b.n	8004c7a <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004be4:	7bfa      	ldrb	r2, [r7, #15]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	333d      	adds	r3, #61	; 0x3d
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bf8:	7bfa      	ldrb	r2, [r7, #15]
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	1a9b      	subs	r3, r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	333c      	adds	r3, #60	; 0x3c
 8004c08:	7bfa      	ldrb	r2, [r7, #15]
 8004c0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c0c:	7bfa      	ldrb	r2, [r7, #15]
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	b298      	uxth	r0, r3
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	3342      	adds	r3, #66	; 0x42
 8004c20:	4602      	mov	r2, r0
 8004c22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c24:	7bfa      	ldrb	r2, [r7, #15]
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	333f      	adds	r3, #63	; 0x3f
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c38:	7bfa      	ldrb	r2, [r7, #15]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	3344      	adds	r3, #68	; 0x44
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c4c:	7bfa      	ldrb	r2, [r7, #15]
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	4613      	mov	r3, r2
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	3348      	adds	r3, #72	; 0x48
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c60:	7bfa      	ldrb	r2, [r7, #15]
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	3350      	adds	r3, #80	; 0x50
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	3301      	adds	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
 8004c7a:	7bfa      	ldrb	r2, [r7, #15]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d3af      	bcc.n	8004be4 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c84:	2300      	movs	r3, #0
 8004c86:	73fb      	strb	r3, [r7, #15]
 8004c88:	e044      	b.n	8004d14 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c8a:	7bfa      	ldrb	r2, [r7, #15]
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ca0:	7bfa      	ldrb	r2, [r7, #15]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004cb2:	7bfa      	ldrb	r2, [r7, #15]
 8004cb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ccc:	7bfa      	ldrb	r2, [r7, #15]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ce2:	7bfa      	ldrb	r2, [r7, #15]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cf8:	7bfa      	ldrb	r2, [r7, #15]
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	3301      	adds	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
 8004d14:	7bfa      	ldrb	r2, [r7, #15]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d3b5      	bcc.n	8004c8a <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	687e      	ldr	r6, [r7, #4]
 8004d26:	466d      	mov	r5, sp
 8004d28:	f106 0410 	add.w	r4, r6, #16
 8004d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d38:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d3c:	1d33      	adds	r3, r6, #4
 8004d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d40:	6838      	ldr	r0, [r7, #0]
 8004d42:	f003 f82d 	bl	8007da0 <USB_DevInit>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e00d      	b.n	8004d74 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f004 f86c 	bl	8008e4a <USB_DevDisconnect>

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d7c:	0800bea4 	.word	0x0800bea4

08004d80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_PCD_Start+0x1c>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e020      	b.n	8004dde <HAL_PCD_Start+0x5e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d109      	bne.n	8004dc0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d005      	beq.n	8004dc0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f004 f828 	bl	8008e1a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f002 ff9a 	bl	8007d08 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004de6:	b590      	push	{r4, r7, lr}
 8004de8:	b08d      	sub	sp, #52	; 0x34
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f004 f8cf 	bl	8008fa0 <USB_GetMode>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f040 839d 	bne.w	8005544 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f004 f833 	bl	8008e7a <USB_ReadInterrupts>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 8393 	beq.w	8005542 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f004 f82a 	bl	8008e7a <USB_ReadInterrupts>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d107      	bne.n	8004e40 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f002 0202 	and.w	r2, r2, #2
 8004e3e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f004 f818 	bl	8008e7a <USB_ReadInterrupts>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d161      	bne.n	8004f18 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0210 	bic.w	r2, r2, #16
 8004e62:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	f003 020f 	and.w	r2, r3, #15
 8004e70:	4613      	mov	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	1a9b      	subs	r3, r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4413      	add	r3, r2
 8004e80:	3304      	adds	r3, #4
 8004e82:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	0c5b      	lsrs	r3, r3, #17
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d124      	bne.n	8004eda <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d035      	beq.n	8004f08 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	091b      	lsrs	r3, r3, #4
 8004ea4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	6a38      	ldr	r0, [r7, #32]
 8004eb0:	f003 fe90 	bl	8008bd4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	091b      	lsrs	r3, r3, #4
 8004ebc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ec0:	441a      	add	r2, r3
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ed2:	441a      	add	r2, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	619a      	str	r2, [r3, #24]
 8004ed8:	e016      	b.n	8004f08 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	0c5b      	lsrs	r3, r3, #17
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	2b06      	cmp	r3, #6
 8004ee4:	d110      	bne.n	8004f08 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004eec:	2208      	movs	r2, #8
 8004eee:	4619      	mov	r1, r3
 8004ef0:	6a38      	ldr	r0, [r7, #32]
 8004ef2:	f003 fe6f 	bl	8008bd4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	699a      	ldr	r2, [r3, #24]
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f02:	441a      	add	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0210 	orr.w	r2, r2, #16
 8004f16:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f003 ffac 	bl	8008e7a <USB_ReadInterrupts>
 8004f22:	4603      	mov	r3, r0
 8004f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f2c:	d16e      	bne.n	800500c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f003 ffb2 	bl	8008ea0 <USB_ReadDevAllOutEpInterrupt>
 8004f3c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004f3e:	e062      	b.n	8005006 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d057      	beq.n	8004ffa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	4611      	mov	r1, r2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f003 ffd7 	bl	8008f08 <USB_ReadDevOutEPInterrupt>
 8004f5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00c      	beq.n	8004f80 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f72:	461a      	mov	r2, r3
 8004f74:	2301      	movs	r3, #1
 8004f76:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fdb0 	bl	8005ae0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00c      	beq.n	8004fa4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	461a      	mov	r2, r3
 8004f98:	2308      	movs	r3, #8
 8004f9a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 feaa 	bl	8005cf8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d008      	beq.n	8004fdc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2320      	movs	r3, #32
 8004fda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ff8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	085b      	lsrs	r3, r3, #1
 8005004:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	2b00      	cmp	r3, #0
 800500a:	d199      	bne.n	8004f40 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f003 ff32 	bl	8008e7a <USB_ReadInterrupts>
 8005016:	4603      	mov	r3, r0
 8005018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800501c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005020:	f040 80c0 	bne.w	80051a4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f003 ff53 	bl	8008ed4 <USB_ReadDevAllInEpInterrupt>
 800502e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005034:	e0b2      	b.n	800519c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 80a7 	beq.w	8005190 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	4611      	mov	r1, r2
 800504c:	4618      	mov	r0, r3
 800504e:	f003 ff79 	bl	8008f44 <USB_ReadDevInEPInterrupt>
 8005052:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d057      	beq.n	800510e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	f003 030f 	and.w	r3, r3, #15
 8005064:	2201      	movs	r2, #1
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	43db      	mvns	r3, r3
 8005078:	69f9      	ldr	r1, [r7, #28]
 800507a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800507e:	4013      	ands	r3, r2
 8005080:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508e:	461a      	mov	r2, r3
 8005090:	2301      	movs	r3, #1
 8005092:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d132      	bne.n	8005102 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a0:	4613      	mov	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	3348      	adds	r3, #72	; 0x48
 80050ac:	6819      	ldr	r1, [r3, #0]
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b2:	4613      	mov	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	1a9b      	subs	r3, r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4403      	add	r3, r0
 80050bc:	3344      	adds	r3, #68	; 0x44
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4419      	add	r1, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c6:	4613      	mov	r3, r2
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4403      	add	r3, r0
 80050d0:	3348      	adds	r3, #72	; 0x48
 80050d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d113      	bne.n	8005102 <HAL_PCD_IRQHandler+0x31c>
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050de:	4613      	mov	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	3350      	adds	r3, #80	; 0x50
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d108      	bne.n	8005102 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050fa:	461a      	mov	r2, r3
 80050fc:	2101      	movs	r1, #1
 80050fe:	f003 ff81 	bl	8009004 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	b2db      	uxtb	r3, r3
 8005106:	4619      	mov	r1, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f005 fe48 	bl	800ad9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	461a      	mov	r2, r3
 8005126:	2308      	movs	r3, #8
 8005128:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b00      	cmp	r3, #0
 8005132:	d008      	beq.n	8005146 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	461a      	mov	r2, r3
 8005142:	2310      	movs	r3, #16
 8005144:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	461a      	mov	r2, r3
 800515e:	2340      	movs	r3, #64	; 0x40
 8005160:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005178:	461a      	mov	r2, r3
 800517a:	2302      	movs	r3, #2
 800517c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fc1b 	bl	80059c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	3301      	adds	r3, #1
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f47f af49 	bne.w	8005036 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f003 fe66 	bl	8008e7a <USB_ReadInterrupts>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b8:	d122      	bne.n	8005200 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d108      	bne.n	80051ea <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051e0:	2100      	movs	r1, #0
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fe26 	bl	8005e34 <HAL_PCDEx_LPM_Callback>
 80051e8:	e002      	b.n	80051f0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f005 fe44 	bl	800ae78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695a      	ldr	r2, [r3, #20]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80051fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	f003 fe38 	bl	8008e7a <USB_ReadInterrupts>
 800520a:	4603      	mov	r3, r0
 800520c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005214:	d112      	bne.n	800523c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b01      	cmp	r3, #1
 8005224:	d102      	bne.n	800522c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f005 fe00 	bl	800ae2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695a      	ldr	r2, [r3, #20]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800523a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4618      	mov	r0, r3
 8005242:	f003 fe1a 	bl	8008e7a <USB_ReadInterrupts>
 8005246:	4603      	mov	r3, r0
 8005248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800524c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005250:	f040 80c7 	bne.w	80053e2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005262:	f023 0301 	bic.w	r3, r3, #1
 8005266:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2110      	movs	r1, #16
 800526e:	4618      	mov	r0, r3
 8005270:	f002 fefa 	bl	8008068 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005274:	2300      	movs	r3, #0
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005278:	e056      	b.n	8005328 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005286:	461a      	mov	r2, r3
 8005288:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800528c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052ac:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052da:	461a      	mov	r2, r3
 80052dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f2:	0151      	lsls	r1, r2, #5
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	440a      	add	r2, r1
 80052f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005300:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005312:	0151      	lsls	r1, r2, #5
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	440a      	add	r2, r1
 8005318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005320:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005324:	3301      	adds	r3, #1
 8005326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800532e:	429a      	cmp	r2, r3
 8005330:	d3a3      	bcc.n	800527a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005340:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005344:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	2b00      	cmp	r3, #0
 800534c:	d016      	beq.n	800537c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800535e:	f043 030b 	orr.w	r3, r3, #11
 8005362:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005374:	f043 030b 	orr.w	r3, r3, #11
 8005378:	6453      	str	r3, [r2, #68]	; 0x44
 800537a:	e015      	b.n	80053a8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800538a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800538e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005392:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053a2:	f043 030b 	orr.w	r3, r3, #11
 80053a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053cc:	461a      	mov	r2, r3
 80053ce:	f003 fe19 	bl	8009004 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695a      	ldr	r2, [r3, #20]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80053e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f003 fd47 	bl	8008e7a <USB_ReadInterrupts>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053f6:	d124      	bne.n	8005442 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f003 fddd 	bl	8008fbc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f002 fe8f 	bl	800812a <USB_GetDevSpeed>
 800540c:	4603      	mov	r3, r0
 800540e:	461a      	mov	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681c      	ldr	r4, [r3, #0]
 8005418:	f001 fa78 	bl	800690c <HAL_RCC_GetHCLKFreq>
 800541c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005422:	b2db      	uxtb	r3, r3
 8005424:	461a      	mov	r2, r3
 8005426:	4620      	mov	r0, r4
 8005428:	f002 fbcc 	bl	8007bc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f005 fcde 	bl	800adee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695a      	ldr	r2, [r3, #20]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005440:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f003 fd17 	bl	8008e7a <USB_ReadInterrupts>
 800544c:	4603      	mov	r3, r0
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b08      	cmp	r3, #8
 8005454:	d10a      	bne.n	800546c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f005 fcbb 	bl	800add2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695a      	ldr	r2, [r3, #20]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f002 0208 	and.w	r2, r2, #8
 800546a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4618      	mov	r0, r3
 8005472:	f003 fd02 	bl	8008e7a <USB_ReadInterrupts>
 8005476:	4603      	mov	r3, r0
 8005478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800547c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005480:	d10f      	bne.n	80054a2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	b2db      	uxtb	r3, r3
 800548a:	4619      	mov	r1, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f005 fd13 	bl	800aeb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695a      	ldr	r2, [r3, #20]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80054a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f003 fce7 	bl	8008e7a <USB_ReadInterrupts>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054b6:	d10f      	bne.n	80054d8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f005 fce6 	bl	800ae94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695a      	ldr	r2, [r3, #20]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80054d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f003 fccc 	bl	8008e7a <USB_ReadInterrupts>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ec:	d10a      	bne.n	8005504 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f005 fcf4 	bl	800aedc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695a      	ldr	r2, [r3, #20]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005502:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f003 fcb6 	bl	8008e7a <USB_ReadInterrupts>
 800550e:	4603      	mov	r3, r0
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b04      	cmp	r3, #4
 8005516:	d115      	bne.n	8005544 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f005 fce4 	bl	800aef8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	430a      	orrs	r2, r1
 800553e:	605a      	str	r2, [r3, #4]
 8005540:	e000      	b.n	8005544 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005542:	bf00      	nop
    }
  }
}
 8005544:	3734      	adds	r7, #52	; 0x34
 8005546:	46bd      	mov	sp, r7
 8005548:	bd90      	pop	{r4, r7, pc}

0800554a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	460b      	mov	r3, r1
 8005554:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_PCD_SetAddress+0x1a>
 8005560:	2302      	movs	r3, #2
 8005562:	e013      	b.n	800558c <HAL_PCD_SetAddress+0x42>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	78fa      	ldrb	r2, [r7, #3]
 8005570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	78fa      	ldrb	r2, [r7, #3]
 800557a:	4611      	mov	r1, r2
 800557c:	4618      	mov	r0, r3
 800557e:	f003 fc26 	bl	8008dce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	4608      	mov	r0, r1
 800559e:	4611      	mov	r1, r2
 80055a0:	461a      	mov	r2, r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	70fb      	strb	r3, [r7, #3]
 80055a6:	460b      	mov	r3, r1
 80055a8:	803b      	strh	r3, [r7, #0]
 80055aa:	4613      	mov	r3, r2
 80055ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	da0f      	bge.n	80055da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	f003 020f 	and.w	r2, r3, #15
 80055c0:	4613      	mov	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	3338      	adds	r3, #56	; 0x38
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	3304      	adds	r3, #4
 80055d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	705a      	strb	r2, [r3, #1]
 80055d8:	e00f      	b.n	80055fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	f003 020f 	and.w	r2, r3, #15
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	4413      	add	r3, r2
 80055f0:	3304      	adds	r3, #4
 80055f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055fa:	78fb      	ldrb	r3, [r7, #3]
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	b2da      	uxtb	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005606:	883a      	ldrh	r2, [r7, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	78ba      	ldrb	r2, [r7, #2]
 8005610:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005624:	78bb      	ldrb	r3, [r7, #2]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d102      	bne.n	8005630 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_PCD_EP_Open+0xaa>
 800563a:	2302      	movs	r3, #2
 800563c:	e00e      	b.n	800565c <HAL_PCD_EP_Open+0xc8>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68f9      	ldr	r1, [r7, #12]
 800564c:	4618      	mov	r0, r3
 800564e:	f002 fd91 	bl	8008174 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800565a:	7afb      	ldrb	r3, [r7, #11]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005674:	2b00      	cmp	r3, #0
 8005676:	da0f      	bge.n	8005698 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	f003 020f 	and.w	r2, r3, #15
 800567e:	4613      	mov	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	3338      	adds	r3, #56	; 0x38
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	4413      	add	r3, r2
 800568c:	3304      	adds	r3, #4
 800568e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	705a      	strb	r2, [r3, #1]
 8005696:	e00f      	b.n	80056b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	f003 020f 	and.w	r2, r3, #15
 800569e:	4613      	mov	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4413      	add	r3, r2
 80056ae:	3304      	adds	r3, #4
 80056b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_PCD_EP_Close+0x6e>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e00e      	b.n	80056f0 <HAL_PCD_EP_Close+0x8c>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f002 fdcf 	bl	8008284 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	607a      	str	r2, [r7, #4]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	460b      	mov	r3, r1
 8005706:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005708:	7afb      	ldrb	r3, [r7, #11]
 800570a:	f003 020f 	and.w	r2, r3, #15
 800570e:	4613      	mov	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	3304      	adds	r3, #4
 8005720:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2200      	movs	r2, #0
 8005732:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2200      	movs	r2, #0
 8005738:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800573a:	7afb      	ldrb	r3, [r7, #11]
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	b2da      	uxtb	r2, r3
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d102      	bne.n	8005754 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005754:	7afb      	ldrb	r3, [r7, #11]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	2b00      	cmp	r3, #0
 800575c:	d109      	bne.n	8005772 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	6979      	ldr	r1, [r7, #20]
 800576c:	f003 f8aa 	bl	80088c4 <USB_EP0StartXfer>
 8005770:	e008      	b.n	8005784 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	6979      	ldr	r1, [r7, #20]
 8005780:	f002 fe5c 	bl	800843c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	460b      	mov	r3, r1
 8005798:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	f003 020f 	and.w	r2, r3, #15
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	4613      	mov	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	1a9b      	subs	r3, r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80057b0:	681b      	ldr	r3, [r3, #0]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b086      	sub	sp, #24
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
 80057ca:	460b      	mov	r3, r1
 80057cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057ce:	7afb      	ldrb	r3, [r7, #11]
 80057d0:	f003 020f 	and.w	r2, r3, #15
 80057d4:	4613      	mov	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	3338      	adds	r3, #56	; 0x38
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4413      	add	r3, r2
 80057e2:	3304      	adds	r3, #4
 80057e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2200      	movs	r2, #0
 80057f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2201      	movs	r2, #1
 80057fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057fe:	7afb      	ldrb	r3, [r7, #11]
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	b2da      	uxtb	r2, r3
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d102      	bne.n	8005818 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005818:	7afb      	ldrb	r3, [r7, #11]
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	6979      	ldr	r1, [r7, #20]
 8005830:	f003 f848 	bl	80088c4 <USB_EP0StartXfer>
 8005834:	e008      	b.n	8005848 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	6979      	ldr	r1, [r7, #20]
 8005844:	f002 fdfa 	bl	800843c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	460b      	mov	r3, r1
 800585c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	f003 020f 	and.w	r2, r3, #15
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	429a      	cmp	r2, r3
 800586a:	d901      	bls.n	8005870 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e050      	b.n	8005912 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005874:	2b00      	cmp	r3, #0
 8005876:	da0f      	bge.n	8005898 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	f003 020f 	and.w	r2, r3, #15
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	3338      	adds	r3, #56	; 0x38
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	4413      	add	r3, r2
 800588c:	3304      	adds	r3, #4
 800588e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	705a      	strb	r2, [r3, #1]
 8005896:	e00d      	b.n	80058b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005898:	78fa      	ldrb	r2, [r7, #3]
 800589a:	4613      	mov	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	1a9b      	subs	r3, r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	4413      	add	r3, r2
 80058aa:	3304      	adds	r3, #4
 80058ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_PCD_EP_SetStall+0x82>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e01e      	b.n	8005912 <HAL_PCD_EP_SetStall+0xc0>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68f9      	ldr	r1, [r7, #12]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f003 f99f 	bl	8008c26 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058e8:	78fb      	ldrb	r3, [r7, #3]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	b2d9      	uxtb	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005902:	461a      	mov	r2, r3
 8005904:	f003 fb7e 	bl	8009004 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	460b      	mov	r3, r1
 8005924:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	f003 020f 	and.w	r2, r3, #15
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	429a      	cmp	r2, r3
 8005932:	d901      	bls.n	8005938 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e042      	b.n	80059be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800593c:	2b00      	cmp	r3, #0
 800593e:	da0f      	bge.n	8005960 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	f003 020f 	and.w	r2, r3, #15
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	3338      	adds	r3, #56	; 0x38
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	4413      	add	r3, r2
 8005954:	3304      	adds	r3, #4
 8005956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	705a      	strb	r2, [r3, #1]
 800595e:	e00f      	b.n	8005980 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	f003 020f 	and.w	r2, r3, #15
 8005966:	4613      	mov	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	4413      	add	r3, r2
 8005976:	3304      	adds	r3, #4
 8005978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005986:	78fb      	ldrb	r3, [r7, #3]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	b2da      	uxtb	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_PCD_EP_ClrStall+0x86>
 800599c:	2302      	movs	r3, #2
 800599e:	e00e      	b.n	80059be <HAL_PCD_EP_ClrStall+0xa4>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68f9      	ldr	r1, [r7, #12]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f003 f9a7 	bl	8008d02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b08a      	sub	sp, #40	; 0x28
 80059ca:	af02      	add	r7, sp, #8
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	4613      	mov	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	3338      	adds	r3, #56	; 0x38
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	4413      	add	r3, r2
 80059ea:	3304      	adds	r3, #4
 80059ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d901      	bls.n	80059fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e06c      	b.n	8005ad8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d902      	bls.n	8005a1a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	3303      	adds	r3, #3
 8005a1e:	089b      	lsrs	r3, r3, #2
 8005a20:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a22:	e02b      	b.n	8005a7c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	695a      	ldr	r2, [r3, #20]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d902      	bls.n	8005a40 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	3303      	adds	r3, #3
 8005a44:	089b      	lsrs	r3, r3, #2
 8005a46:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	68d9      	ldr	r1, [r3, #12]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	6978      	ldr	r0, [r7, #20]
 8005a60:	f003 f883 	bl	8008b6a <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	441a      	add	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	699a      	ldr	r2, [r3, #24]
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	441a      	add	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d809      	bhi.n	8005aa6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d203      	bcs.n	8005aa6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1be      	bne.n	8005a24 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	695a      	ldr	r2, [r3, #20]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d811      	bhi.n	8005ad6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	2201      	movs	r2, #1
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	43db      	mvns	r3, r3
 8005acc:	6939      	ldr	r1, [r7, #16]
 8005ace:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3720      	adds	r7, #32
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	333c      	adds	r3, #60	; 0x3c
 8005af8:	3304      	adds	r3, #4
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	f040 80a0 	bne.w	8005c58 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d015      	beq.n	8005b4e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4a72      	ldr	r2, [pc, #456]	; (8005cf0 <PCD_EP_OutXfrComplete_int+0x210>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	f240 80dd 	bls.w	8005ce6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80d7 	beq.w	8005ce6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b44:	461a      	mov	r2, r3
 8005b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4a:	6093      	str	r3, [r2, #8]
 8005b4c:	e0cb      	b.n	8005ce6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d009      	beq.n	8005b6c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b64:	461a      	mov	r2, r3
 8005b66:	2320      	movs	r3, #32
 8005b68:	6093      	str	r3, [r2, #8]
 8005b6a:	e0bc      	b.n	8005ce6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f040 80b7 	bne.w	8005ce6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4a5d      	ldr	r2, [pc, #372]	; (8005cf0 <PCD_EP_OutXfrComplete_int+0x210>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d90f      	bls.n	8005ba0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b96:	461a      	mov	r2, r3
 8005b98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b9c:	6093      	str	r3, [r2, #8]
 8005b9e:	e0a2      	b.n	8005ce6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005bb2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	0159      	lsls	r1, r3, #5
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	440b      	add	r3, r1
 8005bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005bc6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	1a9b      	subs	r3, r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4403      	add	r3, r0
 8005bd6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005bda:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	1a9b      	subs	r3, r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005bee:	6819      	ldr	r1, [r3, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4403      	add	r3, r0
 8005bfe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4419      	add	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4403      	add	r3, r0
 8005c14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c18:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d114      	bne.n	8005c4a <PCD_EP_OutXfrComplete_int+0x16a>
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	4613      	mov	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	1a9b      	subs	r3, r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d108      	bne.n	8005c4a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c42:	461a      	mov	r2, r3
 8005c44:	2101      	movs	r1, #1
 8005c46:	f003 f9dd 	bl	8009004 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f005 f889 	bl	800ad68 <HAL_PCD_DataOutStageCallback>
 8005c56:	e046      	b.n	8005ce6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4a26      	ldr	r2, [pc, #152]	; (8005cf4 <PCD_EP_OutXfrComplete_int+0x214>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d124      	bne.n	8005caa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c76:	461a      	mov	r2, r3
 8005c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c7c:	6093      	str	r3, [r2, #8]
 8005c7e:	e032      	b.n	8005ce6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d008      	beq.n	8005c9c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c96:	461a      	mov	r2, r3
 8005c98:	2320      	movs	r3, #32
 8005c9a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f005 f860 	bl	800ad68 <HAL_PCD_DataOutStageCallback>
 8005ca8:	e01d      	b.n	8005ce6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d114      	bne.n	8005cda <PCD_EP_OutXfrComplete_int+0x1fa>
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	1a9b      	subs	r3, r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d108      	bne.n	8005cda <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	f003 f995 	bl	8009004 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f005 f841 	bl	800ad68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	4f54300a 	.word	0x4f54300a
 8005cf4:	4f54310a 	.word	0x4f54310a

08005cf8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	333c      	adds	r3, #60	; 0x3c
 8005d10:	3304      	adds	r3, #4
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d90e      	bls.n	8005d4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d009      	beq.n	8005d4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d44:	461a      	mov	r2, r3
 8005d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f004 fff9 	bl	800ad44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4a0a      	ldr	r2, [pc, #40]	; (8005d80 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d90c      	bls.n	8005d74 <PCD_EP_OutSetupPacket_int+0x7c>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d108      	bne.n	8005d74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	2101      	movs	r1, #1
 8005d70:	f003 f948 	bl	8009004 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	4f54300a 	.word	0x4f54300a

08005d84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	70fb      	strb	r3, [r7, #3]
 8005d90:	4613      	mov	r3, r2
 8005d92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d9c:	78fb      	ldrb	r3, [r7, #3]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d107      	bne.n	8005db2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005da2:	883b      	ldrh	r3, [r7, #0]
 8005da4:	0419      	lsls	r1, r3, #16
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	629a      	str	r2, [r3, #40]	; 0x28
 8005db0:	e028      	b.n	8005e04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db8:	0c1b      	lsrs	r3, r3, #16
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	73fb      	strb	r3, [r7, #15]
 8005dc4:	e00d      	b.n	8005de2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	3340      	adds	r3, #64	; 0x40
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	4413      	add	r3, r2
 8005dda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	3301      	adds	r3, #1
 8005de0:	73fb      	strb	r3, [r7, #15]
 8005de2:	7bfa      	ldrb	r2, [r7, #15]
 8005de4:	78fb      	ldrb	r3, [r7, #3]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d3ec      	bcc.n	8005dc6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005dec:	883b      	ldrh	r3, [r7, #0]
 8005dee:	0418      	lsls	r0, r3, #16
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	4302      	orrs	r2, r0
 8005dfc:	3340      	adds	r3, #64	; 0x40
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	440b      	add	r3, r1
 8005e02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	887a      	ldrh	r2, [r7, #2]
 8005e24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e30d      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b0f      	cmp	r3, #15
 8005e64:	d903      	bls.n	8005e6e <HAL_RCC_OscConfig+0x22>
 8005e66:	21e8      	movs	r1, #232	; 0xe8
 8005e68:	48a3      	ldr	r0, [pc, #652]	; (80060f8 <HAL_RCC_OscConfig+0x2ac>)
 8005e6a:	f7fc f876 	bl	8001f5a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 8088 	beq.w	8005f8c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00d      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x54>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e8c:	d008      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x54>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e96:	d003      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x54>
 8005e98:	21ed      	movs	r1, #237	; 0xed
 8005e9a:	4897      	ldr	r0, [pc, #604]	; (80060f8 <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	f7fc f85d 	bl	8001f5a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ea0:	4b96      	ldr	r3, [pc, #600]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 030c 	and.w	r3, r3, #12
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d00c      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eac:	4b93      	ldr	r3, [pc, #588]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d112      	bne.n	8005ede <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eb8:	4b90      	ldr	r3, [pc, #576]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ec4:	d10b      	bne.n	8005ede <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ec6:	4b8d      	ldr	r3, [pc, #564]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d05b      	beq.n	8005f8a <HAL_RCC_OscConfig+0x13e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d157      	bne.n	8005f8a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e2cd      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee6:	d106      	bne.n	8005ef6 <HAL_RCC_OscConfig+0xaa>
 8005ee8:	4b84      	ldr	r3, [pc, #528]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a83      	ldr	r2, [pc, #524]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	e01d      	b.n	8005f32 <HAL_RCC_OscConfig+0xe6>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005efe:	d10c      	bne.n	8005f1a <HAL_RCC_OscConfig+0xce>
 8005f00:	4b7e      	ldr	r3, [pc, #504]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a7d      	ldr	r2, [pc, #500]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005f06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	4b7b      	ldr	r3, [pc, #492]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a7a      	ldr	r2, [pc, #488]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	e00b      	b.n	8005f32 <HAL_RCC_OscConfig+0xe6>
 8005f1a:	4b78      	ldr	r3, [pc, #480]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a77      	ldr	r2, [pc, #476]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4b75      	ldr	r3, [pc, #468]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a74      	ldr	r2, [pc, #464]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d013      	beq.n	8005f62 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3a:	f7fd f851 	bl	8002fe0 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f42:	f7fd f84d 	bl	8002fe0 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b64      	cmp	r3, #100	; 0x64
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e292      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f54:	4b69      	ldr	r3, [pc, #420]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f0      	beq.n	8005f42 <HAL_RCC_OscConfig+0xf6>
 8005f60:	e014      	b.n	8005f8c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f62:	f7fd f83d 	bl	8002fe0 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f68:	e008      	b.n	8005f7c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f6a:	f7fd f839 	bl	8002fe0 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b64      	cmp	r3, #100	; 0x64
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e27e      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f7c:	4b5f      	ldr	r3, [pc, #380]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f0      	bne.n	8005f6a <HAL_RCC_OscConfig+0x11e>
 8005f88:	e000      	b.n	8005f8c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d079      	beq.n	800608c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x166>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d004      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x166>
 8005fa8:	f240 111f 	movw	r1, #287	; 0x11f
 8005fac:	4852      	ldr	r0, [pc, #328]	; (80060f8 <HAL_RCC_OscConfig+0x2ac>)
 8005fae:	f7fb ffd4 	bl	8001f5a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b1f      	cmp	r3, #31
 8005fb8:	d904      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x178>
 8005fba:	f44f 7190 	mov.w	r1, #288	; 0x120
 8005fbe:	484e      	ldr	r0, [pc, #312]	; (80060f8 <HAL_RCC_OscConfig+0x2ac>)
 8005fc0:	f7fb ffcb 	bl	8001f5a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fc4:	4b4d      	ldr	r3, [pc, #308]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 030c 	and.w	r3, r3, #12
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00b      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fd0:	4b4a      	ldr	r3, [pc, #296]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d11c      	bne.n	8006016 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fdc:	4b47      	ldr	r3, [pc, #284]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d116      	bne.n	8006016 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fe8:	4b44      	ldr	r3, [pc, #272]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <HAL_RCC_OscConfig+0x1b4>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d001      	beq.n	8006000 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e23c      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006000:	4b3e      	ldr	r3, [pc, #248]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	493b      	ldr	r1, [pc, #236]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8006010:	4313      	orrs	r3, r2
 8006012:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006014:	e03a      	b.n	800608c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d020      	beq.n	8006060 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800601e:	4b38      	ldr	r3, [pc, #224]	; (8006100 <HAL_RCC_OscConfig+0x2b4>)
 8006020:	2201      	movs	r2, #1
 8006022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006024:	f7fc ffdc 	bl	8002fe0 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800602c:	f7fc ffd8 	bl	8002fe0 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e21d      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800603e:	4b2f      	ldr	r3, [pc, #188]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f0      	beq.n	800602c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800604a:	4b2c      	ldr	r3, [pc, #176]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	4928      	ldr	r1, [pc, #160]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 800605a:	4313      	orrs	r3, r2
 800605c:	600b      	str	r3, [r1, #0]
 800605e:	e015      	b.n	800608c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006060:	4b27      	ldr	r3, [pc, #156]	; (8006100 <HAL_RCC_OscConfig+0x2b4>)
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006066:	f7fc ffbb 	bl	8002fe0 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800606e:	f7fc ffb7 	bl	8002fe0 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e1fc      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006080:	4b1e      	ldr	r3, [pc, #120]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f0      	bne.n	800606e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0308 	and.w	r3, r3, #8
 8006094:	2b00      	cmp	r3, #0
 8006096:	d046      	beq.n	8006126 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d008      	beq.n	80060b2 <HAL_RCC_OscConfig+0x266>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d004      	beq.n	80060b2 <HAL_RCC_OscConfig+0x266>
 80060a8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80060ac:	4812      	ldr	r0, [pc, #72]	; (80060f8 <HAL_RCC_OscConfig+0x2ac>)
 80060ae:	f7fb ff54 	bl	8001f5a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d016      	beq.n	80060e8 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060ba:	4b12      	ldr	r3, [pc, #72]	; (8006104 <HAL_RCC_OscConfig+0x2b8>)
 80060bc:	2201      	movs	r2, #1
 80060be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c0:	f7fc ff8e 	bl	8002fe0 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060c8:	f7fc ff8a 	bl	8002fe0 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e1cf      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060da:	4b08      	ldr	r3, [pc, #32]	; (80060fc <HAL_RCC_OscConfig+0x2b0>)
 80060dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0f0      	beq.n	80060c8 <HAL_RCC_OscConfig+0x27c>
 80060e6:	e01e      	b.n	8006126 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060e8:	4b06      	ldr	r3, [pc, #24]	; (8006104 <HAL_RCC_OscConfig+0x2b8>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ee:	f7fc ff77 	bl	8002fe0 <HAL_GetTick>
 80060f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060f4:	e011      	b.n	800611a <HAL_RCC_OscConfig+0x2ce>
 80060f6:	bf00      	nop
 80060f8:	0800bedc 	.word	0x0800bedc
 80060fc:	40023800 	.word	0x40023800
 8006100:	42470000 	.word	0x42470000
 8006104:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006108:	f7fc ff6a 	bl	8002fe0 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e1af      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800611a:	4b97      	ldr	r3, [pc, #604]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 800611c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1f0      	bne.n	8006108 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 80a8 	beq.w	8006284 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006134:	2300      	movs	r3, #0
 8006136:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00c      	beq.n	800615a <HAL_RCC_OscConfig+0x30e>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d008      	beq.n	800615a <HAL_RCC_OscConfig+0x30e>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b05      	cmp	r3, #5
 800614e:	d004      	beq.n	800615a <HAL_RCC_OscConfig+0x30e>
 8006150:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8006154:	4889      	ldr	r0, [pc, #548]	; (800637c <HAL_RCC_OscConfig+0x530>)
 8006156:	f7fb ff00 	bl	8001f5a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800615a:	4b87      	ldr	r3, [pc, #540]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10f      	bne.n	8006186 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006166:	2300      	movs	r3, #0
 8006168:	60bb      	str	r3, [r7, #8]
 800616a:	4b83      	ldr	r3, [pc, #524]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	4a82      	ldr	r2, [pc, #520]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 8006170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006174:	6413      	str	r3, [r2, #64]	; 0x40
 8006176:	4b80      	ldr	r3, [pc, #512]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006182:	2301      	movs	r3, #1
 8006184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006186:	4b7e      	ldr	r3, [pc, #504]	; (8006380 <HAL_RCC_OscConfig+0x534>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618e:	2b00      	cmp	r3, #0
 8006190:	d118      	bne.n	80061c4 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006192:	4b7b      	ldr	r3, [pc, #492]	; (8006380 <HAL_RCC_OscConfig+0x534>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a7a      	ldr	r2, [pc, #488]	; (8006380 <HAL_RCC_OscConfig+0x534>)
 8006198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800619c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800619e:	f7fc ff1f 	bl	8002fe0 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a6:	f7fc ff1b 	bl	8002fe0 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e160      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b8:	4b71      	ldr	r3, [pc, #452]	; (8006380 <HAL_RCC_OscConfig+0x534>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0f0      	beq.n	80061a6 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d106      	bne.n	80061da <HAL_RCC_OscConfig+0x38e>
 80061cc:	4b6a      	ldr	r3, [pc, #424]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 80061ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d0:	4a69      	ldr	r2, [pc, #420]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 80061d2:	f043 0301 	orr.w	r3, r3, #1
 80061d6:	6713      	str	r3, [r2, #112]	; 0x70
 80061d8:	e01c      	b.n	8006214 <HAL_RCC_OscConfig+0x3c8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2b05      	cmp	r3, #5
 80061e0:	d10c      	bne.n	80061fc <HAL_RCC_OscConfig+0x3b0>
 80061e2:	4b65      	ldr	r3, [pc, #404]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 80061e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e6:	4a64      	ldr	r2, [pc, #400]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 80061e8:	f043 0304 	orr.w	r3, r3, #4
 80061ec:	6713      	str	r3, [r2, #112]	; 0x70
 80061ee:	4b62      	ldr	r3, [pc, #392]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	4a61      	ldr	r2, [pc, #388]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 80061f4:	f043 0301 	orr.w	r3, r3, #1
 80061f8:	6713      	str	r3, [r2, #112]	; 0x70
 80061fa:	e00b      	b.n	8006214 <HAL_RCC_OscConfig+0x3c8>
 80061fc:	4b5e      	ldr	r3, [pc, #376]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 80061fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006200:	4a5d      	ldr	r2, [pc, #372]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 8006202:	f023 0301 	bic.w	r3, r3, #1
 8006206:	6713      	str	r3, [r2, #112]	; 0x70
 8006208:	4b5b      	ldr	r3, [pc, #364]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 800620a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620c:	4a5a      	ldr	r2, [pc, #360]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 800620e:	f023 0304 	bic.w	r3, r3, #4
 8006212:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d015      	beq.n	8006248 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800621c:	f7fc fee0 	bl	8002fe0 <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006222:	e00a      	b.n	800623a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006224:	f7fc fedc 	bl	8002fe0 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006232:	4293      	cmp	r3, r2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e11f      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800623a:	4b4f      	ldr	r3, [pc, #316]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0ee      	beq.n	8006224 <HAL_RCC_OscConfig+0x3d8>
 8006246:	e014      	b.n	8006272 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006248:	f7fc feca 	bl	8002fe0 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800624e:	e00a      	b.n	8006266 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006250:	f7fc fec6 	bl	8002fe0 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	f241 3288 	movw	r2, #5000	; 0x1388
 800625e:	4293      	cmp	r3, r2
 8006260:	d901      	bls.n	8006266 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e109      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006266:	4b44      	ldr	r3, [pc, #272]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 8006268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1ee      	bne.n	8006250 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006272:	7dfb      	ldrb	r3, [r7, #23]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d105      	bne.n	8006284 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006278:	4b3f      	ldr	r3, [pc, #252]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	4a3e      	ldr	r2, [pc, #248]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 800627e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006282:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00c      	beq.n	80062a6 <HAL_RCC_OscConfig+0x45a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d008      	beq.n	80062a6 <HAL_RCC_OscConfig+0x45a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d004      	beq.n	80062a6 <HAL_RCC_OscConfig+0x45a>
 800629c:	f240 11cf 	movw	r1, #463	; 0x1cf
 80062a0:	4836      	ldr	r0, [pc, #216]	; (800637c <HAL_RCC_OscConfig+0x530>)
 80062a2:	f7fb fe5a 	bl	8001f5a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 80e4 	beq.w	8006478 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062b0:	4b31      	ldr	r3, [pc, #196]	; (8006378 <HAL_RCC_OscConfig+0x52c>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 030c 	and.w	r3, r3, #12
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	f000 80ae 	beq.w	800641a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	f040 8092 	bne.w	80063ec <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d009      	beq.n	80062e4 <HAL_RCC_OscConfig+0x498>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062d8:	d004      	beq.n	80062e4 <HAL_RCC_OscConfig+0x498>
 80062da:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80062de:	4827      	ldr	r0, [pc, #156]	; (800637c <HAL_RCC_OscConfig+0x530>)
 80062e0:	f7fb fe3b 	bl	8001f5a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	2b3f      	cmp	r3, #63	; 0x3f
 80062ea:	d904      	bls.n	80062f6 <HAL_RCC_OscConfig+0x4aa>
 80062ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80062f0:	4822      	ldr	r0, [pc, #136]	; (800637c <HAL_RCC_OscConfig+0x530>)
 80062f2:	f7fb fe32 	bl	8001f5a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	2bbf      	cmp	r3, #191	; 0xbf
 80062fc:	d904      	bls.n	8006308 <HAL_RCC_OscConfig+0x4bc>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006306:	d904      	bls.n	8006312 <HAL_RCC_OscConfig+0x4c6>
 8006308:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800630c:	481b      	ldr	r0, [pc, #108]	; (800637c <HAL_RCC_OscConfig+0x530>)
 800630e:	f7fb fe24 	bl	8001f5a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006316:	2b02      	cmp	r3, #2
 8006318:	d010      	beq.n	800633c <HAL_RCC_OscConfig+0x4f0>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	2b04      	cmp	r3, #4
 8006320:	d00c      	beq.n	800633c <HAL_RCC_OscConfig+0x4f0>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006326:	2b06      	cmp	r3, #6
 8006328:	d008      	beq.n	800633c <HAL_RCC_OscConfig+0x4f0>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	2b08      	cmp	r3, #8
 8006330:	d004      	beq.n	800633c <HAL_RCC_OscConfig+0x4f0>
 8006332:	f240 11db 	movw	r1, #475	; 0x1db
 8006336:	4811      	ldr	r0, [pc, #68]	; (800637c <HAL_RCC_OscConfig+0x530>)
 8006338:	f7fb fe0f 	bl	8001f5a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	2b01      	cmp	r3, #1
 8006342:	d903      	bls.n	800634c <HAL_RCC_OscConfig+0x500>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	2b0f      	cmp	r3, #15
 800634a:	d904      	bls.n	8006356 <HAL_RCC_OscConfig+0x50a>
 800634c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8006350:	480a      	ldr	r0, [pc, #40]	; (800637c <HAL_RCC_OscConfig+0x530>)
 8006352:	f7fb fe02 	bl	8001f5a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006356:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <HAL_RCC_OscConfig+0x538>)
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635c:	f7fc fe40 	bl	8002fe0 <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006362:	e011      	b.n	8006388 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006364:	f7fc fe3c 	bl	8002fe0 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d90a      	bls.n	8006388 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e081      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
 8006376:	bf00      	nop
 8006378:	40023800 	.word	0x40023800
 800637c:	0800bedc 	.word	0x0800bedc
 8006380:	40007000 	.word	0x40007000
 8006384:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006388:	4b3e      	ldr	r3, [pc, #248]	; (8006484 <HAL_RCC_OscConfig+0x638>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e7      	bne.n	8006364 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	69da      	ldr	r2, [r3, #28]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	019b      	lsls	r3, r3, #6
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	3b01      	subs	r3, #1
 80063ae:	041b      	lsls	r3, r3, #16
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	061b      	lsls	r3, r3, #24
 80063b8:	4932      	ldr	r1, [pc, #200]	; (8006484 <HAL_RCC_OscConfig+0x638>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063be:	4b32      	ldr	r3, [pc, #200]	; (8006488 <HAL_RCC_OscConfig+0x63c>)
 80063c0:	2201      	movs	r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c4:	f7fc fe0c 	bl	8002fe0 <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063cc:	f7fc fe08 	bl	8002fe0 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e04d      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063de:	4b29      	ldr	r3, [pc, #164]	; (8006484 <HAL_RCC_OscConfig+0x638>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0x580>
 80063ea:	e045      	b.n	8006478 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ec:	4b26      	ldr	r3, [pc, #152]	; (8006488 <HAL_RCC_OscConfig+0x63c>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f2:	f7fc fdf5 	bl	8002fe0 <HAL_GetTick>
 80063f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063fa:	f7fc fdf1 	bl	8002fe0 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e036      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800640c:	4b1d      	ldr	r3, [pc, #116]	; (8006484 <HAL_RCC_OscConfig+0x638>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f0      	bne.n	80063fa <HAL_RCC_OscConfig+0x5ae>
 8006418:	e02e      	b.n	8006478 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d101      	bne.n	8006426 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e029      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006426:	4b17      	ldr	r3, [pc, #92]	; (8006484 <HAL_RCC_OscConfig+0x638>)
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	429a      	cmp	r2, r3
 8006438:	d11c      	bne.n	8006474 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006444:	429a      	cmp	r2, r3
 8006446:	d115      	bne.n	8006474 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800644e:	4013      	ands	r3, r2
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006454:	4293      	cmp	r3, r2
 8006456:	d10d      	bne.n	8006474 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006462:	429a      	cmp	r2, r3
 8006464:	d106      	bne.n	8006474 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006470:	429a      	cmp	r2, r3
 8006472:	d001      	beq.n	8006478 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40023800 	.word	0x40023800
 8006488:	42470060 	.word	0x42470060

0800648c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e174      	b.n	800678a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x24>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b0f      	cmp	r3, #15
 80064ae:	d904      	bls.n	80064ba <HAL_RCC_ClockConfig+0x2e>
 80064b0:	f240 2151 	movw	r1, #593	; 0x251
 80064b4:	487b      	ldr	r0, [pc, #492]	; (80066a4 <HAL_RCC_ClockConfig+0x218>)
 80064b6:	f7fb fd50 	bl	8001f5a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d019      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x68>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d016      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x68>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d013      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x68>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d010      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x68>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d00d      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x68>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b05      	cmp	r3, #5
 80064dc:	d00a      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x68>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b06      	cmp	r3, #6
 80064e2:	d007      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x68>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b07      	cmp	r3, #7
 80064e8:	d004      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x68>
 80064ea:	f240 2152 	movw	r1, #594	; 0x252
 80064ee:	486d      	ldr	r0, [pc, #436]	; (80066a4 <HAL_RCC_ClockConfig+0x218>)
 80064f0:	f7fb fd33 	bl	8001f5a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064f4:	4b6c      	ldr	r3, [pc, #432]	; (80066a8 <HAL_RCC_ClockConfig+0x21c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d90c      	bls.n	800651c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006502:	4b69      	ldr	r3, [pc, #420]	; (80066a8 <HAL_RCC_ClockConfig+0x21c>)
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800650a:	4b67      	ldr	r3, [pc, #412]	; (80066a8 <HAL_RCC_ClockConfig+0x21c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d001      	beq.n	800651c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e136      	b.n	800678a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d049      	beq.n	80065bc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006534:	4b5d      	ldr	r3, [pc, #372]	; (80066ac <HAL_RCC_ClockConfig+0x220>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	4a5c      	ldr	r2, [pc, #368]	; (80066ac <HAL_RCC_ClockConfig+0x220>)
 800653a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800653e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b00      	cmp	r3, #0
 800654a:	d005      	beq.n	8006558 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800654c:	4b57      	ldr	r3, [pc, #348]	; (80066ac <HAL_RCC_ClockConfig+0x220>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	4a56      	ldr	r2, [pc, #344]	; (80066ac <HAL_RCC_ClockConfig+0x220>)
 8006552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d024      	beq.n	80065aa <HAL_RCC_ClockConfig+0x11e>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	2b80      	cmp	r3, #128	; 0x80
 8006566:	d020      	beq.n	80065aa <HAL_RCC_ClockConfig+0x11e>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	2b90      	cmp	r3, #144	; 0x90
 800656e:	d01c      	beq.n	80065aa <HAL_RCC_ClockConfig+0x11e>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	2ba0      	cmp	r3, #160	; 0xa0
 8006576:	d018      	beq.n	80065aa <HAL_RCC_ClockConfig+0x11e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2bb0      	cmp	r3, #176	; 0xb0
 800657e:	d014      	beq.n	80065aa <HAL_RCC_ClockConfig+0x11e>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	2bc0      	cmp	r3, #192	; 0xc0
 8006586:	d010      	beq.n	80065aa <HAL_RCC_ClockConfig+0x11e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2bd0      	cmp	r3, #208	; 0xd0
 800658e:	d00c      	beq.n	80065aa <HAL_RCC_ClockConfig+0x11e>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2be0      	cmp	r3, #224	; 0xe0
 8006596:	d008      	beq.n	80065aa <HAL_RCC_ClockConfig+0x11e>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	2bf0      	cmp	r3, #240	; 0xf0
 800659e:	d004      	beq.n	80065aa <HAL_RCC_ClockConfig+0x11e>
 80065a0:	f240 2175 	movw	r1, #629	; 0x275
 80065a4:	483f      	ldr	r0, [pc, #252]	; (80066a4 <HAL_RCC_ClockConfig+0x218>)
 80065a6:	f7fb fcd8 	bl	8001f5a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065aa:	4b40      	ldr	r3, [pc, #256]	; (80066ac <HAL_RCC_ClockConfig+0x220>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	493d      	ldr	r1, [pc, #244]	; (80066ac <HAL_RCC_ClockConfig+0x220>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d059      	beq.n	800667c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d010      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x166>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d00c      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x166>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d008      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x166>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d004      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x166>
 80065e8:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80065ec:	482d      	ldr	r0, [pc, #180]	; (80066a4 <HAL_RCC_ClockConfig+0x218>)
 80065ee:	f7fb fcb4 	bl	8001f5a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d107      	bne.n	800660a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065fa:	4b2c      	ldr	r3, [pc, #176]	; (80066ac <HAL_RCC_ClockConfig+0x220>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d119      	bne.n	800663a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e0bf      	b.n	800678a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2b02      	cmp	r3, #2
 8006610:	d003      	beq.n	800661a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006616:	2b03      	cmp	r3, #3
 8006618:	d107      	bne.n	800662a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800661a:	4b24      	ldr	r3, [pc, #144]	; (80066ac <HAL_RCC_ClockConfig+0x220>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d109      	bne.n	800663a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e0af      	b.n	800678a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800662a:	4b20      	ldr	r3, [pc, #128]	; (80066ac <HAL_RCC_ClockConfig+0x220>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e0a7      	b.n	800678a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800663a:	4b1c      	ldr	r3, [pc, #112]	; (80066ac <HAL_RCC_ClockConfig+0x220>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f023 0203 	bic.w	r2, r3, #3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	4919      	ldr	r1, [pc, #100]	; (80066ac <HAL_RCC_ClockConfig+0x220>)
 8006648:	4313      	orrs	r3, r2
 800664a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800664c:	f7fc fcc8 	bl	8002fe0 <HAL_GetTick>
 8006650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006652:	e00a      	b.n	800666a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006654:	f7fc fcc4 	bl	8002fe0 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006662:	4293      	cmp	r3, r2
 8006664:	d901      	bls.n	800666a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e08f      	b.n	800678a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800666a:	4b10      	ldr	r3, [pc, #64]	; (80066ac <HAL_RCC_ClockConfig+0x220>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 020c 	and.w	r2, r3, #12
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	429a      	cmp	r2, r3
 800667a:	d1eb      	bne.n	8006654 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800667c:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <HAL_RCC_ClockConfig+0x21c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 030f 	and.w	r3, r3, #15
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d212      	bcs.n	80066b0 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800668a:	4b07      	ldr	r3, [pc, #28]	; (80066a8 <HAL_RCC_ClockConfig+0x21c>)
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006692:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <HAL_RCC_ClockConfig+0x21c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d007      	beq.n	80066b0 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e072      	b.n	800678a <HAL_RCC_ClockConfig+0x2fe>
 80066a4:	0800bedc 	.word	0x0800bedc
 80066a8:	40023c00 	.word	0x40023c00
 80066ac:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d025      	beq.n	8006708 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d018      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x26a>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066cc:	d013      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x26a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80066d6:	d00e      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x26a>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80066e0:	d009      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x26a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80066ea:	d004      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x26a>
 80066ec:	f240 21ba 	movw	r1, #698	; 0x2ba
 80066f0:	4828      	ldr	r0, [pc, #160]	; (8006794 <HAL_RCC_ClockConfig+0x308>)
 80066f2:	f7fb fc32 	bl	8001f5a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066f6:	4b28      	ldr	r3, [pc, #160]	; (8006798 <HAL_RCC_ClockConfig+0x30c>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	4925      	ldr	r1, [pc, #148]	; (8006798 <HAL_RCC_ClockConfig+0x30c>)
 8006704:	4313      	orrs	r3, r2
 8006706:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0308 	and.w	r3, r3, #8
 8006710:	2b00      	cmp	r3, #0
 8006712:	d026      	beq.n	8006762 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d018      	beq.n	800674e <HAL_RCC_ClockConfig+0x2c2>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006724:	d013      	beq.n	800674e <HAL_RCC_ClockConfig+0x2c2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800672e:	d00e      	beq.n	800674e <HAL_RCC_ClockConfig+0x2c2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006738:	d009      	beq.n	800674e <HAL_RCC_ClockConfig+0x2c2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006742:	d004      	beq.n	800674e <HAL_RCC_ClockConfig+0x2c2>
 8006744:	f240 21c1 	movw	r1, #705	; 0x2c1
 8006748:	4812      	ldr	r0, [pc, #72]	; (8006794 <HAL_RCC_ClockConfig+0x308>)
 800674a:	f7fb fc06 	bl	8001f5a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800674e:	4b12      	ldr	r3, [pc, #72]	; (8006798 <HAL_RCC_ClockConfig+0x30c>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	490e      	ldr	r1, [pc, #56]	; (8006798 <HAL_RCC_ClockConfig+0x30c>)
 800675e:	4313      	orrs	r3, r2
 8006760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006762:	f000 f821 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 8006766:	4601      	mov	r1, r0
 8006768:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <HAL_RCC_ClockConfig+0x30c>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	091b      	lsrs	r3, r3, #4
 800676e:	f003 030f 	and.w	r3, r3, #15
 8006772:	4a0a      	ldr	r2, [pc, #40]	; (800679c <HAL_RCC_ClockConfig+0x310>)
 8006774:	5cd3      	ldrb	r3, [r2, r3]
 8006776:	fa21 f303 	lsr.w	r3, r1, r3
 800677a:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <HAL_RCC_ClockConfig+0x314>)
 800677c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800677e:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <HAL_RCC_ClockConfig+0x318>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4618      	mov	r0, r3
 8006784:	f7fc fbe8 	bl	8002f58 <HAL_InitTick>

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	0800bedc 	.word	0x0800bedc
 8006798:	40023800 	.word	0x40023800
 800679c:	0800bfd0 	.word	0x0800bfd0
 80067a0:	20000044 	.word	0x20000044
 80067a4:	20000050 	.word	0x20000050

080067a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	607b      	str	r3, [r7, #4]
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	2300      	movs	r3, #0
 80067b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067be:	4b50      	ldr	r3, [pc, #320]	; (8006900 <HAL_RCC_GetSysClockFreq+0x158>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 030c 	and.w	r3, r3, #12
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d007      	beq.n	80067da <HAL_RCC_GetSysClockFreq+0x32>
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	d008      	beq.n	80067e0 <HAL_RCC_GetSysClockFreq+0x38>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f040 808d 	bne.w	80068ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067d4:	4b4b      	ldr	r3, [pc, #300]	; (8006904 <HAL_RCC_GetSysClockFreq+0x15c>)
 80067d6:	60bb      	str	r3, [r7, #8]
       break;
 80067d8:	e08c      	b.n	80068f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067da:	4b4b      	ldr	r3, [pc, #300]	; (8006908 <HAL_RCC_GetSysClockFreq+0x160>)
 80067dc:	60bb      	str	r3, [r7, #8]
      break;
 80067de:	e089      	b.n	80068f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067e0:	4b47      	ldr	r3, [pc, #284]	; (8006900 <HAL_RCC_GetSysClockFreq+0x158>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067ea:	4b45      	ldr	r3, [pc, #276]	; (8006900 <HAL_RCC_GetSysClockFreq+0x158>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d023      	beq.n	800683e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067f6:	4b42      	ldr	r3, [pc, #264]	; (8006900 <HAL_RCC_GetSysClockFreq+0x158>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	099b      	lsrs	r3, r3, #6
 80067fc:	f04f 0400 	mov.w	r4, #0
 8006800:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	ea03 0501 	and.w	r5, r3, r1
 800680c:	ea04 0602 	and.w	r6, r4, r2
 8006810:	4a3d      	ldr	r2, [pc, #244]	; (8006908 <HAL_RCC_GetSysClockFreq+0x160>)
 8006812:	fb02 f106 	mul.w	r1, r2, r6
 8006816:	2200      	movs	r2, #0
 8006818:	fb02 f205 	mul.w	r2, r2, r5
 800681c:	440a      	add	r2, r1
 800681e:	493a      	ldr	r1, [pc, #232]	; (8006908 <HAL_RCC_GetSysClockFreq+0x160>)
 8006820:	fba5 0101 	umull	r0, r1, r5, r1
 8006824:	1853      	adds	r3, r2, r1
 8006826:	4619      	mov	r1, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f04f 0400 	mov.w	r4, #0
 800682e:	461a      	mov	r2, r3
 8006830:	4623      	mov	r3, r4
 8006832:	f7fa f91b 	bl	8000a6c <__aeabi_uldivmod>
 8006836:	4603      	mov	r3, r0
 8006838:	460c      	mov	r4, r1
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	e049      	b.n	80068d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800683e:	4b30      	ldr	r3, [pc, #192]	; (8006900 <HAL_RCC_GetSysClockFreq+0x158>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	099b      	lsrs	r3, r3, #6
 8006844:	f04f 0400 	mov.w	r4, #0
 8006848:	f240 11ff 	movw	r1, #511	; 0x1ff
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	ea03 0501 	and.w	r5, r3, r1
 8006854:	ea04 0602 	and.w	r6, r4, r2
 8006858:	4629      	mov	r1, r5
 800685a:	4632      	mov	r2, r6
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	f04f 0400 	mov.w	r4, #0
 8006864:	0154      	lsls	r4, r2, #5
 8006866:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800686a:	014b      	lsls	r3, r1, #5
 800686c:	4619      	mov	r1, r3
 800686e:	4622      	mov	r2, r4
 8006870:	1b49      	subs	r1, r1, r5
 8006872:	eb62 0206 	sbc.w	r2, r2, r6
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	f04f 0400 	mov.w	r4, #0
 800687e:	0194      	lsls	r4, r2, #6
 8006880:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006884:	018b      	lsls	r3, r1, #6
 8006886:	1a5b      	subs	r3, r3, r1
 8006888:	eb64 0402 	sbc.w	r4, r4, r2
 800688c:	f04f 0100 	mov.w	r1, #0
 8006890:	f04f 0200 	mov.w	r2, #0
 8006894:	00e2      	lsls	r2, r4, #3
 8006896:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800689a:	00d9      	lsls	r1, r3, #3
 800689c:	460b      	mov	r3, r1
 800689e:	4614      	mov	r4, r2
 80068a0:	195b      	adds	r3, r3, r5
 80068a2:	eb44 0406 	adc.w	r4, r4, r6
 80068a6:	f04f 0100 	mov.w	r1, #0
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	02a2      	lsls	r2, r4, #10
 80068b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80068b4:	0299      	lsls	r1, r3, #10
 80068b6:	460b      	mov	r3, r1
 80068b8:	4614      	mov	r4, r2
 80068ba:	4618      	mov	r0, r3
 80068bc:	4621      	mov	r1, r4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f04f 0400 	mov.w	r4, #0
 80068c4:	461a      	mov	r2, r3
 80068c6:	4623      	mov	r3, r4
 80068c8:	f7fa f8d0 	bl	8000a6c <__aeabi_uldivmod>
 80068cc:	4603      	mov	r3, r0
 80068ce:	460c      	mov	r4, r1
 80068d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068d2:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <HAL_RCC_GetSysClockFreq+0x158>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	0c1b      	lsrs	r3, r3, #16
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	3301      	adds	r3, #1
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ea:	60bb      	str	r3, [r7, #8]
      break;
 80068ec:	e002      	b.n	80068f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068ee:	4b05      	ldr	r3, [pc, #20]	; (8006904 <HAL_RCC_GetSysClockFreq+0x15c>)
 80068f0:	60bb      	str	r3, [r7, #8]
      break;
 80068f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068f4:	68bb      	ldr	r3, [r7, #8]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068fe:	bf00      	nop
 8006900:	40023800 	.word	0x40023800
 8006904:	00f42400 	.word	0x00f42400
 8006908:	016e3600 	.word	0x016e3600

0800690c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006910:	4b03      	ldr	r3, [pc, #12]	; (8006920 <HAL_RCC_GetHCLKFreq+0x14>)
 8006912:	681b      	ldr	r3, [r3, #0]
}
 8006914:	4618      	mov	r0, r3
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	20000044 	.word	0x20000044

08006924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006928:	f7ff fff0 	bl	800690c <HAL_RCC_GetHCLKFreq>
 800692c:	4601      	mov	r1, r0
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	0a9b      	lsrs	r3, r3, #10
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	4a03      	ldr	r2, [pc, #12]	; (8006948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800693a:	5cd3      	ldrb	r3, [r2, r3]
 800693c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006940:	4618      	mov	r0, r3
 8006942:	bd80      	pop	{r7, pc}
 8006944:	40023800 	.word	0x40023800
 8006948:	0800bfe0 	.word	0x0800bfe0

0800694c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006950:	f7ff ffdc 	bl	800690c <HAL_RCC_GetHCLKFreq>
 8006954:	4601      	mov	r1, r0
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	0b5b      	lsrs	r3, r3, #13
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	4a03      	ldr	r2, [pc, #12]	; (8006970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006962:	5cd3      	ldrb	r3, [r2, r3]
 8006964:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006968:	4618      	mov	r0, r3
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40023800 	.word	0x40023800
 8006970:	0800bfe0 	.word	0x0800bfe0

08006974 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e113      	b.n	8006bae <HAL_SPI_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a8b      	ldr	r2, [pc, #556]	; (8006bb8 <HAL_SPI_Init+0x244>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d018      	beq.n	80069c2 <HAL_SPI_Init+0x4e>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a89      	ldr	r2, [pc, #548]	; (8006bbc <HAL_SPI_Init+0x248>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <HAL_SPI_Init+0x4e>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a88      	ldr	r2, [pc, #544]	; (8006bc0 <HAL_SPI_Init+0x24c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00e      	beq.n	80069c2 <HAL_SPI_Init+0x4e>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a86      	ldr	r2, [pc, #536]	; (8006bc4 <HAL_SPI_Init+0x250>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d009      	beq.n	80069c2 <HAL_SPI_Init+0x4e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a85      	ldr	r2, [pc, #532]	; (8006bc8 <HAL_SPI_Init+0x254>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d004      	beq.n	80069c2 <HAL_SPI_Init+0x4e>
 80069b8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80069bc:	4883      	ldr	r0, [pc, #524]	; (8006bcc <HAL_SPI_Init+0x258>)
 80069be:	f7fb facc 	bl	8001f5a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <HAL_SPI_Init+0x6a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069d2:	d004      	beq.n	80069de <HAL_SPI_Init+0x6a>
 80069d4:	f240 1143 	movw	r1, #323	; 0x143
 80069d8:	487c      	ldr	r0, [pc, #496]	; (8006bcc <HAL_SPI_Init+0x258>)
 80069da:	f7fb fabe 	bl	8001f5a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00e      	beq.n	8006a04 <HAL_SPI_Init+0x90>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ee:	d009      	beq.n	8006a04 <HAL_SPI_Init+0x90>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f8:	d004      	beq.n	8006a04 <HAL_SPI_Init+0x90>
 80069fa:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80069fe:	4873      	ldr	r0, [pc, #460]	; (8006bcc <HAL_SPI_Init+0x258>)
 8006a00:	f7fb faab 	bl	8001f5a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a0c:	d008      	beq.n	8006a20 <HAL_SPI_Init+0xac>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d004      	beq.n	8006a20 <HAL_SPI_Init+0xac>
 8006a16:	f240 1145 	movw	r1, #325	; 0x145
 8006a1a:	486c      	ldr	r0, [pc, #432]	; (8006bcc <HAL_SPI_Init+0x258>)
 8006a1c:	f7fb fa9d 	bl	8001f5a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a28:	d00d      	beq.n	8006a46 <HAL_SPI_Init+0xd2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d009      	beq.n	8006a46 <HAL_SPI_Init+0xd2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a3a:	d004      	beq.n	8006a46 <HAL_SPI_Init+0xd2>
 8006a3c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006a40:	4862      	ldr	r0, [pc, #392]	; (8006bcc <HAL_SPI_Init+0x258>)
 8006a42:	f7fb fa8a 	bl	8001f5a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d020      	beq.n	8006a90 <HAL_SPI_Init+0x11c>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d01c      	beq.n	8006a90 <HAL_SPI_Init+0x11c>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	2b10      	cmp	r3, #16
 8006a5c:	d018      	beq.n	8006a90 <HAL_SPI_Init+0x11c>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	2b18      	cmp	r3, #24
 8006a64:	d014      	beq.n	8006a90 <HAL_SPI_Init+0x11c>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	2b20      	cmp	r3, #32
 8006a6c:	d010      	beq.n	8006a90 <HAL_SPI_Init+0x11c>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	2b28      	cmp	r3, #40	; 0x28
 8006a74:	d00c      	beq.n	8006a90 <HAL_SPI_Init+0x11c>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	2b30      	cmp	r3, #48	; 0x30
 8006a7c:	d008      	beq.n	8006a90 <HAL_SPI_Init+0x11c>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	2b38      	cmp	r3, #56	; 0x38
 8006a84:	d004      	beq.n	8006a90 <HAL_SPI_Init+0x11c>
 8006a86:	f240 1147 	movw	r1, #327	; 0x147
 8006a8a:	4850      	ldr	r0, [pc, #320]	; (8006bcc <HAL_SPI_Init+0x258>)
 8006a8c:	f7fb fa65 	bl	8001f5a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d008      	beq.n	8006aaa <HAL_SPI_Init+0x136>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	2b80      	cmp	r3, #128	; 0x80
 8006a9e:	d004      	beq.n	8006aaa <HAL_SPI_Init+0x136>
 8006aa0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006aa4:	4849      	ldr	r0, [pc, #292]	; (8006bcc <HAL_SPI_Init+0x258>)
 8006aa6:	f7fb fa58 	bl	8001f5a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d008      	beq.n	8006ac4 <HAL_SPI_Init+0x150>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	2b10      	cmp	r3, #16
 8006ab8:	d004      	beq.n	8006ac4 <HAL_SPI_Init+0x150>
 8006aba:	f240 1149 	movw	r1, #329	; 0x149
 8006abe:	4843      	ldr	r0, [pc, #268]	; (8006bcc <HAL_SPI_Init+0x258>)
 8006ac0:	f7fb fa4b 	bl	8001f5a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d119      	bne.n	8006b00 <HAL_SPI_Init+0x18c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d008      	beq.n	8006ae6 <HAL_SPI_Init+0x172>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d004      	beq.n	8006ae6 <HAL_SPI_Init+0x172>
 8006adc:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006ae0:	483a      	ldr	r0, [pc, #232]	; (8006bcc <HAL_SPI_Init+0x258>)
 8006ae2:	f7fb fa3a 	bl	8001f5a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d008      	beq.n	8006b00 <HAL_SPI_Init+0x18c>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d004      	beq.n	8006b00 <HAL_SPI_Init+0x18c>
 8006af6:	f240 114d 	movw	r1, #333	; 0x14d
 8006afa:	4834      	ldr	r0, [pc, #208]	; (8006bcc <HAL_SPI_Init+0x258>)
 8006afc:	f7fb fa2d 	bl	8001f5a <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <HAL_SPI_Init+0x1ac>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fb fb34 	bl	8002188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	431a      	orrs	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	ea42 0103 	orr.w	r1, r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	0c1b      	lsrs	r3, r3, #16
 8006b7e:	f003 0104 	and.w	r1, r3, #4
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69da      	ldr	r2, [r3, #28]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	40013000 	.word	0x40013000
 8006bbc:	40003800 	.word	0x40003800
 8006bc0:	40003c00 	.word	0x40003c00
 8006bc4:	40013400 	.word	0x40013400
 8006bc8:	40015000 	.word	0x40015000
 8006bcc:	0800bf14 	.word	0x0800bf14

08006bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e0a0      	b.n	8006d24 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d02c      	beq.n	8006c44 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a4f      	ldr	r2, [pc, #316]	; (8006d2c <HAL_UART_Init+0x15c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00e      	beq.n	8006c12 <HAL_UART_Init+0x42>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a4d      	ldr	r2, [pc, #308]	; (8006d30 <HAL_UART_Init+0x160>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d009      	beq.n	8006c12 <HAL_UART_Init+0x42>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a4c      	ldr	r2, [pc, #304]	; (8006d34 <HAL_UART_Init+0x164>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d004      	beq.n	8006c12 <HAL_UART_Init+0x42>
 8006c08:	f240 114b 	movw	r1, #331	; 0x14b
 8006c0c:	484a      	ldr	r0, [pc, #296]	; (8006d38 <HAL_UART_Init+0x168>)
 8006c0e:	f7fb f9a4 	bl	8001f5a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d028      	beq.n	8006c6c <HAL_UART_Init+0x9c>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c22:	d023      	beq.n	8006c6c <HAL_UART_Init+0x9c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c2c:	d01e      	beq.n	8006c6c <HAL_UART_Init+0x9c>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c36:	d019      	beq.n	8006c6c <HAL_UART_Init+0x9c>
 8006c38:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006c3c:	483e      	ldr	r0, [pc, #248]	; (8006d38 <HAL_UART_Init+0x168>)
 8006c3e:	f7fb f98c 	bl	8001f5a <assert_failed>
 8006c42:	e013      	b.n	8006c6c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a38      	ldr	r2, [pc, #224]	; (8006d2c <HAL_UART_Init+0x15c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00e      	beq.n	8006c6c <HAL_UART_Init+0x9c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a37      	ldr	r2, [pc, #220]	; (8006d30 <HAL_UART_Init+0x160>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d009      	beq.n	8006c6c <HAL_UART_Init+0x9c>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a35      	ldr	r2, [pc, #212]	; (8006d34 <HAL_UART_Init+0x164>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d004      	beq.n	8006c6c <HAL_UART_Init+0x9c>
 8006c62:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8006c66:	4834      	ldr	r0, [pc, #208]	; (8006d38 <HAL_UART_Init+0x168>)
 8006c68:	f7fb f977 	bl	8001f5a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d009      	beq.n	8006c88 <HAL_UART_Init+0xb8>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7c:	d004      	beq.n	8006c88 <HAL_UART_Init+0xb8>
 8006c7e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8006c82:	482d      	ldr	r0, [pc, #180]	; (8006d38 <HAL_UART_Init+0x168>)
 8006c84:	f7fb f969 	bl	8001f5a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	69db      	ldr	r3, [r3, #28]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d009      	beq.n	8006ca4 <HAL_UART_Init+0xd4>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c98:	d004      	beq.n	8006ca4 <HAL_UART_Init+0xd4>
 8006c9a:	f240 1153 	movw	r1, #339	; 0x153
 8006c9e:	4826      	ldr	r0, [pc, #152]	; (8006d38 <HAL_UART_Init+0x168>)
 8006ca0:	f7fb f95b 	bl	8001f5a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d106      	bne.n	8006cbe <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7fb fabd 	bl	8002238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2224      	movs	r2, #36	; 0x24
 8006cc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cd4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fb54 	bl	8007384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	691a      	ldr	r2, [r3, #16]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695a      	ldr	r2, [r3, #20]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cfa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d0a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	40011000 	.word	0x40011000
 8006d30:	40004400 	.word	0x40004400
 8006d34:	40011400 	.word	0x40011400
 8006d38:	0800bf4c 	.word	0x0800bf4c

08006d3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	603b      	str	r3, [r7, #0]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b20      	cmp	r3, #32
 8006d5a:	f040 8083 	bne.w	8006e64 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <HAL_UART_Transmit+0x2e>
 8006d64:	88fb      	ldrh	r3, [r7, #6]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e07b      	b.n	8006e66 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_UART_Transmit+0x40>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e074      	b.n	8006e66 <HAL_UART_Transmit+0x12a>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2221      	movs	r2, #33	; 0x21
 8006d8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006d92:	f7fc f925 	bl	8002fe0 <HAL_GetTick>
 8006d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	88fa      	ldrh	r2, [r7, #6]
 8006d9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	88fa      	ldrh	r2, [r7, #6]
 8006da2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006dac:	e042      	b.n	8006e34 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc4:	d122      	bne.n	8006e0c <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2180      	movs	r1, #128	; 0x80
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 f96b 	bl	80070ac <UART_WaitOnFlagUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e042      	b.n	8006e66 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	461a      	mov	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006df2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d103      	bne.n	8006e04 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	3302      	adds	r3, #2
 8006e00:	60bb      	str	r3, [r7, #8]
 8006e02:	e017      	b.n	8006e34 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	3301      	adds	r3, #1
 8006e08:	60bb      	str	r3, [r7, #8]
 8006e0a:	e013      	b.n	8006e34 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2200      	movs	r2, #0
 8006e14:	2180      	movs	r1, #128	; 0x80
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 f948 	bl	80070ac <UART_WaitOnFlagUntilTimeout>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e01f      	b.n	8006e66 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	60ba      	str	r2, [r7, #8]
 8006e2c:	781a      	ldrb	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1b7      	bne.n	8006dae <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2200      	movs	r2, #0
 8006e46:	2140      	movs	r1, #64	; 0x40
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 f92f 	bl	80070ac <UART_WaitOnFlagUntilTimeout>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e006      	b.n	8006e66 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	e000      	b.n	8006e66 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006e64:	2302      	movs	r3, #2
  }
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10d      	bne.n	8006ec2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	f003 0320 	and.w	r3, r3, #32
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d008      	beq.n	8006ec2 <HAL_UART_IRQHandler+0x52>
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f9e0 	bl	8007280 <UART_Receive_IT>
      return;
 8006ec0:	e0d1      	b.n	8007066 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 80b0 	beq.w	800702a <HAL_UART_IRQHandler+0x1ba>
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d105      	bne.n	8006ee0 <HAL_UART_IRQHandler+0x70>
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 80a5 	beq.w	800702a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <HAL_UART_IRQHandler+0x90>
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef8:	f043 0201 	orr.w	r2, r3, #1
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <HAL_UART_IRQHandler+0xb0>
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f18:	f043 0202 	orr.w	r2, r3, #2
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <HAL_UART_IRQHandler+0xd0>
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f38:	f043 0204 	orr.w	r2, r3, #4
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	f003 0308 	and.w	r3, r3, #8
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00f      	beq.n	8006f6a <HAL_UART_IRQHandler+0xfa>
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d104      	bne.n	8006f5e <HAL_UART_IRQHandler+0xee>
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f62:	f043 0208 	orr.w	r2, r3, #8
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d078      	beq.n	8007064 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d007      	beq.n	8006f8c <HAL_UART_IRQHandler+0x11c>
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f97a 	bl	8007280 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	bf0c      	ite	eq
 8006f9a:	2301      	moveq	r3, #1
 8006f9c:	2300      	movne	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa6:	f003 0308 	and.w	r3, r3, #8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d102      	bne.n	8006fb4 <HAL_UART_IRQHandler+0x144>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d031      	beq.n	8007018 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f8c3 	bl	8007140 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc4:	2b40      	cmp	r3, #64	; 0x40
 8006fc6:	d123      	bne.n	8007010 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	695a      	ldr	r2, [r3, #20]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fd6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d013      	beq.n	8007008 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe4:	4a21      	ldr	r2, [pc, #132]	; (800706c <HAL_UART_IRQHandler+0x1fc>)
 8006fe6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fc f965 	bl	80032bc <HAL_DMA_Abort_IT>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d016      	beq.n	8007026 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007002:	4610      	mov	r0, r2
 8007004:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007006:	e00e      	b.n	8007026 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f845 	bl	8007098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800700e:	e00a      	b.n	8007026 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f841 	bl	8007098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007016:	e006      	b.n	8007026 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f83d 	bl	8007098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007024:	e01e      	b.n	8007064 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007026:	bf00      	nop
    return;
 8007028:	e01c      	b.n	8007064 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007030:	2b00      	cmp	r3, #0
 8007032:	d008      	beq.n	8007046 <HAL_UART_IRQHandler+0x1d6>
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f8b0 	bl	80071a4 <UART_Transmit_IT>
    return;
 8007044:	e00f      	b.n	8007066 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00a      	beq.n	8007066 <HAL_UART_IRQHandler+0x1f6>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d005      	beq.n	8007066 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f8f8 	bl	8007250 <UART_EndTransmit_IT>
    return;
 8007060:	bf00      	nop
 8007062:	e000      	b.n	8007066 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007064:	bf00      	nop
  }
}
 8007066:	3720      	adds	r7, #32
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	0800717d 	.word	0x0800717d

08007070 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	4613      	mov	r3, r2
 80070ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070bc:	e02c      	b.n	8007118 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070c4:	d028      	beq.n	8007118 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <UART_WaitOnFlagUntilTimeout+0x30>
 80070cc:	f7fb ff88 	bl	8002fe0 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d21d      	bcs.n	8007118 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695a      	ldr	r2, [r3, #20]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e00f      	b.n	8007138 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	4013      	ands	r3, r2
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	429a      	cmp	r2, r3
 8007126:	bf0c      	ite	eq
 8007128:	2301      	moveq	r3, #1
 800712a:	2300      	movne	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	461a      	mov	r2, r3
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	429a      	cmp	r2, r3
 8007134:	d0c3      	beq.n	80070be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007156:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695a      	ldr	r2, [r3, #20]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0201 	bic.w	r2, r2, #1
 8007166:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007188:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f7ff ff7e 	bl	8007098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800719c:	bf00      	nop
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b21      	cmp	r3, #33	; 0x21
 80071b6:	d144      	bne.n	8007242 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c0:	d11a      	bne.n	80071f8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071d6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d105      	bne.n	80071ec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	1c9a      	adds	r2, r3, #2
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	621a      	str	r2, [r3, #32]
 80071ea:	e00e      	b.n	800720a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	621a      	str	r2, [r3, #32]
 80071f6:	e008      	b.n	800720a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	1c59      	adds	r1, r3, #1
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6211      	str	r1, [r2, #32]
 8007202:	781a      	ldrb	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800720e:	b29b      	uxth	r3, r3
 8007210:	3b01      	subs	r3, #1
 8007212:	b29b      	uxth	r3, r3
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	4619      	mov	r1, r3
 8007218:	84d1      	strh	r1, [r2, #38]	; 0x26
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10f      	bne.n	800723e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68da      	ldr	r2, [r3, #12]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800722c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800723c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	e000      	b.n	8007244 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007242:	2302      	movs	r3, #2
  }
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007266:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff fefd 	bl	8007070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b22      	cmp	r3, #34	; 0x22
 8007292:	d171      	bne.n	8007378 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800729c:	d123      	bne.n	80072e6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10e      	bne.n	80072ca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	1c9a      	adds	r2, r3, #2
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	629a      	str	r2, [r3, #40]	; 0x28
 80072c8:	e029      	b.n	800731e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	629a      	str	r2, [r3, #40]	; 0x28
 80072e4:	e01b      	b.n	800731e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6858      	ldr	r0, [r3, #4]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f8:	1c59      	adds	r1, r3, #1
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	6291      	str	r1, [r2, #40]	; 0x28
 80072fe:	b2c2      	uxtb	r2, r0
 8007300:	701a      	strb	r2, [r3, #0]
 8007302:	e00c      	b.n	800731e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	b2da      	uxtb	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007310:	1c58      	adds	r0, r3, #1
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	6288      	str	r0, [r1, #40]	; 0x28
 8007316:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007322:	b29b      	uxth	r3, r3
 8007324:	3b01      	subs	r3, #1
 8007326:	b29b      	uxth	r3, r3
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	4619      	mov	r1, r3
 800732c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800732e:	2b00      	cmp	r3, #0
 8007330:	d120      	bne.n	8007374 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0220 	bic.w	r2, r2, #32
 8007340:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007350:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	695a      	ldr	r2, [r3, #20]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0201 	bic.w	r2, r2, #1
 8007360:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff fe8a 	bl	8007084 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	e002      	b.n	800737a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	e000      	b.n	800737a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007378:	2302      	movs	r3, #2
  }
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007388:	b085      	sub	sp, #20
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	4a9a      	ldr	r2, [pc, #616]	; (80075fc <UART_SetConfig+0x278>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d904      	bls.n	80073a2 <UART_SetConfig+0x1e>
 8007398:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800739c:	4898      	ldr	r0, [pc, #608]	; (8007600 <UART_SetConfig+0x27c>)
 800739e:	f7fa fddc 	bl	8001f5a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <UART_SetConfig+0x3a>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073b2:	d004      	beq.n	80073be <UART_SetConfig+0x3a>
 80073b4:	f640 31fc 	movw	r1, #3068	; 0xbfc
 80073b8:	4891      	ldr	r0, [pc, #580]	; (8007600 <UART_SetConfig+0x27c>)
 80073ba:	f7fa fdce 	bl	8001f5a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00e      	beq.n	80073e4 <UART_SetConfig+0x60>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ce:	d009      	beq.n	80073e4 <UART_SetConfig+0x60>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80073d8:	d004      	beq.n	80073e4 <UART_SetConfig+0x60>
 80073da:	f640 31fd 	movw	r1, #3069	; 0xbfd
 80073de:	4888      	ldr	r0, [pc, #544]	; (8007600 <UART_SetConfig+0x27c>)
 80073e0:	f7fa fdbb 	bl	8001f5a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	695a      	ldr	r2, [r3, #20]
 80073e8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80073ec:	4013      	ands	r3, r2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d103      	bne.n	80073fa <UART_SetConfig+0x76>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d104      	bne.n	8007404 <UART_SetConfig+0x80>
 80073fa:	f640 31fe 	movw	r1, #3070	; 0xbfe
 80073fe:	4880      	ldr	r0, [pc, #512]	; (8007600 <UART_SetConfig+0x27c>)
 8007400:	f7fa fdab 	bl	8001f5a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800743c:	f023 030c 	bic.w	r3, r3, #12
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6812      	ldr	r2, [r2, #0]
 8007444:	68f9      	ldr	r1, [r7, #12]
 8007446:	430b      	orrs	r3, r1
 8007448:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699a      	ldr	r2, [r3, #24]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007468:	f040 818f 	bne.w	800778a <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a64      	ldr	r2, [pc, #400]	; (8007604 <UART_SetConfig+0x280>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d005      	beq.n	8007482 <UART_SetConfig+0xfe>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a63      	ldr	r2, [pc, #396]	; (8007608 <UART_SetConfig+0x284>)
 800747c:	4293      	cmp	r3, r2
 800747e:	f040 80c7 	bne.w	8007610 <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007482:	f7ff fa63 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 8007486:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	461d      	mov	r5, r3
 800748c:	f04f 0600 	mov.w	r6, #0
 8007490:	46a8      	mov	r8, r5
 8007492:	46b1      	mov	r9, r6
 8007494:	eb18 0308 	adds.w	r3, r8, r8
 8007498:	eb49 0409 	adc.w	r4, r9, r9
 800749c:	4698      	mov	r8, r3
 800749e:	46a1      	mov	r9, r4
 80074a0:	eb18 0805 	adds.w	r8, r8, r5
 80074a4:	eb49 0906 	adc.w	r9, r9, r6
 80074a8:	f04f 0100 	mov.w	r1, #0
 80074ac:	f04f 0200 	mov.w	r2, #0
 80074b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80074b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80074b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80074bc:	4688      	mov	r8, r1
 80074be:	4691      	mov	r9, r2
 80074c0:	eb18 0005 	adds.w	r0, r8, r5
 80074c4:	eb49 0106 	adc.w	r1, r9, r6
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	461d      	mov	r5, r3
 80074ce:	f04f 0600 	mov.w	r6, #0
 80074d2:	196b      	adds	r3, r5, r5
 80074d4:	eb46 0406 	adc.w	r4, r6, r6
 80074d8:	461a      	mov	r2, r3
 80074da:	4623      	mov	r3, r4
 80074dc:	f7f9 fac6 	bl	8000a6c <__aeabi_uldivmod>
 80074e0:	4603      	mov	r3, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	461a      	mov	r2, r3
 80074e6:	4b49      	ldr	r3, [pc, #292]	; (800760c <UART_SetConfig+0x288>)
 80074e8:	fba3 2302 	umull	r2, r3, r3, r2
 80074ec:	095b      	lsrs	r3, r3, #5
 80074ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	461d      	mov	r5, r3
 80074f6:	f04f 0600 	mov.w	r6, #0
 80074fa:	46a9      	mov	r9, r5
 80074fc:	46b2      	mov	sl, r6
 80074fe:	eb19 0309 	adds.w	r3, r9, r9
 8007502:	eb4a 040a 	adc.w	r4, sl, sl
 8007506:	4699      	mov	r9, r3
 8007508:	46a2      	mov	sl, r4
 800750a:	eb19 0905 	adds.w	r9, r9, r5
 800750e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007512:	f04f 0100 	mov.w	r1, #0
 8007516:	f04f 0200 	mov.w	r2, #0
 800751a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800751e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007522:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007526:	4689      	mov	r9, r1
 8007528:	4692      	mov	sl, r2
 800752a:	eb19 0005 	adds.w	r0, r9, r5
 800752e:	eb4a 0106 	adc.w	r1, sl, r6
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	461d      	mov	r5, r3
 8007538:	f04f 0600 	mov.w	r6, #0
 800753c:	196b      	adds	r3, r5, r5
 800753e:	eb46 0406 	adc.w	r4, r6, r6
 8007542:	461a      	mov	r2, r3
 8007544:	4623      	mov	r3, r4
 8007546:	f7f9 fa91 	bl	8000a6c <__aeabi_uldivmod>
 800754a:	4603      	mov	r3, r0
 800754c:	460c      	mov	r4, r1
 800754e:	461a      	mov	r2, r3
 8007550:	4b2e      	ldr	r3, [pc, #184]	; (800760c <UART_SetConfig+0x288>)
 8007552:	fba3 1302 	umull	r1, r3, r3, r2
 8007556:	095b      	lsrs	r3, r3, #5
 8007558:	2164      	movs	r1, #100	; 0x64
 800755a:	fb01 f303 	mul.w	r3, r1, r3
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	00db      	lsls	r3, r3, #3
 8007562:	3332      	adds	r3, #50	; 0x32
 8007564:	4a29      	ldr	r2, [pc, #164]	; (800760c <UART_SetConfig+0x288>)
 8007566:	fba2 2303 	umull	r2, r3, r2, r3
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007572:	4498      	add	r8, r3
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	461d      	mov	r5, r3
 8007578:	f04f 0600 	mov.w	r6, #0
 800757c:	46a9      	mov	r9, r5
 800757e:	46b2      	mov	sl, r6
 8007580:	eb19 0309 	adds.w	r3, r9, r9
 8007584:	eb4a 040a 	adc.w	r4, sl, sl
 8007588:	4699      	mov	r9, r3
 800758a:	46a2      	mov	sl, r4
 800758c:	eb19 0905 	adds.w	r9, r9, r5
 8007590:	eb4a 0a06 	adc.w	sl, sl, r6
 8007594:	f04f 0100 	mov.w	r1, #0
 8007598:	f04f 0200 	mov.w	r2, #0
 800759c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075a8:	4689      	mov	r9, r1
 80075aa:	4692      	mov	sl, r2
 80075ac:	eb19 0005 	adds.w	r0, r9, r5
 80075b0:	eb4a 0106 	adc.w	r1, sl, r6
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	461d      	mov	r5, r3
 80075ba:	f04f 0600 	mov.w	r6, #0
 80075be:	196b      	adds	r3, r5, r5
 80075c0:	eb46 0406 	adc.w	r4, r6, r6
 80075c4:	461a      	mov	r2, r3
 80075c6:	4623      	mov	r3, r4
 80075c8:	f7f9 fa50 	bl	8000a6c <__aeabi_uldivmod>
 80075cc:	4603      	mov	r3, r0
 80075ce:	460c      	mov	r4, r1
 80075d0:	461a      	mov	r2, r3
 80075d2:	4b0e      	ldr	r3, [pc, #56]	; (800760c <UART_SetConfig+0x288>)
 80075d4:	fba3 1302 	umull	r1, r3, r3, r2
 80075d8:	095b      	lsrs	r3, r3, #5
 80075da:	2164      	movs	r1, #100	; 0x64
 80075dc:	fb01 f303 	mul.w	r3, r1, r3
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	3332      	adds	r3, #50	; 0x32
 80075e6:	4a09      	ldr	r2, [pc, #36]	; (800760c <UART_SetConfig+0x288>)
 80075e8:	fba2 2303 	umull	r2, r3, r2, r3
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	f003 0207 	and.w	r2, r3, #7
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4442      	add	r2, r8
 80075f8:	609a      	str	r2, [r3, #8]
 80075fa:	e27a      	b.n	8007af2 <UART_SetConfig+0x76e>
 80075fc:	00a037a0 	.word	0x00a037a0
 8007600:	0800bf4c 	.word	0x0800bf4c
 8007604:	40011000 	.word	0x40011000
 8007608:	40011400 	.word	0x40011400
 800760c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007610:	f7ff f988 	bl	8006924 <HAL_RCC_GetPCLK1Freq>
 8007614:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	461d      	mov	r5, r3
 800761a:	f04f 0600 	mov.w	r6, #0
 800761e:	46a8      	mov	r8, r5
 8007620:	46b1      	mov	r9, r6
 8007622:	eb18 0308 	adds.w	r3, r8, r8
 8007626:	eb49 0409 	adc.w	r4, r9, r9
 800762a:	4698      	mov	r8, r3
 800762c:	46a1      	mov	r9, r4
 800762e:	eb18 0805 	adds.w	r8, r8, r5
 8007632:	eb49 0906 	adc.w	r9, r9, r6
 8007636:	f04f 0100 	mov.w	r1, #0
 800763a:	f04f 0200 	mov.w	r2, #0
 800763e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007642:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007646:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800764a:	4688      	mov	r8, r1
 800764c:	4691      	mov	r9, r2
 800764e:	eb18 0005 	adds.w	r0, r8, r5
 8007652:	eb49 0106 	adc.w	r1, r9, r6
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	461d      	mov	r5, r3
 800765c:	f04f 0600 	mov.w	r6, #0
 8007660:	196b      	adds	r3, r5, r5
 8007662:	eb46 0406 	adc.w	r4, r6, r6
 8007666:	461a      	mov	r2, r3
 8007668:	4623      	mov	r3, r4
 800766a:	f7f9 f9ff 	bl	8000a6c <__aeabi_uldivmod>
 800766e:	4603      	mov	r3, r0
 8007670:	460c      	mov	r4, r1
 8007672:	461a      	mov	r2, r3
 8007674:	4bb3      	ldr	r3, [pc, #716]	; (8007944 <UART_SetConfig+0x5c0>)
 8007676:	fba3 2302 	umull	r2, r3, r3, r2
 800767a:	095b      	lsrs	r3, r3, #5
 800767c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	461d      	mov	r5, r3
 8007684:	f04f 0600 	mov.w	r6, #0
 8007688:	46a9      	mov	r9, r5
 800768a:	46b2      	mov	sl, r6
 800768c:	eb19 0309 	adds.w	r3, r9, r9
 8007690:	eb4a 040a 	adc.w	r4, sl, sl
 8007694:	4699      	mov	r9, r3
 8007696:	46a2      	mov	sl, r4
 8007698:	eb19 0905 	adds.w	r9, r9, r5
 800769c:	eb4a 0a06 	adc.w	sl, sl, r6
 80076a0:	f04f 0100 	mov.w	r1, #0
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076b4:	4689      	mov	r9, r1
 80076b6:	4692      	mov	sl, r2
 80076b8:	eb19 0005 	adds.w	r0, r9, r5
 80076bc:	eb4a 0106 	adc.w	r1, sl, r6
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	461d      	mov	r5, r3
 80076c6:	f04f 0600 	mov.w	r6, #0
 80076ca:	196b      	adds	r3, r5, r5
 80076cc:	eb46 0406 	adc.w	r4, r6, r6
 80076d0:	461a      	mov	r2, r3
 80076d2:	4623      	mov	r3, r4
 80076d4:	f7f9 f9ca 	bl	8000a6c <__aeabi_uldivmod>
 80076d8:	4603      	mov	r3, r0
 80076da:	460c      	mov	r4, r1
 80076dc:	461a      	mov	r2, r3
 80076de:	4b99      	ldr	r3, [pc, #612]	; (8007944 <UART_SetConfig+0x5c0>)
 80076e0:	fba3 1302 	umull	r1, r3, r3, r2
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	2164      	movs	r1, #100	; 0x64
 80076e8:	fb01 f303 	mul.w	r3, r1, r3
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	3332      	adds	r3, #50	; 0x32
 80076f2:	4a94      	ldr	r2, [pc, #592]	; (8007944 <UART_SetConfig+0x5c0>)
 80076f4:	fba2 2303 	umull	r2, r3, r2, r3
 80076f8:	095b      	lsrs	r3, r3, #5
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007700:	4498      	add	r8, r3
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	461d      	mov	r5, r3
 8007706:	f04f 0600 	mov.w	r6, #0
 800770a:	46a9      	mov	r9, r5
 800770c:	46b2      	mov	sl, r6
 800770e:	eb19 0309 	adds.w	r3, r9, r9
 8007712:	eb4a 040a 	adc.w	r4, sl, sl
 8007716:	4699      	mov	r9, r3
 8007718:	46a2      	mov	sl, r4
 800771a:	eb19 0905 	adds.w	r9, r9, r5
 800771e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007722:	f04f 0100 	mov.w	r1, #0
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800772e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007732:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007736:	4689      	mov	r9, r1
 8007738:	4692      	mov	sl, r2
 800773a:	eb19 0005 	adds.w	r0, r9, r5
 800773e:	eb4a 0106 	adc.w	r1, sl, r6
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	461d      	mov	r5, r3
 8007748:	f04f 0600 	mov.w	r6, #0
 800774c:	196b      	adds	r3, r5, r5
 800774e:	eb46 0406 	adc.w	r4, r6, r6
 8007752:	461a      	mov	r2, r3
 8007754:	4623      	mov	r3, r4
 8007756:	f7f9 f989 	bl	8000a6c <__aeabi_uldivmod>
 800775a:	4603      	mov	r3, r0
 800775c:	460c      	mov	r4, r1
 800775e:	461a      	mov	r2, r3
 8007760:	4b78      	ldr	r3, [pc, #480]	; (8007944 <UART_SetConfig+0x5c0>)
 8007762:	fba3 1302 	umull	r1, r3, r3, r2
 8007766:	095b      	lsrs	r3, r3, #5
 8007768:	2164      	movs	r1, #100	; 0x64
 800776a:	fb01 f303 	mul.w	r3, r1, r3
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	3332      	adds	r3, #50	; 0x32
 8007774:	4a73      	ldr	r2, [pc, #460]	; (8007944 <UART_SetConfig+0x5c0>)
 8007776:	fba2 2303 	umull	r2, r3, r2, r3
 800777a:	095b      	lsrs	r3, r3, #5
 800777c:	f003 0207 	and.w	r2, r3, #7
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4442      	add	r2, r8
 8007786:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007788:	e1b3      	b.n	8007af2 <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a6e      	ldr	r2, [pc, #440]	; (8007948 <UART_SetConfig+0x5c4>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d005      	beq.n	80077a0 <UART_SetConfig+0x41c>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a6c      	ldr	r2, [pc, #432]	; (800794c <UART_SetConfig+0x5c8>)
 800779a:	4293      	cmp	r3, r2
 800779c:	f040 80d8 	bne.w	8007950 <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 80077a0:	f7ff f8d4 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 80077a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	469a      	mov	sl, r3
 80077aa:	f04f 0b00 	mov.w	fp, #0
 80077ae:	46d0      	mov	r8, sl
 80077b0:	46d9      	mov	r9, fp
 80077b2:	eb18 0308 	adds.w	r3, r8, r8
 80077b6:	eb49 0409 	adc.w	r4, r9, r9
 80077ba:	4698      	mov	r8, r3
 80077bc:	46a1      	mov	r9, r4
 80077be:	eb18 080a 	adds.w	r8, r8, sl
 80077c2:	eb49 090b 	adc.w	r9, r9, fp
 80077c6:	f04f 0100 	mov.w	r1, #0
 80077ca:	f04f 0200 	mov.w	r2, #0
 80077ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077da:	4688      	mov	r8, r1
 80077dc:	4691      	mov	r9, r2
 80077de:	eb1a 0508 	adds.w	r5, sl, r8
 80077e2:	eb4b 0609 	adc.w	r6, fp, r9
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	4619      	mov	r1, r3
 80077ec:	f04f 0200 	mov.w	r2, #0
 80077f0:	f04f 0300 	mov.w	r3, #0
 80077f4:	f04f 0400 	mov.w	r4, #0
 80077f8:	0094      	lsls	r4, r2, #2
 80077fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077fe:	008b      	lsls	r3, r1, #2
 8007800:	461a      	mov	r2, r3
 8007802:	4623      	mov	r3, r4
 8007804:	4628      	mov	r0, r5
 8007806:	4631      	mov	r1, r6
 8007808:	f7f9 f930 	bl	8000a6c <__aeabi_uldivmod>
 800780c:	4603      	mov	r3, r0
 800780e:	460c      	mov	r4, r1
 8007810:	461a      	mov	r2, r3
 8007812:	4b4c      	ldr	r3, [pc, #304]	; (8007944 <UART_SetConfig+0x5c0>)
 8007814:	fba3 2302 	umull	r2, r3, r3, r2
 8007818:	095b      	lsrs	r3, r3, #5
 800781a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	469b      	mov	fp, r3
 8007822:	f04f 0c00 	mov.w	ip, #0
 8007826:	46d9      	mov	r9, fp
 8007828:	46e2      	mov	sl, ip
 800782a:	eb19 0309 	adds.w	r3, r9, r9
 800782e:	eb4a 040a 	adc.w	r4, sl, sl
 8007832:	4699      	mov	r9, r3
 8007834:	46a2      	mov	sl, r4
 8007836:	eb19 090b 	adds.w	r9, r9, fp
 800783a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800783e:	f04f 0100 	mov.w	r1, #0
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800784a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800784e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007852:	4689      	mov	r9, r1
 8007854:	4692      	mov	sl, r2
 8007856:	eb1b 0509 	adds.w	r5, fp, r9
 800785a:	eb4c 060a 	adc.w	r6, ip, sl
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	4619      	mov	r1, r3
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	f04f 0300 	mov.w	r3, #0
 800786c:	f04f 0400 	mov.w	r4, #0
 8007870:	0094      	lsls	r4, r2, #2
 8007872:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007876:	008b      	lsls	r3, r1, #2
 8007878:	461a      	mov	r2, r3
 800787a:	4623      	mov	r3, r4
 800787c:	4628      	mov	r0, r5
 800787e:	4631      	mov	r1, r6
 8007880:	f7f9 f8f4 	bl	8000a6c <__aeabi_uldivmod>
 8007884:	4603      	mov	r3, r0
 8007886:	460c      	mov	r4, r1
 8007888:	461a      	mov	r2, r3
 800788a:	4b2e      	ldr	r3, [pc, #184]	; (8007944 <UART_SetConfig+0x5c0>)
 800788c:	fba3 1302 	umull	r1, r3, r3, r2
 8007890:	095b      	lsrs	r3, r3, #5
 8007892:	2164      	movs	r1, #100	; 0x64
 8007894:	fb01 f303 	mul.w	r3, r1, r3
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	3332      	adds	r3, #50	; 0x32
 800789e:	4a29      	ldr	r2, [pc, #164]	; (8007944 <UART_SetConfig+0x5c0>)
 80078a0:	fba2 2303 	umull	r2, r3, r2, r3
 80078a4:	095b      	lsrs	r3, r3, #5
 80078a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078aa:	4498      	add	r8, r3
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	469b      	mov	fp, r3
 80078b0:	f04f 0c00 	mov.w	ip, #0
 80078b4:	46d9      	mov	r9, fp
 80078b6:	46e2      	mov	sl, ip
 80078b8:	eb19 0309 	adds.w	r3, r9, r9
 80078bc:	eb4a 040a 	adc.w	r4, sl, sl
 80078c0:	4699      	mov	r9, r3
 80078c2:	46a2      	mov	sl, r4
 80078c4:	eb19 090b 	adds.w	r9, r9, fp
 80078c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80078cc:	f04f 0100 	mov.w	r1, #0
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078e0:	4689      	mov	r9, r1
 80078e2:	4692      	mov	sl, r2
 80078e4:	eb1b 0509 	adds.w	r5, fp, r9
 80078e8:	eb4c 060a 	adc.w	r6, ip, sl
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	4619      	mov	r1, r3
 80078f2:	f04f 0200 	mov.w	r2, #0
 80078f6:	f04f 0300 	mov.w	r3, #0
 80078fa:	f04f 0400 	mov.w	r4, #0
 80078fe:	0094      	lsls	r4, r2, #2
 8007900:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007904:	008b      	lsls	r3, r1, #2
 8007906:	461a      	mov	r2, r3
 8007908:	4623      	mov	r3, r4
 800790a:	4628      	mov	r0, r5
 800790c:	4631      	mov	r1, r6
 800790e:	f7f9 f8ad 	bl	8000a6c <__aeabi_uldivmod>
 8007912:	4603      	mov	r3, r0
 8007914:	460c      	mov	r4, r1
 8007916:	461a      	mov	r2, r3
 8007918:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <UART_SetConfig+0x5c0>)
 800791a:	fba3 1302 	umull	r1, r3, r3, r2
 800791e:	095b      	lsrs	r3, r3, #5
 8007920:	2164      	movs	r1, #100	; 0x64
 8007922:	fb01 f303 	mul.w	r3, r1, r3
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	011b      	lsls	r3, r3, #4
 800792a:	3332      	adds	r3, #50	; 0x32
 800792c:	4a05      	ldr	r2, [pc, #20]	; (8007944 <UART_SetConfig+0x5c0>)
 800792e:	fba2 2303 	umull	r2, r3, r2, r3
 8007932:	095b      	lsrs	r3, r3, #5
 8007934:	f003 020f 	and.w	r2, r3, #15
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4442      	add	r2, r8
 800793e:	609a      	str	r2, [r3, #8]
 8007940:	e0d7      	b.n	8007af2 <UART_SetConfig+0x76e>
 8007942:	bf00      	nop
 8007944:	51eb851f 	.word	0x51eb851f
 8007948:	40011000 	.word	0x40011000
 800794c:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 8007950:	f7fe ffe8 	bl	8006924 <HAL_RCC_GetPCLK1Freq>
 8007954:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	469a      	mov	sl, r3
 800795a:	f04f 0b00 	mov.w	fp, #0
 800795e:	46d0      	mov	r8, sl
 8007960:	46d9      	mov	r9, fp
 8007962:	eb18 0308 	adds.w	r3, r8, r8
 8007966:	eb49 0409 	adc.w	r4, r9, r9
 800796a:	4698      	mov	r8, r3
 800796c:	46a1      	mov	r9, r4
 800796e:	eb18 080a 	adds.w	r8, r8, sl
 8007972:	eb49 090b 	adc.w	r9, r9, fp
 8007976:	f04f 0100 	mov.w	r1, #0
 800797a:	f04f 0200 	mov.w	r2, #0
 800797e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007982:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007986:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800798a:	4688      	mov	r8, r1
 800798c:	4691      	mov	r9, r2
 800798e:	eb1a 0508 	adds.w	r5, sl, r8
 8007992:	eb4b 0609 	adc.w	r6, fp, r9
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	4619      	mov	r1, r3
 800799c:	f04f 0200 	mov.w	r2, #0
 80079a0:	f04f 0300 	mov.w	r3, #0
 80079a4:	f04f 0400 	mov.w	r4, #0
 80079a8:	0094      	lsls	r4, r2, #2
 80079aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079ae:	008b      	lsls	r3, r1, #2
 80079b0:	461a      	mov	r2, r3
 80079b2:	4623      	mov	r3, r4
 80079b4:	4628      	mov	r0, r5
 80079b6:	4631      	mov	r1, r6
 80079b8:	f7f9 f858 	bl	8000a6c <__aeabi_uldivmod>
 80079bc:	4603      	mov	r3, r0
 80079be:	460c      	mov	r4, r1
 80079c0:	461a      	mov	r2, r3
 80079c2:	4b4e      	ldr	r3, [pc, #312]	; (8007afc <UART_SetConfig+0x778>)
 80079c4:	fba3 2302 	umull	r2, r3, r3, r2
 80079c8:	095b      	lsrs	r3, r3, #5
 80079ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	469b      	mov	fp, r3
 80079d2:	f04f 0c00 	mov.w	ip, #0
 80079d6:	46d9      	mov	r9, fp
 80079d8:	46e2      	mov	sl, ip
 80079da:	eb19 0309 	adds.w	r3, r9, r9
 80079de:	eb4a 040a 	adc.w	r4, sl, sl
 80079e2:	4699      	mov	r9, r3
 80079e4:	46a2      	mov	sl, r4
 80079e6:	eb19 090b 	adds.w	r9, r9, fp
 80079ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079ee:	f04f 0100 	mov.w	r1, #0
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a02:	4689      	mov	r9, r1
 8007a04:	4692      	mov	sl, r2
 8007a06:	eb1b 0509 	adds.w	r5, fp, r9
 8007a0a:	eb4c 060a 	adc.w	r6, ip, sl
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	4619      	mov	r1, r3
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	f04f 0300 	mov.w	r3, #0
 8007a1c:	f04f 0400 	mov.w	r4, #0
 8007a20:	0094      	lsls	r4, r2, #2
 8007a22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a26:	008b      	lsls	r3, r1, #2
 8007a28:	461a      	mov	r2, r3
 8007a2a:	4623      	mov	r3, r4
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	4631      	mov	r1, r6
 8007a30:	f7f9 f81c 	bl	8000a6c <__aeabi_uldivmod>
 8007a34:	4603      	mov	r3, r0
 8007a36:	460c      	mov	r4, r1
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4b30      	ldr	r3, [pc, #192]	; (8007afc <UART_SetConfig+0x778>)
 8007a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	2164      	movs	r1, #100	; 0x64
 8007a44:	fb01 f303 	mul.w	r3, r1, r3
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	3332      	adds	r3, #50	; 0x32
 8007a4e:	4a2b      	ldr	r2, [pc, #172]	; (8007afc <UART_SetConfig+0x778>)
 8007a50:	fba2 2303 	umull	r2, r3, r2, r3
 8007a54:	095b      	lsrs	r3, r3, #5
 8007a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a5a:	4498      	add	r8, r3
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	469b      	mov	fp, r3
 8007a60:	f04f 0c00 	mov.w	ip, #0
 8007a64:	46d9      	mov	r9, fp
 8007a66:	46e2      	mov	sl, ip
 8007a68:	eb19 0309 	adds.w	r3, r9, r9
 8007a6c:	eb4a 040a 	adc.w	r4, sl, sl
 8007a70:	4699      	mov	r9, r3
 8007a72:	46a2      	mov	sl, r4
 8007a74:	eb19 090b 	adds.w	r9, r9, fp
 8007a78:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a7c:	f04f 0100 	mov.w	r1, #0
 8007a80:	f04f 0200 	mov.w	r2, #0
 8007a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a90:	4689      	mov	r9, r1
 8007a92:	4692      	mov	sl, r2
 8007a94:	eb1b 0509 	adds.w	r5, fp, r9
 8007a98:	eb4c 060a 	adc.w	r6, ip, sl
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	f04f 0200 	mov.w	r2, #0
 8007aa6:	f04f 0300 	mov.w	r3, #0
 8007aaa:	f04f 0400 	mov.w	r4, #0
 8007aae:	0094      	lsls	r4, r2, #2
 8007ab0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ab4:	008b      	lsls	r3, r1, #2
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	4623      	mov	r3, r4
 8007aba:	4628      	mov	r0, r5
 8007abc:	4631      	mov	r1, r6
 8007abe:	f7f8 ffd5 	bl	8000a6c <__aeabi_uldivmod>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	4b0c      	ldr	r3, [pc, #48]	; (8007afc <UART_SetConfig+0x778>)
 8007aca:	fba3 1302 	umull	r1, r3, r3, r2
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	2164      	movs	r1, #100	; 0x64
 8007ad2:	fb01 f303 	mul.w	r3, r1, r3
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	3332      	adds	r3, #50	; 0x32
 8007adc:	4a07      	ldr	r2, [pc, #28]	; (8007afc <UART_SetConfig+0x778>)
 8007ade:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae2:	095b      	lsrs	r3, r3, #5
 8007ae4:	f003 020f 	and.w	r2, r3, #15
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4442      	add	r2, r8
 8007aee:	609a      	str	r2, [r3, #8]
}
 8007af0:	e7ff      	b.n	8007af2 <UART_SetConfig+0x76e>
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afc:	51eb851f 	.word	0x51eb851f

08007b00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b00:	b084      	sub	sp, #16
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	f107 001c 	add.w	r0, r7, #28
 8007b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d122      	bne.n	8007b5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d105      	bne.n	8007b52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 fab4 	bl	80090c0 <USB_CoreReset>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]
 8007b5c:	e01a      	b.n	8007b94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f001 faa8 	bl	80090c0 <USB_CoreReset>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d106      	bne.n	8007b88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	639a      	str	r2, [r3, #56]	; 0x38
 8007b86:	e005      	b.n	8007b94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d10b      	bne.n	8007bb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f043 0206 	orr.w	r2, r3, #6
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f043 0220 	orr.w	r2, r3, #32
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bbe:	b004      	add	sp, #16
 8007bc0:	4770      	bx	lr
	...

08007bc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007bd2:	79fb      	ldrb	r3, [r7, #7]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d165      	bne.n	8007ca4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	4a41      	ldr	r2, [pc, #260]	; (8007ce0 <USB_SetTurnaroundTime+0x11c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d906      	bls.n	8007bee <USB_SetTurnaroundTime+0x2a>
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	4a40      	ldr	r2, [pc, #256]	; (8007ce4 <USB_SetTurnaroundTime+0x120>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d802      	bhi.n	8007bee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007be8:	230f      	movs	r3, #15
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	e062      	b.n	8007cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	4a3c      	ldr	r2, [pc, #240]	; (8007ce4 <USB_SetTurnaroundTime+0x120>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d906      	bls.n	8007c04 <USB_SetTurnaroundTime+0x40>
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	4a3b      	ldr	r2, [pc, #236]	; (8007ce8 <USB_SetTurnaroundTime+0x124>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d802      	bhi.n	8007c04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007bfe:	230e      	movs	r3, #14
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	e057      	b.n	8007cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4a38      	ldr	r2, [pc, #224]	; (8007ce8 <USB_SetTurnaroundTime+0x124>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d906      	bls.n	8007c1a <USB_SetTurnaroundTime+0x56>
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4a37      	ldr	r2, [pc, #220]	; (8007cec <USB_SetTurnaroundTime+0x128>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d802      	bhi.n	8007c1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007c14:	230d      	movs	r3, #13
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	e04c      	b.n	8007cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	4a33      	ldr	r2, [pc, #204]	; (8007cec <USB_SetTurnaroundTime+0x128>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d906      	bls.n	8007c30 <USB_SetTurnaroundTime+0x6c>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	4a32      	ldr	r2, [pc, #200]	; (8007cf0 <USB_SetTurnaroundTime+0x12c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d802      	bhi.n	8007c30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c2a:	230c      	movs	r3, #12
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	e041      	b.n	8007cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	4a2f      	ldr	r2, [pc, #188]	; (8007cf0 <USB_SetTurnaroundTime+0x12c>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d906      	bls.n	8007c46 <USB_SetTurnaroundTime+0x82>
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4a2e      	ldr	r2, [pc, #184]	; (8007cf4 <USB_SetTurnaroundTime+0x130>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d802      	bhi.n	8007c46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c40:	230b      	movs	r3, #11
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	e036      	b.n	8007cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	4a2a      	ldr	r2, [pc, #168]	; (8007cf4 <USB_SetTurnaroundTime+0x130>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d906      	bls.n	8007c5c <USB_SetTurnaroundTime+0x98>
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	4a29      	ldr	r2, [pc, #164]	; (8007cf8 <USB_SetTurnaroundTime+0x134>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d802      	bhi.n	8007c5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c56:	230a      	movs	r3, #10
 8007c58:	617b      	str	r3, [r7, #20]
 8007c5a:	e02b      	b.n	8007cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	4a26      	ldr	r2, [pc, #152]	; (8007cf8 <USB_SetTurnaroundTime+0x134>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d906      	bls.n	8007c72 <USB_SetTurnaroundTime+0xae>
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4a25      	ldr	r2, [pc, #148]	; (8007cfc <USB_SetTurnaroundTime+0x138>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d802      	bhi.n	8007c72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c6c:	2309      	movs	r3, #9
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	e020      	b.n	8007cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	4a21      	ldr	r2, [pc, #132]	; (8007cfc <USB_SetTurnaroundTime+0x138>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d906      	bls.n	8007c88 <USB_SetTurnaroundTime+0xc4>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	4a20      	ldr	r2, [pc, #128]	; (8007d00 <USB_SetTurnaroundTime+0x13c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d802      	bhi.n	8007c88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007c82:	2308      	movs	r3, #8
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	e015      	b.n	8007cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4a1d      	ldr	r2, [pc, #116]	; (8007d00 <USB_SetTurnaroundTime+0x13c>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d906      	bls.n	8007c9e <USB_SetTurnaroundTime+0xda>
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4a1c      	ldr	r2, [pc, #112]	; (8007d04 <USB_SetTurnaroundTime+0x140>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d802      	bhi.n	8007c9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007c98:	2307      	movs	r3, #7
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	e00a      	b.n	8007cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007c9e:	2306      	movs	r3, #6
 8007ca0:	617b      	str	r3, [r7, #20]
 8007ca2:	e007      	b.n	8007cb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d102      	bne.n	8007cb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007caa:	2309      	movs	r3, #9
 8007cac:	617b      	str	r3, [r7, #20]
 8007cae:	e001      	b.n	8007cb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007cb0:	2309      	movs	r3, #9
 8007cb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	68da      	ldr	r2, [r3, #12]
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	029b      	lsls	r3, r3, #10
 8007cc8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	371c      	adds	r7, #28
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	00d8acbf 	.word	0x00d8acbf
 8007ce4:	00e4e1bf 	.word	0x00e4e1bf
 8007ce8:	00f423ff 	.word	0x00f423ff
 8007cec:	0106737f 	.word	0x0106737f
 8007cf0:	011a499f 	.word	0x011a499f
 8007cf4:	01312cff 	.word	0x01312cff
 8007cf8:	014ca43f 	.word	0x014ca43f
 8007cfc:	016e35ff 	.word	0x016e35ff
 8007d00:	01a6ab1f 	.word	0x01a6ab1f
 8007d04:	01e847ff 	.word	0x01e847ff

08007d08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f043 0201 	orr.w	r2, r3, #1
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b083      	sub	sp, #12
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f023 0201 	bic.w	r2, r3, #1
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d64:	78fb      	ldrb	r3, [r7, #3]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d106      	bne.n	8007d78 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	60da      	str	r2, [r3, #12]
 8007d76:	e00b      	b.n	8007d90 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d106      	bne.n	8007d8c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60da      	str	r2, [r3, #12]
 8007d8a:	e001      	b.n	8007d90 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e003      	b.n	8007d98 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007d90:	2032      	movs	r0, #50	; 0x32
 8007d92:	f7fb f931 	bl	8002ff8 <HAL_Delay>

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007da0:	b084      	sub	sp, #16
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b086      	sub	sp, #24
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007dba:	2300      	movs	r3, #0
 8007dbc:	613b      	str	r3, [r7, #16]
 8007dbe:	e009      	b.n	8007dd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	3340      	adds	r3, #64	; 0x40
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	2200      	movs	r2, #0
 8007dcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	613b      	str	r3, [r7, #16]
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	2b0e      	cmp	r3, #14
 8007dd8:	d9f2      	bls.n	8007dc0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d11c      	bne.n	8007e1a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dee:	f043 0302 	orr.w	r3, r3, #2
 8007df2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e10:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	639a      	str	r2, [r3, #56]	; 0x38
 8007e18:	e00b      	b.n	8007e32 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e38:	461a      	mov	r2, r3
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e44:	4619      	mov	r1, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	680b      	ldr	r3, [r1, #0]
 8007e50:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d10c      	bne.n	8007e72 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d104      	bne.n	8007e68 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e5e:	2100      	movs	r1, #0
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f949 	bl	80080f8 <USB_SetDevSpeed>
 8007e66:	e008      	b.n	8007e7a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e68:	2101      	movs	r1, #1
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f944 	bl	80080f8 <USB_SetDevSpeed>
 8007e70:	e003      	b.n	8007e7a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e72:	2103      	movs	r1, #3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f93f 	bl	80080f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e7a:	2110      	movs	r1, #16
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f8f3 	bl	8008068 <USB_FlushTxFifo>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f911 	bl	80080b4 <USB_FlushRxFifo>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eae:	461a      	mov	r2, r3
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eba:	461a      	mov	r2, r3
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	613b      	str	r3, [r7, #16]
 8007ec4:	e043      	b.n	8007f4e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007edc:	d118      	bne.n	8007f10 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10a      	bne.n	8007efa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ef6:	6013      	str	r3, [r2, #0]
 8007ef8:	e013      	b.n	8007f22 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f06:	461a      	mov	r2, r3
 8007f08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	e008      	b.n	8007f22 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	2300      	movs	r3, #0
 8007f20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2e:	461a      	mov	r2, r3
 8007f30:	2300      	movs	r3, #0
 8007f32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f40:	461a      	mov	r2, r3
 8007f42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	613b      	str	r3, [r7, #16]
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d3b7      	bcc.n	8007ec6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f56:	2300      	movs	r3, #0
 8007f58:	613b      	str	r3, [r7, #16]
 8007f5a:	e043      	b.n	8007fe4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f72:	d118      	bne.n	8007fa6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10a      	bne.n	8007f90 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f86:	461a      	mov	r2, r3
 8007f88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	e013      	b.n	8007fb8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	e008      	b.n	8007fb8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fdc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d3b7      	bcc.n	8007f5c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ffa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ffe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800800c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	2b00      	cmp	r3, #0
 8008012:	d105      	bne.n	8008020 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	f043 0210 	orr.w	r2, r3, #16
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	699a      	ldr	r2, [r3, #24]
 8008024:	4b0f      	ldr	r3, [pc, #60]	; (8008064 <USB_DevInit+0x2c4>)
 8008026:	4313      	orrs	r3, r2
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800802c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d005      	beq.n	800803e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	f043 0208 	orr.w	r2, r3, #8
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800803e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008040:	2b01      	cmp	r3, #1
 8008042:	d107      	bne.n	8008054 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800804c:	f043 0304 	orr.w	r3, r3, #4
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008054:	7dfb      	ldrb	r3, [r7, #23]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008060:	b004      	add	sp, #16
 8008062:	4770      	bx	lr
 8008064:	803c3800 	.word	0x803c3800

08008068 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	019b      	lsls	r3, r3, #6
 800807a:	f043 0220 	orr.w	r2, r3, #32
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3301      	adds	r3, #1
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4a09      	ldr	r2, [pc, #36]	; (80080b0 <USB_FlushTxFifo+0x48>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d901      	bls.n	8008094 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e006      	b.n	80080a2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b20      	cmp	r3, #32
 800809e:	d0f0      	beq.n	8008082 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	00030d40 	.word	0x00030d40

080080b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2210      	movs	r2, #16
 80080c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3301      	adds	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4a09      	ldr	r2, [pc, #36]	; (80080f4 <USB_FlushRxFifo+0x40>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d901      	bls.n	80080d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e006      	b.n	80080e6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	f003 0310 	and.w	r3, r3, #16
 80080e0:	2b10      	cmp	r3, #16
 80080e2:	d0f0      	beq.n	80080c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	00030d40 	.word	0x00030d40

080080f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008118:	4313      	orrs	r3, r2
 800811a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800812a:	b480      	push	{r7}
 800812c:	b087      	sub	sp, #28
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f003 0306 	and.w	r3, r3, #6
 8008142:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d102      	bne.n	8008150 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800814a:	2300      	movs	r3, #0
 800814c:	75fb      	strb	r3, [r7, #23]
 800814e:	e00a      	b.n	8008166 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2b02      	cmp	r3, #2
 8008154:	d002      	beq.n	800815c <USB_GetDevSpeed+0x32>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2b06      	cmp	r3, #6
 800815a:	d102      	bne.n	8008162 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800815c:	2302      	movs	r3, #2
 800815e:	75fb      	strb	r3, [r7, #23]
 8008160:	e001      	b.n	8008166 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008162:	230f      	movs	r3, #15
 8008164:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008166:	7dfb      	ldrb	r3, [r7, #23]
}
 8008168:	4618      	mov	r0, r3
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	785b      	ldrb	r3, [r3, #1]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d13a      	bne.n	8008206 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008196:	69da      	ldr	r2, [r3, #28]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	f003 030f 	and.w	r3, r3, #15
 80081a0:	2101      	movs	r1, #1
 80081a2:	fa01 f303 	lsl.w	r3, r1, r3
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	68f9      	ldr	r1, [r7, #12]
 80081aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081ae:	4313      	orrs	r3, r2
 80081b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d155      	bne.n	8008274 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	78db      	ldrb	r3, [r3, #3]
 80081e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	059b      	lsls	r3, r3, #22
 80081ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081ec:	4313      	orrs	r3, r2
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	0151      	lsls	r1, r2, #5
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	440a      	add	r2, r1
 80081f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	e036      	b.n	8008274 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820c:	69da      	ldr	r2, [r3, #28]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	2101      	movs	r1, #1
 8008218:	fa01 f303 	lsl.w	r3, r1, r3
 800821c:	041b      	lsls	r3, r3, #16
 800821e:	68f9      	ldr	r1, [r7, #12]
 8008220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008224:	4313      	orrs	r3, r2
 8008226:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4413      	add	r3, r2
 8008230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d11a      	bne.n	8008274 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4413      	add	r3, r2
 8008246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	78db      	ldrb	r3, [r3, #3]
 8008258:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800825a:	430b      	orrs	r3, r1
 800825c:	4313      	orrs	r3, r2
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	0151      	lsls	r1, r2, #5
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	440a      	add	r2, r1
 8008266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800826a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800826e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008272:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
	...

08008284 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	785b      	ldrb	r3, [r3, #1]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d161      	bne.n	8008364 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082b6:	d11f      	bne.n	80082f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	0151      	lsls	r1, r2, #5
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	440a      	add	r2, r1
 80082ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	0151      	lsls	r1, r2, #5
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	440a      	add	r2, r1
 80082ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	f003 030f 	and.w	r3, r3, #15
 8008308:	2101      	movs	r1, #1
 800830a:	fa01 f303 	lsl.w	r3, r1, r3
 800830e:	b29b      	uxth	r3, r3
 8008310:	43db      	mvns	r3, r3
 8008312:	68f9      	ldr	r1, [r7, #12]
 8008314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008318:	4013      	ands	r3, r2
 800831a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008322:	69da      	ldr	r2, [r3, #28]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	f003 030f 	and.w	r3, r3, #15
 800832c:	2101      	movs	r1, #1
 800832e:	fa01 f303 	lsl.w	r3, r1, r3
 8008332:	b29b      	uxth	r3, r3
 8008334:	43db      	mvns	r3, r3
 8008336:	68f9      	ldr	r1, [r7, #12]
 8008338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800833c:	4013      	ands	r3, r2
 800833e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	0159      	lsls	r1, r3, #5
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	440b      	add	r3, r1
 8008356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800835a:	4619      	mov	r1, r3
 800835c:	4b35      	ldr	r3, [pc, #212]	; (8008434 <USB_DeactivateEndpoint+0x1b0>)
 800835e:	4013      	ands	r3, r2
 8008360:	600b      	str	r3, [r1, #0]
 8008362:	e060      	b.n	8008426 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4413      	add	r3, r2
 800836c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008376:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800837a:	d11f      	bne.n	80083bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	0151      	lsls	r1, r2, #5
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	440a      	add	r2, r1
 8008392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008396:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800839a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	0151      	lsls	r1, r2, #5
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	440a      	add	r2, r1
 80083b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	f003 030f 	and.w	r3, r3, #15
 80083cc:	2101      	movs	r1, #1
 80083ce:	fa01 f303 	lsl.w	r3, r1, r3
 80083d2:	041b      	lsls	r3, r3, #16
 80083d4:	43db      	mvns	r3, r3
 80083d6:	68f9      	ldr	r1, [r7, #12]
 80083d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083dc:	4013      	ands	r3, r2
 80083de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e6:	69da      	ldr	r2, [r3, #28]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	2101      	movs	r1, #1
 80083f2:	fa01 f303 	lsl.w	r3, r1, r3
 80083f6:	041b      	lsls	r3, r3, #16
 80083f8:	43db      	mvns	r3, r3
 80083fa:	68f9      	ldr	r1, [r7, #12]
 80083fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008400:	4013      	ands	r3, r2
 8008402:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	4413      	add	r3, r2
 800840c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	0159      	lsls	r1, r3, #5
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	440b      	add	r3, r1
 800841a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841e:	4619      	mov	r1, r3
 8008420:	4b05      	ldr	r3, [pc, #20]	; (8008438 <USB_DeactivateEndpoint+0x1b4>)
 8008422:	4013      	ands	r3, r2
 8008424:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	ec337800 	.word	0xec337800
 8008438:	eff37800 	.word	0xeff37800

0800843c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08a      	sub	sp, #40	; 0x28
 8008440:	af02      	add	r7, sp, #8
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4613      	mov	r3, r2
 8008448:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	785b      	ldrb	r3, [r3, #1]
 8008458:	2b01      	cmp	r3, #1
 800845a:	f040 815c 	bne.w	8008716 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d132      	bne.n	80084cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	0151      	lsls	r1, r2, #5
 8008478:	69fa      	ldr	r2, [r7, #28]
 800847a:	440a      	add	r2, r1
 800847c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008480:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008484:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008488:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	0151      	lsls	r1, r2, #5
 800849c:	69fa      	ldr	r2, [r7, #28]
 800849e:	440a      	add	r2, r1
 80084a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	0151      	lsls	r1, r2, #5
 80084bc:	69fa      	ldr	r2, [r7, #28]
 80084be:	440a      	add	r2, r1
 80084c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084c4:	0cdb      	lsrs	r3, r3, #19
 80084c6:	04db      	lsls	r3, r3, #19
 80084c8:	6113      	str	r3, [r2, #16]
 80084ca:	e074      	b.n	80085b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	0151      	lsls	r1, r2, #5
 80084de:	69fa      	ldr	r2, [r7, #28]
 80084e0:	440a      	add	r2, r1
 80084e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e6:	0cdb      	lsrs	r3, r3, #19
 80084e8:	04db      	lsls	r3, r3, #19
 80084ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	015a      	lsls	r2, r3, #5
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	0151      	lsls	r1, r2, #5
 80084fe:	69fa      	ldr	r2, [r7, #28]
 8008500:	440a      	add	r2, r1
 8008502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008506:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800850a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800850e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851c:	691a      	ldr	r2, [r3, #16]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	6959      	ldr	r1, [r3, #20]
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	440b      	add	r3, r1
 8008528:	1e59      	subs	r1, r3, #1
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008532:	04d9      	lsls	r1, r3, #19
 8008534:	4b9d      	ldr	r3, [pc, #628]	; (80087ac <USB_EPStartXfer+0x370>)
 8008536:	400b      	ands	r3, r1
 8008538:	69b9      	ldr	r1, [r7, #24]
 800853a:	0148      	lsls	r0, r1, #5
 800853c:	69f9      	ldr	r1, [r7, #28]
 800853e:	4401      	add	r1, r0
 8008540:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008544:	4313      	orrs	r3, r2
 8008546:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008554:	691a      	ldr	r2, [r3, #16]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800855e:	69b9      	ldr	r1, [r7, #24]
 8008560:	0148      	lsls	r0, r1, #5
 8008562:	69f9      	ldr	r1, [r7, #28]
 8008564:	4401      	add	r1, r0
 8008566:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800856a:	4313      	orrs	r3, r2
 800856c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	78db      	ldrb	r3, [r3, #3]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d11f      	bne.n	80085b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	69fa      	ldr	r2, [r7, #28]
 800858a:	440a      	add	r2, r1
 800858c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008590:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008594:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	69ba      	ldr	r2, [r7, #24]
 80085a6:	0151      	lsls	r1, r2, #5
 80085a8:	69fa      	ldr	r2, [r7, #28]
 80085aa:	440a      	add	r2, r1
 80085ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80085b6:	79fb      	ldrb	r3, [r7, #7]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d14b      	bne.n	8008654 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d009      	beq.n	80085d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d0:	461a      	mov	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	78db      	ldrb	r3, [r3, #3]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d128      	bne.n	8008632 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d110      	bne.n	8008612 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	0151      	lsls	r1, r2, #5
 8008602:	69fa      	ldr	r2, [r7, #28]
 8008604:	440a      	add	r2, r1
 8008606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800860a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	e00f      	b.n	8008632 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	0151      	lsls	r1, r2, #5
 8008624:	69fa      	ldr	r2, [r7, #28]
 8008626:	440a      	add	r2, r1
 8008628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800862c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008630:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	0151      	lsls	r1, r2, #5
 8008644:	69fa      	ldr	r2, [r7, #28]
 8008646:	440a      	add	r2, r1
 8008648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800864c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	e12f      	b.n	80088b4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	0151      	lsls	r1, r2, #5
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	440a      	add	r2, r1
 800866a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008672:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	78db      	ldrb	r3, [r3, #3]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d015      	beq.n	80086a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 8117 	beq.w	80088b4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	f003 030f 	and.w	r3, r3, #15
 8008696:	2101      	movs	r1, #1
 8008698:	fa01 f303 	lsl.w	r3, r1, r3
 800869c:	69f9      	ldr	r1, [r7, #28]
 800869e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086a2:	4313      	orrs	r3, r2
 80086a4:	634b      	str	r3, [r1, #52]	; 0x34
 80086a6:	e105      	b.n	80088b4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d110      	bne.n	80086da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	0151      	lsls	r1, r2, #5
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	440a      	add	r2, r1
 80086ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086d6:	6013      	str	r3, [r2, #0]
 80086d8:	e00f      	b.n	80086fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	0151      	lsls	r1, r2, #5
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	440a      	add	r2, r1
 80086f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	68d9      	ldr	r1, [r3, #12]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	781a      	ldrb	r2, [r3, #0]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	b298      	uxth	r0, r3
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	4603      	mov	r3, r0
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f000 fa2b 	bl	8008b6a <USB_WritePacket>
 8008714:	e0ce      	b.n	80088b4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	0151      	lsls	r1, r2, #5
 8008728:	69fa      	ldr	r2, [r7, #28]
 800872a:	440a      	add	r2, r1
 800872c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008730:	0cdb      	lsrs	r3, r3, #19
 8008732:	04db      	lsls	r3, r3, #19
 8008734:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	015a      	lsls	r2, r3, #5
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	4413      	add	r3, r2
 800873e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	0151      	lsls	r1, r2, #5
 8008748:	69fa      	ldr	r2, [r7, #28]
 800874a:	440a      	add	r2, r1
 800874c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008750:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008754:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008758:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d126      	bne.n	80087b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876e:	691a      	ldr	r2, [r3, #16]
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008778:	69b9      	ldr	r1, [r7, #24]
 800877a:	0148      	lsls	r0, r1, #5
 800877c:	69f9      	ldr	r1, [r7, #28]
 800877e:	4401      	add	r1, r0
 8008780:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008784:	4313      	orrs	r3, r2
 8008786:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	4413      	add	r3, r2
 8008790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	0151      	lsls	r1, r2, #5
 800879a:	69fa      	ldr	r2, [r7, #28]
 800879c:	440a      	add	r2, r1
 800879e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087a6:	6113      	str	r3, [r2, #16]
 80087a8:	e036      	b.n	8008818 <USB_EPStartXfer+0x3dc>
 80087aa:	bf00      	nop
 80087ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	695a      	ldr	r2, [r3, #20]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	4413      	add	r3, r2
 80087ba:	1e5a      	subs	r2, r3, #1
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d2:	691a      	ldr	r2, [r3, #16]
 80087d4:	8afb      	ldrh	r3, [r7, #22]
 80087d6:	04d9      	lsls	r1, r3, #19
 80087d8:	4b39      	ldr	r3, [pc, #228]	; (80088c0 <USB_EPStartXfer+0x484>)
 80087da:	400b      	ands	r3, r1
 80087dc:	69b9      	ldr	r1, [r7, #24]
 80087de:	0148      	lsls	r0, r1, #5
 80087e0:	69f9      	ldr	r1, [r7, #28]
 80087e2:	4401      	add	r1, r0
 80087e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087e8:	4313      	orrs	r3, r2
 80087ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f8:	691a      	ldr	r2, [r3, #16]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	8af9      	ldrh	r1, [r7, #22]
 8008800:	fb01 f303 	mul.w	r3, r1, r3
 8008804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008808:	69b9      	ldr	r1, [r7, #24]
 800880a:	0148      	lsls	r0, r1, #5
 800880c:	69f9      	ldr	r1, [r7, #28]
 800880e:	4401      	add	r1, r0
 8008810:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008814:	4313      	orrs	r3, r2
 8008816:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d10d      	bne.n	800883a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d009      	beq.n	800883a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	68d9      	ldr	r1, [r3, #12]
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	015a      	lsls	r2, r3, #5
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	4413      	add	r3, r2
 8008832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008836:	460a      	mov	r2, r1
 8008838:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	78db      	ldrb	r3, [r3, #3]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d128      	bne.n	8008894 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800884e:	2b00      	cmp	r3, #0
 8008850:	d110      	bne.n	8008874 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	0151      	lsls	r1, r2, #5
 8008864:	69fa      	ldr	r2, [r7, #28]
 8008866:	440a      	add	r2, r1
 8008868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800886c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	e00f      	b.n	8008894 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	4413      	add	r3, r2
 800887c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	0151      	lsls	r1, r2, #5
 8008886:	69fa      	ldr	r2, [r7, #28]
 8008888:	440a      	add	r2, r1
 800888a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800888e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008892:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	015a      	lsls	r2, r3, #5
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	4413      	add	r3, r2
 800889c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69ba      	ldr	r2, [r7, #24]
 80088a4:	0151      	lsls	r1, r2, #5
 80088a6:	69fa      	ldr	r2, [r7, #28]
 80088a8:	440a      	add	r2, r1
 80088aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3720      	adds	r7, #32
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	1ff80000 	.word	0x1ff80000

080088c4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	4613      	mov	r3, r2
 80088d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	785b      	ldrb	r3, [r3, #1]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	f040 80cd 	bne.w	8008a80 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d132      	bne.n	8008954 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	0151      	lsls	r1, r2, #5
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	440a      	add	r2, r1
 8008904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008908:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800890c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008910:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	4413      	add	r3, r2
 800891a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	0151      	lsls	r1, r2, #5
 8008924:	697a      	ldr	r2, [r7, #20]
 8008926:	440a      	add	r2, r1
 8008928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800892c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008930:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	015a      	lsls	r2, r3, #5
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	4413      	add	r3, r2
 800893a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	0151      	lsls	r1, r2, #5
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	440a      	add	r2, r1
 8008948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800894c:	0cdb      	lsrs	r3, r3, #19
 800894e:	04db      	lsls	r3, r3, #19
 8008950:	6113      	str	r3, [r2, #16]
 8008952:	e04e      	b.n	80089f2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	015a      	lsls	r2, r3, #5
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	4413      	add	r3, r2
 800895c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	0151      	lsls	r1, r2, #5
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	440a      	add	r2, r1
 800896a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800896e:	0cdb      	lsrs	r3, r3, #19
 8008970:	04db      	lsls	r3, r3, #19
 8008972:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	0151      	lsls	r1, r2, #5
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	440a      	add	r2, r1
 800898a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800898e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008992:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008996:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	695a      	ldr	r2, [r3, #20]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d903      	bls.n	80089ac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	689a      	ldr	r2, [r3, #8]
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	0151      	lsls	r1, r2, #5
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	440a      	add	r2, r1
 80089c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d8:	691a      	ldr	r2, [r3, #16]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089e2:	6939      	ldr	r1, [r7, #16]
 80089e4:	0148      	lsls	r0, r1, #5
 80089e6:	6979      	ldr	r1, [r7, #20]
 80089e8:	4401      	add	r1, r0
 80089ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80089ee:	4313      	orrs	r3, r2
 80089f0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d11e      	bne.n	8008a36 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d009      	beq.n	8008a14 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	0151      	lsls	r1, r2, #5
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	440a      	add	r2, r1
 8008a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a32:	6013      	str	r3, [r2, #0]
 8008a34:	e092      	b.n	8008b5c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	0151      	lsls	r1, r2, #5
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	440a      	add	r2, r1
 8008a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a54:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d07e      	beq.n	8008b5c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	f003 030f 	and.w	r3, r3, #15
 8008a6e:	2101      	movs	r1, #1
 8008a70:	fa01 f303 	lsl.w	r3, r1, r3
 8008a74:	6979      	ldr	r1, [r7, #20]
 8008a76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	634b      	str	r3, [r1, #52]	; 0x34
 8008a7e:	e06d      	b.n	8008b5c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a9a:	0cdb      	lsrs	r3, r3, #19
 8008a9c:	04db      	lsls	r3, r3, #19
 8008a9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	0151      	lsls	r1, r2, #5
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	440a      	add	r2, r1
 8008ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008abe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ac2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	695b      	ldr	r3, [r3, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d003      	beq.n	8008ad4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	0151      	lsls	r1, r2, #5
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	440a      	add	r2, r1
 8008aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008af2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b00:	691a      	ldr	r2, [r3, #16]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b0a:	6939      	ldr	r1, [r7, #16]
 8008b0c:	0148      	lsls	r0, r1, #5
 8008b0e:	6979      	ldr	r1, [r7, #20]
 8008b10:	4401      	add	r1, r0
 8008b12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b16:	4313      	orrs	r3, r2
 8008b18:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008b1a:	79fb      	ldrb	r3, [r7, #7]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d10d      	bne.n	8008b3c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d009      	beq.n	8008b3c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	68d9      	ldr	r1, [r3, #12]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b38:	460a      	mov	r2, r1
 8008b3a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	0151      	lsls	r1, r2, #5
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	440a      	add	r2, r1
 8008b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	371c      	adds	r7, #28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b089      	sub	sp, #36	; 0x24
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	4611      	mov	r1, r2
 8008b76:	461a      	mov	r2, r3
 8008b78:	460b      	mov	r3, r1
 8008b7a:	71fb      	strb	r3, [r7, #7]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008b88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d11a      	bne.n	8008bc6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b90:	88bb      	ldrh	r3, [r7, #4]
 8008b92:	3303      	adds	r3, #3
 8008b94:	089b      	lsrs	r3, r3, #2
 8008b96:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008b98:	2300      	movs	r3, #0
 8008b9a:	61bb      	str	r3, [r7, #24]
 8008b9c:	e00f      	b.n	8008bbe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b9e:	79fb      	ldrb	r3, [r7, #7]
 8008ba0:	031a      	lsls	r2, r3, #12
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008baa:	461a      	mov	r2, r3
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	3304      	adds	r3, #4
 8008bb6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	61bb      	str	r3, [r7, #24]
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d3eb      	bcc.n	8008b9e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3724      	adds	r7, #36	; 0x24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b089      	sub	sp, #36	; 0x24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	4613      	mov	r3, r2
 8008be0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	3303      	adds	r3, #3
 8008bee:	089b      	lsrs	r3, r3, #2
 8008bf0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61bb      	str	r3, [r7, #24]
 8008bf6:	e00b      	b.n	8008c10 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	3304      	adds	r3, #4
 8008c08:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	61bb      	str	r3, [r7, #24]
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d3ef      	bcc.n	8008bf8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008c18:	69fb      	ldr	r3, [r7, #28]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3724      	adds	r7, #36	; 0x24
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b085      	sub	sp, #20
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	785b      	ldrb	r3, [r3, #1]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d12c      	bne.n	8008c9c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	db12      	blt.n	8008c7a <USB_EPSetStall+0x54>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00f      	beq.n	8008c7a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	0151      	lsls	r1, r2, #5
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	440a      	add	r2, r1
 8008c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c78:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	0151      	lsls	r1, r2, #5
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	440a      	add	r2, r1
 8008c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	e02b      	b.n	8008cf4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	db12      	blt.n	8008cd4 <USB_EPSetStall+0xae>
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00f      	beq.n	8008cd4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	015a      	lsls	r2, r3, #5
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	0151      	lsls	r1, r2, #5
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	440a      	add	r2, r1
 8008cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008cd2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	0151      	lsls	r1, r2, #5
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	440a      	add	r2, r1
 8008cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008cf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b085      	sub	sp, #20
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	785b      	ldrb	r3, [r3, #1]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d128      	bne.n	8008d70 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	015a      	lsls	r2, r3, #5
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	0151      	lsls	r1, r2, #5
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	440a      	add	r2, r1
 8008d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	78db      	ldrb	r3, [r3, #3]
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	d003      	beq.n	8008d4e <USB_EPClearStall+0x4c>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	78db      	ldrb	r3, [r3, #3]
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d138      	bne.n	8008dc0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	0151      	lsls	r1, r2, #5
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	440a      	add	r2, r1
 8008d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	e027      	b.n	8008dc0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	0151      	lsls	r1, r2, #5
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	440a      	add	r2, r1
 8008d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	78db      	ldrb	r3, [r3, #3]
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d003      	beq.n	8008da0 <USB_EPClearStall+0x9e>
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	78db      	ldrb	r3, [r3, #3]
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d10f      	bne.n	8008dc0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	015a      	lsls	r2, r3, #5
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	0151      	lsls	r1, r2, #5
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	440a      	add	r2, r1
 8008db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dbe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b085      	sub	sp, #20
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008df0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	78fb      	ldrb	r3, [r7, #3]
 8008dfc:	011b      	lsls	r3, r3, #4
 8008dfe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008e02:	68f9      	ldr	r1, [r7, #12]
 8008e04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e34:	f023 0302 	bic.w	r3, r3, #2
 8008e38:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008e3a:	2003      	movs	r0, #3
 8008e3c:	f7fa f8dc 	bl	8002ff8 <HAL_Delay>

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e64:	f043 0302 	orr.w	r3, r3, #2
 8008e68:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008e6a:	2003      	movs	r0, #3
 8008e6c:	f7fa f8c4 	bl	8002ff8 <HAL_Delay>

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b085      	sub	sp, #20
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	4013      	ands	r3, r2
 8008e90:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008e92:	68fb      	ldr	r3, [r7, #12]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	0c1b      	lsrs	r3, r3, #16
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	b29b      	uxth	r3, r3
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3714      	adds	r7, #20
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008f18:	78fb      	ldrb	r3, [r7, #3]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	4013      	ands	r3, r2
 8008f34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008f36:	68bb      	ldr	r3, [r7, #8]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b087      	sub	sp, #28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f66:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008f68:	78fb      	ldrb	r3, [r7, #3]
 8008f6a:	f003 030f 	and.w	r3, r3, #15
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	fa22 f303 	lsr.w	r3, r2, r3
 8008f74:	01db      	lsls	r3, r3, #7
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008f7e:	78fb      	ldrb	r3, [r7, #3]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	4013      	ands	r3, r2
 8008f90:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008f92:	68bb      	ldr	r3, [r7, #8]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	371c      	adds	r7, #28
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	f003 0301 	and.w	r3, r3, #1
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fd6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008fda:	f023 0307 	bic.w	r3, r3, #7
 8008fde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
	...

08009004 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	460b      	mov	r3, r1
 800900e:	607a      	str	r2, [r7, #4]
 8009010:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	333c      	adds	r3, #60	; 0x3c
 800901a:	3304      	adds	r3, #4
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	4a26      	ldr	r2, [pc, #152]	; (80090bc <USB_EP0_OutStart+0xb8>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d90a      	bls.n	800903e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009038:	d101      	bne.n	800903e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	e037      	b.n	80090ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009044:	461a      	mov	r2, r3
 8009046:	2300      	movs	r3, #0
 8009048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800905c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800906c:	f043 0318 	orr.w	r3, r3, #24
 8009070:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009080:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009084:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009086:	7afb      	ldrb	r3, [r7, #11]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d10f      	bne.n	80090ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009092:	461a      	mov	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80090aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	371c      	adds	r7, #28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	4f54300a 	.word	0x4f54300a

080090c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3301      	adds	r3, #1
 80090d0:	60fb      	str	r3, [r7, #12]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4a13      	ldr	r2, [pc, #76]	; (8009124 <USB_CoreReset+0x64>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d901      	bls.n	80090de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e01b      	b.n	8009116 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	daf2      	bge.n	80090cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	f043 0201 	orr.w	r2, r3, #1
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3301      	adds	r3, #1
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	4a09      	ldr	r2, [pc, #36]	; (8009124 <USB_CoreReset+0x64>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d901      	bls.n	8009108 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e006      	b.n	8009116 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	2b01      	cmp	r3, #1
 8009112:	d0f0      	beq.n	80090f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	00030d40 	.word	0x00030d40

08009128 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009134:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009138:	f002 f8cc 	bl	800b2d4 <malloc>
 800913c:	4603      	mov	r3, r0
 800913e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d105      	bne.n	8009152 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800914e:	2302      	movs	r3, #2
 8009150:	e066      	b.n	8009220 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	7c1b      	ldrb	r3, [r3, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d119      	bne.n	8009196 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009166:	2202      	movs	r2, #2
 8009168:	2181      	movs	r1, #129	; 0x81
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 ff39 	bl	800afe2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800917a:	2202      	movs	r2, #2
 800917c:	2101      	movs	r1, #1
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f001 ff2f 	bl	800afe2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2210      	movs	r2, #16
 8009190:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009194:	e016      	b.n	80091c4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009196:	2340      	movs	r3, #64	; 0x40
 8009198:	2202      	movs	r2, #2
 800919a:	2181      	movs	r1, #129	; 0x81
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 ff20 	bl	800afe2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80091a8:	2340      	movs	r3, #64	; 0x40
 80091aa:	2202      	movs	r2, #2
 80091ac:	2101      	movs	r1, #1
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f001 ff17 	bl	800afe2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2210      	movs	r2, #16
 80091c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091c4:	2308      	movs	r3, #8
 80091c6:	2203      	movs	r2, #3
 80091c8:	2182      	movs	r1, #130	; 0x82
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f001 ff09 	bl	800afe2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	7c1b      	ldrb	r3, [r3, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d109      	bne.n	800920e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009204:	2101      	movs	r1, #1
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 ffda 	bl	800b1c0 <USBD_LL_PrepareReceive>
 800920c:	e007      	b.n	800921e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009214:	2340      	movs	r3, #64	; 0x40
 8009216:	2101      	movs	r1, #1
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f001 ffd1 	bl	800b1c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009238:	2181      	movs	r1, #129	; 0x81
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f001 fef7 	bl	800b02e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009246:	2101      	movs	r1, #1
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 fef0 	bl	800b02e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009256:	2182      	movs	r1, #130	; 0x82
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 fee8 	bl	800b02e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00e      	beq.n	8009296 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009288:	4618      	mov	r0, r3
 800928a:	f002 f82b 	bl	800b2e4 <free>
    pdev->pClassData = NULL;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8009296:	7bfb      	ldrb	r3, [r7, #15]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092b0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d03a      	beq.n	8009340 <USBD_CDC_Setup+0xa0>
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	f040 8097 	bne.w	80093fe <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	88db      	ldrh	r3, [r3, #6]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d029      	beq.n	800932c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	b25b      	sxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	da11      	bge.n	8009306 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80092ee:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	88d2      	ldrh	r2, [r2, #6]
 80092f4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80092f6:	6939      	ldr	r1, [r7, #16]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	88db      	ldrh	r3, [r3, #6]
 80092fc:	461a      	mov	r2, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f001 fa6d 	bl	800a7de <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8009304:	e082      	b.n	800940c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	785a      	ldrb	r2, [r3, #1]
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	88db      	ldrh	r3, [r3, #6]
 8009314:	b2da      	uxtb	r2, r3
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800931c:	6939      	ldr	r1, [r7, #16]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	88db      	ldrh	r3, [r3, #6]
 8009322:	461a      	mov	r2, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 fa86 	bl	800a836 <USBD_CtlPrepareRx>
    break;
 800932a:	e06f      	b.n	800940c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	7850      	ldrb	r0, [r2, #1]
 8009338:	2200      	movs	r2, #0
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	4798      	blx	r3
    break;
 800933e:	e065      	b.n	800940c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	785b      	ldrb	r3, [r3, #1]
 8009344:	2b0b      	cmp	r3, #11
 8009346:	d84f      	bhi.n	80093e8 <USBD_CDC_Setup+0x148>
 8009348:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <USBD_CDC_Setup+0xb0>)
 800934a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934e:	bf00      	nop
 8009350:	08009381 	.word	0x08009381
 8009354:	080093f7 	.word	0x080093f7
 8009358:	080093e9 	.word	0x080093e9
 800935c:	080093e9 	.word	0x080093e9
 8009360:	080093e9 	.word	0x080093e9
 8009364:	080093e9 	.word	0x080093e9
 8009368:	080093e9 	.word	0x080093e9
 800936c:	080093e9 	.word	0x080093e9
 8009370:	080093e9 	.word	0x080093e9
 8009374:	080093e9 	.word	0x080093e9
 8009378:	080093a9 	.word	0x080093a9
 800937c:	080093d1 	.word	0x080093d1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009386:	2b03      	cmp	r3, #3
 8009388:	d107      	bne.n	800939a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800938a:	f107 030c 	add.w	r3, r7, #12
 800938e:	2202      	movs	r2, #2
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 fa23 	bl	800a7de <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009398:	e030      	b.n	80093fc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f001 f9ad 	bl	800a6fc <USBD_CtlError>
        ret = USBD_FAIL;
 80093a2:	2303      	movs	r3, #3
 80093a4:	75fb      	strb	r3, [r7, #23]
      break;
 80093a6:	e029      	b.n	80093fc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d107      	bne.n	80093c2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80093b2:	f107 030f 	add.w	r3, r7, #15
 80093b6:	2201      	movs	r2, #1
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f001 fa0f 	bl	800a7de <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80093c0:	e01c      	b.n	80093fc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f001 f999 	bl	800a6fc <USBD_CtlError>
        ret = USBD_FAIL;
 80093ca:	2303      	movs	r3, #3
 80093cc:	75fb      	strb	r3, [r7, #23]
      break;
 80093ce:	e015      	b.n	80093fc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	d00f      	beq.n	80093fa <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 f98d 	bl	800a6fc <USBD_CtlError>
        ret = USBD_FAIL;
 80093e2:	2303      	movs	r3, #3
 80093e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80093e6:	e008      	b.n	80093fa <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f001 f986 	bl	800a6fc <USBD_CtlError>
      ret = USBD_FAIL;
 80093f0:	2303      	movs	r3, #3
 80093f2:	75fb      	strb	r3, [r7, #23]
      break;
 80093f4:	e002      	b.n	80093fc <USBD_CDC_Setup+0x15c>
      break;
 80093f6:	bf00      	nop
 80093f8:	e008      	b.n	800940c <USBD_CDC_Setup+0x16c>
      break;
 80093fa:	bf00      	nop
    }
    break;
 80093fc:	e006      	b.n	800940c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80093fe:	6839      	ldr	r1, [r7, #0]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f001 f97b 	bl	800a6fc <USBD_CtlError>
    ret = USBD_FAIL;
 8009406:	2303      	movs	r3, #3
 8009408:	75fb      	strb	r3, [r7, #23]
    break;
 800940a:	bf00      	nop
  }

  return (uint8_t)ret;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop

08009418 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800942a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009436:	2303      	movs	r3, #3
 8009438:	e049      	b.n	80094ce <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009440:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009442:	78fa      	ldrb	r2, [r7, #3]
 8009444:	6879      	ldr	r1, [r7, #4]
 8009446:	4613      	mov	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	440b      	add	r3, r1
 8009450:	3318      	adds	r3, #24
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d029      	beq.n	80094ac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009458:	78fa      	ldrb	r2, [r7, #3]
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	4613      	mov	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	440b      	add	r3, r1
 8009466:	3318      	adds	r3, #24
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	78f9      	ldrb	r1, [r7, #3]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	460b      	mov	r3, r1
 8009470:	00db      	lsls	r3, r3, #3
 8009472:	1a5b      	subs	r3, r3, r1
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4403      	add	r3, r0
 8009478:	3344      	adds	r3, #68	; 0x44
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009480:	fb03 f301 	mul.w	r3, r3, r1
 8009484:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009486:	2b00      	cmp	r3, #0
 8009488:	d110      	bne.n	80094ac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800948a:	78fa      	ldrb	r2, [r7, #3]
 800948c:	6879      	ldr	r1, [r7, #4]
 800948e:	4613      	mov	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	440b      	add	r3, r1
 8009498:	3318      	adds	r3, #24
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800949e:	78f9      	ldrb	r1, [r7, #3]
 80094a0:	2300      	movs	r3, #0
 80094a2:	2200      	movs	r2, #0
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f001 fe6a 	bl	800b17e <USBD_LL_Transmit>
 80094aa:	e00f      	b.n	80094cc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80094c8:	78fa      	ldrb	r2, [r7, #3]
 80094ca:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b084      	sub	sp, #16
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	460b      	mov	r3, r1
 80094e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e015      	b.n	8009524 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f001 fe80 	bl	800b202 <USBD_LL_GetRxDataSize>
 8009502:	4602      	mov	r2, r0
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800951e:	4611      	mov	r1, r2
 8009520:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800953a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d015      	beq.n	8009572 <USBD_CDC_EP0_RxReady+0x46>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800954c:	2bff      	cmp	r3, #255	; 0xff
 800954e:	d010      	beq.n	8009572 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800955e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009566:	b292      	uxth	r2, r2
 8009568:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	22ff      	movs	r2, #255	; 0xff
 800956e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2243      	movs	r2, #67	; 0x43
 8009588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800958a:	4b03      	ldr	r3, [pc, #12]	; (8009598 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800958c:	4618      	mov	r0, r3
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	200000e0 	.word	0x200000e0

0800959c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2243      	movs	r2, #67	; 0x43
 80095a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80095aa:	4b03      	ldr	r3, [pc, #12]	; (80095b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	2000009c 	.word	0x2000009c

080095bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2243      	movs	r2, #67	; 0x43
 80095c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80095ca:	4b03      	ldr	r3, [pc, #12]	; (80095d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	20000124 	.word	0x20000124

080095dc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	220a      	movs	r2, #10
 80095e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80095ea:	4b03      	ldr	r3, [pc, #12]	; (80095f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr
 80095f8:	20000058 	.word	0x20000058

080095fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d101      	bne.n	8009610 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800960c:	2303      	movs	r3, #3
 800960e:	e004      	b.n	800961a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009626:	b480      	push	{r7}
 8009628:	b087      	sub	sp, #28
 800962a:	af00      	add	r7, sp, #0
 800962c:	60f8      	str	r0, [r7, #12]
 800962e:	60b9      	str	r1, [r7, #8]
 8009630:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009638:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	371c      	adds	r7, #28
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009668:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	683a      	ldr	r2, [r7, #0]
 800966e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800968e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009696:	2b00      	cmp	r3, #0
 8009698:	d101      	bne.n	800969e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800969a:	2303      	movs	r3, #3
 800969c:	e016      	b.n	80096cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	7c1b      	ldrb	r3, [r3, #16]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d109      	bne.n	80096ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096b0:	2101      	movs	r1, #1
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f001 fd84 	bl	800b1c0 <USBD_LL_PrepareReceive>
 80096b8:	e007      	b.n	80096ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096c0:	2340      	movs	r3, #64	; 0x40
 80096c2:	2101      	movs	r1, #1
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 fd7b 	bl	800b1c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	4613      	mov	r3, r2
 80096e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80096e8:	2303      	movs	r3, #3
 80096ea:	e025      	b.n	8009738 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8009704:	2b00      	cmp	r3, #0
 8009706:	d003      	beq.n	8009710 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d003      	beq.n	800971e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	79fa      	ldrb	r2, [r7, #7]
 800972a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f001 fbf1 	bl	800af14 <USBD_LL_Init>
 8009732:	4603      	mov	r3, r0
 8009734:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009736:	7dfb      	ldrb	r3, [r7, #23]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3718      	adds	r7, #24
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800974a:	2300      	movs	r3, #0
 800974c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d101      	bne.n	8009758 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009754:	2303      	movs	r3, #3
 8009756:	e010      	b.n	800977a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009768:	f107 020e 	add.w	r2, r7, #14
 800976c:	4610      	mov	r0, r2
 800976e:	4798      	blx	r3
 8009770:	4602      	mov	r2, r0
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b082      	sub	sp, #8
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 fc0e 	bl	800afac <USBD_LL_Start>
 8009790:	4603      	mov	r3, r0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800979a:	b480      	push	{r7}
 800979c:	b083      	sub	sp, #12
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80097bc:	2303      	movs	r3, #3
 80097be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d009      	beq.n	80097de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	78fa      	ldrb	r2, [r7, #3]
 80097d4:	4611      	mov	r1, r2
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	4798      	blx	r3
 80097da:	4603      	mov	r3, r0
 80097dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80097de:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d007      	beq.n	800980e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	78fa      	ldrb	r2, [r7, #3]
 8009808:	4611      	mov	r1, r2
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	4798      	blx	r3
  }

  return USBD_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	4618      	mov	r0, r3
 800982c:	f000 ff2c 	bl	800a688 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800983e:	461a      	mov	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800984c:	f003 031f 	and.w	r3, r3, #31
 8009850:	2b01      	cmp	r3, #1
 8009852:	d00e      	beq.n	8009872 <USBD_LL_SetupStage+0x5a>
 8009854:	2b01      	cmp	r3, #1
 8009856:	d302      	bcc.n	800985e <USBD_LL_SetupStage+0x46>
 8009858:	2b02      	cmp	r3, #2
 800985a:	d014      	beq.n	8009886 <USBD_LL_SetupStage+0x6e>
 800985c:	e01d      	b.n	800989a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fa18 	bl	8009c9c <USBD_StdDevReq>
 800986c:	4603      	mov	r3, r0
 800986e:	73fb      	strb	r3, [r7, #15]
      break;
 8009870:	e020      	b.n	80098b4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009878:	4619      	mov	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fa7c 	bl	8009d78 <USBD_StdItfReq>
 8009880:	4603      	mov	r3, r0
 8009882:	73fb      	strb	r3, [r7, #15]
      break;
 8009884:	e016      	b.n	80098b4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800988c:	4619      	mov	r1, r3
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fab8 	bl	8009e04 <USBD_StdEPReq>
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]
      break;
 8009898:	e00c      	b.n	80098b4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80098a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	4619      	mov	r1, r3
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f001 fbdf 	bl	800b06c <USBD_LL_StallEP>
 80098ae:	4603      	mov	r3, r0
 80098b0:	73fb      	strb	r3, [r7, #15]
      break;
 80098b2:	bf00      	nop
  }

  return ret;
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b086      	sub	sp, #24
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	60f8      	str	r0, [r7, #12]
 80098c6:	460b      	mov	r3, r1
 80098c8:	607a      	str	r2, [r7, #4]
 80098ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80098cc:	7afb      	ldrb	r3, [r7, #11]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d137      	bne.n	8009942 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80098d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d14a      	bne.n	800997a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d913      	bls.n	8009918 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	689a      	ldr	r2, [r3, #8]
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	1ad2      	subs	r2, r2, r3
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	68da      	ldr	r2, [r3, #12]
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	4293      	cmp	r3, r2
 8009908:	bf28      	it	cs
 800990a:	4613      	movcs	r3, r2
 800990c:	461a      	mov	r2, r3
 800990e:	6879      	ldr	r1, [r7, #4]
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f000 ffad 	bl	800a870 <USBD_CtlContinueRx>
 8009916:	e030      	b.n	800997a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00a      	beq.n	800993a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800992a:	2b03      	cmp	r3, #3
 800992c:	d105      	bne.n	800993a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f000 ffa9 	bl	800a892 <USBD_CtlSendStatus>
 8009940:	e01b      	b.n	800997a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d013      	beq.n	8009976 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009954:	2b03      	cmp	r3, #3
 8009956:	d10e      	bne.n	8009976 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	7afa      	ldrb	r2, [r7, #11]
 8009962:	4611      	mov	r1, r2
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	4798      	blx	r3
 8009968:	4603      	mov	r3, r0
 800996a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800996c:	7dfb      	ldrb	r3, [r7, #23]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	e002      	b.n	800997c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009976:	2303      	movs	r3, #3
 8009978:	e000      	b.n	800997c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	460b      	mov	r3, r1
 800998e:	607a      	str	r2, [r7, #4]
 8009990:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009992:	7afb      	ldrb	r3, [r7, #11]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d16a      	bne.n	8009a6e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	3314      	adds	r3, #20
 800999c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d155      	bne.n	8009a54 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	689a      	ldr	r2, [r3, #8]
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d914      	bls.n	80099de <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	689a      	ldr	r2, [r3, #8]
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	1ad2      	subs	r2, r2, r3
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	461a      	mov	r2, r3
 80099c8:	6879      	ldr	r1, [r7, #4]
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f000 ff22 	bl	800a814 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099d0:	2300      	movs	r3, #0
 80099d2:	2200      	movs	r2, #0
 80099d4:	2100      	movs	r1, #0
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f001 fbf2 	bl	800b1c0 <USBD_LL_PrepareReceive>
 80099dc:	e03a      	b.n	8009a54 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	68da      	ldr	r2, [r3, #12]
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d11c      	bne.n	8009a24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d316      	bcc.n	8009a24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d20f      	bcs.n	8009a24 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a04:	2200      	movs	r2, #0
 8009a06:	2100      	movs	r1, #0
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 ff03 	bl	800a814 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a16:	2300      	movs	r3, #0
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f001 fbcf 	bl	800b1c0 <USBD_LL_PrepareReceive>
 8009a22:	e017      	b.n	8009a54 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00a      	beq.n	8009a46 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	d105      	bne.n	8009a46 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a46:	2180      	movs	r1, #128	; 0x80
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f001 fb0f 	bl	800b06c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 ff32 	bl	800a8b8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d123      	bne.n	8009aa6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7ff fe9b 	bl	800979a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009a6c:	e01b      	b.n	8009aa6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d013      	beq.n	8009aa2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a80:	2b03      	cmp	r3, #3
 8009a82:	d10e      	bne.n	8009aa2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	7afa      	ldrb	r2, [r7, #11]
 8009a8e:	4611      	mov	r1, r2
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	4798      	blx	r3
 8009a94:	4603      	mov	r3, r0
 8009a96:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009a98:	7dfb      	ldrb	r3, [r7, #23]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8009a9e:	7dfb      	ldrb	r3, [r7, #23]
 8009aa0:	e002      	b.n	8009aa8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e000      	b.n	8009aa8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3718      	adds	r7, #24
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d009      	beq.n	8009af4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	6852      	ldr	r2, [r2, #4]
 8009aec:	b2d2      	uxtb	r2, r2
 8009aee:	4611      	mov	r1, r2
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009af4:	2340      	movs	r3, #64	; 0x40
 8009af6:	2200      	movs	r2, #0
 8009af8:	2100      	movs	r1, #0
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 fa71 	bl	800afe2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2240      	movs	r2, #64	; 0x40
 8009b0c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b10:	2340      	movs	r3, #64	; 0x40
 8009b12:	2200      	movs	r2, #0
 8009b14:	2180      	movs	r1, #128	; 0x80
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f001 fa63 	bl	800afe2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2240      	movs	r2, #64	; 0x40
 8009b26:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b083      	sub	sp, #12
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	78fa      	ldrb	r2, [r7, #3]
 8009b42:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2204      	movs	r2, #4
 8009b6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b8a:	2b04      	cmp	r3, #4
 8009b8c:	d105      	bne.n	8009b9a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d10b      	bne.n	8009bd2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d005      	beq.n	8009bd2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	460b      	mov	r3, r1
 8009be6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b083      	sub	sp, #12
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b082      	sub	sp, #8
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d009      	beq.n	8009c54 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	6852      	ldr	r2, [r2, #4]
 8009c4c:	b2d2      	uxtb	r2, r2
 8009c4e:	4611      	mov	r1, r2
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	4798      	blx	r3
  }

  return USBD_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b087      	sub	sp, #28
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	3301      	adds	r3, #1
 8009c74:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c7c:	8a3b      	ldrh	r3, [r7, #16]
 8009c7e:	021b      	lsls	r3, r3, #8
 8009c80:	b21a      	sxth	r2, r3
 8009c82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	b21b      	sxth	r3, r3
 8009c8a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009c8c:	89fb      	ldrh	r3, [r7, #14]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	371c      	adds	r7, #28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
	...

08009c9c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cb2:	2b20      	cmp	r3, #32
 8009cb4:	d004      	beq.n	8009cc0 <USBD_StdDevReq+0x24>
 8009cb6:	2b40      	cmp	r3, #64	; 0x40
 8009cb8:	d002      	beq.n	8009cc0 <USBD_StdDevReq+0x24>
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00a      	beq.n	8009cd4 <USBD_StdDevReq+0x38>
 8009cbe:	e050      	b.n	8009d62 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	4798      	blx	r3
 8009cce:	4603      	mov	r3, r0
 8009cd0:	73fb      	strb	r3, [r7, #15]
    break;
 8009cd2:	e04b      	b.n	8009d6c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	785b      	ldrb	r3, [r3, #1]
 8009cd8:	2b09      	cmp	r3, #9
 8009cda:	d83c      	bhi.n	8009d56 <USBD_StdDevReq+0xba>
 8009cdc:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <USBD_StdDevReq+0x48>)
 8009cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce2:	bf00      	nop
 8009ce4:	08009d39 	.word	0x08009d39
 8009ce8:	08009d4d 	.word	0x08009d4d
 8009cec:	08009d57 	.word	0x08009d57
 8009cf0:	08009d43 	.word	0x08009d43
 8009cf4:	08009d57 	.word	0x08009d57
 8009cf8:	08009d17 	.word	0x08009d17
 8009cfc:	08009d0d 	.word	0x08009d0d
 8009d00:	08009d57 	.word	0x08009d57
 8009d04:	08009d2f 	.word	0x08009d2f
 8009d08:	08009d21 	.word	0x08009d21
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009d0c:	6839      	ldr	r1, [r7, #0]
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f9ce 	bl	800a0b0 <USBD_GetDescriptor>
      break;
 8009d14:	e024      	b.n	8009d60 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fb33 	bl	800a384 <USBD_SetAddress>
      break;
 8009d1e:	e01f      	b.n	8009d60 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fb70 	bl	800a408 <USBD_SetConfig>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d2c:	e018      	b.n	8009d60 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fc0d 	bl	800a550 <USBD_GetConfig>
      break;
 8009d36:	e013      	b.n	8009d60 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fc3c 	bl	800a5b8 <USBD_GetStatus>
      break;
 8009d40:	e00e      	b.n	8009d60 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009d42:	6839      	ldr	r1, [r7, #0]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fc6a 	bl	800a61e <USBD_SetFeature>
      break;
 8009d4a:	e009      	b.n	8009d60 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009d4c:	6839      	ldr	r1, [r7, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fc79 	bl	800a646 <USBD_ClrFeature>
      break;
 8009d54:	e004      	b.n	8009d60 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009d56:	6839      	ldr	r1, [r7, #0]
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fccf 	bl	800a6fc <USBD_CtlError>
      break;
 8009d5e:	bf00      	nop
    }
    break;
 8009d60:	e004      	b.n	8009d6c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fcc9 	bl	800a6fc <USBD_CtlError>
    break;
 8009d6a:	bf00      	nop
  }

  return ret;
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop

08009d78 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d8e:	2b20      	cmp	r3, #32
 8009d90:	d003      	beq.n	8009d9a <USBD_StdItfReq+0x22>
 8009d92:	2b40      	cmp	r3, #64	; 0x40
 8009d94:	d001      	beq.n	8009d9a <USBD_StdItfReq+0x22>
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d12a      	bne.n	8009df0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da0:	3b01      	subs	r3, #1
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d81d      	bhi.n	8009de2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	889b      	ldrh	r3, [r3, #4]
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d813      	bhi.n	8009dd8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	6839      	ldr	r1, [r7, #0]
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	4798      	blx	r3
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	88db      	ldrh	r3, [r3, #6]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d110      	bne.n	8009dec <USBD_StdItfReq+0x74>
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10d      	bne.n	8009dec <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fd5e 	bl	800a892 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009dd6:	e009      	b.n	8009dec <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fc8e 	bl	800a6fc <USBD_CtlError>
      break;
 8009de0:	e004      	b.n	8009dec <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fc89 	bl	800a6fc <USBD_CtlError>
      break;
 8009dea:	e000      	b.n	8009dee <USBD_StdItfReq+0x76>
      break;
 8009dec:	bf00      	nop
    }
    break;
 8009dee:	e004      	b.n	8009dfa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fc82 	bl	800a6fc <USBD_CtlError>
    break;
 8009df8:	bf00      	nop
  }

  return ret;
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	889b      	ldrh	r3, [r3, #4]
 8009e16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e20:	2b20      	cmp	r3, #32
 8009e22:	d004      	beq.n	8009e2e <USBD_StdEPReq+0x2a>
 8009e24:	2b40      	cmp	r3, #64	; 0x40
 8009e26:	d002      	beq.n	8009e2e <USBD_StdEPReq+0x2a>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00a      	beq.n	8009e42 <USBD_StdEPReq+0x3e>
 8009e2c:	e135      	b.n	800a09a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	4798      	blx	r3
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e40:	e130      	b.n	800a0a4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	785b      	ldrb	r3, [r3, #1]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d03e      	beq.n	8009ec8 <USBD_StdEPReq+0xc4>
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d002      	beq.n	8009e54 <USBD_StdEPReq+0x50>
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d077      	beq.n	8009f42 <USBD_StdEPReq+0x13e>
 8009e52:	e11c      	b.n	800a08e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d002      	beq.n	8009e64 <USBD_StdEPReq+0x60>
 8009e5e:	2b03      	cmp	r3, #3
 8009e60:	d015      	beq.n	8009e8e <USBD_StdEPReq+0x8a>
 8009e62:	e02b      	b.n	8009ebc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00c      	beq.n	8009e84 <USBD_StdEPReq+0x80>
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
 8009e6c:	2b80      	cmp	r3, #128	; 0x80
 8009e6e:	d009      	beq.n	8009e84 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f001 f8f9 	bl	800b06c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e7a:	2180      	movs	r1, #128	; 0x80
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 f8f5 	bl	800b06c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009e82:	e020      	b.n	8009ec6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fc38 	bl	800a6fc <USBD_CtlError>
        break;
 8009e8c:	e01b      	b.n	8009ec6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	885b      	ldrh	r3, [r3, #2]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10e      	bne.n	8009eb4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00b      	beq.n	8009eb4 <USBD_StdEPReq+0xb0>
 8009e9c:	7bbb      	ldrb	r3, [r7, #14]
 8009e9e:	2b80      	cmp	r3, #128	; 0x80
 8009ea0:	d008      	beq.n	8009eb4 <USBD_StdEPReq+0xb0>
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	88db      	ldrh	r3, [r3, #6]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d104      	bne.n	8009eb4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009eaa:	7bbb      	ldrb	r3, [r7, #14]
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f001 f8dc 	bl	800b06c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fcec 	bl	800a892 <USBD_CtlSendStatus>

        break;
 8009eba:	e004      	b.n	8009ec6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fc1c 	bl	800a6fc <USBD_CtlError>
        break;
 8009ec4:	bf00      	nop
      }
      break;
 8009ec6:	e0e7      	b.n	800a098 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d002      	beq.n	8009ed8 <USBD_StdEPReq+0xd4>
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d015      	beq.n	8009f02 <USBD_StdEPReq+0xfe>
 8009ed6:	e02d      	b.n	8009f34 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ed8:	7bbb      	ldrb	r3, [r7, #14]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00c      	beq.n	8009ef8 <USBD_StdEPReq+0xf4>
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	2b80      	cmp	r3, #128	; 0x80
 8009ee2:	d009      	beq.n	8009ef8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ee4:	7bbb      	ldrb	r3, [r7, #14]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 f8bf 	bl	800b06c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009eee:	2180      	movs	r1, #128	; 0x80
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f001 f8bb 	bl	800b06c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009ef6:	e023      	b.n	8009f40 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fbfe 	bl	800a6fc <USBD_CtlError>
        break;
 8009f00:	e01e      	b.n	8009f40 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	885b      	ldrh	r3, [r3, #2]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d119      	bne.n	8009f3e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
 8009f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d004      	beq.n	8009f1e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f14:	7bbb      	ldrb	r3, [r7, #14]
 8009f16:	4619      	mov	r1, r3
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f001 f8c6 	bl	800b0aa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fcb7 	bl	800a892 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	4798      	blx	r3
        }
        break;
 8009f32:	e004      	b.n	8009f3e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009f34:	6839      	ldr	r1, [r7, #0]
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 fbe0 	bl	800a6fc <USBD_CtlError>
        break;
 8009f3c:	e000      	b.n	8009f40 <USBD_StdEPReq+0x13c>
        break;
 8009f3e:	bf00      	nop
      }
      break;
 8009f40:	e0aa      	b.n	800a098 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d002      	beq.n	8009f52 <USBD_StdEPReq+0x14e>
 8009f4c:	2b03      	cmp	r3, #3
 8009f4e:	d032      	beq.n	8009fb6 <USBD_StdEPReq+0x1b2>
 8009f50:	e097      	b.n	800a082 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f52:	7bbb      	ldrb	r3, [r7, #14]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d007      	beq.n	8009f68 <USBD_StdEPReq+0x164>
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
 8009f5a:	2b80      	cmp	r3, #128	; 0x80
 8009f5c:	d004      	beq.n	8009f68 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8009f5e:	6839      	ldr	r1, [r7, #0]
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fbcb 	bl	800a6fc <USBD_CtlError>
          break;
 8009f66:	e091      	b.n	800a08c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	da0b      	bge.n	8009f88 <USBD_StdEPReq+0x184>
 8009f70:	7bbb      	ldrb	r3, [r7, #14]
 8009f72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f76:	4613      	mov	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	3310      	adds	r3, #16
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	4413      	add	r3, r2
 8009f84:	3304      	adds	r3, #4
 8009f86:	e00b      	b.n	8009fa0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009f88:	7bbb      	ldrb	r3, [r7, #14]
 8009f8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	2202      	movs	r2, #2
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 fc15 	bl	800a7de <USBD_CtlSendData>
        break;
 8009fb4:	e06a      	b.n	800a08c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009fb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	da11      	bge.n	8009fe2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009fbe:	7bbb      	ldrb	r3, [r7, #14]
 8009fc0:	f003 020f 	and.w	r2, r3, #15
 8009fc4:	6879      	ldr	r1, [r7, #4]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	440b      	add	r3, r1
 8009fd0:	3324      	adds	r3, #36	; 0x24
 8009fd2:	881b      	ldrh	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d117      	bne.n	800a008 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 fb8e 	bl	800a6fc <USBD_CtlError>
            break;
 8009fe0:	e054      	b.n	800a08c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	f003 020f 	and.w	r2, r3, #15
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	4613      	mov	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	440b      	add	r3, r1
 8009ff4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d104      	bne.n	800a008 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 fb7b 	bl	800a6fc <USBD_CtlError>
            break;
 800a006:	e041      	b.n	800a08c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	da0b      	bge.n	800a028 <USBD_StdEPReq+0x224>
 800a010:	7bbb      	ldrb	r3, [r7, #14]
 800a012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a016:	4613      	mov	r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	4413      	add	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	3310      	adds	r3, #16
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	4413      	add	r3, r2
 800a024:	3304      	adds	r3, #4
 800a026:	e00b      	b.n	800a040 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a028:	7bbb      	ldrb	r3, [r7, #14]
 800a02a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a02e:	4613      	mov	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	4413      	add	r3, r2
 800a03e:	3304      	adds	r3, #4
 800a040:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a042:	7bbb      	ldrb	r3, [r7, #14]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d002      	beq.n	800a04e <USBD_StdEPReq+0x24a>
 800a048:	7bbb      	ldrb	r3, [r7, #14]
 800a04a:	2b80      	cmp	r3, #128	; 0x80
 800a04c:	d103      	bne.n	800a056 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	2200      	movs	r2, #0
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	e00e      	b.n	800a074 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a056:	7bbb      	ldrb	r3, [r7, #14]
 800a058:	4619      	mov	r1, r3
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f001 f844 	bl	800b0e8 <USBD_LL_IsStallEP>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d003      	beq.n	800a06e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2201      	movs	r2, #1
 800a06a:	601a      	str	r2, [r3, #0]
 800a06c:	e002      	b.n	800a074 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2200      	movs	r2, #0
 800a072:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2202      	movs	r2, #2
 800a078:	4619      	mov	r1, r3
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fbaf 	bl	800a7de <USBD_CtlSendData>
          break;
 800a080:	e004      	b.n	800a08c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fb39 	bl	800a6fc <USBD_CtlError>
        break;
 800a08a:	bf00      	nop
      }
      break;
 800a08c:	e004      	b.n	800a098 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fb33 	bl	800a6fc <USBD_CtlError>
      break;
 800a096:	bf00      	nop
    }
    break;
 800a098:	e004      	b.n	800a0a4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fb2d 	bl	800a6fc <USBD_CtlError>
    break;
 800a0a2:	bf00      	nop
  }

  return ret;
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	885b      	ldrh	r3, [r3, #2]
 800a0ca:	0a1b      	lsrs	r3, r3, #8
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	2b06      	cmp	r3, #6
 800a0d2:	f200 8128 	bhi.w	800a326 <USBD_GetDescriptor+0x276>
 800a0d6:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <USBD_GetDescriptor+0x2c>)
 800a0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0dc:	0800a0f9 	.word	0x0800a0f9
 800a0e0:	0800a111 	.word	0x0800a111
 800a0e4:	0800a151 	.word	0x0800a151
 800a0e8:	0800a327 	.word	0x0800a327
 800a0ec:	0800a327 	.word	0x0800a327
 800a0f0:	0800a2c7 	.word	0x0800a2c7
 800a0f4:	0800a2f3 	.word	0x0800a2f3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	7c12      	ldrb	r2, [r2, #16]
 800a104:	f107 0108 	add.w	r1, r7, #8
 800a108:	4610      	mov	r0, r2
 800a10a:	4798      	blx	r3
 800a10c:	60f8      	str	r0, [r7, #12]
    break;
 800a10e:	e112      	b.n	800a336 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	7c1b      	ldrb	r3, [r3, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10d      	bne.n	800a134 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a120:	f107 0208 	add.w	r2, r7, #8
 800a124:	4610      	mov	r0, r2
 800a126:	4798      	blx	r3
 800a128:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3301      	adds	r3, #1
 800a12e:	2202      	movs	r2, #2
 800a130:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a132:	e100      	b.n	800a336 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	f107 0208 	add.w	r2, r7, #8
 800a140:	4610      	mov	r0, r2
 800a142:	4798      	blx	r3
 800a144:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	3301      	adds	r3, #1
 800a14a:	2202      	movs	r2, #2
 800a14c:	701a      	strb	r2, [r3, #0]
    break;
 800a14e:	e0f2      	b.n	800a336 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	885b      	ldrh	r3, [r3, #2]
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b05      	cmp	r3, #5
 800a158:	f200 80ac 	bhi.w	800a2b4 <USBD_GetDescriptor+0x204>
 800a15c:	a201      	add	r2, pc, #4	; (adr r2, 800a164 <USBD_GetDescriptor+0xb4>)
 800a15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a162:	bf00      	nop
 800a164:	0800a17d 	.word	0x0800a17d
 800a168:	0800a1b1 	.word	0x0800a1b1
 800a16c:	0800a1e5 	.word	0x0800a1e5
 800a170:	0800a219 	.word	0x0800a219
 800a174:	0800a24d 	.word	0x0800a24d
 800a178:	0800a281 	.word	0x0800a281
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00b      	beq.n	800a1a0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	7c12      	ldrb	r2, [r2, #16]
 800a194:	f107 0108 	add.w	r1, r7, #8
 800a198:	4610      	mov	r0, r2
 800a19a:	4798      	blx	r3
 800a19c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a19e:	e091      	b.n	800a2c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 faaa 	bl	800a6fc <USBD_CtlError>
        err++;
 800a1a8:	7afb      	ldrb	r3, [r7, #11]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	72fb      	strb	r3, [r7, #11]
      break;
 800a1ae:	e089      	b.n	800a2c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00b      	beq.n	800a1d4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	7c12      	ldrb	r2, [r2, #16]
 800a1c8:	f107 0108 	add.w	r1, r7, #8
 800a1cc:	4610      	mov	r0, r2
 800a1ce:	4798      	blx	r3
 800a1d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1d2:	e077      	b.n	800a2c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fa90 	bl	800a6fc <USBD_CtlError>
        err++;
 800a1dc:	7afb      	ldrb	r3, [r7, #11]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	72fb      	strb	r3, [r7, #11]
      break;
 800a1e2:	e06f      	b.n	800a2c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00b      	beq.n	800a208 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	7c12      	ldrb	r2, [r2, #16]
 800a1fc:	f107 0108 	add.w	r1, r7, #8
 800a200:	4610      	mov	r0, r2
 800a202:	4798      	blx	r3
 800a204:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a206:	e05d      	b.n	800a2c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a208:	6839      	ldr	r1, [r7, #0]
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 fa76 	bl	800a6fc <USBD_CtlError>
        err++;
 800a210:	7afb      	ldrb	r3, [r7, #11]
 800a212:	3301      	adds	r3, #1
 800a214:	72fb      	strb	r3, [r7, #11]
      break;
 800a216:	e055      	b.n	800a2c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00b      	beq.n	800a23c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	7c12      	ldrb	r2, [r2, #16]
 800a230:	f107 0108 	add.w	r1, r7, #8
 800a234:	4610      	mov	r0, r2
 800a236:	4798      	blx	r3
 800a238:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a23a:	e043      	b.n	800a2c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fa5c 	bl	800a6fc <USBD_CtlError>
        err++;
 800a244:	7afb      	ldrb	r3, [r7, #11]
 800a246:	3301      	adds	r3, #1
 800a248:	72fb      	strb	r3, [r7, #11]
      break;
 800a24a:	e03b      	b.n	800a2c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a252:	695b      	ldr	r3, [r3, #20]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00b      	beq.n	800a270 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	7c12      	ldrb	r2, [r2, #16]
 800a264:	f107 0108 	add.w	r1, r7, #8
 800a268:	4610      	mov	r0, r2
 800a26a:	4798      	blx	r3
 800a26c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a26e:	e029      	b.n	800a2c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a270:	6839      	ldr	r1, [r7, #0]
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fa42 	bl	800a6fc <USBD_CtlError>
        err++;
 800a278:	7afb      	ldrb	r3, [r7, #11]
 800a27a:	3301      	adds	r3, #1
 800a27c:	72fb      	strb	r3, [r7, #11]
      break;
 800a27e:	e021      	b.n	800a2c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a286:	699b      	ldr	r3, [r3, #24]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00b      	beq.n	800a2a4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a292:	699b      	ldr	r3, [r3, #24]
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	7c12      	ldrb	r2, [r2, #16]
 800a298:	f107 0108 	add.w	r1, r7, #8
 800a29c:	4610      	mov	r0, r2
 800a29e:	4798      	blx	r3
 800a2a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2a2:	e00f      	b.n	800a2c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fa28 	bl	800a6fc <USBD_CtlError>
        err++;
 800a2ac:	7afb      	ldrb	r3, [r7, #11]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	72fb      	strb	r3, [r7, #11]
      break;
 800a2b2:	e007      	b.n	800a2c4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fa20 	bl	800a6fc <USBD_CtlError>
      err++;
 800a2bc:	7afb      	ldrb	r3, [r7, #11]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800a2c2:	bf00      	nop
    }
    break;
 800a2c4:	e037      	b.n	800a336 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	7c1b      	ldrb	r3, [r3, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d109      	bne.n	800a2e2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d6:	f107 0208 	add.w	r2, r7, #8
 800a2da:	4610      	mov	r0, r2
 800a2dc:	4798      	blx	r3
 800a2de:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a2e0:	e029      	b.n	800a336 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fa09 	bl	800a6fc <USBD_CtlError>
      err++;
 800a2ea:	7afb      	ldrb	r3, [r7, #11]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	72fb      	strb	r3, [r7, #11]
    break;
 800a2f0:	e021      	b.n	800a336 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	7c1b      	ldrb	r3, [r3, #16]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d10d      	bne.n	800a316 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a302:	f107 0208 	add.w	r2, r7, #8
 800a306:	4610      	mov	r0, r2
 800a308:	4798      	blx	r3
 800a30a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	3301      	adds	r3, #1
 800a310:	2207      	movs	r2, #7
 800a312:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a314:	e00f      	b.n	800a336 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f9ef 	bl	800a6fc <USBD_CtlError>
      err++;
 800a31e:	7afb      	ldrb	r3, [r7, #11]
 800a320:	3301      	adds	r3, #1
 800a322:	72fb      	strb	r3, [r7, #11]
    break;
 800a324:	e007      	b.n	800a336 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 f9e7 	bl	800a6fc <USBD_CtlError>
    err++;
 800a32e:	7afb      	ldrb	r3, [r7, #11]
 800a330:	3301      	adds	r3, #1
 800a332:	72fb      	strb	r3, [r7, #11]
    break;
 800a334:	bf00      	nop
  }

  if (err != 0U)
 800a336:	7afb      	ldrb	r3, [r7, #11]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d11e      	bne.n	800a37a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	88db      	ldrh	r3, [r3, #6]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d016      	beq.n	800a372 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800a344:	893b      	ldrh	r3, [r7, #8]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00e      	beq.n	800a368 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	88da      	ldrh	r2, [r3, #6]
 800a34e:	893b      	ldrh	r3, [r7, #8]
 800a350:	4293      	cmp	r3, r2
 800a352:	bf28      	it	cs
 800a354:	4613      	movcs	r3, r2
 800a356:	b29b      	uxth	r3, r3
 800a358:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800a35a:	893b      	ldrh	r3, [r7, #8]
 800a35c:	461a      	mov	r2, r3
 800a35e:	68f9      	ldr	r1, [r7, #12]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fa3c 	bl	800a7de <USBD_CtlSendData>
 800a366:	e009      	b.n	800a37c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f9c6 	bl	800a6fc <USBD_CtlError>
 800a370:	e004      	b.n	800a37c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fa8d 	bl	800a892 <USBD_CtlSendStatus>
 800a378:	e000      	b.n	800a37c <USBD_GetDescriptor+0x2cc>
    return;
 800a37a:	bf00      	nop
    }
  }
}
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop

0800a384 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	889b      	ldrh	r3, [r3, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d130      	bne.n	800a3f8 <USBD_SetAddress+0x74>
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	88db      	ldrh	r3, [r3, #6]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d12c      	bne.n	800a3f8 <USBD_SetAddress+0x74>
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	885b      	ldrh	r3, [r3, #2]
 800a3a2:	2b7f      	cmp	r3, #127	; 0x7f
 800a3a4:	d828      	bhi.n	800a3f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	885b      	ldrh	r3, [r3, #2]
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	d104      	bne.n	800a3c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f99c 	bl	800a6fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c4:	e01c      	b.n	800a400 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	7bfa      	ldrb	r2, [r7, #15]
 800a3ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 feb4 	bl	800b140 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fa5a 	bl	800a892 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a3de:	7bfb      	ldrb	r3, [r7, #15]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d004      	beq.n	800a3ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2202      	movs	r2, #2
 800a3e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ec:	e008      	b.n	800a400 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3f6:	e003      	b.n	800a400 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a3f8:	6839      	ldr	r1, [r7, #0]
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f97e 	bl	800a6fc <USBD_CtlError>
  }
}
 800a400:	bf00      	nop
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	885b      	ldrh	r3, [r3, #2]
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	4b4b      	ldr	r3, [pc, #300]	; (800a54c <USBD_SetConfig+0x144>)
 800a41e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a420:	4b4a      	ldr	r3, [pc, #296]	; (800a54c <USBD_SetConfig+0x144>)
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d905      	bls.n	800a434 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a428:	6839      	ldr	r1, [r7, #0]
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f966 	bl	800a6fc <USBD_CtlError>
    return USBD_FAIL;
 800a430:	2303      	movs	r3, #3
 800a432:	e087      	b.n	800a544 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d002      	beq.n	800a444 <USBD_SetConfig+0x3c>
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d025      	beq.n	800a48e <USBD_SetConfig+0x86>
 800a442:	e071      	b.n	800a528 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800a444:	4b41      	ldr	r3, [pc, #260]	; (800a54c <USBD_SetConfig+0x144>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d01c      	beq.n	800a486 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800a44c:	4b3f      	ldr	r3, [pc, #252]	; (800a54c <USBD_SetConfig+0x144>)
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	461a      	mov	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a456:	4b3d      	ldr	r3, [pc, #244]	; (800a54c <USBD_SetConfig+0x144>)
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7ff f9a7 	bl	80097b0 <USBD_SetClassConfig>
 800a462:	4603      	mov	r3, r0
 800a464:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d004      	beq.n	800a476 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f944 	bl	800a6fc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a474:	e065      	b.n	800a542 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fa0b 	bl	800a892 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2203      	movs	r2, #3
 800a480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a484:	e05d      	b.n	800a542 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fa03 	bl	800a892 <USBD_CtlSendStatus>
    break;
 800a48c:	e059      	b.n	800a542 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800a48e:	4b2f      	ldr	r3, [pc, #188]	; (800a54c <USBD_SetConfig+0x144>)
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d112      	bne.n	800a4bc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2202      	movs	r2, #2
 800a49a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800a49e:	4b2b      	ldr	r3, [pc, #172]	; (800a54c <USBD_SetConfig+0x144>)
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4a8:	4b28      	ldr	r3, [pc, #160]	; (800a54c <USBD_SetConfig+0x144>)
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f7ff f99a 	bl	80097e8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 f9ec 	bl	800a892 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a4ba:	e042      	b.n	800a542 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800a4bc:	4b23      	ldr	r3, [pc, #140]	; (800a54c <USBD_SetConfig+0x144>)
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d02a      	beq.n	800a520 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7ff f988 	bl	80097e8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800a4d8:	4b1c      	ldr	r3, [pc, #112]	; (800a54c <USBD_SetConfig+0x144>)
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4e2:	4b1a      	ldr	r3, [pc, #104]	; (800a54c <USBD_SetConfig+0x144>)
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7ff f961 	bl	80097b0 <USBD_SetClassConfig>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00f      	beq.n	800a518 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f8fe 	bl	800a6fc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	b2db      	uxtb	r3, r3
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f7ff f96d 	bl	80097e8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2202      	movs	r2, #2
 800a512:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a516:	e014      	b.n	800a542 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f9ba 	bl	800a892 <USBD_CtlSendStatus>
    break;
 800a51e:	e010      	b.n	800a542 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f9b6 	bl	800a892 <USBD_CtlSendStatus>
    break;
 800a526:	e00c      	b.n	800a542 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f8e6 	bl	800a6fc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a530:	4b06      	ldr	r3, [pc, #24]	; (800a54c <USBD_SetConfig+0x144>)
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7ff f956 	bl	80097e8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800a53c:	2303      	movs	r3, #3
 800a53e:	73fb      	strb	r3, [r7, #15]
    break;
 800a540:	bf00      	nop
  }

  return ret;
 800a542:	7bfb      	ldrb	r3, [r7, #15]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	2000025c 	.word	0x2000025c

0800a550 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	88db      	ldrh	r3, [r3, #6]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d004      	beq.n	800a56c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f8c9 	bl	800a6fc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800a56a:	e021      	b.n	800a5b0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a572:	2b01      	cmp	r3, #1
 800a574:	db17      	blt.n	800a5a6 <USBD_GetConfig+0x56>
 800a576:	2b02      	cmp	r3, #2
 800a578:	dd02      	ble.n	800a580 <USBD_GetConfig+0x30>
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d00b      	beq.n	800a596 <USBD_GetConfig+0x46>
 800a57e:	e012      	b.n	800a5a6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	3308      	adds	r3, #8
 800a58a:	2201      	movs	r2, #1
 800a58c:	4619      	mov	r1, r3
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f925 	bl	800a7de <USBD_CtlSendData>
      break;
 800a594:	e00c      	b.n	800a5b0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	3304      	adds	r3, #4
 800a59a:	2201      	movs	r2, #1
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f91d 	bl	800a7de <USBD_CtlSendData>
      break;
 800a5a4:	e004      	b.n	800a5b0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f8a7 	bl	800a6fc <USBD_CtlError>
      break;
 800a5ae:	bf00      	nop
}
 800a5b0:	bf00      	nop
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d81e      	bhi.n	800a60c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	88db      	ldrh	r3, [r3, #6]
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d004      	beq.n	800a5e0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f88f 	bl	800a6fc <USBD_CtlError>
      break;
 800a5de:	e01a      	b.n	800a616 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d005      	beq.n	800a5fc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	f043 0202 	orr.w	r2, r3, #2
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	330c      	adds	r3, #12
 800a600:	2202      	movs	r2, #2
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f8ea 	bl	800a7de <USBD_CtlSendData>
    break;
 800a60a:	e004      	b.n	800a616 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800a60c:	6839      	ldr	r1, [r7, #0]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f874 	bl	800a6fc <USBD_CtlError>
    break;
 800a614:	bf00      	nop
  }
}
 800a616:	bf00      	nop
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b082      	sub	sp, #8
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	885b      	ldrh	r3, [r3, #2]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d106      	bne.n	800a63e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f92a 	bl	800a892 <USBD_CtlSendStatus>
  }
}
 800a63e:	bf00      	nop
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b082      	sub	sp, #8
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a656:	3b01      	subs	r3, #1
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d80b      	bhi.n	800a674 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	885b      	ldrh	r3, [r3, #2]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d10c      	bne.n	800a67e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f910 	bl	800a892 <USBD_CtlSendStatus>
      }
      break;
 800a672:	e004      	b.n	800a67e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a674:	6839      	ldr	r1, [r7, #0]
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f840 	bl	800a6fc <USBD_CtlError>
      break;
 800a67c:	e000      	b.n	800a680 <USBD_ClrFeature+0x3a>
      break;
 800a67e:	bf00      	nop
  }
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	781a      	ldrb	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	781a      	ldrb	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f7ff fad3 	bl	8009c5e <SWAPBYTE>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f7ff fac6 	bl	8009c5e <SWAPBYTE>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f7ff fab9 	bl	8009c5e <SWAPBYTE>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	80da      	strh	r2, [r3, #6]
}
 800a6f4:	bf00      	nop
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a706:	2180      	movs	r1, #128	; 0x80
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fcaf 	bl	800b06c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a70e:	2100      	movs	r1, #0
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fcab 	bl	800b06c <USBD_LL_StallEP>
}
 800a716:	bf00      	nop
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b086      	sub	sp, #24
 800a722:	af00      	add	r7, sp, #0
 800a724:	60f8      	str	r0, [r7, #12]
 800a726:	60b9      	str	r1, [r7, #8]
 800a728:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a72a:	2300      	movs	r3, #0
 800a72c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d036      	beq.n	800a7a2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a738:	6938      	ldr	r0, [r7, #16]
 800a73a:	f000 f836 	bl	800a7aa <USBD_GetLen>
 800a73e:	4603      	mov	r3, r0
 800a740:	3301      	adds	r3, #1
 800a742:	b29b      	uxth	r3, r3
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	b29a      	uxth	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a74c:	7dfb      	ldrb	r3, [r7, #23]
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	4413      	add	r3, r2
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	7812      	ldrb	r2, [r2, #0]
 800a756:	701a      	strb	r2, [r3, #0]
  idx++;
 800a758:	7dfb      	ldrb	r3, [r7, #23]
 800a75a:	3301      	adds	r3, #1
 800a75c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	4413      	add	r3, r2
 800a764:	2203      	movs	r2, #3
 800a766:	701a      	strb	r2, [r3, #0]
  idx++;
 800a768:	7dfb      	ldrb	r3, [r7, #23]
 800a76a:	3301      	adds	r3, #1
 800a76c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a76e:	e013      	b.n	800a798 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a770:	7dfb      	ldrb	r3, [r7, #23]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	4413      	add	r3, r2
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	7812      	ldrb	r2, [r2, #0]
 800a77a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	3301      	adds	r3, #1
 800a780:	613b      	str	r3, [r7, #16]
    idx++;
 800a782:	7dfb      	ldrb	r3, [r7, #23]
 800a784:	3301      	adds	r3, #1
 800a786:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a788:	7dfb      	ldrb	r3, [r7, #23]
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	4413      	add	r3, r2
 800a78e:	2200      	movs	r2, #0
 800a790:	701a      	strb	r2, [r3, #0]
    idx++;
 800a792:	7dfb      	ldrb	r3, [r7, #23]
 800a794:	3301      	adds	r3, #1
 800a796:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1e7      	bne.n	800a770 <USBD_GetString+0x52>
 800a7a0:	e000      	b.n	800a7a4 <USBD_GetString+0x86>
    return;
 800a7a2:	bf00      	nop
  }
}
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a7ba:	e005      	b.n	800a7c8 <USBD_GetLen+0x1e>
  {
    len++;
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1f5      	bne.n	800a7bc <USBD_GetLen+0x12>
  }

  return len;
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	60f8      	str	r0, [r7, #12]
 800a7e6:	60b9      	str	r1, [r7, #8]
 800a7e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	2100      	movs	r1, #0
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 fcba 	bl	800b17e <USBD_LL_Transmit>

  return USBD_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	2100      	movs	r1, #0
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f000 fca9 	bl	800b17e <USBD_LL_Transmit>

  return USBD_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b084      	sub	sp, #16
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	60f8      	str	r0, [r7, #12]
 800a83e:	60b9      	str	r1, [r7, #8]
 800a840:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2203      	movs	r2, #3
 800a846:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	2100      	movs	r1, #0
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f000 fcad 	bl	800b1c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	2100      	movs	r1, #0
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f000 fc9c 	bl	800b1c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b082      	sub	sp, #8
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2204      	movs	r2, #4
 800a89e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fc68 	bl	800b17e <USBD_LL_Transmit>

  return USBD_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2205      	movs	r2, #5
 800a8c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fc76 	bl	800b1c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
	...

0800a8e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	4912      	ldr	r1, [pc, #72]	; (800a930 <MX_USB_DEVICE_Init+0x50>)
 800a8e8:	4812      	ldr	r0, [pc, #72]	; (800a934 <MX_USB_DEVICE_Init+0x54>)
 800a8ea:	f7fe fef3 	bl	80096d4 <USBD_Init>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a8f4:	f7f7 fb2a 	bl	8001f4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a8f8:	490f      	ldr	r1, [pc, #60]	; (800a938 <MX_USB_DEVICE_Init+0x58>)
 800a8fa:	480e      	ldr	r0, [pc, #56]	; (800a934 <MX_USB_DEVICE_Init+0x54>)
 800a8fc:	f7fe ff20 	bl	8009740 <USBD_RegisterClass>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d001      	beq.n	800a90a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a906:	f7f7 fb21 	bl	8001f4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a90a:	490c      	ldr	r1, [pc, #48]	; (800a93c <MX_USB_DEVICE_Init+0x5c>)
 800a90c:	4809      	ldr	r0, [pc, #36]	; (800a934 <MX_USB_DEVICE_Init+0x54>)
 800a90e:	f7fe fe75 	bl	80095fc <USBD_CDC_RegisterInterface>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a918:	f7f7 fb18 	bl	8001f4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a91c:	4805      	ldr	r0, [pc, #20]	; (800a934 <MX_USB_DEVICE_Init+0x54>)
 800a91e:	f7fe ff30 	bl	8009782 <USBD_Start>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a928:	f7f7 fb10 	bl	8001f4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a92c:	bf00      	nop
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	2000017c 	.word	0x2000017c
 800a934:	20000590 	.word	0x20000590
 800a938:	20000064 	.word	0x20000064
 800a93c:	20000168 	.word	0x20000168

0800a940 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a944:	2200      	movs	r2, #0
 800a946:	4905      	ldr	r1, [pc, #20]	; (800a95c <CDC_Init_FS+0x1c>)
 800a948:	4805      	ldr	r0, [pc, #20]	; (800a960 <CDC_Init_FS+0x20>)
 800a94a:	f7fe fe6c 	bl	8009626 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a94e:	4905      	ldr	r1, [pc, #20]	; (800a964 <CDC_Init_FS+0x24>)
 800a950:	4803      	ldr	r0, [pc, #12]	; (800a960 <CDC_Init_FS+0x20>)
 800a952:	f7fe fe81 	bl	8009658 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a956:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a958:	4618      	mov	r0, r3
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	20001060 	.word	0x20001060
 800a960:	20000590 	.word	0x20000590
 800a964:	20000860 	.word	0x20000860

0800a968 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a968:	b480      	push	{r7}
 800a96a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a96c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a96e:	4618      	mov	r0, r3
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	4603      	mov	r3, r0
 800a980:	6039      	str	r1, [r7, #0]
 800a982:	71fb      	strb	r3, [r7, #7]
 800a984:	4613      	mov	r3, r2
 800a986:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a988:	79fb      	ldrb	r3, [r7, #7]
 800a98a:	2b23      	cmp	r3, #35	; 0x23
 800a98c:	d84a      	bhi.n	800aa24 <CDC_Control_FS+0xac>
 800a98e:	a201      	add	r2, pc, #4	; (adr r2, 800a994 <CDC_Control_FS+0x1c>)
 800a990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a994:	0800aa25 	.word	0x0800aa25
 800a998:	0800aa25 	.word	0x0800aa25
 800a99c:	0800aa25 	.word	0x0800aa25
 800a9a0:	0800aa25 	.word	0x0800aa25
 800a9a4:	0800aa25 	.word	0x0800aa25
 800a9a8:	0800aa25 	.word	0x0800aa25
 800a9ac:	0800aa25 	.word	0x0800aa25
 800a9b0:	0800aa25 	.word	0x0800aa25
 800a9b4:	0800aa25 	.word	0x0800aa25
 800a9b8:	0800aa25 	.word	0x0800aa25
 800a9bc:	0800aa25 	.word	0x0800aa25
 800a9c0:	0800aa25 	.word	0x0800aa25
 800a9c4:	0800aa25 	.word	0x0800aa25
 800a9c8:	0800aa25 	.word	0x0800aa25
 800a9cc:	0800aa25 	.word	0x0800aa25
 800a9d0:	0800aa25 	.word	0x0800aa25
 800a9d4:	0800aa25 	.word	0x0800aa25
 800a9d8:	0800aa25 	.word	0x0800aa25
 800a9dc:	0800aa25 	.word	0x0800aa25
 800a9e0:	0800aa25 	.word	0x0800aa25
 800a9e4:	0800aa25 	.word	0x0800aa25
 800a9e8:	0800aa25 	.word	0x0800aa25
 800a9ec:	0800aa25 	.word	0x0800aa25
 800a9f0:	0800aa25 	.word	0x0800aa25
 800a9f4:	0800aa25 	.word	0x0800aa25
 800a9f8:	0800aa25 	.word	0x0800aa25
 800a9fc:	0800aa25 	.word	0x0800aa25
 800aa00:	0800aa25 	.word	0x0800aa25
 800aa04:	0800aa25 	.word	0x0800aa25
 800aa08:	0800aa25 	.word	0x0800aa25
 800aa0c:	0800aa25 	.word	0x0800aa25
 800aa10:	0800aa25 	.word	0x0800aa25
 800aa14:	0800aa25 	.word	0x0800aa25
 800aa18:	0800aa25 	.word	0x0800aa25
 800aa1c:	0800aa25 	.word	0x0800aa25
 800aa20:	0800aa25 	.word	0x0800aa25
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aa24:	bf00      	nop
  }

  return (USBD_OK);
 800aa26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aa3e:	6879      	ldr	r1, [r7, #4]
 800aa40:	4805      	ldr	r0, [pc, #20]	; (800aa58 <CDC_Receive_FS+0x24>)
 800aa42:	f7fe fe09 	bl	8009658 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aa46:	4804      	ldr	r0, [pc, #16]	; (800aa58 <CDC_Receive_FS+0x24>)
 800aa48:	f7fe fe1a 	bl	8009680 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aa4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	20000590 	.word	0x20000590

0800aa5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	4613      	mov	r3, r2
 800aa68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aa6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	371c      	adds	r7, #28
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
	...

0800aa80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	4603      	mov	r3, r0
 800aa88:	6039      	str	r1, [r7, #0]
 800aa8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2212      	movs	r2, #18
 800aa90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa92:	4b03      	ldr	r3, [pc, #12]	; (800aaa0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	20000198 	.word	0x20000198

0800aaa4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	6039      	str	r1, [r7, #0]
 800aaae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2204      	movs	r2, #4
 800aab4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aab6:	4b03      	ldr	r3, [pc, #12]	; (800aac4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	200001ac 	.word	0x200001ac

0800aac8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	4603      	mov	r3, r0
 800aad0:	6039      	str	r1, [r7, #0]
 800aad2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aad4:	79fb      	ldrb	r3, [r7, #7]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d105      	bne.n	800aae6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aada:	683a      	ldr	r2, [r7, #0]
 800aadc:	4907      	ldr	r1, [pc, #28]	; (800aafc <USBD_FS_ProductStrDescriptor+0x34>)
 800aade:	4808      	ldr	r0, [pc, #32]	; (800ab00 <USBD_FS_ProductStrDescriptor+0x38>)
 800aae0:	f7ff fe1d 	bl	800a71e <USBD_GetString>
 800aae4:	e004      	b.n	800aaf0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	4904      	ldr	r1, [pc, #16]	; (800aafc <USBD_FS_ProductStrDescriptor+0x34>)
 800aaea:	4805      	ldr	r0, [pc, #20]	; (800ab00 <USBD_FS_ProductStrDescriptor+0x38>)
 800aaec:	f7ff fe17 	bl	800a71e <USBD_GetString>
  }
  return USBD_StrDesc;
 800aaf0:	4b02      	ldr	r3, [pc, #8]	; (800aafc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	20001860 	.word	0x20001860
 800ab00:	0800bf88 	.word	0x0800bf88

0800ab04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	6039      	str	r1, [r7, #0]
 800ab0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	4904      	ldr	r1, [pc, #16]	; (800ab24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ab14:	4804      	ldr	r0, [pc, #16]	; (800ab28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ab16:	f7ff fe02 	bl	800a71e <USBD_GetString>
  return USBD_StrDesc;
 800ab1a:	4b02      	ldr	r3, [pc, #8]	; (800ab24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	20001860 	.word	0x20001860
 800ab28:	0800bfa0 	.word	0x0800bfa0

0800ab2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	6039      	str	r1, [r7, #0]
 800ab36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	221a      	movs	r2, #26
 800ab3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab3e:	f000 f843 	bl	800abc8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab42:	4b02      	ldr	r3, [pc, #8]	; (800ab4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	200001b0 	.word	0x200001b0

0800ab50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	6039      	str	r1, [r7, #0]
 800ab5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d105      	bne.n	800ab6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	4907      	ldr	r1, [pc, #28]	; (800ab84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab66:	4808      	ldr	r0, [pc, #32]	; (800ab88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab68:	f7ff fdd9 	bl	800a71e <USBD_GetString>
 800ab6c:	e004      	b.n	800ab78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	4904      	ldr	r1, [pc, #16]	; (800ab84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab72:	4805      	ldr	r0, [pc, #20]	; (800ab88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab74:	f7ff fdd3 	bl	800a71e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab78:	4b02      	ldr	r3, [pc, #8]	; (800ab84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20001860 	.word	0x20001860
 800ab88:	0800bfb4 	.word	0x0800bfb4

0800ab8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	6039      	str	r1, [r7, #0]
 800ab96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab98:	79fb      	ldrb	r3, [r7, #7]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d105      	bne.n	800abaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	4907      	ldr	r1, [pc, #28]	; (800abc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aba2:	4808      	ldr	r0, [pc, #32]	; (800abc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aba4:	f7ff fdbb 	bl	800a71e <USBD_GetString>
 800aba8:	e004      	b.n	800abb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	4904      	ldr	r1, [pc, #16]	; (800abc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800abae:	4805      	ldr	r0, [pc, #20]	; (800abc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800abb0:	f7ff fdb5 	bl	800a71e <USBD_GetString>
  }
  return USBD_StrDesc;
 800abb4:	4b02      	ldr	r3, [pc, #8]	; (800abc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20001860 	.word	0x20001860
 800abc4:	0800bfc0 	.word	0x0800bfc0

0800abc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abce:	4b0f      	ldr	r3, [pc, #60]	; (800ac0c <Get_SerialNum+0x44>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abd4:	4b0e      	ldr	r3, [pc, #56]	; (800ac10 <Get_SerialNum+0x48>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abda:	4b0e      	ldr	r3, [pc, #56]	; (800ac14 <Get_SerialNum+0x4c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4413      	add	r3, r2
 800abe6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d009      	beq.n	800ac02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abee:	2208      	movs	r2, #8
 800abf0:	4909      	ldr	r1, [pc, #36]	; (800ac18 <Get_SerialNum+0x50>)
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 f814 	bl	800ac20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abf8:	2204      	movs	r2, #4
 800abfa:	4908      	ldr	r1, [pc, #32]	; (800ac1c <Get_SerialNum+0x54>)
 800abfc:	68b8      	ldr	r0, [r7, #8]
 800abfe:	f000 f80f 	bl	800ac20 <IntToUnicode>
  }
}
 800ac02:	bf00      	nop
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	1fff7a10 	.word	0x1fff7a10
 800ac10:	1fff7a14 	.word	0x1fff7a14
 800ac14:	1fff7a18 	.word	0x1fff7a18
 800ac18:	200001b2 	.word	0x200001b2
 800ac1c:	200001c2 	.word	0x200001c2

0800ac20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac32:	2300      	movs	r3, #0
 800ac34:	75fb      	strb	r3, [r7, #23]
 800ac36:	e027      	b.n	800ac88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	0f1b      	lsrs	r3, r3, #28
 800ac3c:	2b09      	cmp	r3, #9
 800ac3e:	d80b      	bhi.n	800ac58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	0f1b      	lsrs	r3, r3, #28
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	440b      	add	r3, r1
 800ac50:	3230      	adds	r2, #48	; 0x30
 800ac52:	b2d2      	uxtb	r2, r2
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	e00a      	b.n	800ac6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	0f1b      	lsrs	r3, r3, #28
 800ac5c:	b2da      	uxtb	r2, r3
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	4619      	mov	r1, r3
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	440b      	add	r3, r1
 800ac68:	3237      	adds	r2, #55	; 0x37
 800ac6a:	b2d2      	uxtb	r2, r2
 800ac6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	011b      	lsls	r3, r3, #4
 800ac72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	005b      	lsls	r3, r3, #1
 800ac78:	3301      	adds	r3, #1
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	2200      	movs	r2, #0
 800ac80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	3301      	adds	r3, #1
 800ac86:	75fb      	strb	r3, [r7, #23]
 800ac88:	7dfa      	ldrb	r2, [r7, #23]
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d3d3      	bcc.n	800ac38 <IntToUnicode+0x18>
  }
}
 800ac90:	bf00      	nop
 800ac92:	371c      	adds	r7, #28
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b08a      	sub	sp, #40	; 0x28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aca4:	f107 0314 	add.w	r3, r7, #20
 800aca8:	2200      	movs	r2, #0
 800acaa:	601a      	str	r2, [r3, #0]
 800acac:	605a      	str	r2, [r3, #4]
 800acae:	609a      	str	r2, [r3, #8]
 800acb0:	60da      	str	r2, [r3, #12]
 800acb2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acbc:	d13a      	bne.n	800ad34 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acbe:	2300      	movs	r3, #0
 800acc0:	613b      	str	r3, [r7, #16]
 800acc2:	4b1e      	ldr	r3, [pc, #120]	; (800ad3c <HAL_PCD_MspInit+0xa0>)
 800acc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc6:	4a1d      	ldr	r2, [pc, #116]	; (800ad3c <HAL_PCD_MspInit+0xa0>)
 800acc8:	f043 0301 	orr.w	r3, r3, #1
 800accc:	6313      	str	r3, [r2, #48]	; 0x30
 800acce:	4b1b      	ldr	r3, [pc, #108]	; (800ad3c <HAL_PCD_MspInit+0xa0>)
 800acd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd2:	f003 0301 	and.w	r3, r3, #1
 800acd6:	613b      	str	r3, [r7, #16]
 800acd8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800acda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800acde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ace0:	2302      	movs	r3, #2
 800ace2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ace4:	2300      	movs	r3, #0
 800ace6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ace8:	2303      	movs	r3, #3
 800acea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800acec:	230a      	movs	r3, #10
 800acee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acf0:	f107 0314 	add.w	r3, r7, #20
 800acf4:	4619      	mov	r1, r3
 800acf6:	4812      	ldr	r0, [pc, #72]	; (800ad40 <HAL_PCD_MspInit+0xa4>)
 800acf8:	f7f8 fb02 	bl	8003300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800acfc:	4b0f      	ldr	r3, [pc, #60]	; (800ad3c <HAL_PCD_MspInit+0xa0>)
 800acfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad00:	4a0e      	ldr	r2, [pc, #56]	; (800ad3c <HAL_PCD_MspInit+0xa0>)
 800ad02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad06:	6353      	str	r3, [r2, #52]	; 0x34
 800ad08:	2300      	movs	r3, #0
 800ad0a:	60fb      	str	r3, [r7, #12]
 800ad0c:	4b0b      	ldr	r3, [pc, #44]	; (800ad3c <HAL_PCD_MspInit+0xa0>)
 800ad0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad10:	4a0a      	ldr	r2, [pc, #40]	; (800ad3c <HAL_PCD_MspInit+0xa0>)
 800ad12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad16:	6453      	str	r3, [r2, #68]	; 0x44
 800ad18:	4b08      	ldr	r3, [pc, #32]	; (800ad3c <HAL_PCD_MspInit+0xa0>)
 800ad1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad20:	60fb      	str	r3, [r7, #12]
 800ad22:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ad24:	2200      	movs	r2, #0
 800ad26:	2100      	movs	r1, #0
 800ad28:	2043      	movs	r0, #67	; 0x43
 800ad2a:	f7f8 fa77 	bl	800321c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad2e:	2043      	movs	r0, #67	; 0x43
 800ad30:	f7f8 faa0 	bl	8003274 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad34:	bf00      	nop
 800ad36:	3728      	adds	r7, #40	; 0x28
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	40023800 	.word	0x40023800
 800ad40:	40020000 	.word	0x40020000

0800ad44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4610      	mov	r0, r2
 800ad5c:	f7fe fd5c 	bl	8009818 <USBD_LL_SetupStage>
}
 800ad60:	bf00      	nop
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	460b      	mov	r3, r1
 800ad72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ad7a:	78fa      	ldrb	r2, [r7, #3]
 800ad7c:	6879      	ldr	r1, [r7, #4]
 800ad7e:	4613      	mov	r3, r2
 800ad80:	00db      	lsls	r3, r3, #3
 800ad82:	1a9b      	subs	r3, r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	440b      	add	r3, r1
 800ad88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	78fb      	ldrb	r3, [r7, #3]
 800ad90:	4619      	mov	r1, r3
 800ad92:	f7fe fd94 	bl	80098be <USBD_LL_DataOutStage>
}
 800ad96:	bf00      	nop
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b082      	sub	sp, #8
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	460b      	mov	r3, r1
 800ada8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800adb0:	78fa      	ldrb	r2, [r7, #3]
 800adb2:	6879      	ldr	r1, [r7, #4]
 800adb4:	4613      	mov	r3, r2
 800adb6:	00db      	lsls	r3, r3, #3
 800adb8:	1a9b      	subs	r3, r3, r2
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	440b      	add	r3, r1
 800adbe:	3348      	adds	r3, #72	; 0x48
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	78fb      	ldrb	r3, [r7, #3]
 800adc4:	4619      	mov	r1, r3
 800adc6:	f7fe fddd 	bl	8009984 <USBD_LL_DataInStage>
}
 800adca:	bf00      	nop
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b082      	sub	sp, #8
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fe fee1 	bl	8009ba8 <USBD_LL_SOF>
}
 800ade6:	bf00      	nop
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800adee:	b580      	push	{r7, lr}
 800adf0:	b084      	sub	sp, #16
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800adf6:	2301      	movs	r3, #1
 800adf8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d001      	beq.n	800ae06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ae02:	f7f7 f8a3 	bl	8001f4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae0c:	7bfa      	ldrb	r2, [r7, #15]
 800ae0e:	4611      	mov	r1, r2
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe fe8e 	bl	8009b32 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fe fe47 	bl	8009ab0 <USBD_LL_Reset>
}
 800ae22:	bf00      	nop
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
	...

0800ae2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fe fe89 	bl	8009b52 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	6812      	ldr	r2, [r2, #0]
 800ae4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae52:	f043 0301 	orr.w	r3, r3, #1
 800ae56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a1b      	ldr	r3, [r3, #32]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d005      	beq.n	800ae6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae60:	4b04      	ldr	r3, [pc, #16]	; (800ae74 <HAL_PCD_SuspendCallback+0x48>)
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	4a03      	ldr	r2, [pc, #12]	; (800ae74 <HAL_PCD_SuspendCallback+0x48>)
 800ae66:	f043 0306 	orr.w	r3, r3, #6
 800ae6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae6c:	bf00      	nop
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	e000ed00 	.word	0xe000ed00

0800ae78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fe fe78 	bl	8009b7c <USBD_LL_Resume>
}
 800ae8c:	bf00      	nop
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aea6:	78fa      	ldrb	r2, [r7, #3]
 800aea8:	4611      	mov	r1, r2
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fe fea3 	bl	8009bf6 <USBD_LL_IsoOUTIncomplete>
}
 800aeb0:	bf00      	nop
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aeca:	78fa      	ldrb	r2, [r7, #3]
 800aecc:	4611      	mov	r1, r2
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fe fe84 	bl	8009bdc <USBD_LL_IsoINIncomplete>
}
 800aed4:	bf00      	nop
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fe fe90 	bl	8009c10 <USBD_LL_DevConnected>
}
 800aef0:	bf00      	nop
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af06:	4618      	mov	r0, r3
 800af08:	f7fe fe8d 	bl	8009c26 <USBD_LL_DevDisconnected>
}
 800af0c:	bf00      	nop
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d13c      	bne.n	800af9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af24:	4a20      	ldr	r2, [pc, #128]	; (800afa8 <USBD_LL_Init+0x94>)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a1e      	ldr	r2, [pc, #120]	; (800afa8 <USBD_LL_Init+0x94>)
 800af30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af34:	4b1c      	ldr	r3, [pc, #112]	; (800afa8 <USBD_LL_Init+0x94>)
 800af36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800af3c:	4b1a      	ldr	r3, [pc, #104]	; (800afa8 <USBD_LL_Init+0x94>)
 800af3e:	2204      	movs	r2, #4
 800af40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af42:	4b19      	ldr	r3, [pc, #100]	; (800afa8 <USBD_LL_Init+0x94>)
 800af44:	2202      	movs	r2, #2
 800af46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af48:	4b17      	ldr	r3, [pc, #92]	; (800afa8 <USBD_LL_Init+0x94>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af4e:	4b16      	ldr	r3, [pc, #88]	; (800afa8 <USBD_LL_Init+0x94>)
 800af50:	2202      	movs	r2, #2
 800af52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af54:	4b14      	ldr	r3, [pc, #80]	; (800afa8 <USBD_LL_Init+0x94>)
 800af56:	2200      	movs	r2, #0
 800af58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af5a:	4b13      	ldr	r3, [pc, #76]	; (800afa8 <USBD_LL_Init+0x94>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af60:	4b11      	ldr	r3, [pc, #68]	; (800afa8 <USBD_LL_Init+0x94>)
 800af62:	2200      	movs	r2, #0
 800af64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800af66:	4b10      	ldr	r3, [pc, #64]	; (800afa8 <USBD_LL_Init+0x94>)
 800af68:	2200      	movs	r2, #0
 800af6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af6c:	4b0e      	ldr	r3, [pc, #56]	; (800afa8 <USBD_LL_Init+0x94>)
 800af6e:	2200      	movs	r2, #0
 800af70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af72:	480d      	ldr	r0, [pc, #52]	; (800afa8 <USBD_LL_Init+0x94>)
 800af74:	f7f9 fddc 	bl	8004b30 <HAL_PCD_Init>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d001      	beq.n	800af82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800af7e:	f7f6 ffe5 	bl	8001f4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800af82:	2180      	movs	r1, #128	; 0x80
 800af84:	4808      	ldr	r0, [pc, #32]	; (800afa8 <USBD_LL_Init+0x94>)
 800af86:	f7fa ff44 	bl	8005e12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800af8a:	2240      	movs	r2, #64	; 0x40
 800af8c:	2100      	movs	r1, #0
 800af8e:	4806      	ldr	r0, [pc, #24]	; (800afa8 <USBD_LL_Init+0x94>)
 800af90:	f7fa fef8 	bl	8005d84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af94:	2280      	movs	r2, #128	; 0x80
 800af96:	2101      	movs	r1, #1
 800af98:	4803      	ldr	r0, [pc, #12]	; (800afa8 <USBD_LL_Init+0x94>)
 800af9a:	f7fa fef3 	bl	8005d84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	20001a60 	.word	0x20001a60

0800afac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afb4:	2300      	movs	r3, #0
 800afb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afb8:	2300      	movs	r3, #0
 800afba:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7f9 fedc 	bl	8004d80 <HAL_PCD_Start>
 800afc8:	4603      	mov	r3, r0
 800afca:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800afcc:	7bfb      	ldrb	r3, [r7, #15]
 800afce:	4618      	mov	r0, r3
 800afd0:	f000 f92a 	bl	800b228 <USBD_Get_USB_Status>
 800afd4:	4603      	mov	r3, r0
 800afd6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800afd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b084      	sub	sp, #16
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
 800afea:	4608      	mov	r0, r1
 800afec:	4611      	mov	r1, r2
 800afee:	461a      	mov	r2, r3
 800aff0:	4603      	mov	r3, r0
 800aff2:	70fb      	strb	r3, [r7, #3]
 800aff4:	460b      	mov	r3, r1
 800aff6:	70bb      	strb	r3, [r7, #2]
 800aff8:	4613      	mov	r3, r2
 800affa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b00a:	78bb      	ldrb	r3, [r7, #2]
 800b00c:	883a      	ldrh	r2, [r7, #0]
 800b00e:	78f9      	ldrb	r1, [r7, #3]
 800b010:	f7fa fac0 	bl	8005594 <HAL_PCD_EP_Open>
 800b014:	4603      	mov	r3, r0
 800b016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 f904 	bl	800b228 <USBD_Get_USB_Status>
 800b020:	4603      	mov	r3, r0
 800b022:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b024:	7bbb      	ldrb	r3, [r7, #14]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b084      	sub	sp, #16
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	460b      	mov	r3, r1
 800b038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b03e:	2300      	movs	r3, #0
 800b040:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b048:	78fa      	ldrb	r2, [r7, #3]
 800b04a:	4611      	mov	r1, r2
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fa fb09 	bl	8005664 <HAL_PCD_EP_Close>
 800b052:	4603      	mov	r3, r0
 800b054:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800b056:	7bfb      	ldrb	r3, [r7, #15]
 800b058:	4618      	mov	r0, r3
 800b05a:	f000 f8e5 	bl	800b228 <USBD_Get_USB_Status>
 800b05e:	4603      	mov	r3, r0
 800b060:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b062:	7bbb      	ldrb	r3, [r7, #14]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	460b      	mov	r3, r1
 800b076:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b078:	2300      	movs	r3, #0
 800b07a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b07c:	2300      	movs	r3, #0
 800b07e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b086:	78fa      	ldrb	r2, [r7, #3]
 800b088:	4611      	mov	r1, r2
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7fa fbe1 	bl	8005852 <HAL_PCD_EP_SetStall>
 800b090:	4603      	mov	r3, r0
 800b092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b094:	7bfb      	ldrb	r3, [r7, #15]
 800b096:	4618      	mov	r0, r3
 800b098:	f000 f8c6 	bl	800b228 <USBD_Get_USB_Status>
 800b09c:	4603      	mov	r3, r0
 800b09e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800b0a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b084      	sub	sp, #16
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0c4:	78fa      	ldrb	r2, [r7, #3]
 800b0c6:	4611      	mov	r1, r2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fa fc26 	bl	800591a <HAL_PCD_EP_ClrStall>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 f8a7 	bl	800b228 <USBD_Get_USB_Status>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800b0de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0fa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b0fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b100:	2b00      	cmp	r3, #0
 800b102:	da0b      	bge.n	800b11c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b104:	78fb      	ldrb	r3, [r7, #3]
 800b106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b10a:	68f9      	ldr	r1, [r7, #12]
 800b10c:	4613      	mov	r3, r2
 800b10e:	00db      	lsls	r3, r3, #3
 800b110:	1a9b      	subs	r3, r3, r2
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	440b      	add	r3, r1
 800b116:	333e      	adds	r3, #62	; 0x3e
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	e00b      	b.n	800b134 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800b11c:	78fb      	ldrb	r3, [r7, #3]
 800b11e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b122:	68f9      	ldr	r1, [r7, #12]
 800b124:	4613      	mov	r3, r2
 800b126:	00db      	lsls	r3, r3, #3
 800b128:	1a9b      	subs	r3, r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	440b      	add	r3, r1
 800b12e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b132:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b134:	4618      	mov	r0, r3
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b15a:	78fa      	ldrb	r2, [r7, #3]
 800b15c:	4611      	mov	r1, r2
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fa f9f3 	bl	800554a <HAL_PCD_SetAddress>
 800b164:	4603      	mov	r3, r0
 800b166:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b168:	7bfb      	ldrb	r3, [r7, #15]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 f85c 	bl	800b228 <USBD_Get_USB_Status>
 800b170:	4603      	mov	r3, r0
 800b172:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800b174:	7bbb      	ldrb	r3, [r7, #14]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b086      	sub	sp, #24
 800b182:	af00      	add	r7, sp, #0
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	603b      	str	r3, [r7, #0]
 800b18a:	460b      	mov	r3, r1
 800b18c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b19c:	7af9      	ldrb	r1, [r7, #11]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	f7fa fb0c 	bl	80057be <HAL_PCD_EP_Transmit>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800b1aa:	7dfb      	ldrb	r3, [r7, #23]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 f83b 	bl	800b228 <USBD_Get_USB_Status>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800b1b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3718      	adds	r7, #24
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	607a      	str	r2, [r7, #4]
 800b1ca:	603b      	str	r3, [r7, #0]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b1de:	7af9      	ldrb	r1, [r7, #11]
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	f7fa fa88 	bl	80056f8 <HAL_PCD_EP_Receive>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800b1ec:	7dfb      	ldrb	r3, [r7, #23]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 f81a 	bl	800b228 <USBD_Get_USB_Status>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800b1f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b082      	sub	sp, #8
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	460b      	mov	r3, r1
 800b20c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b214:	78fa      	ldrb	r2, [r7, #3]
 800b216:	4611      	mov	r1, r2
 800b218:	4618      	mov	r0, r3
 800b21a:	f7fa fab8 	bl	800578e <HAL_PCD_EP_GetRxCount>
 800b21e:	4603      	mov	r3, r0
}
 800b220:	4618      	mov	r0, r3
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	4603      	mov	r3, r0
 800b230:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b232:	2300      	movs	r3, #0
 800b234:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b236:	79fb      	ldrb	r3, [r7, #7]
 800b238:	2b03      	cmp	r3, #3
 800b23a:	d817      	bhi.n	800b26c <USBD_Get_USB_Status+0x44>
 800b23c:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <USBD_Get_USB_Status+0x1c>)
 800b23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b242:	bf00      	nop
 800b244:	0800b255 	.word	0x0800b255
 800b248:	0800b25b 	.word	0x0800b25b
 800b24c:	0800b261 	.word	0x0800b261
 800b250:	0800b267 	.word	0x0800b267
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	73fb      	strb	r3, [r7, #15]
    break;
 800b258:	e00b      	b.n	800b272 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b25a:	2303      	movs	r3, #3
 800b25c:	73fb      	strb	r3, [r7, #15]
    break;
 800b25e:	e008      	b.n	800b272 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b260:	2301      	movs	r3, #1
 800b262:	73fb      	strb	r3, [r7, #15]
    break;
 800b264:	e005      	b.n	800b272 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b266:	2303      	movs	r3, #3
 800b268:	73fb      	strb	r3, [r7, #15]
    break;
 800b26a:	e002      	b.n	800b272 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b26c:	2303      	movs	r3, #3
 800b26e:	73fb      	strb	r3, [r7, #15]
    break;
 800b270:	bf00      	nop
  }
  return usb_status;
 800b272:	7bfb      	ldrb	r3, [r7, #15]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3714      	adds	r7, #20
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <__errno>:
 800b280:	4b01      	ldr	r3, [pc, #4]	; (800b288 <__errno+0x8>)
 800b282:	6818      	ldr	r0, [r3, #0]
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	200001cc 	.word	0x200001cc

0800b28c <__libc_init_array>:
 800b28c:	b570      	push	{r4, r5, r6, lr}
 800b28e:	4e0d      	ldr	r6, [pc, #52]	; (800b2c4 <__libc_init_array+0x38>)
 800b290:	4c0d      	ldr	r4, [pc, #52]	; (800b2c8 <__libc_init_array+0x3c>)
 800b292:	1ba4      	subs	r4, r4, r6
 800b294:	10a4      	asrs	r4, r4, #2
 800b296:	2500      	movs	r5, #0
 800b298:	42a5      	cmp	r5, r4
 800b29a:	d109      	bne.n	800b2b0 <__libc_init_array+0x24>
 800b29c:	4e0b      	ldr	r6, [pc, #44]	; (800b2cc <__libc_init_array+0x40>)
 800b29e:	4c0c      	ldr	r4, [pc, #48]	; (800b2d0 <__libc_init_array+0x44>)
 800b2a0:	f000 fc38 	bl	800bb14 <_init>
 800b2a4:	1ba4      	subs	r4, r4, r6
 800b2a6:	10a4      	asrs	r4, r4, #2
 800b2a8:	2500      	movs	r5, #0
 800b2aa:	42a5      	cmp	r5, r4
 800b2ac:	d105      	bne.n	800b2ba <__libc_init_array+0x2e>
 800b2ae:	bd70      	pop	{r4, r5, r6, pc}
 800b2b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2b4:	4798      	blx	r3
 800b2b6:	3501      	adds	r5, #1
 800b2b8:	e7ee      	b.n	800b298 <__libc_init_array+0xc>
 800b2ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2be:	4798      	blx	r3
 800b2c0:	3501      	adds	r5, #1
 800b2c2:	e7f2      	b.n	800b2aa <__libc_init_array+0x1e>
 800b2c4:	0800c098 	.word	0x0800c098
 800b2c8:	0800c098 	.word	0x0800c098
 800b2cc:	0800c098 	.word	0x0800c098
 800b2d0:	0800c09c 	.word	0x0800c09c

0800b2d4 <malloc>:
 800b2d4:	4b02      	ldr	r3, [pc, #8]	; (800b2e0 <malloc+0xc>)
 800b2d6:	4601      	mov	r1, r0
 800b2d8:	6818      	ldr	r0, [r3, #0]
 800b2da:	f000 b86d 	b.w	800b3b8 <_malloc_r>
 800b2de:	bf00      	nop
 800b2e0:	200001cc 	.word	0x200001cc

0800b2e4 <free>:
 800b2e4:	4b02      	ldr	r3, [pc, #8]	; (800b2f0 <free+0xc>)
 800b2e6:	4601      	mov	r1, r0
 800b2e8:	6818      	ldr	r0, [r3, #0]
 800b2ea:	f000 b817 	b.w	800b31c <_free_r>
 800b2ee:	bf00      	nop
 800b2f0:	200001cc 	.word	0x200001cc

0800b2f4 <memcpy>:
 800b2f4:	b510      	push	{r4, lr}
 800b2f6:	1e43      	subs	r3, r0, #1
 800b2f8:	440a      	add	r2, r1
 800b2fa:	4291      	cmp	r1, r2
 800b2fc:	d100      	bne.n	800b300 <memcpy+0xc>
 800b2fe:	bd10      	pop	{r4, pc}
 800b300:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b304:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b308:	e7f7      	b.n	800b2fa <memcpy+0x6>

0800b30a <memset>:
 800b30a:	4402      	add	r2, r0
 800b30c:	4603      	mov	r3, r0
 800b30e:	4293      	cmp	r3, r2
 800b310:	d100      	bne.n	800b314 <memset+0xa>
 800b312:	4770      	bx	lr
 800b314:	f803 1b01 	strb.w	r1, [r3], #1
 800b318:	e7f9      	b.n	800b30e <memset+0x4>
	...

0800b31c <_free_r>:
 800b31c:	b538      	push	{r3, r4, r5, lr}
 800b31e:	4605      	mov	r5, r0
 800b320:	2900      	cmp	r1, #0
 800b322:	d045      	beq.n	800b3b0 <_free_r+0x94>
 800b324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b328:	1f0c      	subs	r4, r1, #4
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	bfb8      	it	lt
 800b32e:	18e4      	addlt	r4, r4, r3
 800b330:	f000 f8cc 	bl	800b4cc <__malloc_lock>
 800b334:	4a1f      	ldr	r2, [pc, #124]	; (800b3b4 <_free_r+0x98>)
 800b336:	6813      	ldr	r3, [r2, #0]
 800b338:	4610      	mov	r0, r2
 800b33a:	b933      	cbnz	r3, 800b34a <_free_r+0x2e>
 800b33c:	6063      	str	r3, [r4, #4]
 800b33e:	6014      	str	r4, [r2, #0]
 800b340:	4628      	mov	r0, r5
 800b342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b346:	f000 b8c2 	b.w	800b4ce <__malloc_unlock>
 800b34a:	42a3      	cmp	r3, r4
 800b34c:	d90c      	bls.n	800b368 <_free_r+0x4c>
 800b34e:	6821      	ldr	r1, [r4, #0]
 800b350:	1862      	adds	r2, r4, r1
 800b352:	4293      	cmp	r3, r2
 800b354:	bf04      	itt	eq
 800b356:	681a      	ldreq	r2, [r3, #0]
 800b358:	685b      	ldreq	r3, [r3, #4]
 800b35a:	6063      	str	r3, [r4, #4]
 800b35c:	bf04      	itt	eq
 800b35e:	1852      	addeq	r2, r2, r1
 800b360:	6022      	streq	r2, [r4, #0]
 800b362:	6004      	str	r4, [r0, #0]
 800b364:	e7ec      	b.n	800b340 <_free_r+0x24>
 800b366:	4613      	mov	r3, r2
 800b368:	685a      	ldr	r2, [r3, #4]
 800b36a:	b10a      	cbz	r2, 800b370 <_free_r+0x54>
 800b36c:	42a2      	cmp	r2, r4
 800b36e:	d9fa      	bls.n	800b366 <_free_r+0x4a>
 800b370:	6819      	ldr	r1, [r3, #0]
 800b372:	1858      	adds	r0, r3, r1
 800b374:	42a0      	cmp	r0, r4
 800b376:	d10b      	bne.n	800b390 <_free_r+0x74>
 800b378:	6820      	ldr	r0, [r4, #0]
 800b37a:	4401      	add	r1, r0
 800b37c:	1858      	adds	r0, r3, r1
 800b37e:	4282      	cmp	r2, r0
 800b380:	6019      	str	r1, [r3, #0]
 800b382:	d1dd      	bne.n	800b340 <_free_r+0x24>
 800b384:	6810      	ldr	r0, [r2, #0]
 800b386:	6852      	ldr	r2, [r2, #4]
 800b388:	605a      	str	r2, [r3, #4]
 800b38a:	4401      	add	r1, r0
 800b38c:	6019      	str	r1, [r3, #0]
 800b38e:	e7d7      	b.n	800b340 <_free_r+0x24>
 800b390:	d902      	bls.n	800b398 <_free_r+0x7c>
 800b392:	230c      	movs	r3, #12
 800b394:	602b      	str	r3, [r5, #0]
 800b396:	e7d3      	b.n	800b340 <_free_r+0x24>
 800b398:	6820      	ldr	r0, [r4, #0]
 800b39a:	1821      	adds	r1, r4, r0
 800b39c:	428a      	cmp	r2, r1
 800b39e:	bf04      	itt	eq
 800b3a0:	6811      	ldreq	r1, [r2, #0]
 800b3a2:	6852      	ldreq	r2, [r2, #4]
 800b3a4:	6062      	str	r2, [r4, #4]
 800b3a6:	bf04      	itt	eq
 800b3a8:	1809      	addeq	r1, r1, r0
 800b3aa:	6021      	streq	r1, [r4, #0]
 800b3ac:	605c      	str	r4, [r3, #4]
 800b3ae:	e7c7      	b.n	800b340 <_free_r+0x24>
 800b3b0:	bd38      	pop	{r3, r4, r5, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20000260 	.word	0x20000260

0800b3b8 <_malloc_r>:
 800b3b8:	b570      	push	{r4, r5, r6, lr}
 800b3ba:	1ccd      	adds	r5, r1, #3
 800b3bc:	f025 0503 	bic.w	r5, r5, #3
 800b3c0:	3508      	adds	r5, #8
 800b3c2:	2d0c      	cmp	r5, #12
 800b3c4:	bf38      	it	cc
 800b3c6:	250c      	movcc	r5, #12
 800b3c8:	2d00      	cmp	r5, #0
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	db01      	blt.n	800b3d2 <_malloc_r+0x1a>
 800b3ce:	42a9      	cmp	r1, r5
 800b3d0:	d903      	bls.n	800b3da <_malloc_r+0x22>
 800b3d2:	230c      	movs	r3, #12
 800b3d4:	6033      	str	r3, [r6, #0]
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	bd70      	pop	{r4, r5, r6, pc}
 800b3da:	f000 f877 	bl	800b4cc <__malloc_lock>
 800b3de:	4a21      	ldr	r2, [pc, #132]	; (800b464 <_malloc_r+0xac>)
 800b3e0:	6814      	ldr	r4, [r2, #0]
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	b991      	cbnz	r1, 800b40c <_malloc_r+0x54>
 800b3e6:	4c20      	ldr	r4, [pc, #128]	; (800b468 <_malloc_r+0xb0>)
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	b91b      	cbnz	r3, 800b3f4 <_malloc_r+0x3c>
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	f000 f83d 	bl	800b46c <_sbrk_r>
 800b3f2:	6020      	str	r0, [r4, #0]
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	f000 f838 	bl	800b46c <_sbrk_r>
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	d124      	bne.n	800b44a <_malloc_r+0x92>
 800b400:	230c      	movs	r3, #12
 800b402:	6033      	str	r3, [r6, #0]
 800b404:	4630      	mov	r0, r6
 800b406:	f000 f862 	bl	800b4ce <__malloc_unlock>
 800b40a:	e7e4      	b.n	800b3d6 <_malloc_r+0x1e>
 800b40c:	680b      	ldr	r3, [r1, #0]
 800b40e:	1b5b      	subs	r3, r3, r5
 800b410:	d418      	bmi.n	800b444 <_malloc_r+0x8c>
 800b412:	2b0b      	cmp	r3, #11
 800b414:	d90f      	bls.n	800b436 <_malloc_r+0x7e>
 800b416:	600b      	str	r3, [r1, #0]
 800b418:	50cd      	str	r5, [r1, r3]
 800b41a:	18cc      	adds	r4, r1, r3
 800b41c:	4630      	mov	r0, r6
 800b41e:	f000 f856 	bl	800b4ce <__malloc_unlock>
 800b422:	f104 000b 	add.w	r0, r4, #11
 800b426:	1d23      	adds	r3, r4, #4
 800b428:	f020 0007 	bic.w	r0, r0, #7
 800b42c:	1ac3      	subs	r3, r0, r3
 800b42e:	d0d3      	beq.n	800b3d8 <_malloc_r+0x20>
 800b430:	425a      	negs	r2, r3
 800b432:	50e2      	str	r2, [r4, r3]
 800b434:	e7d0      	b.n	800b3d8 <_malloc_r+0x20>
 800b436:	428c      	cmp	r4, r1
 800b438:	684b      	ldr	r3, [r1, #4]
 800b43a:	bf16      	itet	ne
 800b43c:	6063      	strne	r3, [r4, #4]
 800b43e:	6013      	streq	r3, [r2, #0]
 800b440:	460c      	movne	r4, r1
 800b442:	e7eb      	b.n	800b41c <_malloc_r+0x64>
 800b444:	460c      	mov	r4, r1
 800b446:	6849      	ldr	r1, [r1, #4]
 800b448:	e7cc      	b.n	800b3e4 <_malloc_r+0x2c>
 800b44a:	1cc4      	adds	r4, r0, #3
 800b44c:	f024 0403 	bic.w	r4, r4, #3
 800b450:	42a0      	cmp	r0, r4
 800b452:	d005      	beq.n	800b460 <_malloc_r+0xa8>
 800b454:	1a21      	subs	r1, r4, r0
 800b456:	4630      	mov	r0, r6
 800b458:	f000 f808 	bl	800b46c <_sbrk_r>
 800b45c:	3001      	adds	r0, #1
 800b45e:	d0cf      	beq.n	800b400 <_malloc_r+0x48>
 800b460:	6025      	str	r5, [r4, #0]
 800b462:	e7db      	b.n	800b41c <_malloc_r+0x64>
 800b464:	20000260 	.word	0x20000260
 800b468:	20000264 	.word	0x20000264

0800b46c <_sbrk_r>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	4c06      	ldr	r4, [pc, #24]	; (800b488 <_sbrk_r+0x1c>)
 800b470:	2300      	movs	r3, #0
 800b472:	4605      	mov	r5, r0
 800b474:	4608      	mov	r0, r1
 800b476:	6023      	str	r3, [r4, #0]
 800b478:	f7f6 ffa4 	bl	80023c4 <_sbrk>
 800b47c:	1c43      	adds	r3, r0, #1
 800b47e:	d102      	bne.n	800b486 <_sbrk_r+0x1a>
 800b480:	6823      	ldr	r3, [r4, #0]
 800b482:	b103      	cbz	r3, 800b486 <_sbrk_r+0x1a>
 800b484:	602b      	str	r3, [r5, #0]
 800b486:	bd38      	pop	{r3, r4, r5, pc}
 800b488:	20001e68 	.word	0x20001e68

0800b48c <siprintf>:
 800b48c:	b40e      	push	{r1, r2, r3}
 800b48e:	b500      	push	{lr}
 800b490:	b09c      	sub	sp, #112	; 0x70
 800b492:	ab1d      	add	r3, sp, #116	; 0x74
 800b494:	9002      	str	r0, [sp, #8]
 800b496:	9006      	str	r0, [sp, #24]
 800b498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b49c:	4809      	ldr	r0, [pc, #36]	; (800b4c4 <siprintf+0x38>)
 800b49e:	9107      	str	r1, [sp, #28]
 800b4a0:	9104      	str	r1, [sp, #16]
 800b4a2:	4909      	ldr	r1, [pc, #36]	; (800b4c8 <siprintf+0x3c>)
 800b4a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a8:	9105      	str	r1, [sp, #20]
 800b4aa:	6800      	ldr	r0, [r0, #0]
 800b4ac:	9301      	str	r3, [sp, #4]
 800b4ae:	a902      	add	r1, sp, #8
 800b4b0:	f000 f868 	bl	800b584 <_svfiprintf_r>
 800b4b4:	9b02      	ldr	r3, [sp, #8]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	701a      	strb	r2, [r3, #0]
 800b4ba:	b01c      	add	sp, #112	; 0x70
 800b4bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4c0:	b003      	add	sp, #12
 800b4c2:	4770      	bx	lr
 800b4c4:	200001cc 	.word	0x200001cc
 800b4c8:	ffff0208 	.word	0xffff0208

0800b4cc <__malloc_lock>:
 800b4cc:	4770      	bx	lr

0800b4ce <__malloc_unlock>:
 800b4ce:	4770      	bx	lr

0800b4d0 <__ssputs_r>:
 800b4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d4:	688e      	ldr	r6, [r1, #8]
 800b4d6:	429e      	cmp	r6, r3
 800b4d8:	4682      	mov	sl, r0
 800b4da:	460c      	mov	r4, r1
 800b4dc:	4690      	mov	r8, r2
 800b4de:	4699      	mov	r9, r3
 800b4e0:	d837      	bhi.n	800b552 <__ssputs_r+0x82>
 800b4e2:	898a      	ldrh	r2, [r1, #12]
 800b4e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4e8:	d031      	beq.n	800b54e <__ssputs_r+0x7e>
 800b4ea:	6825      	ldr	r5, [r4, #0]
 800b4ec:	6909      	ldr	r1, [r1, #16]
 800b4ee:	1a6f      	subs	r7, r5, r1
 800b4f0:	6965      	ldr	r5, [r4, #20]
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4f8:	fb95 f5f3 	sdiv	r5, r5, r3
 800b4fc:	f109 0301 	add.w	r3, r9, #1
 800b500:	443b      	add	r3, r7
 800b502:	429d      	cmp	r5, r3
 800b504:	bf38      	it	cc
 800b506:	461d      	movcc	r5, r3
 800b508:	0553      	lsls	r3, r2, #21
 800b50a:	d530      	bpl.n	800b56e <__ssputs_r+0x9e>
 800b50c:	4629      	mov	r1, r5
 800b50e:	f7ff ff53 	bl	800b3b8 <_malloc_r>
 800b512:	4606      	mov	r6, r0
 800b514:	b950      	cbnz	r0, 800b52c <__ssputs_r+0x5c>
 800b516:	230c      	movs	r3, #12
 800b518:	f8ca 3000 	str.w	r3, [sl]
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b522:	81a3      	strh	r3, [r4, #12]
 800b524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b52c:	463a      	mov	r2, r7
 800b52e:	6921      	ldr	r1, [r4, #16]
 800b530:	f7ff fee0 	bl	800b2f4 <memcpy>
 800b534:	89a3      	ldrh	r3, [r4, #12]
 800b536:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b53a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b53e:	81a3      	strh	r3, [r4, #12]
 800b540:	6126      	str	r6, [r4, #16]
 800b542:	6165      	str	r5, [r4, #20]
 800b544:	443e      	add	r6, r7
 800b546:	1bed      	subs	r5, r5, r7
 800b548:	6026      	str	r6, [r4, #0]
 800b54a:	60a5      	str	r5, [r4, #8]
 800b54c:	464e      	mov	r6, r9
 800b54e:	454e      	cmp	r6, r9
 800b550:	d900      	bls.n	800b554 <__ssputs_r+0x84>
 800b552:	464e      	mov	r6, r9
 800b554:	4632      	mov	r2, r6
 800b556:	4641      	mov	r1, r8
 800b558:	6820      	ldr	r0, [r4, #0]
 800b55a:	f000 fa93 	bl	800ba84 <memmove>
 800b55e:	68a3      	ldr	r3, [r4, #8]
 800b560:	1b9b      	subs	r3, r3, r6
 800b562:	60a3      	str	r3, [r4, #8]
 800b564:	6823      	ldr	r3, [r4, #0]
 800b566:	441e      	add	r6, r3
 800b568:	6026      	str	r6, [r4, #0]
 800b56a:	2000      	movs	r0, #0
 800b56c:	e7dc      	b.n	800b528 <__ssputs_r+0x58>
 800b56e:	462a      	mov	r2, r5
 800b570:	f000 faa1 	bl	800bab6 <_realloc_r>
 800b574:	4606      	mov	r6, r0
 800b576:	2800      	cmp	r0, #0
 800b578:	d1e2      	bne.n	800b540 <__ssputs_r+0x70>
 800b57a:	6921      	ldr	r1, [r4, #16]
 800b57c:	4650      	mov	r0, sl
 800b57e:	f7ff fecd 	bl	800b31c <_free_r>
 800b582:	e7c8      	b.n	800b516 <__ssputs_r+0x46>

0800b584 <_svfiprintf_r>:
 800b584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b588:	461d      	mov	r5, r3
 800b58a:	898b      	ldrh	r3, [r1, #12]
 800b58c:	061f      	lsls	r7, r3, #24
 800b58e:	b09d      	sub	sp, #116	; 0x74
 800b590:	4680      	mov	r8, r0
 800b592:	460c      	mov	r4, r1
 800b594:	4616      	mov	r6, r2
 800b596:	d50f      	bpl.n	800b5b8 <_svfiprintf_r+0x34>
 800b598:	690b      	ldr	r3, [r1, #16]
 800b59a:	b96b      	cbnz	r3, 800b5b8 <_svfiprintf_r+0x34>
 800b59c:	2140      	movs	r1, #64	; 0x40
 800b59e:	f7ff ff0b 	bl	800b3b8 <_malloc_r>
 800b5a2:	6020      	str	r0, [r4, #0]
 800b5a4:	6120      	str	r0, [r4, #16]
 800b5a6:	b928      	cbnz	r0, 800b5b4 <_svfiprintf_r+0x30>
 800b5a8:	230c      	movs	r3, #12
 800b5aa:	f8c8 3000 	str.w	r3, [r8]
 800b5ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5b2:	e0c8      	b.n	800b746 <_svfiprintf_r+0x1c2>
 800b5b4:	2340      	movs	r3, #64	; 0x40
 800b5b6:	6163      	str	r3, [r4, #20]
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b5bc:	2320      	movs	r3, #32
 800b5be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5c2:	2330      	movs	r3, #48	; 0x30
 800b5c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5c8:	9503      	str	r5, [sp, #12]
 800b5ca:	f04f 0b01 	mov.w	fp, #1
 800b5ce:	4637      	mov	r7, r6
 800b5d0:	463d      	mov	r5, r7
 800b5d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b5d6:	b10b      	cbz	r3, 800b5dc <_svfiprintf_r+0x58>
 800b5d8:	2b25      	cmp	r3, #37	; 0x25
 800b5da:	d13e      	bne.n	800b65a <_svfiprintf_r+0xd6>
 800b5dc:	ebb7 0a06 	subs.w	sl, r7, r6
 800b5e0:	d00b      	beq.n	800b5fa <_svfiprintf_r+0x76>
 800b5e2:	4653      	mov	r3, sl
 800b5e4:	4632      	mov	r2, r6
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4640      	mov	r0, r8
 800b5ea:	f7ff ff71 	bl	800b4d0 <__ssputs_r>
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	f000 80a4 	beq.w	800b73c <_svfiprintf_r+0x1b8>
 800b5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f6:	4453      	add	r3, sl
 800b5f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5fa:	783b      	ldrb	r3, [r7, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f000 809d 	beq.w	800b73c <_svfiprintf_r+0x1b8>
 800b602:	2300      	movs	r3, #0
 800b604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b60c:	9304      	str	r3, [sp, #16]
 800b60e:	9307      	str	r3, [sp, #28]
 800b610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b614:	931a      	str	r3, [sp, #104]	; 0x68
 800b616:	462f      	mov	r7, r5
 800b618:	2205      	movs	r2, #5
 800b61a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b61e:	4850      	ldr	r0, [pc, #320]	; (800b760 <_svfiprintf_r+0x1dc>)
 800b620:	f7f4 fde6 	bl	80001f0 <memchr>
 800b624:	9b04      	ldr	r3, [sp, #16]
 800b626:	b9d0      	cbnz	r0, 800b65e <_svfiprintf_r+0xda>
 800b628:	06d9      	lsls	r1, r3, #27
 800b62a:	bf44      	itt	mi
 800b62c:	2220      	movmi	r2, #32
 800b62e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b632:	071a      	lsls	r2, r3, #28
 800b634:	bf44      	itt	mi
 800b636:	222b      	movmi	r2, #43	; 0x2b
 800b638:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b63c:	782a      	ldrb	r2, [r5, #0]
 800b63e:	2a2a      	cmp	r2, #42	; 0x2a
 800b640:	d015      	beq.n	800b66e <_svfiprintf_r+0xea>
 800b642:	9a07      	ldr	r2, [sp, #28]
 800b644:	462f      	mov	r7, r5
 800b646:	2000      	movs	r0, #0
 800b648:	250a      	movs	r5, #10
 800b64a:	4639      	mov	r1, r7
 800b64c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b650:	3b30      	subs	r3, #48	; 0x30
 800b652:	2b09      	cmp	r3, #9
 800b654:	d94d      	bls.n	800b6f2 <_svfiprintf_r+0x16e>
 800b656:	b1b8      	cbz	r0, 800b688 <_svfiprintf_r+0x104>
 800b658:	e00f      	b.n	800b67a <_svfiprintf_r+0xf6>
 800b65a:	462f      	mov	r7, r5
 800b65c:	e7b8      	b.n	800b5d0 <_svfiprintf_r+0x4c>
 800b65e:	4a40      	ldr	r2, [pc, #256]	; (800b760 <_svfiprintf_r+0x1dc>)
 800b660:	1a80      	subs	r0, r0, r2
 800b662:	fa0b f000 	lsl.w	r0, fp, r0
 800b666:	4318      	orrs	r0, r3
 800b668:	9004      	str	r0, [sp, #16]
 800b66a:	463d      	mov	r5, r7
 800b66c:	e7d3      	b.n	800b616 <_svfiprintf_r+0x92>
 800b66e:	9a03      	ldr	r2, [sp, #12]
 800b670:	1d11      	adds	r1, r2, #4
 800b672:	6812      	ldr	r2, [r2, #0]
 800b674:	9103      	str	r1, [sp, #12]
 800b676:	2a00      	cmp	r2, #0
 800b678:	db01      	blt.n	800b67e <_svfiprintf_r+0xfa>
 800b67a:	9207      	str	r2, [sp, #28]
 800b67c:	e004      	b.n	800b688 <_svfiprintf_r+0x104>
 800b67e:	4252      	negs	r2, r2
 800b680:	f043 0302 	orr.w	r3, r3, #2
 800b684:	9207      	str	r2, [sp, #28]
 800b686:	9304      	str	r3, [sp, #16]
 800b688:	783b      	ldrb	r3, [r7, #0]
 800b68a:	2b2e      	cmp	r3, #46	; 0x2e
 800b68c:	d10c      	bne.n	800b6a8 <_svfiprintf_r+0x124>
 800b68e:	787b      	ldrb	r3, [r7, #1]
 800b690:	2b2a      	cmp	r3, #42	; 0x2a
 800b692:	d133      	bne.n	800b6fc <_svfiprintf_r+0x178>
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	1d1a      	adds	r2, r3, #4
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	9203      	str	r2, [sp, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	bfb8      	it	lt
 800b6a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b6a4:	3702      	adds	r7, #2
 800b6a6:	9305      	str	r3, [sp, #20]
 800b6a8:	4d2e      	ldr	r5, [pc, #184]	; (800b764 <_svfiprintf_r+0x1e0>)
 800b6aa:	7839      	ldrb	r1, [r7, #0]
 800b6ac:	2203      	movs	r2, #3
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f7f4 fd9e 	bl	80001f0 <memchr>
 800b6b4:	b138      	cbz	r0, 800b6c6 <_svfiprintf_r+0x142>
 800b6b6:	2340      	movs	r3, #64	; 0x40
 800b6b8:	1b40      	subs	r0, r0, r5
 800b6ba:	fa03 f000 	lsl.w	r0, r3, r0
 800b6be:	9b04      	ldr	r3, [sp, #16]
 800b6c0:	4303      	orrs	r3, r0
 800b6c2:	3701      	adds	r7, #1
 800b6c4:	9304      	str	r3, [sp, #16]
 800b6c6:	7839      	ldrb	r1, [r7, #0]
 800b6c8:	4827      	ldr	r0, [pc, #156]	; (800b768 <_svfiprintf_r+0x1e4>)
 800b6ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6ce:	2206      	movs	r2, #6
 800b6d0:	1c7e      	adds	r6, r7, #1
 800b6d2:	f7f4 fd8d 	bl	80001f0 <memchr>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	d038      	beq.n	800b74c <_svfiprintf_r+0x1c8>
 800b6da:	4b24      	ldr	r3, [pc, #144]	; (800b76c <_svfiprintf_r+0x1e8>)
 800b6dc:	bb13      	cbnz	r3, 800b724 <_svfiprintf_r+0x1a0>
 800b6de:	9b03      	ldr	r3, [sp, #12]
 800b6e0:	3307      	adds	r3, #7
 800b6e2:	f023 0307 	bic.w	r3, r3, #7
 800b6e6:	3308      	adds	r3, #8
 800b6e8:	9303      	str	r3, [sp, #12]
 800b6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ec:	444b      	add	r3, r9
 800b6ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b6f0:	e76d      	b.n	800b5ce <_svfiprintf_r+0x4a>
 800b6f2:	fb05 3202 	mla	r2, r5, r2, r3
 800b6f6:	2001      	movs	r0, #1
 800b6f8:	460f      	mov	r7, r1
 800b6fa:	e7a6      	b.n	800b64a <_svfiprintf_r+0xc6>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	3701      	adds	r7, #1
 800b700:	9305      	str	r3, [sp, #20]
 800b702:	4619      	mov	r1, r3
 800b704:	250a      	movs	r5, #10
 800b706:	4638      	mov	r0, r7
 800b708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b70c:	3a30      	subs	r2, #48	; 0x30
 800b70e:	2a09      	cmp	r2, #9
 800b710:	d903      	bls.n	800b71a <_svfiprintf_r+0x196>
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0c8      	beq.n	800b6a8 <_svfiprintf_r+0x124>
 800b716:	9105      	str	r1, [sp, #20]
 800b718:	e7c6      	b.n	800b6a8 <_svfiprintf_r+0x124>
 800b71a:	fb05 2101 	mla	r1, r5, r1, r2
 800b71e:	2301      	movs	r3, #1
 800b720:	4607      	mov	r7, r0
 800b722:	e7f0      	b.n	800b706 <_svfiprintf_r+0x182>
 800b724:	ab03      	add	r3, sp, #12
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	4622      	mov	r2, r4
 800b72a:	4b11      	ldr	r3, [pc, #68]	; (800b770 <_svfiprintf_r+0x1ec>)
 800b72c:	a904      	add	r1, sp, #16
 800b72e:	4640      	mov	r0, r8
 800b730:	f3af 8000 	nop.w
 800b734:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b738:	4681      	mov	r9, r0
 800b73a:	d1d6      	bne.n	800b6ea <_svfiprintf_r+0x166>
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	065b      	lsls	r3, r3, #25
 800b740:	f53f af35 	bmi.w	800b5ae <_svfiprintf_r+0x2a>
 800b744:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b746:	b01d      	add	sp, #116	; 0x74
 800b748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74c:	ab03      	add	r3, sp, #12
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	4622      	mov	r2, r4
 800b752:	4b07      	ldr	r3, [pc, #28]	; (800b770 <_svfiprintf_r+0x1ec>)
 800b754:	a904      	add	r1, sp, #16
 800b756:	4640      	mov	r0, r8
 800b758:	f000 f882 	bl	800b860 <_printf_i>
 800b75c:	e7ea      	b.n	800b734 <_svfiprintf_r+0x1b0>
 800b75e:	bf00      	nop
 800b760:	0800c05c 	.word	0x0800c05c
 800b764:	0800c062 	.word	0x0800c062
 800b768:	0800c066 	.word	0x0800c066
 800b76c:	00000000 	.word	0x00000000
 800b770:	0800b4d1 	.word	0x0800b4d1

0800b774 <_printf_common>:
 800b774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b778:	4691      	mov	r9, r2
 800b77a:	461f      	mov	r7, r3
 800b77c:	688a      	ldr	r2, [r1, #8]
 800b77e:	690b      	ldr	r3, [r1, #16]
 800b780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b784:	4293      	cmp	r3, r2
 800b786:	bfb8      	it	lt
 800b788:	4613      	movlt	r3, r2
 800b78a:	f8c9 3000 	str.w	r3, [r9]
 800b78e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b792:	4606      	mov	r6, r0
 800b794:	460c      	mov	r4, r1
 800b796:	b112      	cbz	r2, 800b79e <_printf_common+0x2a>
 800b798:	3301      	adds	r3, #1
 800b79a:	f8c9 3000 	str.w	r3, [r9]
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	0699      	lsls	r1, r3, #26
 800b7a2:	bf42      	ittt	mi
 800b7a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b7a8:	3302      	addmi	r3, #2
 800b7aa:	f8c9 3000 	strmi.w	r3, [r9]
 800b7ae:	6825      	ldr	r5, [r4, #0]
 800b7b0:	f015 0506 	ands.w	r5, r5, #6
 800b7b4:	d107      	bne.n	800b7c6 <_printf_common+0x52>
 800b7b6:	f104 0a19 	add.w	sl, r4, #25
 800b7ba:	68e3      	ldr	r3, [r4, #12]
 800b7bc:	f8d9 2000 	ldr.w	r2, [r9]
 800b7c0:	1a9b      	subs	r3, r3, r2
 800b7c2:	42ab      	cmp	r3, r5
 800b7c4:	dc28      	bgt.n	800b818 <_printf_common+0xa4>
 800b7c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b7ca:	6822      	ldr	r2, [r4, #0]
 800b7cc:	3300      	adds	r3, #0
 800b7ce:	bf18      	it	ne
 800b7d0:	2301      	movne	r3, #1
 800b7d2:	0692      	lsls	r2, r2, #26
 800b7d4:	d42d      	bmi.n	800b832 <_printf_common+0xbe>
 800b7d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7da:	4639      	mov	r1, r7
 800b7dc:	4630      	mov	r0, r6
 800b7de:	47c0      	blx	r8
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	d020      	beq.n	800b826 <_printf_common+0xb2>
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	68e5      	ldr	r5, [r4, #12]
 800b7e8:	f8d9 2000 	ldr.w	r2, [r9]
 800b7ec:	f003 0306 	and.w	r3, r3, #6
 800b7f0:	2b04      	cmp	r3, #4
 800b7f2:	bf08      	it	eq
 800b7f4:	1aad      	subeq	r5, r5, r2
 800b7f6:	68a3      	ldr	r3, [r4, #8]
 800b7f8:	6922      	ldr	r2, [r4, #16]
 800b7fa:	bf0c      	ite	eq
 800b7fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b800:	2500      	movne	r5, #0
 800b802:	4293      	cmp	r3, r2
 800b804:	bfc4      	itt	gt
 800b806:	1a9b      	subgt	r3, r3, r2
 800b808:	18ed      	addgt	r5, r5, r3
 800b80a:	f04f 0900 	mov.w	r9, #0
 800b80e:	341a      	adds	r4, #26
 800b810:	454d      	cmp	r5, r9
 800b812:	d11a      	bne.n	800b84a <_printf_common+0xd6>
 800b814:	2000      	movs	r0, #0
 800b816:	e008      	b.n	800b82a <_printf_common+0xb6>
 800b818:	2301      	movs	r3, #1
 800b81a:	4652      	mov	r2, sl
 800b81c:	4639      	mov	r1, r7
 800b81e:	4630      	mov	r0, r6
 800b820:	47c0      	blx	r8
 800b822:	3001      	adds	r0, #1
 800b824:	d103      	bne.n	800b82e <_printf_common+0xba>
 800b826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b82e:	3501      	adds	r5, #1
 800b830:	e7c3      	b.n	800b7ba <_printf_common+0x46>
 800b832:	18e1      	adds	r1, r4, r3
 800b834:	1c5a      	adds	r2, r3, #1
 800b836:	2030      	movs	r0, #48	; 0x30
 800b838:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b83c:	4422      	add	r2, r4
 800b83e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b842:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b846:	3302      	adds	r3, #2
 800b848:	e7c5      	b.n	800b7d6 <_printf_common+0x62>
 800b84a:	2301      	movs	r3, #1
 800b84c:	4622      	mov	r2, r4
 800b84e:	4639      	mov	r1, r7
 800b850:	4630      	mov	r0, r6
 800b852:	47c0      	blx	r8
 800b854:	3001      	adds	r0, #1
 800b856:	d0e6      	beq.n	800b826 <_printf_common+0xb2>
 800b858:	f109 0901 	add.w	r9, r9, #1
 800b85c:	e7d8      	b.n	800b810 <_printf_common+0x9c>
	...

0800b860 <_printf_i>:
 800b860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b864:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b868:	460c      	mov	r4, r1
 800b86a:	7e09      	ldrb	r1, [r1, #24]
 800b86c:	b085      	sub	sp, #20
 800b86e:	296e      	cmp	r1, #110	; 0x6e
 800b870:	4617      	mov	r7, r2
 800b872:	4606      	mov	r6, r0
 800b874:	4698      	mov	r8, r3
 800b876:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b878:	f000 80b3 	beq.w	800b9e2 <_printf_i+0x182>
 800b87c:	d822      	bhi.n	800b8c4 <_printf_i+0x64>
 800b87e:	2963      	cmp	r1, #99	; 0x63
 800b880:	d036      	beq.n	800b8f0 <_printf_i+0x90>
 800b882:	d80a      	bhi.n	800b89a <_printf_i+0x3a>
 800b884:	2900      	cmp	r1, #0
 800b886:	f000 80b9 	beq.w	800b9fc <_printf_i+0x19c>
 800b88a:	2958      	cmp	r1, #88	; 0x58
 800b88c:	f000 8083 	beq.w	800b996 <_printf_i+0x136>
 800b890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b894:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b898:	e032      	b.n	800b900 <_printf_i+0xa0>
 800b89a:	2964      	cmp	r1, #100	; 0x64
 800b89c:	d001      	beq.n	800b8a2 <_printf_i+0x42>
 800b89e:	2969      	cmp	r1, #105	; 0x69
 800b8a0:	d1f6      	bne.n	800b890 <_printf_i+0x30>
 800b8a2:	6820      	ldr	r0, [r4, #0]
 800b8a4:	6813      	ldr	r3, [r2, #0]
 800b8a6:	0605      	lsls	r5, r0, #24
 800b8a8:	f103 0104 	add.w	r1, r3, #4
 800b8ac:	d52a      	bpl.n	800b904 <_printf_i+0xa4>
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	6011      	str	r1, [r2, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	da03      	bge.n	800b8be <_printf_i+0x5e>
 800b8b6:	222d      	movs	r2, #45	; 0x2d
 800b8b8:	425b      	negs	r3, r3
 800b8ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b8be:	486f      	ldr	r0, [pc, #444]	; (800ba7c <_printf_i+0x21c>)
 800b8c0:	220a      	movs	r2, #10
 800b8c2:	e039      	b.n	800b938 <_printf_i+0xd8>
 800b8c4:	2973      	cmp	r1, #115	; 0x73
 800b8c6:	f000 809d 	beq.w	800ba04 <_printf_i+0x1a4>
 800b8ca:	d808      	bhi.n	800b8de <_printf_i+0x7e>
 800b8cc:	296f      	cmp	r1, #111	; 0x6f
 800b8ce:	d020      	beq.n	800b912 <_printf_i+0xb2>
 800b8d0:	2970      	cmp	r1, #112	; 0x70
 800b8d2:	d1dd      	bne.n	800b890 <_printf_i+0x30>
 800b8d4:	6823      	ldr	r3, [r4, #0]
 800b8d6:	f043 0320 	orr.w	r3, r3, #32
 800b8da:	6023      	str	r3, [r4, #0]
 800b8dc:	e003      	b.n	800b8e6 <_printf_i+0x86>
 800b8de:	2975      	cmp	r1, #117	; 0x75
 800b8e0:	d017      	beq.n	800b912 <_printf_i+0xb2>
 800b8e2:	2978      	cmp	r1, #120	; 0x78
 800b8e4:	d1d4      	bne.n	800b890 <_printf_i+0x30>
 800b8e6:	2378      	movs	r3, #120	; 0x78
 800b8e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8ec:	4864      	ldr	r0, [pc, #400]	; (800ba80 <_printf_i+0x220>)
 800b8ee:	e055      	b.n	800b99c <_printf_i+0x13c>
 800b8f0:	6813      	ldr	r3, [r2, #0]
 800b8f2:	1d19      	adds	r1, r3, #4
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	6011      	str	r1, [r2, #0]
 800b8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b900:	2301      	movs	r3, #1
 800b902:	e08c      	b.n	800ba1e <_printf_i+0x1be>
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	6011      	str	r1, [r2, #0]
 800b908:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b90c:	bf18      	it	ne
 800b90e:	b21b      	sxthne	r3, r3
 800b910:	e7cf      	b.n	800b8b2 <_printf_i+0x52>
 800b912:	6813      	ldr	r3, [r2, #0]
 800b914:	6825      	ldr	r5, [r4, #0]
 800b916:	1d18      	adds	r0, r3, #4
 800b918:	6010      	str	r0, [r2, #0]
 800b91a:	0628      	lsls	r0, r5, #24
 800b91c:	d501      	bpl.n	800b922 <_printf_i+0xc2>
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	e002      	b.n	800b928 <_printf_i+0xc8>
 800b922:	0668      	lsls	r0, r5, #25
 800b924:	d5fb      	bpl.n	800b91e <_printf_i+0xbe>
 800b926:	881b      	ldrh	r3, [r3, #0]
 800b928:	4854      	ldr	r0, [pc, #336]	; (800ba7c <_printf_i+0x21c>)
 800b92a:	296f      	cmp	r1, #111	; 0x6f
 800b92c:	bf14      	ite	ne
 800b92e:	220a      	movne	r2, #10
 800b930:	2208      	moveq	r2, #8
 800b932:	2100      	movs	r1, #0
 800b934:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b938:	6865      	ldr	r5, [r4, #4]
 800b93a:	60a5      	str	r5, [r4, #8]
 800b93c:	2d00      	cmp	r5, #0
 800b93e:	f2c0 8095 	blt.w	800ba6c <_printf_i+0x20c>
 800b942:	6821      	ldr	r1, [r4, #0]
 800b944:	f021 0104 	bic.w	r1, r1, #4
 800b948:	6021      	str	r1, [r4, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d13d      	bne.n	800b9ca <_printf_i+0x16a>
 800b94e:	2d00      	cmp	r5, #0
 800b950:	f040 808e 	bne.w	800ba70 <_printf_i+0x210>
 800b954:	4665      	mov	r5, ip
 800b956:	2a08      	cmp	r2, #8
 800b958:	d10b      	bne.n	800b972 <_printf_i+0x112>
 800b95a:	6823      	ldr	r3, [r4, #0]
 800b95c:	07db      	lsls	r3, r3, #31
 800b95e:	d508      	bpl.n	800b972 <_printf_i+0x112>
 800b960:	6923      	ldr	r3, [r4, #16]
 800b962:	6862      	ldr	r2, [r4, #4]
 800b964:	429a      	cmp	r2, r3
 800b966:	bfde      	ittt	le
 800b968:	2330      	movle	r3, #48	; 0x30
 800b96a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b96e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b972:	ebac 0305 	sub.w	r3, ip, r5
 800b976:	6123      	str	r3, [r4, #16]
 800b978:	f8cd 8000 	str.w	r8, [sp]
 800b97c:	463b      	mov	r3, r7
 800b97e:	aa03      	add	r2, sp, #12
 800b980:	4621      	mov	r1, r4
 800b982:	4630      	mov	r0, r6
 800b984:	f7ff fef6 	bl	800b774 <_printf_common>
 800b988:	3001      	adds	r0, #1
 800b98a:	d14d      	bne.n	800ba28 <_printf_i+0x1c8>
 800b98c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b990:	b005      	add	sp, #20
 800b992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b996:	4839      	ldr	r0, [pc, #228]	; (800ba7c <_printf_i+0x21c>)
 800b998:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b99c:	6813      	ldr	r3, [r2, #0]
 800b99e:	6821      	ldr	r1, [r4, #0]
 800b9a0:	1d1d      	adds	r5, r3, #4
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	6015      	str	r5, [r2, #0]
 800b9a6:	060a      	lsls	r2, r1, #24
 800b9a8:	d50b      	bpl.n	800b9c2 <_printf_i+0x162>
 800b9aa:	07ca      	lsls	r2, r1, #31
 800b9ac:	bf44      	itt	mi
 800b9ae:	f041 0120 	orrmi.w	r1, r1, #32
 800b9b2:	6021      	strmi	r1, [r4, #0]
 800b9b4:	b91b      	cbnz	r3, 800b9be <_printf_i+0x15e>
 800b9b6:	6822      	ldr	r2, [r4, #0]
 800b9b8:	f022 0220 	bic.w	r2, r2, #32
 800b9bc:	6022      	str	r2, [r4, #0]
 800b9be:	2210      	movs	r2, #16
 800b9c0:	e7b7      	b.n	800b932 <_printf_i+0xd2>
 800b9c2:	064d      	lsls	r5, r1, #25
 800b9c4:	bf48      	it	mi
 800b9c6:	b29b      	uxthmi	r3, r3
 800b9c8:	e7ef      	b.n	800b9aa <_printf_i+0x14a>
 800b9ca:	4665      	mov	r5, ip
 800b9cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9d0:	fb02 3311 	mls	r3, r2, r1, r3
 800b9d4:	5cc3      	ldrb	r3, [r0, r3]
 800b9d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b9da:	460b      	mov	r3, r1
 800b9dc:	2900      	cmp	r1, #0
 800b9de:	d1f5      	bne.n	800b9cc <_printf_i+0x16c>
 800b9e0:	e7b9      	b.n	800b956 <_printf_i+0xf6>
 800b9e2:	6813      	ldr	r3, [r2, #0]
 800b9e4:	6825      	ldr	r5, [r4, #0]
 800b9e6:	6961      	ldr	r1, [r4, #20]
 800b9e8:	1d18      	adds	r0, r3, #4
 800b9ea:	6010      	str	r0, [r2, #0]
 800b9ec:	0628      	lsls	r0, r5, #24
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	d501      	bpl.n	800b9f6 <_printf_i+0x196>
 800b9f2:	6019      	str	r1, [r3, #0]
 800b9f4:	e002      	b.n	800b9fc <_printf_i+0x19c>
 800b9f6:	066a      	lsls	r2, r5, #25
 800b9f8:	d5fb      	bpl.n	800b9f2 <_printf_i+0x192>
 800b9fa:	8019      	strh	r1, [r3, #0]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	6123      	str	r3, [r4, #16]
 800ba00:	4665      	mov	r5, ip
 800ba02:	e7b9      	b.n	800b978 <_printf_i+0x118>
 800ba04:	6813      	ldr	r3, [r2, #0]
 800ba06:	1d19      	adds	r1, r3, #4
 800ba08:	6011      	str	r1, [r2, #0]
 800ba0a:	681d      	ldr	r5, [r3, #0]
 800ba0c:	6862      	ldr	r2, [r4, #4]
 800ba0e:	2100      	movs	r1, #0
 800ba10:	4628      	mov	r0, r5
 800ba12:	f7f4 fbed 	bl	80001f0 <memchr>
 800ba16:	b108      	cbz	r0, 800ba1c <_printf_i+0x1bc>
 800ba18:	1b40      	subs	r0, r0, r5
 800ba1a:	6060      	str	r0, [r4, #4]
 800ba1c:	6863      	ldr	r3, [r4, #4]
 800ba1e:	6123      	str	r3, [r4, #16]
 800ba20:	2300      	movs	r3, #0
 800ba22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba26:	e7a7      	b.n	800b978 <_printf_i+0x118>
 800ba28:	6923      	ldr	r3, [r4, #16]
 800ba2a:	462a      	mov	r2, r5
 800ba2c:	4639      	mov	r1, r7
 800ba2e:	4630      	mov	r0, r6
 800ba30:	47c0      	blx	r8
 800ba32:	3001      	adds	r0, #1
 800ba34:	d0aa      	beq.n	800b98c <_printf_i+0x12c>
 800ba36:	6823      	ldr	r3, [r4, #0]
 800ba38:	079b      	lsls	r3, r3, #30
 800ba3a:	d413      	bmi.n	800ba64 <_printf_i+0x204>
 800ba3c:	68e0      	ldr	r0, [r4, #12]
 800ba3e:	9b03      	ldr	r3, [sp, #12]
 800ba40:	4298      	cmp	r0, r3
 800ba42:	bfb8      	it	lt
 800ba44:	4618      	movlt	r0, r3
 800ba46:	e7a3      	b.n	800b990 <_printf_i+0x130>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	464a      	mov	r2, r9
 800ba4c:	4639      	mov	r1, r7
 800ba4e:	4630      	mov	r0, r6
 800ba50:	47c0      	blx	r8
 800ba52:	3001      	adds	r0, #1
 800ba54:	d09a      	beq.n	800b98c <_printf_i+0x12c>
 800ba56:	3501      	adds	r5, #1
 800ba58:	68e3      	ldr	r3, [r4, #12]
 800ba5a:	9a03      	ldr	r2, [sp, #12]
 800ba5c:	1a9b      	subs	r3, r3, r2
 800ba5e:	42ab      	cmp	r3, r5
 800ba60:	dcf2      	bgt.n	800ba48 <_printf_i+0x1e8>
 800ba62:	e7eb      	b.n	800ba3c <_printf_i+0x1dc>
 800ba64:	2500      	movs	r5, #0
 800ba66:	f104 0919 	add.w	r9, r4, #25
 800ba6a:	e7f5      	b.n	800ba58 <_printf_i+0x1f8>
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1ac      	bne.n	800b9ca <_printf_i+0x16a>
 800ba70:	7803      	ldrb	r3, [r0, #0]
 800ba72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba7a:	e76c      	b.n	800b956 <_printf_i+0xf6>
 800ba7c:	0800c06d 	.word	0x0800c06d
 800ba80:	0800c07e 	.word	0x0800c07e

0800ba84 <memmove>:
 800ba84:	4288      	cmp	r0, r1
 800ba86:	b510      	push	{r4, lr}
 800ba88:	eb01 0302 	add.w	r3, r1, r2
 800ba8c:	d807      	bhi.n	800ba9e <memmove+0x1a>
 800ba8e:	1e42      	subs	r2, r0, #1
 800ba90:	4299      	cmp	r1, r3
 800ba92:	d00a      	beq.n	800baaa <memmove+0x26>
 800ba94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba98:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ba9c:	e7f8      	b.n	800ba90 <memmove+0xc>
 800ba9e:	4283      	cmp	r3, r0
 800baa0:	d9f5      	bls.n	800ba8e <memmove+0xa>
 800baa2:	1881      	adds	r1, r0, r2
 800baa4:	1ad2      	subs	r2, r2, r3
 800baa6:	42d3      	cmn	r3, r2
 800baa8:	d100      	bne.n	800baac <memmove+0x28>
 800baaa:	bd10      	pop	{r4, pc}
 800baac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bab0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bab4:	e7f7      	b.n	800baa6 <memmove+0x22>

0800bab6 <_realloc_r>:
 800bab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab8:	4607      	mov	r7, r0
 800baba:	4614      	mov	r4, r2
 800babc:	460e      	mov	r6, r1
 800babe:	b921      	cbnz	r1, 800baca <_realloc_r+0x14>
 800bac0:	4611      	mov	r1, r2
 800bac2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bac6:	f7ff bc77 	b.w	800b3b8 <_malloc_r>
 800baca:	b922      	cbnz	r2, 800bad6 <_realloc_r+0x20>
 800bacc:	f7ff fc26 	bl	800b31c <_free_r>
 800bad0:	4625      	mov	r5, r4
 800bad2:	4628      	mov	r0, r5
 800bad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bad6:	f000 f814 	bl	800bb02 <_malloc_usable_size_r>
 800bada:	42a0      	cmp	r0, r4
 800badc:	d20f      	bcs.n	800bafe <_realloc_r+0x48>
 800bade:	4621      	mov	r1, r4
 800bae0:	4638      	mov	r0, r7
 800bae2:	f7ff fc69 	bl	800b3b8 <_malloc_r>
 800bae6:	4605      	mov	r5, r0
 800bae8:	2800      	cmp	r0, #0
 800baea:	d0f2      	beq.n	800bad2 <_realloc_r+0x1c>
 800baec:	4631      	mov	r1, r6
 800baee:	4622      	mov	r2, r4
 800baf0:	f7ff fc00 	bl	800b2f4 <memcpy>
 800baf4:	4631      	mov	r1, r6
 800baf6:	4638      	mov	r0, r7
 800baf8:	f7ff fc10 	bl	800b31c <_free_r>
 800bafc:	e7e9      	b.n	800bad2 <_realloc_r+0x1c>
 800bafe:	4635      	mov	r5, r6
 800bb00:	e7e7      	b.n	800bad2 <_realloc_r+0x1c>

0800bb02 <_malloc_usable_size_r>:
 800bb02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb06:	1f18      	subs	r0, r3, #4
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	bfbc      	itt	lt
 800bb0c:	580b      	ldrlt	r3, [r1, r0]
 800bb0e:	18c0      	addlt	r0, r0, r3
 800bb10:	4770      	bx	lr
	...

0800bb14 <_init>:
 800bb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb16:	bf00      	nop
 800bb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb1a:	bc08      	pop	{r3}
 800bb1c:	469e      	mov	lr, r3
 800bb1e:	4770      	bx	lr

0800bb20 <_fini>:
 800bb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb22:	bf00      	nop
 800bb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb26:	bc08      	pop	{r3}
 800bb28:	469e      	mov	lr, r3
 800bb2a:	4770      	bx	lr
