
53xLidar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08007670  08007670  00017670  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080079d0  080079d0  000179d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080079d8  080079d8  000179d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080079dc  080079dc  000179dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000224  20000000  080079e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000559c  20000224  08007c04  00020224  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200057c0  08007c04  000257c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003d8d2  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005970  00000000  00000000  0005db26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000141bb  00000000  00000000  00063496  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001520  00000000  00000000  00077658  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001ab0  00000000  00000000  00078b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c801  00000000  00000000  0007a628  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000a722  00000000  00000000  00086e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0009154b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003fac  00000000  00000000  000915c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000224 	.word	0x20000224
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007658 	.word	0x08007658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000228 	.word	0x20000228
 80001dc:	08007658 	.word	0x08007658

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f8a8 	bl	800070c <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f85e 	bl	800068c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	20000158 	.word	0x20000158
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f82f 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f003 fc3a 	bl	8003e88 <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000250 	.word	0x20000250
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000250 	.word	0x20000250

08000640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000640:	b538      	push	{r3, r4, r5, lr}
 8000642:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000644:	f7ff fff6 	bl	8000634 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000648:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800064a:	bf1c      	itt	ne
 800064c:	4b05      	ldrne	r3, [pc, #20]	; (8000664 <HAL_Delay+0x24>)
 800064e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000650:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000652:	bf18      	it	ne
 8000654:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000656:	f7ff ffed 	bl	8000634 <HAL_GetTick>
 800065a:	1b40      	subs	r0, r0, r5
 800065c:	4284      	cmp	r4, r0
 800065e:	d8fa      	bhi.n	8000656 <HAL_Delay+0x16>
  {
  }
}
 8000660:	bd38      	pop	{r3, r4, r5, pc}
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800066a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000670:	041b      	lsls	r3, r3, #16
 8000672:	0c1b      	lsrs	r3, r3, #16
 8000674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000678:	0200      	lsls	r0, r0, #8
 800067a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000682:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000684:	60d3      	str	r3, [r2, #12]
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	68dc      	ldr	r4, [r3, #12]
 8000692:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000696:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800069c:	2b04      	cmp	r3, #4
 800069e:	bf28      	it	cs
 80006a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	f04f 0501 	mov.w	r5, #1
 80006a8:	fa05 f303 	lsl.w	r3, r5, r3
 80006ac:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b0:	bf8c      	ite	hi
 80006b2:	3c03      	subhi	r4, #3
 80006b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b6:	4019      	ands	r1, r3
 80006b8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ba:	fa05 f404 	lsl.w	r4, r5, r4
 80006be:	3c01      	subs	r4, #1
 80006c0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	ea42 0201 	orr.w	r2, r2, r1
 80006c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	bfaf      	iteee	ge
 80006ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	f000 000f 	andlt.w	r0, r0, #15
 80006d6:	4b06      	ldrlt	r3, [pc, #24]	; (80006f0 <HAL_NVIC_SetPriority+0x64>)
 80006d8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	bfa5      	ittet	ge
 80006dc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006e0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000ed14 	.word	0xe000ed14

080006f4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006f4:	0942      	lsrs	r2, r0, #5
 80006f6:	2301      	movs	r3, #1
 80006f8:	f000 001f 	and.w	r0, r0, #31
 80006fc:	fa03 f000 	lsl.w	r0, r3, r0
 8000700:	4b01      	ldr	r3, [pc, #4]	; (8000708 <HAL_NVIC_EnableIRQ+0x14>)
 8000702:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000706:	4770      	bx	lr
 8000708:	e000e100 	.word	0xe000e100

0800070c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800070c:	3801      	subs	r0, #1
 800070e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000712:	d20a      	bcs.n	800072a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	4a07      	ldr	r2, [pc, #28]	; (8000734 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000718:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071a:	21f0      	movs	r1, #240	; 0xf0
 800071c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000720:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000722:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000724:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800072a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000e010 	.word	0xe000e010
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800073a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800073c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800073e:	bf0c      	ite	eq
 8000740:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000744:	f022 0204 	bicne.w	r2, r2, #4
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	4770      	bx	lr
 800074c:	e000e010 	.word	0xe000e010

08000750 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000750:	4770      	bx	lr

08000752 <HAL_SYSTICK_IRQHandler>:
{
 8000752:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000754:	f7ff fffc 	bl	8000750 <HAL_SYSTICK_Callback>
 8000758:	bd08      	pop	{r3, pc}

0800075a <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800075a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800075e:	2b02      	cmp	r3, #2
 8000760:	d003      	beq.n	800076a <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000766:	2001      	movs	r0, #1
 8000768:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800076a:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800076c:	2305      	movs	r3, #5
 800076e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000772:	6813      	ldr	r3, [r2, #0]
 8000774:	f023 0301 	bic.w	r3, r3, #1
 8000778:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800077a:	2000      	movs	r0, #0
}
 800077c:	4770      	bx	lr
	...

08000780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000784:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000786:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000788:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000928 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800078c:	4a64      	ldr	r2, [pc, #400]	; (8000920 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800078e:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000790:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000794:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000796:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000798:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800079c:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 80007a0:	42b7      	cmp	r7, r6
 80007a2:	f040 80ad 	bne.w	8000900 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007a6:	684c      	ldr	r4, [r1, #4]
 80007a8:	f024 0a10 	bic.w	sl, r4, #16
 80007ac:	f1ba 0f02 	cmp.w	sl, #2
 80007b0:	d116      	bne.n	80007e0 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 80007b2:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80007b6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007ba:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80007be:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007c2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007c6:	f04f 0e0f 	mov.w	lr, #15
 80007ca:	fa0e fe0b 	lsl.w	lr, lr, fp
 80007ce:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007d2:	690d      	ldr	r5, [r1, #16]
 80007d4:	fa05 f50b 	lsl.w	r5, r5, fp
 80007d8:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80007dc:	f8cc 5020 	str.w	r5, [ip, #32]
 80007e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007e4:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007e6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007ea:	fa05 f50c 	lsl.w	r5, r5, ip
 80007ee:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007f0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007f4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007f8:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007fc:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000800:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000804:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000808:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 800080a:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800080e:	d815      	bhi.n	800083c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000810:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000814:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000818:	68cd      	ldr	r5, [r1, #12]
 800081a:	fa05 fa0c 	lsl.w	sl, r5, ip
 800081e:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000822:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000826:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800082a:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800082e:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000832:	fa0e fe03 	lsl.w	lr, lr, r3
 8000836:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 800083a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800083c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800083e:	9d00      	ldr	r5, [sp, #0]
 8000840:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000842:	688f      	ldr	r7, [r1, #8]
 8000844:	fa07 f70c 	lsl.w	r7, r7, ip
 8000848:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800084a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800084c:	00e5      	lsls	r5, r4, #3
 800084e:	d557      	bpl.n	8000900 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000850:	f04f 0b00 	mov.w	fp, #0
 8000854:	f8cd b00c 	str.w	fp, [sp, #12]
 8000858:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800085c:	4d31      	ldr	r5, [pc, #196]	; (8000924 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000862:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000866:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800086a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800086e:	9703      	str	r7, [sp, #12]
 8000870:	9f03      	ldr	r7, [sp, #12]
 8000872:	f023 0703 	bic.w	r7, r3, #3
 8000876:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800087a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800087e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000882:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000886:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800088a:	f04f 0e0f 	mov.w	lr, #15
 800088e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000892:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000894:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000898:	d039      	beq.n	800090e <HAL_GPIO_Init+0x18e>
 800089a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800089e:	42a8      	cmp	r0, r5
 80008a0:	d037      	beq.n	8000912 <HAL_GPIO_Init+0x192>
 80008a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008a6:	42a8      	cmp	r0, r5
 80008a8:	d035      	beq.n	8000916 <HAL_GPIO_Init+0x196>
 80008aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008ae:	42a8      	cmp	r0, r5
 80008b0:	d033      	beq.n	800091a <HAL_GPIO_Init+0x19a>
 80008b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008b6:	42a8      	cmp	r0, r5
 80008b8:	bf14      	ite	ne
 80008ba:	2507      	movne	r5, #7
 80008bc:	2504      	moveq	r5, #4
 80008be:	fa05 f50c 	lsl.w	r5, r5, ip
 80008c2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008c6:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80008c8:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80008ca:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008cc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80008d0:	bf0c      	ite	eq
 80008d2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008d4:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80008d6:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80008d8:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008da:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008de:	bf0c      	ite	eq
 80008e0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008e2:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80008e4:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008e6:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008e8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008ec:	bf0c      	ite	eq
 80008ee:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008f0:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008f2:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008f4:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008f6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008f8:	bf54      	ite	pl
 80008fa:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008fc:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008fe:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000900:	3301      	adds	r3, #1
 8000902:	2b10      	cmp	r3, #16
 8000904:	f47f af47 	bne.w	8000796 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000908:	b005      	add	sp, #20
 800090a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800090e:	465d      	mov	r5, fp
 8000910:	e7d5      	b.n	80008be <HAL_GPIO_Init+0x13e>
 8000912:	2501      	movs	r5, #1
 8000914:	e7d3      	b.n	80008be <HAL_GPIO_Init+0x13e>
 8000916:	2502      	movs	r5, #2
 8000918:	e7d1      	b.n	80008be <HAL_GPIO_Init+0x13e>
 800091a:	2503      	movs	r5, #3
 800091c:	e7cf      	b.n	80008be <HAL_GPIO_Init+0x13e>
 800091e:	bf00      	nop
 8000920:	40013c00 	.word	0x40013c00
 8000924:	40020000 	.word	0x40020000
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800092c:	b10a      	cbz	r2, 8000932 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800092e:	6181      	str	r1, [r0, #24]
 8000930:	4770      	bx	lr
 8000932:	0409      	lsls	r1, r1, #16
 8000934:	e7fb      	b.n	800092e <HAL_GPIO_WritePin+0x2>

08000936 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000936:	6802      	ldr	r2, [r0, #0]
 8000938:	6953      	ldr	r3, [r2, #20]
 800093a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800093e:	d00d      	beq.n	800095c <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000940:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000944:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000946:	2304      	movs	r3, #4
 8000948:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800094a:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800094c:	2300      	movs	r3, #0
 800094e:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000950:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000954:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8000958:	2001      	movs	r0, #1
 800095a:	4770      	bx	lr
  }
  return HAL_OK;
 800095c:	4618      	mov	r0, r3
}
 800095e:	4770      	bx	lr

08000960 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000964:	4604      	mov	r4, r0
 8000966:	4617      	mov	r7, r2
 8000968:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800096a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800096e:	b28e      	uxth	r6, r1
 8000970:	6825      	ldr	r5, [r4, #0]
 8000972:	f1b8 0f01 	cmp.w	r8, #1
 8000976:	bf0c      	ite	eq
 8000978:	696b      	ldreq	r3, [r5, #20]
 800097a:	69ab      	ldrne	r3, [r5, #24]
 800097c:	ea36 0303 	bics.w	r3, r6, r3
 8000980:	bf14      	ite	ne
 8000982:	2001      	movne	r0, #1
 8000984:	2000      	moveq	r0, #0
 8000986:	b908      	cbnz	r0, 800098c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800098c:	696b      	ldr	r3, [r5, #20]
 800098e:	055a      	lsls	r2, r3, #21
 8000990:	d512      	bpl.n	80009b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000992:	682b      	ldr	r3, [r5, #0]
 8000994:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000998:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800099a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800099e:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80009a0:	2304      	movs	r3, #4
 80009a2:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80009a4:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80009aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80009ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80009b2:	2001      	movs	r0, #1
 80009b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80009b8:	1c7b      	adds	r3, r7, #1
 80009ba:	d0d9      	beq.n	8000970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80009bc:	b94f      	cbnz	r7, 80009d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80009be:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80009c0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80009c2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80009c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80009c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80009cc:	2003      	movs	r0, #3
 80009ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80009d2:	f7ff fe2f 	bl	8000634 <HAL_GetTick>
 80009d6:	eba0 0009 	sub.w	r0, r0, r9
 80009da:	4287      	cmp	r7, r0
 80009dc:	d2c8      	bcs.n	8000970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80009de:	e7ee      	b.n	80009be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080009e0 <I2C_WaitOnFlagUntilTimeout>:
{
 80009e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009e4:	9e08      	ldr	r6, [sp, #32]
 80009e6:	4604      	mov	r4, r0
 80009e8:	4690      	mov	r8, r2
 80009ea:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80009ec:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80009f0:	b28d      	uxth	r5, r1
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	f1b9 0f01 	cmp.w	r9, #1
 80009f8:	bf0c      	ite	eq
 80009fa:	695b      	ldreq	r3, [r3, #20]
 80009fc:	699b      	ldrne	r3, [r3, #24]
 80009fe:	ea35 0303 	bics.w	r3, r5, r3
 8000a02:	bf0c      	ite	eq
 8000a04:	2301      	moveq	r3, #1
 8000a06:	2300      	movne	r3, #0
 8000a08:	4543      	cmp	r3, r8
 8000a0a:	d002      	beq.n	8000a12 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000a0c:	2000      	movs	r0, #0
}
 8000a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000a12:	1c7b      	adds	r3, r7, #1
 8000a14:	d0ed      	beq.n	80009f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000a16:	b95f      	cbnz	r7, 8000a30 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000a18:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000a1a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000a1c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000a1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000a22:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000a26:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a28:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000a30:	f7ff fe00 	bl	8000634 <HAL_GetTick>
 8000a34:	1b80      	subs	r0, r0, r6
 8000a36:	4287      	cmp	r7, r0
 8000a38:	d2db      	bcs.n	80009f2 <I2C_WaitOnFlagUntilTimeout+0x12>
 8000a3a:	e7ed      	b.n	8000a18 <I2C_WaitOnFlagUntilTimeout+0x38>

08000a3c <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8000a3c:	b570      	push	{r4, r5, r6, lr}
 8000a3e:	4604      	mov	r4, r0
 8000a40:	460d      	mov	r5, r1
 8000a42:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000a44:	6823      	ldr	r3, [r4, #0]
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	061b      	lsls	r3, r3, #24
 8000a4a:	d501      	bpl.n	8000a50 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000a50:	4620      	mov	r0, r4
 8000a52:	f7ff ff70 	bl	8000936 <I2C_IsAcknowledgeFailed>
 8000a56:	b9a8      	cbnz	r0, 8000a84 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000a58:	1c6a      	adds	r2, r5, #1
 8000a5a:	d0f3      	beq.n	8000a44 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000a5c:	b965      	cbnz	r5, 8000a78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a60:	f043 0320 	orr.w	r3, r3, #32
 8000a64:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000a66:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000a6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000a70:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000a74:	2003      	movs	r0, #3
 8000a76:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000a78:	f7ff fddc 	bl	8000634 <HAL_GetTick>
 8000a7c:	1b80      	subs	r0, r0, r6
 8000a7e:	4285      	cmp	r5, r0
 8000a80:	d2e0      	bcs.n	8000a44 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000a82:	e7ec      	b.n	8000a5e <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000a84:	2001      	movs	r0, #1
}
 8000a86:	bd70      	pop	{r4, r5, r6, pc}

08000a88 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	460d      	mov	r5, r1
 8000a8e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000a90:	6820      	ldr	r0, [r4, #0]
 8000a92:	6943      	ldr	r3, [r0, #20]
 8000a94:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000a98:	d001      	beq.n	8000a9e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000a9a:	2000      	movs	r0, #0
}
 8000a9c:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000a9e:	6942      	ldr	r2, [r0, #20]
 8000aa0:	06d2      	lsls	r2, r2, #27
 8000aa2:	d50b      	bpl.n	8000abc <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000aa4:	f06f 0210 	mvn.w	r2, #16
 8000aa8:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8000aaa:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000aac:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000aae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8000ab2:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8000ab4:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8000ab6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000aba:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000abc:	b95d      	cbnz	r5, 8000ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000abe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ac0:	f043 0320 	orr.w	r3, r3, #32
 8000ac4:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8000acc:	2300      	movs	r3, #0
 8000ace:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ad6:	f7ff fdad 	bl	8000634 <HAL_GetTick>
 8000ada:	1b80      	subs	r0, r0, r6
 8000adc:	4285      	cmp	r5, r0
 8000ade:	d2d7      	bcs.n	8000a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8000ae0:	e7ed      	b.n	8000abe <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08000ae2 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8000ae2:	b570      	push	{r4, r5, r6, lr}
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460d      	mov	r5, r1
 8000ae8:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000aea:	6823      	ldr	r3, [r4, #0]
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	075b      	lsls	r3, r3, #29
 8000af0:	d501      	bpl.n	8000af6 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000af2:	2000      	movs	r0, #0
 8000af4:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000af6:	4620      	mov	r0, r4
 8000af8:	f7ff ff1d 	bl	8000936 <I2C_IsAcknowledgeFailed>
 8000afc:	b9a8      	cbnz	r0, 8000b2a <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000afe:	1c6a      	adds	r2, r5, #1
 8000b00:	d0f3      	beq.n	8000aea <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000b02:	b965      	cbnz	r5, 8000b1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000b04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b06:	f043 0320 	orr.w	r3, r3, #32
 8000b0a:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000b0c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000b12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000b16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000b1e:	f7ff fd89 	bl	8000634 <HAL_GetTick>
 8000b22:	1b80      	subs	r0, r0, r6
 8000b24:	4285      	cmp	r5, r0
 8000b26:	d2e0      	bcs.n	8000aea <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8000b28:	e7ec      	b.n	8000b04 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000b2a:	2001      	movs	r0, #1
}
 8000b2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000b30 <HAL_I2C_Init>:
{
 8000b30:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8000b32:	4604      	mov	r4, r0
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d062      	beq.n	8000bfe <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000b38:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000b3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b40:	b91b      	cbnz	r3, 8000b4a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000b42:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000b46:	f003 f9e7 	bl	8003f18 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8000b4a:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000b4c:	4e2d      	ldr	r6, [pc, #180]	; (8000c04 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000b4e:	4d2e      	ldr	r5, [pc, #184]	; (8000c08 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b50:	2324      	movs	r3, #36	; 0x24
 8000b52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000b56:	6813      	ldr	r3, [r2, #0]
 8000b58:	f023 0301 	bic.w	r3, r3, #1
 8000b5c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b5e:	f001 f9f3 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000b62:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8000b64:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000b66:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000b6a:	42b3      	cmp	r3, r6
 8000b6c:	bf84      	itt	hi
 8000b6e:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8000b72:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8000b74:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000b76:	bf91      	iteee	ls
 8000b78:	1c69      	addls	r1, r5, #1
 8000b7a:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8000b7e:	fbb1 f1f5 	udivhi	r1, r1, r5
 8000b82:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000b84:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000b86:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000b88:	d821      	bhi.n	8000bce <HAL_I2C_Init+0x9e>
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b90:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	bf98      	it	ls
 8000b98:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b9a:	6a21      	ldr	r1, [r4, #32]
 8000b9c:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000b9e:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ba0:	430b      	orrs	r3, r1
 8000ba2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000ba4:	68e1      	ldr	r1, [r4, #12]
 8000ba6:	6923      	ldr	r3, [r4, #16]
 8000ba8:	430b      	orrs	r3, r1
 8000baa:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000bac:	69a1      	ldr	r1, [r4, #24]
 8000bae:	6963      	ldr	r3, [r4, #20]
 8000bb0:	430b      	orrs	r3, r1
 8000bb2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000bb4:	6813      	ldr	r3, [r2, #0]
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bbc:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000bbe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bc0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000bc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000bc6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bc8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000bce:	68a1      	ldr	r1, [r4, #8]
 8000bd0:	b949      	cbnz	r1, 8000be6 <HAL_I2C_Init+0xb6>
 8000bd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000bd6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bda:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000bde:	b163      	cbz	r3, 8000bfa <HAL_I2C_Init+0xca>
 8000be0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000be4:	e7d9      	b.n	8000b9a <HAL_I2C_Init+0x6a>
 8000be6:	2119      	movs	r1, #25
 8000be8:	434b      	muls	r3, r1
 8000bea:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bee:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000bf2:	b113      	cbz	r3, 8000bfa <HAL_I2C_Init+0xca>
 8000bf4:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000bf8:	e7cf      	b.n	8000b9a <HAL_I2C_Init+0x6a>
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	e7cd      	b.n	8000b9a <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8000bfe:	2001      	movs	r0, #1
}
 8000c00:	bd70      	pop	{r4, r5, r6, pc}
 8000c02:	bf00      	nop
 8000c04:	000186a0 	.word	0x000186a0
 8000c08:	000f4240 	.word	0x000f4240

08000c0c <HAL_I2C_Master_Transmit>:
{
 8000c0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000c10:	4604      	mov	r4, r0
 8000c12:	461f      	mov	r7, r3
 8000c14:	460d      	mov	r5, r1
 8000c16:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8000c18:	f7ff fd0c 	bl	8000634 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000c1c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000c20:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8000c22:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000c24:	d004      	beq.n	8000c30 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8000c26:	2502      	movs	r5, #2
}
 8000c28:	4628      	mov	r0, r5
 8000c2a:	b004      	add	sp, #16
 8000c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000c30:	9000      	str	r0, [sp, #0]
 8000c32:	2319      	movs	r3, #25
 8000c34:	2201      	movs	r2, #1
 8000c36:	495d      	ldr	r1, [pc, #372]	; (8000dac <HAL_I2C_Master_Transmit+0x1a0>)
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f7ff fed1 	bl	80009e0 <I2C_WaitOnFlagUntilTimeout>
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	d1f1      	bne.n	8000c26 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000c42:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d0ed      	beq.n	8000c26 <HAL_I2C_Master_Transmit+0x1a>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000c50:	6823      	ldr	r3, [r4, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000c56:	bf5e      	ittt	pl
 8000c58:	681a      	ldrpl	r2, [r3, #0]
 8000c5a:	f042 0201 	orrpl.w	r2, r2, #1
 8000c5e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c66:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000c68:	2221      	movs	r2, #33	; 0x21
 8000c6a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000c6e:	2210      	movs	r2, #16
 8000c70:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c74:	2200      	movs	r2, #0
 8000c76:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000c78:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8000c7c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000c7e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000c80:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000c82:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000c84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8000c86:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000c8a:	2a04      	cmp	r2, #4
 8000c8c:	d004      	beq.n	8000c98 <HAL_I2C_Master_Transmit+0x8c>
 8000c8e:	2a01      	cmp	r2, #1
 8000c90:	d002      	beq.n	8000c98 <HAL_I2C_Master_Transmit+0x8c>
 8000c92:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000c96:	d104      	bne.n	8000ca2 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	e002      	b.n	8000ca8 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000ca2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ca4:	2a12      	cmp	r2, #18
 8000ca6:	d0f7      	beq.n	8000c98 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ca8:	9600      	str	r6, [sp, #0]
 8000caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000cac:	2200      	movs	r2, #0
 8000cae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f7ff fe94 	bl	80009e0 <I2C_WaitOnFlagUntilTimeout>
 8000cb8:	bb28      	cbnz	r0, 8000d06 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cba:	6923      	ldr	r3, [r4, #16]
 8000cbc:	6822      	ldr	r2, [r4, #0]
 8000cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cc2:	d112      	bne.n	8000cea <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000cc4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000cc8:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000cca:	4633      	mov	r3, r6
 8000ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000cce:	4938      	ldr	r1, [pc, #224]	; (8000db0 <HAL_I2C_Master_Transmit+0x1a4>)
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f7ff fe45 	bl	8000960 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000cd6:	4605      	mov	r5, r0
 8000cd8:	b9a0      	cbnz	r0, 8000d04 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	9003      	str	r0, [sp, #12]
 8000cde:	695a      	ldr	r2, [r3, #20]
 8000ce0:	9203      	str	r2, [sp, #12]
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	9303      	str	r3, [sp, #12]
 8000ce6:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8000ce8:	e050      	b.n	8000d8c <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000cea:	11eb      	asrs	r3, r5, #7
 8000cec:	f003 0306 	and.w	r3, r3, #6
 8000cf0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000cf4:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000cf6:	492f      	ldr	r1, [pc, #188]	; (8000db4 <HAL_I2C_Master_Transmit+0x1a8>)
 8000cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000cfa:	4633      	mov	r3, r6
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f7ff fe2f 	bl	8000960 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000d02:	b148      	cbz	r0, 8000d18 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d04:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	d107      	bne.n	8000d20 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8000d10:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000d14:	2501      	movs	r5, #1
 8000d16:	e787      	b.n	8000c28 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000d18:	6823      	ldr	r3, [r4, #0]
 8000d1a:	b2ed      	uxtb	r5, r5
 8000d1c:	611d      	str	r5, [r3, #16]
 8000d1e:	e7d4      	b.n	8000cca <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8000d20:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8000d24:	2503      	movs	r5, #3
 8000d26:	e77f      	b.n	8000c28 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d28:	4632      	mov	r2, r6
 8000d2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	f7ff fe85 	bl	8000a3c <I2C_WaitOnTXEFlagUntilTimeout>
 8000d32:	b140      	cbz	r0, 8000d46 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d1f4      	bne.n	8000d24 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000d3a:	6822      	ldr	r2, [r4, #0]
 8000d3c:	6813      	ldr	r3, [r2, #0]
 8000d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	e7e6      	b.n	8000d14 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000d46:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000d48:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 8000d4a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000d4c:	1c4b      	adds	r3, r1, #1
 8000d4e:	6263      	str	r3, [r4, #36]	; 0x24
 8000d50:	780b      	ldrb	r3, [r1, #0]
 8000d52:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8000d54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d56:	3b01      	subs	r3, #1
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000d5c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000d5e:	1e53      	subs	r3, r2, #1
 8000d60:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000d62:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000d64:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000d66:	d50a      	bpl.n	8000d7e <HAL_I2C_Master_Transmit+0x172>
 8000d68:	b14b      	cbz	r3, 8000d7e <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000d6a:	1c8b      	adds	r3, r1, #2
 8000d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8000d6e:	784b      	ldrb	r3, [r1, #1]
 8000d70:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8000d72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d74:	3b01      	subs	r3, #1
 8000d76:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8000d78:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8000d7a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000d7c:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d7e:	4632      	mov	r2, r6
 8000d80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d82:	4620      	mov	r0, r4
 8000d84:	f7ff fead 	bl	8000ae2 <I2C_WaitOnBTFFlagUntilTimeout>
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	d1d3      	bne.n	8000d34 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8000d8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1ca      	bne.n	8000d28 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000d92:	6821      	ldr	r1, [r4, #0]
 8000d94:	680a      	ldr	r2, [r1, #0]
 8000d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d9a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000d9c:	2220      	movs	r2, #32
 8000d9e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000da2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000da6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000daa:	e73d      	b.n	8000c28 <HAL_I2C_Master_Transmit+0x1c>
 8000dac:	00100002 	.word	0x00100002
 8000db0:	00010002 	.word	0x00010002
 8000db4:	00010008 	.word	0x00010008

08000db8 <HAL_I2C_Master_Receive>:
{
 8000db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dbc:	4604      	mov	r4, r0
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4691      	mov	r9, r2
 8000dc6:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8000dc8:	f7ff fc34 	bl	8000634 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000dcc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000dd0:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8000dd2:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000dd4:	d004      	beq.n	8000de0 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8000dd6:	2502      	movs	r5, #2
}
 8000dd8:	4628      	mov	r0, r5
 8000dda:	b009      	add	sp, #36	; 0x24
 8000ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000de0:	9000      	str	r0, [sp, #0]
 8000de2:	2319      	movs	r3, #25
 8000de4:	2201      	movs	r2, #1
 8000de6:	499c      	ldr	r1, [pc, #624]	; (8001058 <HAL_I2C_Master_Receive+0x2a0>)
 8000de8:	4620      	mov	r0, r4
 8000dea:	f7ff fdf9 	bl	80009e0 <I2C_WaitOnFlagUntilTimeout>
 8000dee:	2800      	cmp	r0, #0
 8000df0:	d1f1      	bne.n	8000dd6 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8000df2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d0ed      	beq.n	8000dd6 <HAL_I2C_Master_Receive+0x1e>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e00:	6823      	ldr	r3, [r4, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000e06:	bf5e      	ittt	pl
 8000e08:	681a      	ldrpl	r2, [r3, #0]
 8000e0a:	f042 0201 	orrpl.w	r2, r2, #1
 8000e0e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e16:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000e18:	2222      	movs	r2, #34	; 0x22
 8000e1a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e1e:	2210      	movs	r2, #16
 8000e20:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e24:	2200      	movs	r2, #0
 8000e26:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e28:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8000e2c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e30:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000e32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000e34:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000e36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000e38:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 8000e3a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000e3e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000e42:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000e44:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000e46:	d004      	beq.n	8000e52 <HAL_I2C_Master_Receive+0x9a>
 8000e48:	2a01      	cmp	r2, #1
 8000e4a:	d002      	beq.n	8000e52 <HAL_I2C_Master_Receive+0x9a>
 8000e4c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000e50:	d104      	bne.n	8000e5c <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e002      	b.n	8000e62 <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8000e5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e5e:	2a11      	cmp	r2, #17
 8000e60:	d0f7      	beq.n	8000e52 <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e62:	9600      	str	r6, [sp, #0]
 8000e64:	463b      	mov	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff fdb7 	bl	80009e0 <I2C_WaitOnFlagUntilTimeout>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d14a      	bne.n	8000f0c <HAL_I2C_Master_Receive+0x154>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e76:	6923      	ldr	r3, [r4, #16]
 8000e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	d136      	bne.n	8000eee <HAL_I2C_Master_Receive+0x136>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000e80:	f045 0501 	orr.w	r5, r5, #1
 8000e84:	b2ed      	uxtb	r5, r5
 8000e86:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000e88:	4633      	mov	r3, r6
 8000e8a:	463a      	mov	r2, r7
 8000e8c:	4973      	ldr	r1, [pc, #460]	; (800105c <HAL_I2C_Master_Receive+0x2a4>)
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f7ff fd66 	bl	8000960 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000e94:	4605      	mov	r5, r0
 8000e96:	2800      	cmp	r0, #0
 8000e98:	d137      	bne.n	8000f0a <HAL_I2C_Master_Receive+0x152>
    if(hi2c->XferSize == 0U)
 8000e9a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d066      	beq.n	8000f70 <HAL_I2C_Master_Receive+0x1b8>
    else if(hi2c->XferSize == 1U)
 8000ea2:	2a01      	cmp	r2, #1
 8000ea4:	d177      	bne.n	8000f96 <HAL_I2C_Master_Receive+0x1de>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000eac:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000eae:	9504      	str	r5, [sp, #16]
 8000eb0:	695a      	ldr	r2, [r3, #20]
 8000eb2:	9204      	str	r2, [sp, #16]
 8000eb4:	699a      	ldr	r2, [r3, #24]
 8000eb6:	9204      	str	r2, [sp, #16]
 8000eb8:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ec0:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000ec2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001064 <HAL_I2C_Master_Receive+0x2ac>
    while(hi2c->XferSize > 0U)
 8000ec6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d05b      	beq.n	8000f84 <HAL_I2C_Master_Receive+0x1cc>
      if(hi2c->XferSize <= 3U)
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	f200 80cb 	bhi.w	8001068 <HAL_I2C_Master_Receive+0x2b0>
        if(hi2c->XferSize == 1U)
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d17a      	bne.n	8000fcc <HAL_I2C_Master_Receive+0x214>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8000ed6:	4632      	mov	r2, r6
 8000ed8:	4639      	mov	r1, r7
 8000eda:	4620      	mov	r0, r4
 8000edc:	f7ff fdd4 	bl	8000a88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	f000 8090 	beq.w	8001006 <HAL_I2C_Master_Receive+0x24e>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8000ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ee8:	2b20      	cmp	r3, #32
 8000eea:	d116      	bne.n	8000f1a <HAL_I2C_Master_Receive+0x162>
 8000eec:	e03e      	b.n	8000f6c <HAL_I2C_Master_Receive+0x1b4>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000eee:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8000ef2:	f008 0806 	and.w	r8, r8, #6
 8000ef6:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8000efa:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000efc:	4958      	ldr	r1, [pc, #352]	; (8001060 <HAL_I2C_Master_Receive+0x2a8>)
 8000efe:	4633      	mov	r3, r6
 8000f00:	463a      	mov	r2, r7
 8000f02:	4620      	mov	r0, r4
 8000f04:	f7ff fd2c 	bl	8000960 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f08:	b148      	cbz	r0, 8000f1e <HAL_I2C_Master_Receive+0x166>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	d128      	bne.n	8000f68 <HAL_I2C_Master_Receive+0x1b0>
        __HAL_UNLOCK(hi2c);
 8000f16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8000f1a:	2501      	movs	r5, #1
 8000f1c:	e75c      	b.n	8000dd8 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000f1e:	6823      	ldr	r3, [r4, #0]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f20:	494e      	ldr	r1, [pc, #312]	; (800105c <HAL_I2C_Master_Receive+0x2a4>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000f22:	b2ed      	uxtb	r5, r5
 8000f24:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f26:	463a      	mov	r2, r7
 8000f28:	4633      	mov	r3, r6
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f7ff fd18 	bl	8000960 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f30:	4602      	mov	r2, r0
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d1e9      	bne.n	8000f0a <HAL_I2C_Master_Receive+0x152>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	9007      	str	r0, [sp, #28]
 8000f3a:	6959      	ldr	r1, [r3, #20]
 8000f3c:	9107      	str	r1, [sp, #28]
 8000f3e:	6999      	ldr	r1, [r3, #24]
 8000f40:	9107      	str	r1, [sp, #28]
 8000f42:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000f44:	6819      	ldr	r1, [r3, #0]
 8000f46:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000f4a:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	9600      	str	r6, [sp, #0]
 8000f50:	463b      	mov	r3, r7
 8000f52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f56:	f7ff fd43 	bl	80009e0 <I2C_WaitOnFlagUntilTimeout>
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	d1d6      	bne.n	8000f0c <HAL_I2C_Master_Receive+0x154>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8000f64:	6113      	str	r3, [r2, #16]
 8000f66:	e78f      	b.n	8000e88 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 8000f68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 8000f6c:	2503      	movs	r5, #3
 8000f6e:	e733      	b.n	8000dd8 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f70:	9503      	str	r5, [sp, #12]
 8000f72:	695a      	ldr	r2, [r3, #20]
 8000f74:	9203      	str	r2, [sp, #12]
 8000f76:	699a      	ldr	r2, [r3, #24]
 8000f78:	9203      	str	r2, [sp, #12]
 8000f7a:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f82:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000f84:	2320      	movs	r3, #32
 8000f86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000f90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000f94:	e720      	b.n	8000dd8 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8000f96:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000f98:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8000f9a:	d10d      	bne.n	8000fb8 <HAL_I2C_Master_Receive+0x200>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fa0:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fa8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000faa:	9505      	str	r5, [sp, #20]
 8000fac:	695a      	ldr	r2, [r3, #20]
 8000fae:	9205      	str	r2, [sp, #20]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	9305      	str	r3, [sp, #20]
 8000fb4:	9b05      	ldr	r3, [sp, #20]
 8000fb6:	e784      	b.n	8000ec2 <HAL_I2C_Master_Receive+0x10a>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000fb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fbc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fbe:	9506      	str	r5, [sp, #24]
 8000fc0:	695a      	ldr	r2, [r3, #20]
 8000fc2:	9206      	str	r2, [sp, #24]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	9306      	str	r3, [sp, #24]
 8000fc8:	9b06      	ldr	r3, [sp, #24]
 8000fca:	e77a      	b.n	8000ec2 <HAL_I2C_Master_Receive+0x10a>
        else if(hi2c->XferSize == 2U)
 8000fcc:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000fce:	9600      	str	r6, [sp, #0]
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	4641      	mov	r1, r8
 8000fd8:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8000fda:	d122      	bne.n	8001022 <HAL_I2C_Master_Receive+0x26a>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000fdc:	f7ff fd00 	bl	80009e0 <I2C_WaitOnFlagUntilTimeout>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d1c3      	bne.n	8000f6c <HAL_I2C_Master_Receive+0x1b4>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fec:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000fee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	1c51      	adds	r1, r2, #1
 8000ff4:	6261      	str	r1, [r4, #36]	; 0x24
 8000ff6:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8000ff8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000ffe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001000:	3b01      	subs	r3, #1
 8001002:	b29b      	uxth	r3, r3
 8001004:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	6262      	str	r2, [r4, #36]	; 0x24
 800100c:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800100e:	6912      	ldr	r2, [r2, #16]
 8001010:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001012:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001014:	3b01      	subs	r3, #1
 8001016:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001018:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800101a:	3b01      	subs	r3, #1
 800101c:	b29b      	uxth	r3, r3
 800101e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001020:	e751      	b.n	8000ec6 <HAL_I2C_Master_Receive+0x10e>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001022:	f7ff fcdd 	bl	80009e0 <I2C_WaitOnFlagUntilTimeout>
 8001026:	4602      	mov	r2, r0
 8001028:	2800      	cmp	r0, #0
 800102a:	d19f      	bne.n	8000f6c <HAL_I2C_Master_Receive+0x1b4>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	6819      	ldr	r1, [r3, #0]
 8001030:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001034:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001036:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	1c48      	adds	r0, r1, #1
 800103c:	6260      	str	r0, [r4, #36]	; 0x24
 800103e:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8001040:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001042:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001044:	3b01      	subs	r3, #1
 8001046:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001048:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800104a:	3b01      	subs	r3, #1
 800104c:	b29b      	uxth	r3, r3
 800104e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001050:	4641      	mov	r1, r8
 8001052:	463b      	mov	r3, r7
 8001054:	4620      	mov	r0, r4
 8001056:	e7c1      	b.n	8000fdc <HAL_I2C_Master_Receive+0x224>
 8001058:	00100002 	.word	0x00100002
 800105c:	00010002 	.word	0x00010002
 8001060:	00010008 	.word	0x00010008
 8001064:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001068:	4632      	mov	r2, r6
 800106a:	4639      	mov	r1, r7
 800106c:	4620      	mov	r0, r4
 800106e:	f7ff fd0b 	bl	8000a88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001072:	2800      	cmp	r0, #0
 8001074:	f47f af37 	bne.w	8000ee6 <HAL_I2C_Master_Receive+0x12e>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	6262      	str	r2, [r4, #36]	; 0x24
 800107e:	6822      	ldr	r2, [r4, #0]
 8001080:	6912      	ldr	r2, [r2, #16]
 8001082:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001084:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001086:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001088:	3b01      	subs	r3, #1
 800108a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800108c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800108e:	3b01      	subs	r3, #1
 8001090:	b29b      	uxth	r3, r3
 8001092:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001094:	6953      	ldr	r3, [r2, #20]
 8001096:	075b      	lsls	r3, r3, #29
 8001098:	f57f af15 	bpl.w	8000ec6 <HAL_I2C_Master_Receive+0x10e>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800109c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800109e:	1c59      	adds	r1, r3, #1
 80010a0:	6261      	str	r1, [r4, #36]	; 0x24
 80010a2:	e7b4      	b.n	800100e <HAL_I2C_Master_Receive+0x256>

080010a4 <HAL_I2C_IsDeviceReady>:
{
 80010a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010a8:	4604      	mov	r4, r0
 80010aa:	b085      	sub	sp, #20
 80010ac:	4698      	mov	r8, r3
 80010ae:	4689      	mov	r9, r1
 80010b0:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 80010b2:	f7ff fabf 	bl	8000634 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80010b6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80010ba:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 80010bc:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80010be:	d003      	beq.n	80010c8 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80010c0:	2002      	movs	r0, #2
}
 80010c2:	b005      	add	sp, #20
 80010c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010c8:	9000      	str	r0, [sp, #0]
 80010ca:	2319      	movs	r3, #25
 80010cc:	2201      	movs	r2, #1
 80010ce:	494a      	ldr	r1, [pc, #296]	; (80011f8 <HAL_I2C_IsDeviceReady+0x154>)
 80010d0:	4620      	mov	r0, r4
 80010d2:	f7ff fc85 	bl	80009e0 <I2C_WaitOnFlagUntilTimeout>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d1f2      	bne.n	80010c0 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 80010da:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d0ee      	beq.n	80010c0 <HAL_I2C_IsDeviceReady+0x1c>
 80010e2:	2301      	movs	r3, #1
 80010e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010e8:	6823      	ldr	r3, [r4, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010ea:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80011f8 <HAL_I2C_IsDeviceReady+0x154>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80010f2:	bf5e      	ittt	pl
 80010f4:	681a      	ldrpl	r2, [r3, #0]
 80010f6:	f042 0201 	orrpl.w	r2, r2, #1
 80010fa:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001102:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001104:	2324      	movs	r3, #36	; 0x24
 8001106:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800110a:	2500      	movs	r5, #0
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800110c:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <HAL_I2C_IsDeviceReady+0x158>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800110e:	6425      	str	r5, [r4, #64]	; 0x40
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001110:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001114:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001116:	6822      	ldr	r2, [r4, #0]
 8001118:	6813      	ldr	r3, [r2, #0]
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001124:	9600      	str	r6, [sp, #0]
 8001126:	4643      	mov	r3, r8
 8001128:	2200      	movs	r2, #0
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff fc58 	bl	80009e0 <I2C_WaitOnFlagUntilTimeout>
 8001130:	b108      	cbz	r0, 8001136 <HAL_I2C_IsDeviceReady+0x92>
        return HAL_TIMEOUT;
 8001132:	2003      	movs	r0, #3
 8001134:	e7c5      	b.n	80010c2 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 800113c:	f7ff fa7a 	bl	8000634 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001144:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8001146:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tickstart = HAL_GetTick();
 800114a:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800114c:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001150:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 8001154:	b2db      	uxtb	r3, r3
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001156:	27a0      	movs	r7, #160	; 0xa0
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8001158:	b911      	cbnz	r1, 8001160 <HAL_I2C_IsDeviceReady+0xbc>
 800115a:	b90a      	cbnz	r2, 8001160 <HAL_I2C_IsDeviceReady+0xbc>
 800115c:	2ba0      	cmp	r3, #160	; 0xa0
 800115e:	d120      	bne.n	80011a2 <HAL_I2C_IsDeviceReady+0xfe>
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001160:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001162:	2720      	movs	r7, #32
 8001164:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001168:	695a      	ldr	r2, [r3, #20]
 800116a:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001174:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001176:	d02a      	beq.n	80011ce <HAL_I2C_IsDeviceReady+0x12a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001178:	2200      	movs	r2, #0
 800117a:	9203      	str	r2, [sp, #12]
 800117c:	695a      	ldr	r2, [r3, #20]
 800117e:	9203      	str	r2, [sp, #12]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	9303      	str	r3, [sp, #12]
 8001184:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001186:	9600      	str	r6, [sp, #0]
 8001188:	2319      	movs	r3, #25
 800118a:	2201      	movs	r2, #1
 800118c:	491a      	ldr	r1, [pc, #104]	; (80011f8 <HAL_I2C_IsDeviceReady+0x154>)
 800118e:	4620      	mov	r0, r4
 8001190:	f7ff fc26 	bl	80009e0 <I2C_WaitOnFlagUntilTimeout>
 8001194:	2800      	cmp	r0, #0
 8001196:	d1cc      	bne.n	8001132 <HAL_I2C_IsDeviceReady+0x8e>
        hi2c->State = HAL_I2C_STATE_READY;
 8001198:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800119c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 80011a0:	e78f      	b.n	80010c2 <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80011a2:	f1b8 0f00 	cmp.w	r8, #0
 80011a6:	d10c      	bne.n	80011c2 <HAL_I2C_IsDeviceReady+0x11e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80011a8:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011b0:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 80011b2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80011b6:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011ba:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	e7ca      	b.n	8001158 <HAL_I2C_IsDeviceReady+0xb4>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80011c2:	f7ff fa37 	bl	8000634 <HAL_GetTick>
 80011c6:	1b80      	subs	r0, r0, r6
 80011c8:	4580      	cmp	r8, r0
 80011ca:	d3ed      	bcc.n	80011a8 <HAL_I2C_IsDeviceReady+0x104>
 80011cc:	e7ee      	b.n	80011ac <HAL_I2C_IsDeviceReady+0x108>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80011d2:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011d4:	4659      	mov	r1, fp
 80011d6:	9600      	str	r6, [sp, #0]
 80011d8:	2319      	movs	r3, #25
 80011da:	2201      	movs	r2, #1
 80011dc:	4620      	mov	r0, r4
 80011de:	f7ff fbff 	bl	80009e0 <I2C_WaitOnFlagUntilTimeout>
 80011e2:	2800      	cmp	r0, #0
 80011e4:	d1a5      	bne.n	8001132 <HAL_I2C_IsDeviceReady+0x8e>
 80011e6:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 80011e8:	45aa      	cmp	sl, r5
 80011ea:	d894      	bhi.n	8001116 <HAL_I2C_IsDeviceReady+0x72>
    __HAL_UNLOCK(hi2c);
 80011ec:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80011f0:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 80011f4:	2001      	movs	r0, #1
 80011f6:	e764      	b.n	80010c2 <HAL_I2C_IsDeviceReady+0x1e>
 80011f8:	00100002 	.word	0x00100002
 80011fc:	ffff0000 	.word	0xffff0000

08001200 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001202:	4606      	mov	r6, r0
{ 
 8001204:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8001206:	2800      	cmp	r0, #0
 8001208:	d064      	beq.n	80012d4 <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 800120a:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 800120c:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 800120e:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8001212:	f002 ffdb 	bl	80041cc <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8001216:	f854 0b10 	ldr.w	r0, [r4], #16
 800121a:	f001 f9b5 	bl	8002588 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800121e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001220:	466d      	mov	r5, sp
 8001222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001228:	e894 0003 	ldmia.w	r4, {r0, r1}
 800122c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001230:	1d37      	adds	r7, r6, #4
 8001232:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001236:	6830      	ldr	r0, [r6, #0]
 8001238:	f001 f966 	bl	8002508 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800123c:	2100      	movs	r1, #0
 800123e:	6830      	ldr	r0, [r6, #0]
 8001240:	f001 f9a8 	bl	8002594 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8001244:	2100      	movs	r1, #0
 8001246:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8001248:	4632      	mov	r2, r6
 800124a:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 800124e:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001250:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8001252:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001256:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 8001258:	3101      	adds	r1, #1
 800125a:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 800125c:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001260:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 8001264:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 8001266:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 8001268:	64d0      	str	r0, [r2, #76]	; 0x4c
 800126a:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 800126e:	d1f0      	bne.n	8001252 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001270:	2200      	movs	r2, #0
 8001272:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 8001276:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001278:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 800127c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001280:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 8001282:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 8001286:	3201      	adds	r2, #1
 8001288:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 800128a:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800128e:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 8001292:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8001296:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 800129a:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 800129e:	6041      	str	r1, [r0, #4]
 80012a0:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 80012a4:	d1e8      	bne.n	8001278 <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80012a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a8:	466d      	mov	r5, sp
 80012aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80012b8:	4670      	mov	r0, lr
 80012ba:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80012be:	f001 f981 	bl	80025c4 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 80012c2:	2301      	movs	r3, #1
 80012c4:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 80012c8:	6830      	ldr	r0, [r6, #0]
 80012ca:	f001 fc9e 	bl	8002c0a <USB_DevDisconnect>
 return HAL_OK;
 80012ce:	2000      	movs	r0, #0
}
 80012d0:	b00b      	add	sp, #44	; 0x2c
 80012d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80012d4:	2001      	movs	r0, #1
 80012d6:	e7fb      	b.n	80012d0 <HAL_PCD_Init+0xd0>

080012d8 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 80012d8:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80012dc:	2b01      	cmp	r3, #1
{ 
 80012de:	b510      	push	{r4, lr}
 80012e0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80012e2:	d00c      	beq.n	80012fe <HAL_PCD_Start+0x26>
 80012e4:	2301      	movs	r3, #1
 80012e6:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 80012ea:	6800      	ldr	r0, [r0, #0]
 80012ec:	f001 fc81 	bl	8002bf2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80012f0:	6820      	ldr	r0, [r4, #0]
 80012f2:	f001 f943 	bl	800257c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 80012f6:	2000      	movs	r0, #0
 80012f8:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80012fc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80012fe:	2002      	movs	r0, #2
}
 8001300:	bd10      	pop	{r4, pc}
	...

08001304 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001308:	f8d0 9000 	ldr.w	r9, [r0]
{
 800130c:	b087      	sub	sp, #28
 800130e:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001310:	4648      	mov	r0, r9
 8001312:	f001 fcb4 	bl	8002c7e <USB_GetMode>
 8001316:	9002      	str	r0, [sp, #8]
 8001318:	2800      	cmp	r0, #0
 800131a:	f040 812e 	bne.w	800157a <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 800131e:	6820      	ldr	r0, [r4, #0]
 8001320:	f001 fc7f 	bl	8002c22 <USB_ReadInterrupts>
 8001324:	2800      	cmp	r0, #0
 8001326:	f000 8128 	beq.w	800157a <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800132a:	6820      	ldr	r0, [r4, #0]
 800132c:	f001 fc79 	bl	8002c22 <USB_ReadInterrupts>
 8001330:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001332:	bf48      	it	mi
 8001334:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001336:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001338:	bf42      	ittt	mi
 800133a:	6953      	ldrmi	r3, [r2, #20]
 800133c:	f003 0302 	andmi.w	r3, r3, #2
 8001340:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001342:	f001 fc6e 	bl	8002c22 <USB_ReadInterrupts>
 8001346:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 800134a:	d00a      	beq.n	8001362 <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800134c:	6820      	ldr	r0, [r4, #0]
 800134e:	f001 fc6c 	bl	8002c2a <USB_ReadDevAllOutEpInterrupt>
 8001352:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 8001356:	4607      	mov	r7, r0
 8001358:	46a2      	mov	sl, r4
      epnum = 0U;
 800135a:	2500      	movs	r5, #0
      
      while ( ep_intr )
 800135c:	2f00      	cmp	r7, #0
 800135e:	f040 810f 	bne.w	8001580 <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001362:	6820      	ldr	r0, [r4, #0]
 8001364:	f001 fc5d 	bl	8002c22 <USB_ReadInterrupts>
 8001368:	0341      	lsls	r1, r0, #13
 800136a:	d50b      	bpl.n	8001384 <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800136c:	6820      	ldr	r0, [r4, #0]
 800136e:	f001 fc64 	bl	8002c3a <USB_ReadDevAllInEpInterrupt>
 8001372:	4626      	mov	r6, r4
 8001374:	9003      	str	r0, [sp, #12]
 8001376:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 800137a:	2500      	movs	r5, #0
      
      while ( ep_intr )
 800137c:	9b03      	ldr	r3, [sp, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 813f 	bne.w	8001602 <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001384:	6820      	ldr	r0, [r4, #0]
 8001386:	f001 fc4c 	bl	8002c22 <USB_ReadInterrupts>
 800138a:	2800      	cmp	r0, #0
 800138c:	da0d      	bge.n	80013aa <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800138e:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8001392:	f023 0301 	bic.w	r3, r3, #1
 8001396:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 800139a:	4620      	mov	r0, r4
 800139c:	f002 ff8c 	bl	80042b8 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80013a0:	6822      	ldr	r2, [r4, #0]
 80013a2:	6953      	ldr	r3, [r2, #20]
 80013a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80013a8:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80013aa:	6820      	ldr	r0, [r4, #0]
 80013ac:	f001 fc39 	bl	8002c22 <USB_ReadInterrupts>
 80013b0:	0506      	lsls	r6, r0, #20
 80013b2:	d50b      	bpl.n	80013cc <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80013b4:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 80013b8:	07d8      	lsls	r0, r3, #31
 80013ba:	d502      	bpl.n	80013c2 <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80013bc:	4620      	mov	r0, r4
 80013be:	f002 ff63 	bl	8004288 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80013c2:	6822      	ldr	r2, [r4, #0]
 80013c4:	6953      	ldr	r3, [r2, #20]
 80013c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ca:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80013cc:	6820      	ldr	r0, [r4, #0]
 80013ce:	f001 fc28 	bl	8002c22 <USB_ReadInterrupts>
 80013d2:	04c1      	lsls	r1, r0, #19
 80013d4:	d537      	bpl.n	8001446 <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80013d6:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 80013da:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 80013dc:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80013de:	f023 0301 	bic.w	r3, r3, #1
 80013e2:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 80013e4:	2110      	movs	r1, #16
 80013e6:	f001 f989 	bl	80026fc <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ea:	6861      	ldr	r1, [r4, #4]
 80013ec:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80013f0:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f2:	9802      	ldr	r0, [sp, #8]
 80013f4:	4288      	cmp	r0, r1
 80013f6:	f040 8192 	bne.w	800171e <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001400:	69f3      	ldr	r3, [r6, #28]
 8001402:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001406:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8001408:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 818f 	beq.w	800172e <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8001410:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8001414:	f043 030b 	orr.w	r3, r3, #11
 8001418:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 800141c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800141e:	f043 030b 	orr.w	r3, r3, #11
 8001422:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001424:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001428:	7c21      	ldrb	r1, [r4, #16]
 800142a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800142c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001430:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001434:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001438:	f001 fc40 	bl	8002cbc <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800143c:	6822      	ldr	r2, [r4, #0]
 800143e:	6953      	ldr	r3, [r2, #20]
 8001440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001444:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001446:	6820      	ldr	r0, [r4, #0]
 8001448:	f001 fbeb 	bl	8002c22 <USB_ReadInterrupts>
 800144c:	0482      	lsls	r2, r0, #18
 800144e:	d51d      	bpl.n	800148c <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 8001450:	6820      	ldr	r0, [r4, #0]
 8001452:	f001 fc18 	bl	8002c86 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001456:	6820      	ldr	r0, [r4, #0]
 8001458:	68c3      	ldr	r3, [r0, #12]
 800145a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800145e:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8001460:	f001 f975 	bl	800274e <USB_GetDevSpeed>
 8001464:	2800      	cmp	r0, #0
 8001466:	f040 816b 	bne.w	8001740 <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 800146a:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 800146c:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 800146e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001472:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001474:	68d3      	ldr	r3, [r2, #12]
 8001476:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 800147a:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 800147c:	4620      	mov	r0, r4
 800147e:	f002 fef2 	bl	8004266 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	6953      	ldr	r3, [r2, #20]
 8001486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800148a:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800148c:	6820      	ldr	r0, [r4, #0]
 800148e:	f001 fbc8 	bl	8002c22 <USB_ReadInterrupts>
 8001492:	06c3      	lsls	r3, r0, #27
 8001494:	d52b      	bpl.n	80014ee <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001496:	6822      	ldr	r2, [r4, #0]
 8001498:	6993      	ldr	r3, [r2, #24]
 800149a:	f023 0310 	bic.w	r3, r3, #16
 800149e:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 80014a0:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 80014a4:	f3c6 4343 	ubfx	r3, r6, #17, #4
 80014a8:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80014aa:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 80014ae:	f040 81a8 	bne.w	8001802 <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014b2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014b6:	421e      	tst	r6, r3
 80014b8:	d014      	beq.n	80014e4 <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 80014ba:	271c      	movs	r7, #28
 80014bc:	fb07 4708 	mla	r7, r7, r8, r4
 80014c0:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80014c4:	4632      	mov	r2, r6
 80014c6:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 80014ca:	4648      	mov	r0, r9
 80014cc:	f001 fb3b 	bl	8002b46 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80014d0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80014d4:	4433      	add	r3, r6
 80014d6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80014da:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80014de:	441e      	add	r6, r3
 80014e0:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014e4:	6822      	ldr	r2, [r4, #0]
 80014e6:	6993      	ldr	r3, [r2, #24]
 80014e8:	f043 0310 	orr.w	r3, r3, #16
 80014ec:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80014ee:	6820      	ldr	r0, [r4, #0]
 80014f0:	f001 fb97 	bl	8002c22 <USB_ReadInterrupts>
 80014f4:	0707      	lsls	r7, r0, #28
 80014f6:	d507      	bpl.n	8001508 <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 80014f8:	4620      	mov	r0, r4
 80014fa:	f002 feb0 	bl	800425e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80014fe:	6822      	ldr	r2, [r4, #0]
 8001500:	6953      	ldr	r3, [r2, #20]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001508:	6820      	ldr	r0, [r4, #0]
 800150a:	f001 fb8a 	bl	8002c22 <USB_ReadInterrupts>
 800150e:	02c6      	lsls	r6, r0, #11
 8001510:	d508      	bpl.n	8001524 <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8001512:	b2e9      	uxtb	r1, r5
 8001514:	4620      	mov	r0, r4
 8001516:	f002 fed7 	bl	80042c8 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800151a:	6822      	ldr	r2, [r4, #0]
 800151c:	6953      	ldr	r3, [r2, #20]
 800151e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001522:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001524:	6820      	ldr	r0, [r4, #0]
 8001526:	f001 fb7c 	bl	8002c22 <USB_ReadInterrupts>
 800152a:	0280      	lsls	r0, r0, #10
 800152c:	d508      	bpl.n	8001540 <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 800152e:	b2e9      	uxtb	r1, r5
 8001530:	4620      	mov	r0, r4
 8001532:	f002 fec5 	bl	80042c0 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001536:	6822      	ldr	r2, [r4, #0]
 8001538:	6953      	ldr	r3, [r2, #20]
 800153a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153e:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001540:	6820      	ldr	r0, [r4, #0]
 8001542:	f001 fb6e 	bl	8002c22 <USB_ReadInterrupts>
 8001546:	0041      	lsls	r1, r0, #1
 8001548:	d507      	bpl.n	800155a <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800154a:	4620      	mov	r0, r4
 800154c:	f002 fec0 	bl	80042d0 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001550:	6822      	ldr	r2, [r4, #0]
 8001552:	6953      	ldr	r3, [r2, #20]
 8001554:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001558:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800155a:	6820      	ldr	r0, [r4, #0]
 800155c:	f001 fb61 	bl	8002c22 <USB_ReadInterrupts>
 8001560:	0742      	lsls	r2, r0, #29
 8001562:	d50a      	bpl.n	800157a <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001568:	076b      	lsls	r3, r5, #29
 800156a:	d502      	bpl.n	8001572 <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 800156c:	4620      	mov	r0, r4
 800156e:	f002 feb3 	bl	80042d8 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	4315      	orrs	r5, r2
 8001578:	605d      	str	r5, [r3, #4]
    }
  }
}
 800157a:	b007      	add	sp, #28
 800157c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 8001580:	07f8      	lsls	r0, r7, #31
 8001582:	d538      	bpl.n	80015f6 <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001584:	fa5f fb85 	uxtb.w	fp, r5
 8001588:	4659      	mov	r1, fp
 800158a:	6820      	ldr	r0, [r4, #0]
 800158c:	f001 fb5d 	bl	8002c4a <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001590:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001594:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001596:	d021      	beq.n	80015dc <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 8001598:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800159a:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 800159c:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800159e:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 80015a0:	d10c      	bne.n	80015bc <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 80015a2:	6931      	ldr	r1, [r6, #16]
 80015a4:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 80015a8:	f3c1 0112 	ubfx	r1, r1, #0, #19
 80015ac:	1a41      	subs	r1, r0, r1
 80015ae:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 80015b2:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 80015b6:	4408      	add	r0, r1
 80015b8:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80015bc:	4659      	mov	r1, fp
 80015be:	4620      	mov	r0, r4
 80015c0:	f002 fe3c 	bl	800423c <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 80015c4:	6921      	ldr	r1, [r4, #16]
 80015c6:	2901      	cmp	r1, #1
 80015c8:	d108      	bne.n	80015dc <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80015ca:	b93d      	cbnz	r5, 80015dc <HAL_PCD_IRQHandler+0x2d8>
 80015cc:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 80015d0:	b922      	cbnz	r2, 80015dc <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015d2:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80015d6:	6820      	ldr	r0, [r4, #0]
 80015d8:	f001 fb70 	bl	8002cbc <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015dc:	f018 0f08 	tst.w	r8, #8
 80015e0:	d004      	beq.n	80015ec <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 80015e2:	4620      	mov	r0, r4
 80015e4:	f002 fe24 	bl	8004230 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015e8:	2308      	movs	r3, #8
 80015ea:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015ec:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015f0:	bf1c      	itt	ne
 80015f2:	2310      	movne	r3, #16
 80015f4:	60b3      	strne	r3, [r6, #8]
        epnum++;
 80015f6:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80015f8:	087f      	lsrs	r7, r7, #1
 80015fa:	3620      	adds	r6, #32
 80015fc:	f10a 0a1c 	add.w	sl, sl, #28
 8001600:	e6ac      	b.n	800135c <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 8001602:	9b03      	ldr	r3, [sp, #12]
 8001604:	07da      	lsls	r2, r3, #31
 8001606:	d558      	bpl.n	80016ba <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001608:	fa5f fb85 	uxtb.w	fp, r5
 800160c:	4659      	mov	r1, fp
 800160e:	6820      	ldr	r0, [r4, #0]
 8001610:	f001 fb25 	bl	8002c5e <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001614:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001616:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001618:	d520      	bpl.n	800165c <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800161a:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 800161e:	2101      	movs	r1, #1
 8001620:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001622:	ea23 0301 	bic.w	r3, r3, r1
 8001626:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800162a:	2301      	movs	r3, #1
 800162c:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 8001630:	6923      	ldr	r3, [r4, #16]
 8001632:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001634:	bf01      	itttt	eq
 8001636:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8001638:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 800163a:	189b      	addeq	r3, r3, r2
 800163c:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800163e:	4659      	mov	r1, fp
 8001640:	4620      	mov	r0, r4
 8001642:	f002 fe04 	bl	800424e <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8001646:	6921      	ldr	r1, [r4, #16]
 8001648:	2901      	cmp	r1, #1
 800164a:	d107      	bne.n	800165c <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800164c:	b935      	cbnz	r5, 800165c <HAL_PCD_IRQHandler+0x358>
 800164e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001650:	b923      	cbnz	r3, 800165c <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001652:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001656:	6820      	ldr	r0, [r4, #0]
 8001658:	f001 fb30 	bl	8002cbc <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800165c:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800165e:	bf44      	itt	mi
 8001660:	2308      	movmi	r3, #8
 8001662:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001666:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001668:	bf44      	itt	mi
 800166a:	2310      	movmi	r3, #16
 800166c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001670:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001672:	bf44      	itt	mi
 8001674:	2340      	movmi	r3, #64	; 0x40
 8001676:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800167a:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800167c:	bf44      	itt	mi
 800167e:	2302      	movmi	r3, #2
 8001680:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001684:	063f      	lsls	r7, r7, #24
 8001686:	d518      	bpl.n	80016ba <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 800168c:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 800168e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8001690:	1aff      	subs	r7, r7, r3
 8001692:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8001694:	429f      	cmp	r7, r3
 8001696:	bf28      	it	cs
 8001698:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800169a:	9b04      	ldr	r3, [sp, #16]
 800169c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 80016a0:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80016a4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 80016a8:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80016ac:	9305      	str	r3, [sp, #20]
 80016ae:	9b05      	ldr	r3, [sp, #20]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4553      	cmp	r3, sl
 80016b6:	d808      	bhi.n	80016ca <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 80016b8:	b32f      	cbz	r7, 8001706 <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 80016ba:	9b03      	ldr	r3, [sp, #12]
 80016bc:	085b      	lsrs	r3, r3, #1
        epnum++;
 80016be:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80016c0:	9303      	str	r3, [sp, #12]
 80016c2:	361c      	adds	r6, #28
 80016c4:	f108 0820 	add.w	r8, r8, #32
 80016c8:	e658      	b.n	800137c <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 80016ca:	6d32      	ldr	r2, [r6, #80]	; 0x50
 80016cc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d9f2      	bls.n	80016b8 <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_PCD_IRQHandler+0x3b4>
 80016d6:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80016d8:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 80016da:	1a9b      	subs	r3, r3, r2
 80016dc:	429f      	cmp	r7, r3
 80016de:	bf28      	it	cs
 80016e0:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80016e2:	7c23      	ldrb	r3, [r4, #16]
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	465a      	mov	r2, fp
 80016e8:	b2bb      	uxth	r3, r7
 80016ea:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80016ec:	f001 fa17 	bl	8002b1e <USB_WritePacket>
    ep->xfer_buff  += len;
 80016f0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80016f2:	443b      	add	r3, r7
 80016f4:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 80016f6:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 80016f8:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 80016fc:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 80016fe:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 8001702:	6533      	str	r3, [r6, #80]	; 0x50
 8001704:	e7d3      	b.n	80016ae <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001706:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 8001708:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800170a:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 800170e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8001712:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001714:	ea23 0302 	bic.w	r3, r3, r2
 8001718:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 800171c:	e7cd      	b.n	80016ba <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171e:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001720:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001722:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8001724:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001728:	9002      	str	r0, [sp, #8]
 800172a:	3320      	adds	r3, #32
 800172c:	e661      	b.n	80013f2 <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 800172e:	6973      	ldr	r3, [r6, #20]
 8001730:	f043 030b 	orr.w	r3, r3, #11
 8001734:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001736:	6933      	ldr	r3, [r6, #16]
 8001738:	f043 030b 	orr.w	r3, r3, #11
 800173c:	6133      	str	r3, [r6, #16]
 800173e:	e671      	b.n	8001424 <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8001740:	2303      	movs	r3, #3
 8001742:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001744:	2340      	movs	r3, #64	; 0x40
 8001746:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8001748:	f000 fbf8 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 800174c:	4b34      	ldr	r3, [pc, #208]	; (8001820 <HAL_PCD_IRQHandler+0x51c>)
 800174e:	4a35      	ldr	r2, [pc, #212]	; (8001824 <HAL_PCD_IRQHandler+0x520>)
 8001750:	4403      	add	r3, r0
 8001752:	4293      	cmp	r3, r2
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	d804      	bhi.n	8001762 <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	e68c      	b.n	800147c <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8001762:	4a31      	ldr	r2, [pc, #196]	; (8001828 <HAL_PCD_IRQHandler+0x524>)
 8001764:	4931      	ldr	r1, [pc, #196]	; (800182c <HAL_PCD_IRQHandler+0x528>)
 8001766:	4402      	add	r2, r0
 8001768:	428a      	cmp	r2, r1
 800176a:	d803      	bhi.n	8001774 <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001772:	e7f4      	b.n	800175e <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8001774:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8001778:	492d      	ldr	r1, [pc, #180]	; (8001830 <HAL_PCD_IRQHandler+0x52c>)
 800177a:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 800177e:	428a      	cmp	r2, r1
 8001780:	d803      	bhi.n	800178a <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8001788:	e7e9      	b.n	800175e <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 800178a:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 800178e:	4929      	ldr	r1, [pc, #164]	; (8001834 <HAL_PCD_IRQHandler+0x530>)
 8001790:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8001794:	428a      	cmp	r2, r1
 8001796:	d803      	bhi.n	80017a0 <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800179e:	e7de      	b.n	800175e <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 80017a0:	4a25      	ldr	r2, [pc, #148]	; (8001838 <HAL_PCD_IRQHandler+0x534>)
 80017a2:	4926      	ldr	r1, [pc, #152]	; (800183c <HAL_PCD_IRQHandler+0x538>)
 80017a4:	4402      	add	r2, r0
 80017a6:	428a      	cmp	r2, r1
 80017a8:	d803      	bhi.n	80017b2 <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80017b0:	e7d5      	b.n	800175e <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 80017b2:	4a23      	ldr	r2, [pc, #140]	; (8001840 <HAL_PCD_IRQHandler+0x53c>)
 80017b4:	4923      	ldr	r1, [pc, #140]	; (8001844 <HAL_PCD_IRQHandler+0x540>)
 80017b6:	4402      	add	r2, r0
 80017b8:	428a      	cmp	r2, r1
 80017ba:	d803      	bhi.n	80017c4 <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80017c2:	e7cc      	b.n	800175e <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 80017c4:	4a20      	ldr	r2, [pc, #128]	; (8001848 <HAL_PCD_IRQHandler+0x544>)
 80017c6:	4921      	ldr	r1, [pc, #132]	; (800184c <HAL_PCD_IRQHandler+0x548>)
 80017c8:	4402      	add	r2, r0
 80017ca:	428a      	cmp	r2, r1
 80017cc:	d803      	bhi.n	80017d6 <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80017d4:	e7c3      	b.n	800175e <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 80017d6:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 80017da:	491d      	ldr	r1, [pc, #116]	; (8001850 <HAL_PCD_IRQHandler+0x54c>)
 80017dc:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80017e0:	428a      	cmp	r2, r1
 80017e2:	d803      	bhi.n	80017ec <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017ea:	e7b8      	b.n	800175e <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 80017ec:	4a19      	ldr	r2, [pc, #100]	; (8001854 <HAL_PCD_IRQHandler+0x550>)
 80017ee:	491a      	ldr	r1, [pc, #104]	; (8001858 <HAL_PCD_IRQHandler+0x554>)
 80017f0:	4402      	add	r2, r0
 80017f2:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	bf94      	ite	ls
 80017f8:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80017fc:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8001800:	e7ad      	b.n	800175e <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8001802:	2b06      	cmp	r3, #6
 8001804:	f47f ae6e 	bne.w	80014e4 <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001808:	2208      	movs	r2, #8
 800180a:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 800180e:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001810:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001812:	f001 f998 	bl	8002b46 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001816:	fb07 4708 	mla	r7, r7, r8, r4
 800181a:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800181e:	e65c      	b.n	80014da <HAL_PCD_IRQHandler+0x1d6>
 8001820:	ff275340 	.word	0xff275340
 8001824:	000c34ff 	.word	0x000c34ff
 8001828:	ff1b1e40 	.word	0xff1b1e40
 800182c:	000f423f 	.word	0x000f423f
 8001830:	00124f7f 	.word	0x00124f7f
 8001834:	0013d61f 	.word	0x0013d61f
 8001838:	fee5b660 	.word	0xfee5b660
 800183c:	0016e35f 	.word	0x0016e35f
 8001840:	feced300 	.word	0xfeced300
 8001844:	001b773f 	.word	0x001b773f
 8001848:	feb35bc0 	.word	0xfeb35bc0
 800184c:	002191bf 	.word	0x002191bf
 8001850:	0038751f 	.word	0x0038751f
 8001854:	fe5954e0 	.word	0xfe5954e0
 8001858:	00419cdf 	.word	0x00419cdf

0800185c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 800185c:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001860:	2b01      	cmp	r3, #1
{
 8001862:	b510      	push	{r4, lr}
 8001864:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001866:	d009      	beq.n	800187c <HAL_PCD_SetAddress+0x20>
 8001868:	2301      	movs	r3, #1
 800186a:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 800186e:	6800      	ldr	r0, [r0, #0]
 8001870:	f001 f9af 	bl	8002bd2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8001874:	2000      	movs	r0, #0
 8001876:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800187a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800187c:	2002      	movs	r0, #2
}
 800187e:	bd10      	pop	{r4, pc}

08001880 <HAL_PCD_EP_Open>:
{
 8001880:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8001882:	b24e      	sxtb	r6, r1
 8001884:	2e00      	cmp	r6, #0
{
 8001886:	4604      	mov	r4, r0
 8001888:	f04f 051c 	mov.w	r5, #28
 800188c:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001890:	bfb5      	itete	lt
 8001892:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001896:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800189a:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800189c:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 80018a0:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 80018a2:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 80018a4:	bfb8      	it	lt
 80018a6:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 80018a8:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 80018aa:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 80018ac:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 80018b0:	bf04      	itt	eq
 80018b2:	2300      	moveq	r3, #0
 80018b4:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 80018b6:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80018b8:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 80018ba:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 80018be:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d009      	beq.n	80018d8 <HAL_PCD_EP_Open+0x58>
 80018c4:	2301      	movs	r3, #1
 80018c6:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80018ca:	6820      	ldr	r0, [r4, #0]
 80018cc:	f000 ff5a 	bl	8002784 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80018d0:	2000      	movs	r0, #0
 80018d2:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 80018d6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 80018d8:	2002      	movs	r0, #2
}
 80018da:	bd70      	pop	{r4, r5, r6, pc}

080018dc <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 80018dc:	b24b      	sxtb	r3, r1
 80018de:	2b00      	cmp	r3, #0
{  
 80018e0:	b510      	push	{r4, lr}
 80018e2:	f04f 021c 	mov.w	r2, #28
 80018e6:	4604      	mov	r4, r0
 80018e8:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80018ec:	bfb5      	itete	lt
 80018ee:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80018f2:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80018f6:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80018f8:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 80018fc:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80018fe:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8001900:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001902:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8001906:	2b01      	cmp	r3, #1
 8001908:	d009      	beq.n	800191e <HAL_PCD_EP_Close+0x42>
 800190a:	2301      	movs	r3, #1
 800190c:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001910:	6820      	ldr	r0, [r4, #0]
 8001912:	f000 ff76 	bl	8002802 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001916:	2000      	movs	r0, #0
 8001918:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800191c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800191e:	2002      	movs	r0, #2
}
 8001920:	bd10      	pop	{r4, pc}

08001922 <HAL_PCD_EP_Receive>:
{
 8001922:	b538      	push	{r3, r4, r5, lr}
 8001924:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001928:	241c      	movs	r4, #28
 800192a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 800192e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001932:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 8001936:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 800193a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 800193c:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8001940:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8001944:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8001948:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 800194c:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800194e:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001950:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8001952:	bf08      	it	eq
 8001954:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 8001958:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 800195a:	b91d      	cbnz	r5, 8001964 <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800195c:	f001 f872 	bl	8002a44 <USB_EP0StartXfer>
}
 8001960:	2000      	movs	r0, #0
 8001962:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001964:	f000 ffa8 	bl	80028b8 <USB_EPStartXfer>
 8001968:	e7fa      	b.n	8001960 <HAL_PCD_EP_Receive+0x3e>

0800196a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800196a:	231c      	movs	r3, #28
 800196c:	f001 010f 	and.w	r1, r1, #15
 8001970:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001974:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 8001978:	4770      	bx	lr

0800197a <HAL_PCD_EP_Transmit>:
{
 800197a:	b538      	push	{r3, r4, r5, lr}
 800197c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001980:	241c      	movs	r4, #28
 8001982:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8001986:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800198a:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 800198c:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 8001992:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 8001994:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001996:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 800199a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 800199e:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80019a0:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80019a2:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 80019a4:	bf08      	it	eq
 80019a6:	64a2      	streq	r2, [r4, #72]	; 0x48
 80019a8:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 80019aa:	b91d      	cbnz	r5, 80019b4 <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80019ac:	f001 f84a 	bl	8002a44 <USB_EP0StartXfer>
}
 80019b0:	2000      	movs	r0, #0
 80019b2:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80019b4:	f000 ff80 	bl	80028b8 <USB_EPStartXfer>
 80019b8:	e7fa      	b.n	80019b0 <HAL_PCD_EP_Transmit+0x36>

080019ba <HAL_PCD_EP_SetStall>:
{
 80019ba:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80019bc:	b24b      	sxtb	r3, r1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80019c4:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80019c8:	bfb5      	itete	lt
 80019ca:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80019ce:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80019d2:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 80019d4:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 80019d8:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80019da:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80019dc:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 80019de:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80019e0:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80019e2:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80019e4:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80019e8:	4293      	cmp	r3, r2
{
 80019ea:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80019ec:	d00f      	beq.n	8001a0e <HAL_PCD_EP_SetStall+0x54>
 80019ee:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80019f2:	6800      	ldr	r0, [r0, #0]
 80019f4:	f001 f8b5 	bl	8002b62 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80019f8:	b92d      	cbnz	r5, 8001a06 <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80019fa:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80019fe:	7c21      	ldrb	r1, [r4, #16]
 8001a00:	6820      	ldr	r0, [r4, #0]
 8001a02:	f001 f95b 	bl	8002cbc <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8001a06:	2000      	movs	r0, #0
 8001a08:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001a0c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001a0e:	2002      	movs	r0, #2
}
 8001a10:	bd38      	pop	{r3, r4, r5, pc}

08001a12 <HAL_PCD_EP_ClrStall>:
{
 8001a12:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001a14:	b24b      	sxtb	r3, r1
 8001a16:	2b00      	cmp	r3, #0
{
 8001a18:	4605      	mov	r5, r0
 8001a1a:	f04f 021c 	mov.w	r2, #28
 8001a1e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a22:	bfb5      	itete	lt
 8001a24:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8001a28:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a2c:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8001a2e:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a32:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001a34:	2400      	movs	r4, #0
 8001a36:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001a38:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a3a:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001a3c:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d009      	beq.n	8001a58 <HAL_PCD_EP_ClrStall+0x46>
 8001a44:	2301      	movs	r3, #1
 8001a46:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8001a4a:	6828      	ldr	r0, [r5, #0]
 8001a4c:	f001 f8a8 	bl	8002ba0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001a50:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 8001a54:	4620      	mov	r0, r4
 8001a56:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001a58:	2002      	movs	r0, #2
}
 8001a5a:	bd38      	pop	{r3, r4, r5, pc}

08001a5c <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001a5c:	6800      	ldr	r0, [r0, #0]
{
 8001a5e:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001a60:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 8001a62:	b921      	cbnz	r1, 8001a6e <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001a64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a68:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001a6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 8001a70:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001a72:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 8001a76:	1e4e      	subs	r6, r1, #1
 8001a78:	b2ec      	uxtb	r4, r5
 8001a7a:	42b4      	cmp	r4, r6
 8001a7c:	f105 0501 	add.w	r5, r5, #1
 8001a80:	db06      	blt.n	8001a90 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8001a82:	313f      	adds	r1, #63	; 0x3f
 8001a84:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001a88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a8c:	6043      	str	r3, [r0, #4]
 8001a8e:	e7ec      	b.n	8001a6a <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8001a90:	3440      	adds	r4, #64	; 0x40
 8001a92:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8001a96:	6864      	ldr	r4, [r4, #4]
 8001a98:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8001a9c:	e7ec      	b.n	8001a78 <HAL_PCDEx_SetTxFiFo+0x1c>

08001a9e <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001a9e:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8001aa0:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001aa2:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aac:	4604      	mov	r4, r0
 8001aae:	b918      	cbnz	r0, 8001ab8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001ab0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001ab2:	b002      	add	sp, #8
 8001ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab8:	6803      	ldr	r3, [r0, #0]
 8001aba:	07dd      	lsls	r5, r3, #31
 8001abc:	d410      	bmi.n	8001ae0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	0798      	lsls	r0, r3, #30
 8001ac2:	d458      	bmi.n	8001b76 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	071a      	lsls	r2, r3, #28
 8001ac8:	f100 809a 	bmi.w	8001c00 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	075b      	lsls	r3, r3, #29
 8001ad0:	f100 80b8 	bmi.w	8001c44 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad4:	69a2      	ldr	r2, [r4, #24]
 8001ad6:	2a00      	cmp	r2, #0
 8001ad8:	f040 8119 	bne.w	8001d0e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001adc:	2000      	movs	r0, #0
 8001ade:	e7e8      	b.n	8001ab2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ae0:	4ba6      	ldr	r3, [pc, #664]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	f002 020c 	and.w	r2, r2, #12
 8001ae8:	2a04      	cmp	r2, #4
 8001aea:	d007      	beq.n	8001afc <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001af2:	2a08      	cmp	r2, #8
 8001af4:	d10a      	bne.n	8001b0c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	0259      	lsls	r1, r3, #9
 8001afa:	d507      	bpl.n	8001b0c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	4b9f      	ldr	r3, [pc, #636]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	039a      	lsls	r2, r3, #14
 8001b02:	d5dc      	bpl.n	8001abe <HAL_RCC_OscConfig+0x16>
 8001b04:	6863      	ldr	r3, [r4, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1d9      	bne.n	8001abe <HAL_RCC_OscConfig+0x16>
 8001b0a:	e7d1      	b.n	8001ab0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0c:	6863      	ldr	r3, [r4, #4]
 8001b0e:	4d9b      	ldr	r5, [pc, #620]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
 8001b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b14:	d111      	bne.n	8001b3a <HAL_RCC_OscConfig+0x92>
 8001b16:	682b      	ldr	r3, [r5, #0]
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b1e:	f7fe fd89 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4d96      	ldr	r5, [pc, #600]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001b24:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	682b      	ldr	r3, [r5, #0]
 8001b28:	039b      	lsls	r3, r3, #14
 8001b2a:	d4c8      	bmi.n	8001abe <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7fe fd82 	bl	8000634 <HAL_GetTick>
 8001b30:	1b80      	subs	r0, r0, r6
 8001b32:	2864      	cmp	r0, #100	; 0x64
 8001b34:	d9f7      	bls.n	8001b26 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001b36:	2003      	movs	r0, #3
 8001b38:	e7bb      	b.n	8001ab2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b3e:	d104      	bne.n	8001b4a <HAL_RCC_OscConfig+0xa2>
 8001b40:	682b      	ldr	r3, [r5, #0]
 8001b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b46:	602b      	str	r3, [r5, #0]
 8001b48:	e7e5      	b.n	8001b16 <HAL_RCC_OscConfig+0x6e>
 8001b4a:	682a      	ldr	r2, [r5, #0]
 8001b4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b50:	602a      	str	r2, [r5, #0]
 8001b52:	682a      	ldr	r2, [r5, #0]
 8001b54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b58:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1df      	bne.n	8001b1e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001b5e:	f7fe fd69 	bl	8000634 <HAL_GetTick>
 8001b62:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b64:	682b      	ldr	r3, [r5, #0]
 8001b66:	039f      	lsls	r7, r3, #14
 8001b68:	d5a9      	bpl.n	8001abe <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6a:	f7fe fd63 	bl	8000634 <HAL_GetTick>
 8001b6e:	1b80      	subs	r0, r0, r6
 8001b70:	2864      	cmp	r0, #100	; 0x64
 8001b72:	d9f7      	bls.n	8001b64 <HAL_RCC_OscConfig+0xbc>
 8001b74:	e7df      	b.n	8001b36 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b76:	4b81      	ldr	r3, [pc, #516]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	f012 0f0c 	tst.w	r2, #12
 8001b7e:	d007      	beq.n	8001b90 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b86:	2a08      	cmp	r2, #8
 8001b88:	d111      	bne.n	8001bae <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	025e      	lsls	r6, r3, #9
 8001b8e:	d40e      	bmi.n	8001bae <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b90:	4b7a      	ldr	r3, [pc, #488]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	0795      	lsls	r5, r2, #30
 8001b96:	d502      	bpl.n	8001b9e <HAL_RCC_OscConfig+0xf6>
 8001b98:	68e2      	ldr	r2, [r4, #12]
 8001b9a:	2a01      	cmp	r2, #1
 8001b9c:	d188      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	6921      	ldr	r1, [r4, #16]
 8001ba2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001ba6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001baa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bac:	e78a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bae:	68e2      	ldr	r2, [r4, #12]
 8001bb0:	4b73      	ldr	r3, [pc, #460]	; (8001d80 <HAL_RCC_OscConfig+0x2d8>)
 8001bb2:	b1b2      	cbz	r2, 8001be2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bb8:	f7fe fd3c 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbc:	4d6f      	ldr	r5, [pc, #444]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001bbe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	682b      	ldr	r3, [r5, #0]
 8001bc2:	0798      	lsls	r0, r3, #30
 8001bc4:	d507      	bpl.n	8001bd6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	682b      	ldr	r3, [r5, #0]
 8001bc8:	6922      	ldr	r2, [r4, #16]
 8001bca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bd2:	602b      	str	r3, [r5, #0]
 8001bd4:	e776      	b.n	8001ac4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd6:	f7fe fd2d 	bl	8000634 <HAL_GetTick>
 8001bda:	1b80      	subs	r0, r0, r6
 8001bdc:	2802      	cmp	r0, #2
 8001bde:	d9ef      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x118>
 8001be0:	e7a9      	b.n	8001b36 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001be2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001be4:	f7fe fd26 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be8:	4d64      	ldr	r5, [pc, #400]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001bea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bec:	682b      	ldr	r3, [r5, #0]
 8001bee:	0799      	lsls	r1, r3, #30
 8001bf0:	f57f af68 	bpl.w	8001ac4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf4:	f7fe fd1e 	bl	8000634 <HAL_GetTick>
 8001bf8:	1b80      	subs	r0, r0, r6
 8001bfa:	2802      	cmp	r0, #2
 8001bfc:	d9f6      	bls.n	8001bec <HAL_RCC_OscConfig+0x144>
 8001bfe:	e79a      	b.n	8001b36 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c00:	6962      	ldr	r2, [r4, #20]
 8001c02:	4b60      	ldr	r3, [pc, #384]	; (8001d84 <HAL_RCC_OscConfig+0x2dc>)
 8001c04:	b17a      	cbz	r2, 8001c26 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001c06:	2201      	movs	r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c0a:	f7fe fd13 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0e:	4d5b      	ldr	r5, [pc, #364]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001c10:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c12:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c14:	079f      	lsls	r7, r3, #30
 8001c16:	f53f af59 	bmi.w	8001acc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1a:	f7fe fd0b 	bl	8000634 <HAL_GetTick>
 8001c1e:	1b80      	subs	r0, r0, r6
 8001c20:	2802      	cmp	r0, #2
 8001c22:	d9f6      	bls.n	8001c12 <HAL_RCC_OscConfig+0x16a>
 8001c24:	e787      	b.n	8001b36 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001c26:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c28:	f7fe fd04 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	4d53      	ldr	r5, [pc, #332]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001c2e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c32:	0798      	lsls	r0, r3, #30
 8001c34:	f57f af4a 	bpl.w	8001acc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c38:	f7fe fcfc 	bl	8000634 <HAL_GetTick>
 8001c3c:	1b80      	subs	r0, r0, r6
 8001c3e:	2802      	cmp	r0, #2
 8001c40:	d9f6      	bls.n	8001c30 <HAL_RCC_OscConfig+0x188>
 8001c42:	e778      	b.n	8001b36 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c44:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
 8001c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c48:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001c4c:	d128      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	9201      	str	r2, [sp, #4]
 8001c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c62:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	4d48      	ldr	r5, [pc, #288]	; (8001d88 <HAL_RCC_OscConfig+0x2e0>)
 8001c66:	682b      	ldr	r3, [r5, #0]
 8001c68:	05d9      	lsls	r1, r3, #23
 8001c6a:	d51b      	bpl.n	8001ca4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c6c:	68a3      	ldr	r3, [r4, #8]
 8001c6e:	4d43      	ldr	r5, [pc, #268]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d127      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x21c>
 8001c74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001c7c:	f7fe fcda 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	4d3e      	ldr	r5, [pc, #248]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001c82:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c84:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c8a:	079b      	lsls	r3, r3, #30
 8001c8c:	d539      	bpl.n	8001d02 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001c8e:	2e00      	cmp	r6, #0
 8001c90:	f43f af20 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c94:	4a39      	ldr	r2, [pc, #228]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
 8001c96:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	e719      	b.n	8001ad4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001ca0:	2600      	movs	r6, #0
 8001ca2:	e7df      	b.n	8001c64 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca4:	682b      	ldr	r3, [r5, #0]
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001caa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001cac:	f7fe fcc2 	bl	8000634 <HAL_GetTick>
 8001cb0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	682b      	ldr	r3, [r5, #0]
 8001cb4:	05da      	lsls	r2, r3, #23
 8001cb6:	d4d9      	bmi.n	8001c6c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb8:	f7fe fcbc 	bl	8000634 <HAL_GetTick>
 8001cbc:	1bc0      	subs	r0, r0, r7
 8001cbe:	2802      	cmp	r0, #2
 8001cc0:	d9f7      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x20a>
 8001cc2:	e738      	b.n	8001b36 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d104      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x22a>
 8001cc8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	672b      	str	r3, [r5, #112]	; 0x70
 8001cd0:	e7d0      	b.n	8001c74 <HAL_RCC_OscConfig+0x1cc>
 8001cd2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	672a      	str	r2, [r5, #112]	; 0x70
 8001cda:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001cdc:	f022 0204 	bic.w	r2, r2, #4
 8001ce0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ca      	bne.n	8001c7c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001ce6:	f7fe fca5 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cea:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001cee:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cf2:	0798      	lsls	r0, r3, #30
 8001cf4:	d5cb      	bpl.n	8001c8e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7fe fc9d 	bl	8000634 <HAL_GetTick>
 8001cfa:	1bc0      	subs	r0, r0, r7
 8001cfc:	4540      	cmp	r0, r8
 8001cfe:	d9f7      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x248>
 8001d00:	e719      	b.n	8001b36 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7fe fc97 	bl	8000634 <HAL_GetTick>
 8001d06:	1bc0      	subs	r0, r0, r7
 8001d08:	4540      	cmp	r0, r8
 8001d0a:	d9bd      	bls.n	8001c88 <HAL_RCC_OscConfig+0x1e0>
 8001d0c:	e713      	b.n	8001b36 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d0e:	4d1b      	ldr	r5, [pc, #108]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
 8001d10:	68ab      	ldr	r3, [r5, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	f43f aeca 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x8>
 8001d1c:	4e1b      	ldr	r6, [pc, #108]	; (8001d8c <HAL_RCC_OscConfig+0x2e4>)
 8001d1e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d20:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001d22:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d24:	d134      	bne.n	8001d90 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001d26:	f7fe fc85 	bl	8000634 <HAL_GetTick>
 8001d2a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2c:	682b      	ldr	r3, [r5, #0]
 8001d2e:	0199      	lsls	r1, r3, #6
 8001d30:	d41e      	bmi.n	8001d70 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d32:	6a22      	ldr	r2, [r4, #32]
 8001d34:	69e3      	ldr	r3, [r4, #28]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d3a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d40:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	4c0d      	ldr	r4, [pc, #52]	; (8001d7c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d48:	0852      	lsrs	r2, r2, #1
 8001d4a:	3a01      	subs	r2, #1
 8001d4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d50:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d52:	2301      	movs	r3, #1
 8001d54:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001d56:	f7fe fc6d 	bl	8000634 <HAL_GetTick>
 8001d5a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	019a      	lsls	r2, r3, #6
 8001d60:	f53f aebc 	bmi.w	8001adc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d64:	f7fe fc66 	bl	8000634 <HAL_GetTick>
 8001d68:	1b40      	subs	r0, r0, r5
 8001d6a:	2802      	cmp	r0, #2
 8001d6c:	d9f6      	bls.n	8001d5c <HAL_RCC_OscConfig+0x2b4>
 8001d6e:	e6e2      	b.n	8001b36 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d70:	f7fe fc60 	bl	8000634 <HAL_GetTick>
 8001d74:	1bc0      	subs	r0, r0, r7
 8001d76:	2802      	cmp	r0, #2
 8001d78:	d9d8      	bls.n	8001d2c <HAL_RCC_OscConfig+0x284>
 8001d7a:	e6dc      	b.n	8001b36 <HAL_RCC_OscConfig+0x8e>
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	42470000 	.word	0x42470000
 8001d84:	42470e80 	.word	0x42470e80
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001d90:	f7fe fc50 	bl	8000634 <HAL_GetTick>
 8001d94:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d96:	682b      	ldr	r3, [r5, #0]
 8001d98:	019b      	lsls	r3, r3, #6
 8001d9a:	f57f ae9f 	bpl.w	8001adc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7fe fc49 	bl	8000634 <HAL_GetTick>
 8001da2:	1b00      	subs	r0, r0, r4
 8001da4:	2802      	cmp	r0, #2
 8001da6:	d9f6      	bls.n	8001d96 <HAL_RCC_OscConfig+0x2ee>
 8001da8:	e6c5      	b.n	8001b36 <HAL_RCC_OscConfig+0x8e>
 8001daa:	bf00      	nop

08001dac <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dac:	4913      	ldr	r1, [pc, #76]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001dae:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001db0:	688b      	ldr	r3, [r1, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d003      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x16>
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dbe:	4810      	ldr	r0, [pc, #64]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001dc0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001dc2:	4810      	ldr	r0, [pc, #64]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x58>)
 8001dc4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dc8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dca:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dcc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd0:	bf14      	ite	ne
 8001dd2:	480c      	ldrne	r0, [pc, #48]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd4:	480a      	ldreq	r0, [pc, #40]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001dda:	bf18      	it	ne
 8001ddc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dde:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de2:	fba1 0100 	umull	r0, r1, r1, r0
 8001de6:	f7fe fa53 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x50>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001df2:	3301      	adds	r3, #1
 8001df4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001df6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dfa:	bd08      	pop	{r3, pc}
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	00f42400 	.word	0x00f42400
 8001e04:	016e3600 	.word	0x016e3600

08001e08 <HAL_RCC_ClockConfig>:
{
 8001e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001e0e:	4604      	mov	r4, r0
 8001e10:	b910      	cbnz	r0, 8001e18 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001e12:	2001      	movs	r0, #1
 8001e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b44      	ldr	r3, [pc, #272]	; (8001f2c <HAL_RCC_ClockConfig+0x124>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	f002 020f 	and.w	r2, r2, #15
 8001e20:	428a      	cmp	r2, r1
 8001e22:	d328      	bcc.n	8001e76 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	6821      	ldr	r1, [r4, #0]
 8001e26:	078f      	lsls	r7, r1, #30
 8001e28:	d42d      	bmi.n	8001e86 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2a:	07c8      	lsls	r0, r1, #31
 8001e2c:	d440      	bmi.n	8001eb0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e2e:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <HAL_RCC_ClockConfig+0x124>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	f002 020f 	and.w	r2, r2, #15
 8001e36:	4295      	cmp	r5, r2
 8001e38:	d366      	bcc.n	8001f08 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3a:	6822      	ldr	r2, [r4, #0]
 8001e3c:	0751      	lsls	r1, r2, #29
 8001e3e:	d46c      	bmi.n	8001f1a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e40:	0713      	lsls	r3, r2, #28
 8001e42:	d507      	bpl.n	8001e54 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e44:	4a3a      	ldr	r2, [pc, #232]	; (8001f30 <HAL_RCC_ClockConfig+0x128>)
 8001e46:	6921      	ldr	r1, [r4, #16]
 8001e48:	6893      	ldr	r3, [r2, #8]
 8001e4a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e4e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e52:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e54:	f7ff ffaa 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8001e58:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <HAL_RCC_ClockConfig+0x128>)
 8001e5a:	4a36      	ldr	r2, [pc, #216]	; (8001f34 <HAL_RCC_ClockConfig+0x12c>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e62:	5cd3      	ldrb	r3, [r2, r3]
 8001e64:	40d8      	lsrs	r0, r3
 8001e66:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <HAL_RCC_ClockConfig+0x130>)
 8001e68:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7fe fb98 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8001e70:	2000      	movs	r0, #0
 8001e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	b2ca      	uxtb	r2, r1
 8001e78:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	4299      	cmp	r1, r3
 8001e82:	d1c6      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xa>
 8001e84:	e7ce      	b.n	8001e24 <HAL_RCC_ClockConfig+0x1c>
 8001e86:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e8c:	bf1e      	ittt	ne
 8001e8e:	689a      	ldrne	r2, [r3, #8]
 8001e90:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001e94:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e96:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e98:	bf42      	ittt	mi
 8001e9a:	689a      	ldrmi	r2, [r3, #8]
 8001e9c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001ea0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	68a0      	ldr	r0, [r4, #8]
 8001ea6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001eaa:	4302      	orrs	r2, r0
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	e7bc      	b.n	8001e2a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb0:	6862      	ldr	r2, [r4, #4]
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <HAL_RCC_ClockConfig+0x128>)
 8001eb4:	2a01      	cmp	r2, #1
 8001eb6:	d11d      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	d0a8      	beq.n	8001e12 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec0:	4e1b      	ldr	r6, [pc, #108]	; (8001f30 <HAL_RCC_ClockConfig+0x128>)
 8001ec2:	68b3      	ldr	r3, [r6, #8]
 8001ec4:	f023 0303 	bic.w	r3, r3, #3
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001ecc:	f7fe fbb2 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ed4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	68b3      	ldr	r3, [r6, #8]
 8001ed8:	6862      	ldr	r2, [r4, #4]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ee2:	d0a4      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee4:	f7fe fba6 	bl	8000634 <HAL_GetTick>
 8001ee8:	1bc0      	subs	r0, r0, r7
 8001eea:	4540      	cmp	r0, r8
 8001eec:	d9f3      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001eee:	2003      	movs	r0, #3
}
 8001ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ef4:	1e91      	subs	r1, r2, #2
 8001ef6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efa:	d802      	bhi.n	8001f02 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f00:	e7dd      	b.n	8001ebe <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	f013 0f02 	tst.w	r3, #2
 8001f06:	e7da      	b.n	8001ebe <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f08:	b2ea      	uxtb	r2, r5
 8001f0a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	429d      	cmp	r5, r3
 8001f14:	f47f af7d 	bne.w	8001e12 <HAL_RCC_ClockConfig+0xa>
 8001f18:	e78f      	b.n	8001e3a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f1a:	4905      	ldr	r1, [pc, #20]	; (8001f30 <HAL_RCC_ClockConfig+0x128>)
 8001f1c:	68e0      	ldr	r0, [r4, #12]
 8001f1e:	688b      	ldr	r3, [r1, #8]
 8001f20:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001f24:	4303      	orrs	r3, r0
 8001f26:	608b      	str	r3, [r1, #8]
 8001f28:	e78a      	b.n	8001e40 <HAL_RCC_ClockConfig+0x38>
 8001f2a:	bf00      	nop
 8001f2c:	40023c00 	.word	0x40023c00
 8001f30:	40023800 	.word	0x40023800
 8001f34:	08007906 	.word	0x08007906
 8001f38:	20000158 	.word	0x20000158

08001f3c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001f3c:	4b01      	ldr	r3, [pc, #4]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x8>)
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000158 	.word	0x20000158

08001f48 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001f52:	5cd3      	ldrb	r3, [r2, r3]
 8001f54:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f56:	6810      	ldr	r0, [r2, #0]
}
 8001f58:	40d8      	lsrs	r0, r3
 8001f5a:	4770      	bx	lr
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	08007916 	.word	0x08007916
 8001f64:	20000158 	.word	0x20000158

08001f68 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	4a03      	ldr	r2, [pc, #12]	; (8001f84 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f76:	6810      	ldr	r0, [r2, #0]
}
 8001f78:	40d8      	lsrs	r0, r3
 8001f7a:	4770      	bx	lr
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08007916 	.word	0x08007916
 8001f84:	20000158 	.word	0x20000158

08001f88 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f88:	6803      	ldr	r3, [r0, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f90:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f92:	695a      	ldr	r2, [r3, #20]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001fa0:	4770      	bx	lr
	...

08001fa4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001fa8:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001faa:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001fac:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fae:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001fb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001fb4:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001fb6:	6133      	str	r3, [r6, #16]
{
 8001fb8:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fba:	6883      	ldr	r3, [r0, #8]
 8001fbc:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001fbe:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fc0:	4303      	orrs	r3, r0
 8001fc2:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001fc4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fc8:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001fca:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001fd2:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001fd4:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001fd6:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001fdc:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fde:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001fe2:	6173      	str	r3, [r6, #20]
 8001fe4:	4b7a      	ldr	r3, [pc, #488]	; (80021d0 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fe6:	d17c      	bne.n	80020e2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fe8:	429e      	cmp	r6, r3
 8001fea:	d003      	beq.n	8001ff4 <UART_SetConfig+0x50>
 8001fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ff0:	429e      	cmp	r6, r3
 8001ff2:	d144      	bne.n	800207e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ff4:	f7ff ffb8 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 8001ff8:	2519      	movs	r5, #25
 8001ffa:	fb05 f300 	mul.w	r3, r5, r0
 8001ffe:	6860      	ldr	r0, [r4, #4]
 8002000:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002004:	0040      	lsls	r0, r0, #1
 8002006:	fbb3 f3f0 	udiv	r3, r3, r0
 800200a:	fbb3 f3f9 	udiv	r3, r3, r9
 800200e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002012:	f7ff ffa9 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 8002016:	6863      	ldr	r3, [r4, #4]
 8002018:	4368      	muls	r0, r5
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fbb0 f7f3 	udiv	r7, r0, r3
 8002020:	f7ff ffa2 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 8002024:	6863      	ldr	r3, [r4, #4]
 8002026:	4368      	muls	r0, r5
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fbb0 f3f3 	udiv	r3, r0, r3
 800202e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002032:	fb09 7313 	mls	r3, r9, r3, r7
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	3332      	adds	r3, #50	; 0x32
 800203a:	fbb3 f3f9 	udiv	r3, r3, r9
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002044:	f7ff ff90 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 8002048:	6862      	ldr	r2, [r4, #4]
 800204a:	4368      	muls	r0, r5
 800204c:	0052      	lsls	r2, r2, #1
 800204e:	fbb0 faf2 	udiv	sl, r0, r2
 8002052:	f7ff ff89 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002056:	6863      	ldr	r3, [r4, #4]
 8002058:	4368      	muls	r0, r5
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002060:	fbb3 f3f9 	udiv	r3, r3, r9
 8002064:	fb09 a313 	mls	r3, r9, r3, sl
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	3332      	adds	r3, #50	; 0x32
 800206c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002076:	443b      	add	r3, r7
 8002078:	60b3      	str	r3, [r6, #8]
 800207a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800207e:	f7ff ff63 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8002082:	2519      	movs	r5, #25
 8002084:	fb05 f300 	mul.w	r3, r5, r0
 8002088:	6860      	ldr	r0, [r4, #4]
 800208a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800208e:	0040      	lsls	r0, r0, #1
 8002090:	fbb3 f3f0 	udiv	r3, r3, r0
 8002094:	fbb3 f3f9 	udiv	r3, r3, r9
 8002098:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800209c:	f7ff ff54 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 80020a0:	6863      	ldr	r3, [r4, #4]
 80020a2:	4368      	muls	r0, r5
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fbb0 f7f3 	udiv	r7, r0, r3
 80020aa:	f7ff ff4d 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 80020ae:	6863      	ldr	r3, [r4, #4]
 80020b0:	4368      	muls	r0, r5
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b8:	fbb3 f3f9 	udiv	r3, r3, r9
 80020bc:	fb09 7313 	mls	r3, r9, r3, r7
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	3332      	adds	r3, #50	; 0x32
 80020c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80020ce:	f7ff ff3b 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 80020d2:	6862      	ldr	r2, [r4, #4]
 80020d4:	4368      	muls	r0, r5
 80020d6:	0052      	lsls	r2, r2, #1
 80020d8:	fbb0 faf2 	udiv	sl, r0, r2
 80020dc:	f7ff ff34 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 80020e0:	e7b9      	b.n	8002056 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80020e2:	429e      	cmp	r6, r3
 80020e4:	d002      	beq.n	80020ec <UART_SetConfig+0x148>
 80020e6:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <UART_SetConfig+0x230>)
 80020e8:	429e      	cmp	r6, r3
 80020ea:	d140      	bne.n	800216e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020ec:	f7ff ff3c 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 80020f0:	6867      	ldr	r7, [r4, #4]
 80020f2:	2519      	movs	r5, #25
 80020f4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80020f8:	fb05 f300 	mul.w	r3, r5, r0
 80020fc:	00bf      	lsls	r7, r7, #2
 80020fe:	fbb3 f3f7 	udiv	r3, r3, r7
 8002102:	fbb3 f3f9 	udiv	r3, r3, r9
 8002106:	011f      	lsls	r7, r3, #4
 8002108:	f7ff ff2e 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 800210c:	6863      	ldr	r3, [r4, #4]
 800210e:	4368      	muls	r0, r5
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	fbb0 f8f3 	udiv	r8, r0, r3
 8002116:	f7ff ff27 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 800211a:	6863      	ldr	r3, [r4, #4]
 800211c:	4368      	muls	r0, r5
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	fbb0 f3f3 	udiv	r3, r0, r3
 8002124:	fbb3 f3f9 	udiv	r3, r3, r9
 8002128:	fb09 8313 	mls	r3, r9, r3, r8
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	3332      	adds	r3, #50	; 0x32
 8002130:	fbb3 f3f9 	udiv	r3, r3, r9
 8002134:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002138:	f7ff ff16 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 800213c:	6862      	ldr	r2, [r4, #4]
 800213e:	4368      	muls	r0, r5
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	fbb0 faf2 	udiv	sl, r0, r2
 8002146:	f7ff ff0f 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800214a:	6863      	ldr	r3, [r4, #4]
 800214c:	4368      	muls	r0, r5
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	fbb0 f3f3 	udiv	r3, r0, r3
 8002154:	fbb3 f3f9 	udiv	r3, r3, r9
 8002158:	fb09 a313 	mls	r3, r9, r3, sl
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	3332      	adds	r3, #50	; 0x32
 8002160:	fbb3 f3f9 	udiv	r3, r3, r9
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	ea43 0308 	orr.w	r3, r3, r8
 800216c:	e783      	b.n	8002076 <UART_SetConfig+0xd2>
 800216e:	f7ff feeb 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8002172:	6867      	ldr	r7, [r4, #4]
 8002174:	2519      	movs	r5, #25
 8002176:	f04f 0964 	mov.w	r9, #100	; 0x64
 800217a:	fb05 f300 	mul.w	r3, r5, r0
 800217e:	00bf      	lsls	r7, r7, #2
 8002180:	fbb3 f3f7 	udiv	r3, r3, r7
 8002184:	fbb3 f3f9 	udiv	r3, r3, r9
 8002188:	011f      	lsls	r7, r3, #4
 800218a:	f7ff fedd 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 800218e:	6863      	ldr	r3, [r4, #4]
 8002190:	4368      	muls	r0, r5
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	fbb0 f8f3 	udiv	r8, r0, r3
 8002198:	f7ff fed6 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 800219c:	6863      	ldr	r3, [r4, #4]
 800219e:	4368      	muls	r0, r5
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a6:	fbb3 f3f9 	udiv	r3, r3, r9
 80021aa:	fb09 8313 	mls	r3, r9, r3, r8
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	3332      	adds	r3, #50	; 0x32
 80021b2:	fbb3 f3f9 	udiv	r3, r3, r9
 80021b6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80021ba:	f7ff fec5 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 80021be:	6862      	ldr	r2, [r4, #4]
 80021c0:	4368      	muls	r0, r5
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	fbb0 faf2 	udiv	sl, r0, r2
 80021c8:	f7ff febe 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 80021cc:	e7bd      	b.n	800214a <UART_SetConfig+0x1a6>
 80021ce:	bf00      	nop
 80021d0:	40011000 	.word	0x40011000
 80021d4:	40011400 	.word	0x40011400

080021d8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021da:	4604      	mov	r4, r0
 80021dc:	460e      	mov	r6, r1
 80021de:	4617      	mov	r7, r2
 80021e0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80021e2:	6821      	ldr	r1, [r4, #0]
 80021e4:	680b      	ldr	r3, [r1, #0]
 80021e6:	ea36 0303 	bics.w	r3, r6, r3
 80021ea:	d101      	bne.n	80021f0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80021ec:	2000      	movs	r0, #0
}
 80021ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80021f0:	1c6b      	adds	r3, r5, #1
 80021f2:	d0f7      	beq.n	80021e4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80021f4:	b995      	cbnz	r5, 800221c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002208:	2320      	movs	r3, #32
 800220a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800220e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002212:	2300      	movs	r3, #0
 8002214:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002218:	2003      	movs	r0, #3
 800221a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800221c:	f7fe fa0a 	bl	8000634 <HAL_GetTick>
 8002220:	1bc0      	subs	r0, r0, r7
 8002222:	4285      	cmp	r5, r0
 8002224:	d2dd      	bcs.n	80021e2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002226:	e7e6      	b.n	80021f6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002228 <HAL_UART_Init>:
{
 8002228:	b510      	push	{r4, lr}
  if(huart == NULL)
 800222a:	4604      	mov	r4, r0
 800222c:	b340      	cbz	r0, 8002280 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800222e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002232:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002236:	b91b      	cbnz	r3, 8002240 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002238:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800223c:	f001 fef0 	bl	8004020 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002240:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002242:	2324      	movs	r3, #36	; 0x24
 8002244:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002248:	68d3      	ldr	r3, [r2, #12]
 800224a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800224e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002250:	4620      	mov	r0, r4
 8002252:	f7ff fea7 	bl	8001fa4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800225e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002266:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800226e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002270:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002272:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002274:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002276:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800227a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800227e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002280:	2001      	movs	r0, #1
}
 8002282:	bd10      	pop	{r4, pc}

08002284 <HAL_UART_Transmit>:
{
 8002284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002288:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 800228a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800228e:	2b20      	cmp	r3, #32
{
 8002290:	4604      	mov	r4, r0
 8002292:	460d      	mov	r5, r1
 8002294:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8002296:	d14f      	bne.n	8002338 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8002298:	2900      	cmp	r1, #0
 800229a:	d04a      	beq.n	8002332 <HAL_UART_Transmit+0xae>
 800229c:	2a00      	cmp	r2, #0
 800229e:	d048      	beq.n	8002332 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80022a0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d047      	beq.n	8002338 <HAL_UART_Transmit+0xb4>
 80022a8:	2301      	movs	r3, #1
 80022aa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022b2:	2321      	movs	r3, #33	; 0x21
 80022b4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80022b8:	f7fe f9bc 	bl	8000634 <HAL_GetTick>
    huart->TxXferSize = Size;
 80022bc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80022c0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80022c2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80022c6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	b96b      	cbnz	r3, 80022e8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022cc:	463b      	mov	r3, r7
 80022ce:	4632      	mov	r2, r6
 80022d0:	2140      	movs	r1, #64	; 0x40
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7ff ff80 	bl	80021d8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022d8:	b9b0      	cbnz	r0, 8002308 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80022da:	2320      	movs	r3, #32
 80022dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80022e0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80022e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80022e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022f0:	68a3      	ldr	r3, [r4, #8]
 80022f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022f6:	4632      	mov	r2, r6
 80022f8:	463b      	mov	r3, r7
 80022fa:	f04f 0180 	mov.w	r1, #128	; 0x80
 80022fe:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002300:	d10e      	bne.n	8002320 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002302:	f7ff ff69 	bl	80021d8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002306:	b110      	cbz	r0, 800230e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002308:	2003      	movs	r0, #3
 800230a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800230e:	882b      	ldrh	r3, [r5, #0]
 8002310:	6822      	ldr	r2, [r4, #0]
 8002312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002316:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002318:	6923      	ldr	r3, [r4, #16]
 800231a:	b943      	cbnz	r3, 800232e <HAL_UART_Transmit+0xaa>
          pData +=2U;
 800231c:	3502      	adds	r5, #2
 800231e:	e7d2      	b.n	80022c6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002320:	f7ff ff5a 	bl	80021d8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002324:	2800      	cmp	r0, #0
 8002326:	d1ef      	bne.n	8002308 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	782a      	ldrb	r2, [r5, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	3501      	adds	r5, #1
 8002330:	e7c9      	b.n	80022c6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002332:	2001      	movs	r0, #1
 8002334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002338:	2002      	movs	r0, #2
}
 800233a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800233e <HAL_UART_TxCpltCallback>:
 800233e:	4770      	bx	lr

08002340 <HAL_UART_RxCpltCallback>:
 8002340:	4770      	bx	lr

08002342 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002342:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002346:	2b22      	cmp	r3, #34	; 0x22
{
 8002348:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800234a:	d132      	bne.n	80023b2 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800234c:	6883      	ldr	r3, [r0, #8]
 800234e:	6901      	ldr	r1, [r0, #16]
 8002350:	6802      	ldr	r2, [r0, #0]
 8002352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002356:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002358:	d11f      	bne.n	800239a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800235a:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800235c:	b9c9      	cbnz	r1, 8002392 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800235e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002362:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002366:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002368:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800236a:	3c01      	subs	r4, #1
 800236c:	b2a4      	uxth	r4, r4
 800236e:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002370:	b96c      	cbnz	r4, 800238e <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002372:	6803      	ldr	r3, [r0, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800237a:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002384:	2320      	movs	r3, #32
 8002386:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800238a:	f7ff ffd9 	bl	8002340 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800238e:	2000      	movs	r0, #0
}
 8002390:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	f823 2b01 	strh.w	r2, [r3], #1
 8002398:	e7e5      	b.n	8002366 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800239a:	b921      	cbnz	r1, 80023a6 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800239c:	1c59      	adds	r1, r3, #1
 800239e:	6852      	ldr	r2, [r2, #4]
 80023a0:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e7e0      	b.n	8002368 <UART_Receive_IT+0x26>
 80023a6:	6852      	ldr	r2, [r2, #4]
 80023a8:	1c59      	adds	r1, r3, #1
 80023aa:	6281      	str	r1, [r0, #40]	; 0x28
 80023ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023b0:	e7f7      	b.n	80023a2 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 80023b2:	2002      	movs	r0, #2
 80023b4:	bd10      	pop	{r4, pc}

080023b6 <HAL_UART_ErrorCallback>:
 80023b6:	4770      	bx	lr

080023b8 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023b8:	6803      	ldr	r3, [r0, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023bc:	68d9      	ldr	r1, [r3, #12]
{
 80023be:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 80023c0:	0716      	lsls	r6, r2, #28
{
 80023c2:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023c4:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80023c6:	d107      	bne.n	80023d8 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023c8:	0696      	lsls	r6, r2, #26
 80023ca:	d55a      	bpl.n	8002482 <HAL_UART_IRQHandler+0xca>
 80023cc:	068d      	lsls	r5, r1, #26
 80023ce:	d558      	bpl.n	8002482 <HAL_UART_IRQHandler+0xca>
}
 80023d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80023d4:	f7ff bfb5 	b.w	8002342 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023d8:	f015 0501 	ands.w	r5, r5, #1
 80023dc:	d102      	bne.n	80023e4 <HAL_UART_IRQHandler+0x2c>
 80023de:	f411 7f90 	tst.w	r1, #288	; 0x120
 80023e2:	d04e      	beq.n	8002482 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023e4:	07d3      	lsls	r3, r2, #31
 80023e6:	d505      	bpl.n	80023f4 <HAL_UART_IRQHandler+0x3c>
 80023e8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ea:	bf42      	ittt	mi
 80023ec:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80023ee:	f043 0301 	orrmi.w	r3, r3, #1
 80023f2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023f4:	0750      	lsls	r0, r2, #29
 80023f6:	d504      	bpl.n	8002402 <HAL_UART_IRQHandler+0x4a>
 80023f8:	b11d      	cbz	r5, 8002402 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002402:	0793      	lsls	r3, r2, #30
 8002404:	d504      	bpl.n	8002410 <HAL_UART_IRQHandler+0x58>
 8002406:	b11d      	cbz	r5, 8002410 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002408:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002410:	0716      	lsls	r6, r2, #28
 8002412:	d504      	bpl.n	800241e <HAL_UART_IRQHandler+0x66>
 8002414:	b11d      	cbz	r5, 800241e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002416:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800241e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d066      	beq.n	80024f2 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002424:	0695      	lsls	r5, r2, #26
 8002426:	d504      	bpl.n	8002432 <HAL_UART_IRQHandler+0x7a>
 8002428:	0688      	lsls	r0, r1, #26
 800242a:	d502      	bpl.n	8002432 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800242c:	4620      	mov	r0, r4
 800242e:	f7ff ff88 	bl	8002342 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002436:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002438:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800243a:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800243c:	d402      	bmi.n	8002444 <HAL_UART_IRQHandler+0x8c>
 800243e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002442:	d01a      	beq.n	800247a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002444:	f7ff fda0 	bl	8001f88 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002448:	6823      	ldr	r3, [r4, #0]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	0652      	lsls	r2, r2, #25
 800244e:	d510      	bpl.n	8002472 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002450:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002452:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002458:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800245a:	b150      	cbz	r0, 8002472 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800245c:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <HAL_UART_IRQHandler+0x13c>)
 800245e:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002460:	f7fe f97b 	bl	800075a <HAL_DMA_Abort_IT>
 8002464:	2800      	cmp	r0, #0
 8002466:	d044      	beq.n	80024f2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002468:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800246a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800246e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002470:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002472:	4620      	mov	r0, r4
 8002474:	f7ff ff9f 	bl	80023b6 <HAL_UART_ErrorCallback>
 8002478:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800247a:	f7ff ff9c 	bl	80023b6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800247e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002480:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002482:	0616      	lsls	r6, r2, #24
 8002484:	d527      	bpl.n	80024d6 <HAL_UART_IRQHandler+0x11e>
 8002486:	060d      	lsls	r5, r1, #24
 8002488:	d525      	bpl.n	80024d6 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800248a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800248e:	2a21      	cmp	r2, #33	; 0x21
 8002490:	d12f      	bne.n	80024f2 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002492:	68a2      	ldr	r2, [r4, #8]
 8002494:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002498:	6a22      	ldr	r2, [r4, #32]
 800249a:	d117      	bne.n	80024cc <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800249c:	8811      	ldrh	r1, [r2, #0]
 800249e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80024a2:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80024a4:	6921      	ldr	r1, [r4, #16]
 80024a6:	b979      	cbnz	r1, 80024c8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80024a8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80024aa:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80024ac:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80024ae:	3a01      	subs	r2, #1
 80024b0:	b292      	uxth	r2, r2
 80024b2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80024b4:	b9ea      	cbnz	r2, 80024f2 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024bc:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80024c8:	3201      	adds	r2, #1
 80024ca:	e7ee      	b.n	80024aa <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024cc:	1c51      	adds	r1, r2, #1
 80024ce:	6221      	str	r1, [r4, #32]
 80024d0:	7812      	ldrb	r2, [r2, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	e7ea      	b.n	80024ac <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024d6:	0650      	lsls	r0, r2, #25
 80024d8:	d50b      	bpl.n	80024f2 <HAL_UART_IRQHandler+0x13a>
 80024da:	064a      	lsls	r2, r1, #25
 80024dc:	d509      	bpl.n	80024f2 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80024e6:	2320      	movs	r3, #32
 80024e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80024ec:	4620      	mov	r0, r4
 80024ee:	f7ff ff26 	bl	800233e <HAL_UART_TxCpltCallback>
 80024f2:	bd70      	pop	{r4, r5, r6, pc}
 80024f4:	080024f9 	.word	0x080024f9

080024f8 <UART_DMAAbortOnError>:
{
 80024f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8002500:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002502:	f7ff ff58 	bl	80023b6 <HAL_UART_ErrorCallback>
 8002506:	bd08      	pop	{r3, pc}

08002508 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002508:	b084      	sub	sp, #16
 800250a:	b538      	push	{r3, r4, r5, lr}
 800250c:	ad05      	add	r5, sp, #20
 800250e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002514:	2b01      	cmp	r3, #1
{
 8002516:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002518:	d126      	bne.n	8002568 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800251a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800251c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002520:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002522:	68c3      	ldr	r3, [r0, #12]
 8002524:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800252c:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800252e:	68c3      	ldr	r3, [r0, #12]
 8002530:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002534:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8002536:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002538:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800253a:	bf02      	ittt	eq
 800253c:	68c3      	ldreq	r3, [r0, #12]
 800253e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002542:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002544:	f000 fbde 	bl	8002d04 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8002548:	9b08      	ldr	r3, [sp, #32]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d107      	bne.n	800255e <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800254e:	68a3      	ldr	r3, [r4, #8]
 8002550:	f043 0306 	orr.w	r3, r3, #6
 8002554:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002556:	68a3      	ldr	r3, [r4, #8]
 8002558:	f043 0320 	orr.w	r3, r3, #32
 800255c:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 800255e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002562:	2000      	movs	r0, #0
 8002564:	b004      	add	sp, #16
 8002566:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002568:	68c3      	ldr	r3, [r0, #12]
 800256a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800256e:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8002570:	f000 fbc8 	bl	8002d04 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002578:	63a3      	str	r3, [r4, #56]	; 0x38
 800257a:	e7e5      	b.n	8002548 <USB_CoreInit+0x40>

0800257c <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800257c:	6883      	ldr	r3, [r0, #8]
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002584:	2000      	movs	r0, #0
 8002586:	4770      	bx	lr

08002588 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002588:	6883      	ldr	r3, [r0, #8]
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002590:	2000      	movs	r0, #0
 8002592:	4770      	bx	lr

08002594 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002594:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002596:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002598:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800259a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800259e:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80025a0:	d108      	bne.n	80025b4 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80025a2:	68c3      	ldr	r3, [r0, #12]
 80025a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025a8:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 80025aa:	2032      	movs	r0, #50	; 0x32
 80025ac:	f7fe f848 	bl	8000640 <HAL_Delay>
  
  return HAL_OK;
}
 80025b0:	2000      	movs	r0, #0
 80025b2:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 80025b4:	2900      	cmp	r1, #0
 80025b6:	d1f8      	bne.n	80025aa <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80025b8:	68c3      	ldr	r3, [r0, #12]
 80025ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025be:	60c3      	str	r3, [r0, #12]
 80025c0:	e7f3      	b.n	80025aa <USB_SetCurrentMode+0x16>
	...

080025c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80025c4:	b084      	sub	sp, #16
 80025c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ca:	4604      	mov	r4, r0
 80025cc:	a807      	add	r0, sp, #28
 80025ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80025d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80025d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80025d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025d8:	4688      	mov	r8, r1
  if (cfg.vbus_sensing_enable == 0U)
 80025da:	b9a6      	cbnz	r6, 8002606 <USB_DevInit+0x42>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80025dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025e0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80025e8:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80025ec:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80025f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80025f2:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80025f4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80025f8:	d15e      	bne.n	80026b8 <USB_DevInit+0xf4>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80025fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80025fc:	b939      	cbnz	r1, 800260e <USB_DevInit+0x4a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80025fe:	4620      	mov	r0, r4
 8002600:	f000 f89e 	bl	8002740 <USB_SetDevSpeed>
 8002604:	e007      	b.n	8002616 <USB_DevInit+0x52>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800260a:	63a3      	str	r3, [r4, #56]	; 0x38
 800260c:	e7e9      	b.n	80025e2 <USB_DevInit+0x1e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 800260e:	4619      	mov	r1, r3
 8002610:	4620      	mov	r0, r4
 8002612:	f000 f895 	bl	8002740 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8002616:	2110      	movs	r1, #16
 8002618:	4620      	mov	r0, r4
 800261a:	f000 f86f 	bl	80026fc <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800261e:	4620      	mov	r0, r4
 8002620:	f000 f87e 	bl	8002720 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002624:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002626:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 800262a:	612b      	str	r3, [r5, #16]
 800262c:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 800262e:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002634:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002636:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 800263a:	61eb      	str	r3, [r5, #28]
 800263c:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002640:	4543      	cmp	r3, r8
 8002642:	d13b      	bne.n	80026bc <USB_DevInit+0xf8>
 8002644:	2100      	movs	r1, #0
 8002646:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 800264a:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800264c:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002650:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002654:	428b      	cmp	r3, r1
 8002656:	d13e      	bne.n	80026d6 <USB_DevInit+0x112>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002658:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 800265a:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800265c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002660:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8002662:	d108      	bne.n	8002676 <USB_DevInit+0xb2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002664:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <USB_DevInit+0x130>)
 8002666:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002668:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800266a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266e:	f043 0303 	orr.w	r3, r3, #3
 8002672:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002674:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800267a:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800267e:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002680:	b91f      	cbnz	r7, 800268a <USB_DevInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002682:	69a3      	ldr	r3, [r4, #24]
 8002684:	f043 0310 	orr.w	r3, r3, #16
 8002688:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800268a:	69a2      	ldr	r2, [r4, #24]
 800268c:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <USB_DevInit+0x134>)
 800268e:	4313      	orrs	r3, r2
 8002690:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8002692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002694:	b11b      	cbz	r3, 800269e <USB_DevInit+0xda>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002696:	69a3      	ldr	r3, [r4, #24]
 8002698:	f043 0308 	orr.w	r3, r3, #8
 800269c:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800269e:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80026a0:	bf01      	itttt	eq
 80026a2:	69a3      	ldreq	r3, [r4, #24]
 80026a4:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80026a8:	f043 0304 	orreq.w	r3, r3, #4
 80026ac:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 80026ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026b2:	2000      	movs	r0, #0
 80026b4:	b004      	add	sp, #16
 80026b6:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80026b8:	2103      	movs	r1, #3
 80026ba:	e7a0      	b.n	80025fe <USB_DevInit+0x3a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80026bc:	f8d2 c000 	ldr.w	ip, [r2]
 80026c0:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80026c4:	bfb4      	ite	lt
 80026c6:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 80026c8:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80026ca:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80026cc:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80026ce:	f8c2 e008 	str.w	lr, [r2, #8]
 80026d2:	3220      	adds	r2, #32
 80026d4:	e7b4      	b.n	8002640 <USB_DevInit+0x7c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80026d6:	f8d2 8000 	ldr.w	r8, [r2]
 80026da:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80026de:	bfb4      	ite	lt
 80026e0:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80026e4:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80026e6:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80026e8:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80026ea:	f8c2 c008 	str.w	ip, [r2, #8]
 80026ee:	3220      	adds	r2, #32
 80026f0:	e7b0      	b.n	8002654 <USB_DevInit+0x90>
 80026f2:	bf00      	nop
 80026f4:	00800100 	.word	0x00800100
 80026f8:	803c3800 	.word	0x803c3800

080026fc <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80026fc:	0189      	lsls	r1, r1, #6
 80026fe:	f041 0120 	orr.w	r1, r1, #32
 8002702:	4a06      	ldr	r2, [pc, #24]	; (800271c <USB_FlushTxFifo+0x20>)
 8002704:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8002706:	3a01      	subs	r2, #1
 8002708:	d005      	beq.n	8002716 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800270a:	6903      	ldr	r3, [r0, #16]
 800270c:	f013 0320 	ands.w	r3, r3, #32
 8002710:	d1f9      	bne.n	8002706 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8002712:	4618      	mov	r0, r3
 8002714:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002716:	2003      	movs	r0, #3
}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	00030d41 	.word	0x00030d41

08002720 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002720:	2310      	movs	r3, #16
 8002722:	4a06      	ldr	r2, [pc, #24]	; (800273c <USB_FlushRxFifo+0x1c>)
 8002724:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8002726:	3a01      	subs	r2, #1
 8002728:	d005      	beq.n	8002736 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800272a:	6903      	ldr	r3, [r0, #16]
 800272c:	f013 0310 	ands.w	r3, r3, #16
 8002730:	d1f9      	bne.n	8002726 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8002732:	4618      	mov	r0, r3
 8002734:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002736:	2003      	movs	r0, #3
}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	00030d41 	.word	0x00030d41

08002740 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8002740:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002744:	4319      	orrs	r1, r3
 8002746:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 800274a:	2000      	movs	r0, #0
 800274c:	4770      	bx	lr

0800274e <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800274e:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8002752:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8002756:	f010 0006 	ands.w	r0, r0, #6
 800275a:	d012      	beq.n	8002782 <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800275c:	6893      	ldr	r3, [r2, #8]
 800275e:	f003 0306 	and.w	r3, r3, #6
 8002762:	2b02      	cmp	r3, #2
 8002764:	d00c      	beq.n	8002780 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8002766:	6893      	ldr	r3, [r2, #8]
 8002768:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800276c:	2b06      	cmp	r3, #6
 800276e:	d007      	beq.n	8002780 <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002770:	6893      	ldr	r3, [r2, #8]
 8002772:	f003 0306 	and.w	r3, r3, #6
 8002776:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8002778:	bf14      	ite	ne
 800277a:	2000      	movne	r0, #0
 800277c:	2002      	moveq	r0, #2
 800277e:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8002780:	2003      	movs	r0, #3
  }
  
  return speed;
}
 8002782:	4770      	bx	lr

08002784 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002784:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8002786:	784b      	ldrb	r3, [r1, #1]
 8002788:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800278a:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 800278e:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8002792:	2b01      	cmp	r3, #1
 8002794:	d11b      	bne.n	80027ce <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002796:	40a3      	lsls	r3, r4
 8002798:	b29b      	uxth	r3, r3
 800279a:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800279c:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80027a0:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80027a2:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	0412      	lsls	r2, r2, #16
 80027aa:	d40e      	bmi.n	80027ca <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80027ac:	688a      	ldr	r2, [r1, #8]
 80027ae:	78c8      	ldrb	r0, [r1, #3]
 80027b0:	681d      	ldr	r5, [r3, #0]
 80027b2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80027b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027be:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 80027c2:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 80027c6:	4328      	orrs	r0, r5
 80027c8:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 80027ca:	2000      	movs	r0, #0
 80027cc:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80027ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027d2:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80027d4:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80027d8:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80027da:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80027de:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80027e0:	6803      	ldr	r3, [r0, #0]
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	d4f1      	bmi.n	80027ca <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80027e6:	688b      	ldr	r3, [r1, #8]
 80027e8:	78c9      	ldrb	r1, [r1, #3]
 80027ea:	6802      	ldr	r2, [r0, #0]
 80027ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80027fc:	4313      	orrs	r3, r2
 80027fe:	6003      	str	r3, [r0, #0]
 8002800:	e7e3      	b.n	80027ca <USB_ActivateEndpoint+0x46>

08002802 <USB_DeactivateEndpoint>:
 8002802:	f000 b801 	b.w	8002808 <USB_DeactivateDedicatedEndpoint>
	...

08002808 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002808:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 800280a:	784b      	ldrb	r3, [r1, #1]
 800280c:	2b01      	cmp	r3, #1
{
 800280e:	460e      	mov	r6, r1
 8002810:	4605      	mov	r5, r0
 8002812:	7809      	ldrb	r1, [r1, #0]
 8002814:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 8002818:	d126      	bne.n	8002868 <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 800281a:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 800281e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002828:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800282a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800282e:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8002830:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 8002838:	3a01      	subs	r2, #1
 800283a:	d101      	bne.n	8002840 <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 800283c:	2003      	movs	r0, #3
 800283e:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8002840:	689c      	ldr	r4, [r3, #8]
 8002842:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8002846:	d1f7      	bne.n	8002838 <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8002848:	2110      	movs	r1, #16
 800284a:	4628      	mov	r0, r5
 800284c:	f7ff ff56 	bl	80026fc <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8002850:	7831      	ldrb	r1, [r6, #0]
 8002852:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8002856:	2301      	movs	r3, #1
 8002858:	408b      	lsls	r3, r1
 800285a:	b29b      	uxth	r3, r3
 800285c:	ea22 0303 	bic.w	r3, r2, r3
 8002860:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 8002864:	4620      	mov	r0, r4
 8002866:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8002868:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 800286c:	fb13 2301 	smlabb	r3, r3, r1, r2
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002876:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002878:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800287c:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 800287e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	4a0b      	ldr	r2, [pc, #44]	; (80028b4 <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 8002886:	3a01      	subs	r2, #1
 8002888:	d0d8      	beq.n	800283c <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 800288a:	6898      	ldr	r0, [r3, #8]
 800288c:	f010 0010 	ands.w	r0, r0, #16
 8002890:	d1f9      	bne.n	8002886 <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002892:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8002896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800289a:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 800289e:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 80028a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028a6:	408a      	lsls	r2, r1
 80028a8:	ea23 0302 	bic.w	r3, r3, r2
 80028ac:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 80028b0:	bd70      	pop	{r4, r5, r6, pc}
 80028b2:	bf00      	nop
 80028b4:	00030d41 	.word	0x00030d41

080028b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80028b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 80028ba:	784b      	ldrb	r3, [r1, #1]
 80028bc:	780c      	ldrb	r4, [r1, #0]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	694b      	ldr	r3, [r1, #20]
 80028c2:	d177      	bne.n	80029b4 <USB_EPStartXfer+0xfc>
 80028c4:	2620      	movs	r6, #32
 80028c6:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80028ca:	fb16 5404 	smlabb	r4, r6, r4, r5
 80028ce:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d138      	bne.n	8002946 <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80028d4:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 80028d8:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 80028dc:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80028de:	6926      	ldr	r6, [r4, #16]
 80028e0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80028e4:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80028e6:	6926      	ldr	r6, [r4, #16]
 80028e8:	0cf6      	lsrs	r6, r6, #19
 80028ea:	04f6      	lsls	r6, r6, #19
 80028ec:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 80028ee:	2a01      	cmp	r2, #1
 80028f0:	d150      	bne.n	8002994 <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80028f2:	780c      	ldrb	r4, [r1, #0]
 80028f4:	690e      	ldr	r6, [r1, #16]
 80028f6:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80028fa:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80028fc:	78ce      	ldrb	r6, [r1, #3]
 80028fe:	2e01      	cmp	r6, #1
 8002900:	d10f      	bne.n	8002922 <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8002902:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8002906:	780f      	ldrb	r7, [r1, #0]
 8002908:	f414 7f80 	tst.w	r4, #256	; 0x100
 800290c:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002910:	fb14 5407 	smlabb	r4, r4, r7, r5
 8002914:	6827      	ldr	r7, [r4, #0]
 8002916:	bf0c      	ite	eq
 8002918:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800291c:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 8002920:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002922:	780f      	ldrb	r7, [r1, #0]
 8002924:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8002928:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800292a:	682c      	ldr	r4, [r5, #0]
 800292c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8002930:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 8002932:	d105      	bne.n	8002940 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8002934:	9200      	str	r2, [sp, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	463a      	mov	r2, r7
 800293a:	68c9      	ldr	r1, [r1, #12]
 800293c:	f000 f8ef 	bl	8002b1e <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8002940:	2000      	movs	r0, #0
 8002942:	b003      	add	sp, #12
 8002944:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002946:	0cf6      	lsrs	r6, r6, #19
 8002948:	04f6      	lsls	r6, r6, #19
 800294a:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800294c:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800294e:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002950:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8002954:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8002958:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800295a:	19de      	adds	r6, r3, r7
 800295c:	3e01      	subs	r6, #1
 800295e:	fbb6 f7f7 	udiv	r7, r6, r7
 8002962:	4e37      	ldr	r6, [pc, #220]	; (8002a40 <USB_EPStartXfer+0x188>)
 8002964:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8002968:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 800296c:	ea46 060e 	orr.w	r6, r6, lr
 8002970:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8002972:	6927      	ldr	r7, [r4, #16]
 8002974:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8002978:	433e      	orrs	r6, r7
 800297a:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 800297c:	78ce      	ldrb	r6, [r1, #3]
 800297e:	2e01      	cmp	r6, #1
 8002980:	d15a      	bne.n	8002a38 <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8002982:	6926      	ldr	r6, [r4, #16]
 8002984:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8002988:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 800298a:	6926      	ldr	r6, [r4, #16]
 800298c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8002990:	6126      	str	r6, [r4, #16]
 8002992:	e7ac      	b.n	80028ee <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 8002994:	78ce      	ldrb	r6, [r1, #3]
 8002996:	2e01      	cmp	r6, #1
 8002998:	d0b3      	beq.n	8002902 <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0ae      	beq.n	80028fc <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 800299e:	f891 e000 	ldrb.w	lr, [r1]
 80029a2:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 80029a6:	2401      	movs	r4, #1
 80029a8:	fa04 f40e 	lsl.w	r4, r4, lr
 80029ac:	433c      	orrs	r4, r7
 80029ae:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 80029b2:	e7a3      	b.n	80028fc <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80029b4:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 80029b8:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80029bc:	6925      	ldr	r5, [r4, #16]
 80029be:	0ced      	lsrs	r5, r5, #19
 80029c0:	04ed      	lsls	r5, r5, #19
 80029c2:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80029c4:	6925      	ldr	r5, [r4, #16]
 80029c6:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80029ca:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80029ce:	6125      	str	r5, [r4, #16]
 80029d0:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 80029d2:	b9fb      	cbnz	r3, 8002a14 <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80029d4:	6923      	ldr	r3, [r4, #16]
 80029d6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80029da:	431d      	orrs	r5, r3
 80029dc:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80029de:	6923      	ldr	r3, [r4, #16]
 80029e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029e4:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 80029e6:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80029e8:	bf04      	itt	eq
 80029ea:	68cb      	ldreq	r3, [r1, #12]
 80029ec:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 80029ee:	78cb      	ldrb	r3, [r1, #3]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d10a      	bne.n	8002a0a <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80029f4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80029f8:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80029fc:	6823      	ldr	r3, [r4, #0]
 80029fe:	bf0c      	ite	eq
 8002a00:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002a04:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8002a08:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002a10:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8002a12:	e795      	b.n	8002940 <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8002a14:	4e0a      	ldr	r6, [pc, #40]	; (8002a40 <USB_EPStartXfer+0x188>)
 8002a16:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8002a18:	442b      	add	r3, r5
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8002a20:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8002a24:	433e      	orrs	r6, r7
 8002a26:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	6926      	ldr	r6, [r4, #16]
 8002a2c:	435d      	muls	r5, r3
 8002a2e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002a32:	4335      	orrs	r5, r6
 8002a34:	6125      	str	r5, [r4, #16]
 8002a36:	e7d6      	b.n	80029e6 <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 8002a38:	2a01      	cmp	r2, #1
 8002a3a:	d1ae      	bne.n	800299a <USB_EPStartXfer+0xe2>
 8002a3c:	e759      	b.n	80028f2 <USB_EPStartXfer+0x3a>
 8002a3e:	bf00      	nop
 8002a40:	1ff80000 	.word	0x1ff80000

08002a44 <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 8002a44:	784b      	ldrb	r3, [r1, #1]
 8002a46:	2b01      	cmp	r3, #1
{
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	780b      	ldrb	r3, [r1, #0]
 8002a4c:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 8002a4e:	d143      	bne.n	8002ad8 <USB_EP0StartXfer+0x94>
 8002a50:	2420      	movs	r4, #32
 8002a52:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002a56:	fb14 6303 	smlabb	r3, r4, r3, r6
 8002a5a:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8002a5c:	b9cd      	cbnz	r5, 8002a92 <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002a5e:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002a62:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002a66:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002a68:	691c      	ldr	r4, [r3, #16]
 8002a6a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002a6e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8002a70:	691c      	ldr	r4, [r3, #16]
 8002a72:	0ce4      	lsrs	r4, r4, #19
 8002a74:	04e4      	lsls	r4, r4, #19
 8002a76:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8002a78:	780d      	ldrb	r5, [r1, #0]
 8002a7a:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 8002a7e:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8002a80:	681c      	ldr	r4, [r3, #0]
 8002a82:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8002a86:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8002a88:	d11b      	bne.n	8002ac2 <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002a8a:	690a      	ldr	r2, [r1, #16]
 8002a8c:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8002a8e:	2000      	movs	r0, #0
 8002a90:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002a92:	0ce4      	lsrs	r4, r4, #19
 8002a94:	04e4      	lsls	r4, r4, #19
 8002a96:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8002a98:	691c      	ldr	r4, [r3, #16]
 8002a9a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002a9e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002aa2:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8002aa4:	688c      	ldr	r4, [r1, #8]
 8002aa6:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8002aa8:	bf88      	it	hi
 8002aaa:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002aac:	691c      	ldr	r4, [r3, #16]
 8002aae:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002ab2:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8002ab4:	694c      	ldr	r4, [r1, #20]
 8002ab6:	691d      	ldr	r5, [r3, #16]
 8002ab8:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002abc:	432c      	orrs	r4, r5
 8002abe:	611c      	str	r4, [r3, #16]
 8002ac0:	e7da      	b.n	8002a78 <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 8002ac2:	694b      	ldr	r3, [r1, #20]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0e2      	beq.n	8002a8e <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8002ac8:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002acc:	2301      	movs	r3, #1
 8002ace:	40ab      	lsls	r3, r5
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002ad6:	e7da      	b.n	8002a8e <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8002ad8:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8002adc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002ae0:	6903      	ldr	r3, [r0, #16]
 8002ae2:	0cdb      	lsrs	r3, r3, #19
 8002ae4:	04db      	lsls	r3, r3, #19
 8002ae6:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8002ae8:	6903      	ldr	r3, [r0, #16]
 8002aea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002aee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002af2:	6103      	str	r3, [r0, #16]
 8002af4:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 8002af6:	b105      	cbz	r5, 8002afa <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 8002af8:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8002afa:	6904      	ldr	r4, [r0, #16]
 8002afc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002b00:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8002b02:	6904      	ldr	r4, [r0, #16]
 8002b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b08:	4323      	orrs	r3, r4
    if (dma == 1U)
 8002b0a:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8002b0c:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002b0e:	bf04      	itt	eq
 8002b10:	68cb      	ldreq	r3, [r1, #12]
 8002b12:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8002b14:	6803      	ldr	r3, [r0, #0]
 8002b16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002b1a:	6003      	str	r3, [r0, #0]
 8002b1c:	e7b7      	b.n	8002a8e <USB_EP0StartXfer+0x4a>

08002b1e <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002b1e:	b510      	push	{r4, lr}
 8002b20:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8002b24:	b94c      	cbnz	r4, 8002b3a <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8002b26:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002b28:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002b2c:	f023 0303 	bic.w	r3, r3, #3
 8002b30:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8002b34:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8002b36:	4299      	cmp	r1, r3
 8002b38:	d101      	bne.n	8002b3e <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002b3e:	f851 0b04 	ldr.w	r0, [r1], #4
 8002b42:	6010      	str	r0, [r2, #0]
 8002b44:	e7f7      	b.n	8002b36 <USB_WritePacket+0x18>

08002b46 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8002b46:	3203      	adds	r2, #3
 8002b48:	f022 0203 	bic.w	r2, r2, #3
 8002b4c:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002b4e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8002b52:	4291      	cmp	r1, r2
 8002b54:	d101      	bne.n	8002b5a <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8002b56:	4608      	mov	r0, r1
 8002b58:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002b5a:	6803      	ldr	r3, [r0, #0]
 8002b5c:	f841 3b04 	str.w	r3, [r1], #4
 8002b60:	e7f7      	b.n	8002b52 <USB_ReadPacket+0xc>

08002b62 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8002b62:	784b      	ldrb	r3, [r1, #1]
 8002b64:	780a      	ldrb	r2, [r1, #0]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	f04f 0320 	mov.w	r3, #32
 8002b6c:	d10b      	bne.n	8002b86 <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8002b6e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8002b72:	fb13 0002 	smlabb	r0, r3, r2, r0
 8002b76:	6803      	ldr	r3, [r0, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	db0b      	blt.n	8002b94 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8002b7c:	6803      	ldr	r3, [r0, #0]
 8002b7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b82:	6003      	str	r3, [r0, #0]
 8002b84:	e006      	b.n	8002b94 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8002b86:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8002b8a:	fb13 0002 	smlabb	r0, r3, r2, r0
 8002b8e:	6803      	ldr	r3, [r0, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	daf3      	bge.n	8002b7c <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002b94:	6803      	ldr	r3, [r0, #0]
 8002b96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b9a:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	4770      	bx	lr

08002ba0 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8002ba0:	784b      	ldrb	r3, [r1, #1]
 8002ba2:	780a      	ldrb	r2, [r1, #0]
 8002ba4:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ba6:	bf0c      	ite	eq
 8002ba8:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bac:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	fb13 0002 	smlabb	r0, r3, r2, r0
 8002bb6:	6803      	ldr	r3, [r0, #0]
 8002bb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bbc:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8002bbe:	78cb      	ldrb	r3, [r1, #3]
 8002bc0:	3b02      	subs	r3, #2
 8002bc2:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002bc4:	bf9e      	ittt	ls
 8002bc6:	6803      	ldrls	r3, [r0, #0]
 8002bc8:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8002bce:	2000      	movs	r0, #0
 8002bd0:	4770      	bx	lr

08002bd2 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8002bd2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002bd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002bda:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8002bde:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002be2:	0109      	lsls	r1, r1, #4
 8002be4:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8002be8:	4319      	orrs	r1, r3
 8002bea:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8002bee:	2000      	movs	r0, #0
 8002bf0:	4770      	bx	lr

08002bf2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8002bf2:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8002bf4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002bf8:	f023 0302 	bic.w	r3, r3, #2
 8002bfc:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002c00:	2003      	movs	r0, #3
 8002c02:	f7fd fd1d 	bl	8000640 <HAL_Delay>
  
  return HAL_OK;  
}
 8002c06:	2000      	movs	r0, #0
 8002c08:	bd08      	pop	{r3, pc}

08002c0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8002c0a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8002c0c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002c18:	2003      	movs	r0, #3
 8002c1a:	f7fd fd11 	bl	8000640 <HAL_Delay>
  
  return HAL_OK;  
}
 8002c1e:	2000      	movs	r0, #0
 8002c20:	bd08      	pop	{r3, pc}

08002c22 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8002c22:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8002c24:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8002c26:	4010      	ands	r0, r2
 8002c28:	4770      	bx	lr

08002c2a <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8002c2a:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002c2e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8002c32:	69c0      	ldr	r0, [r0, #28]
 8002c34:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8002c36:	0c00      	lsrs	r0, r0, #16
 8002c38:	4770      	bx	lr

08002c3a <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8002c3a:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002c3e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8002c42:	69c0      	ldr	r0, [r0, #28]
 8002c44:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8002c46:	b280      	uxth	r0, r0
 8002c48:	4770      	bx	lr

08002c4a <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8002c4a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002c4e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8002c52:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8002c56:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8002c58:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8002c5a:	4010      	ands	r0, r2
 8002c5c:	4770      	bx	lr

08002c5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8002c5e:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8002c60:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002c64:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002c68:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8002c6c:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002c6e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8002c72:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002c74:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4323      	orrs	r3, r4
  return v;
}
 8002c7a:	4018      	ands	r0, r3
 8002c7c:	bd10      	pop	{r4, pc}

08002c7e <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8002c7e:	6940      	ldr	r0, [r0, #20]
}
 8002c80:	f000 0001 	and.w	r0, r0, #1
 8002c84:	4770      	bx	lr

08002c86 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002c86:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002c8a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c8e:	f023 0307 	bic.w	r3, r3, #7
 8002c92:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002c96:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	f002 0206 	and.w	r2, r2, #6
 8002ca0:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8002ca2:	bf02      	ittt	eq
 8002ca4:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8002ca8:	f042 0203 	orreq.w	r2, r2, #3
 8002cac:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8002cb8:	2000      	movs	r0, #0
 8002cba:	4770      	bx	lr

08002cbc <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8002cbc:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002cbe:	2400      	movs	r4, #0
 8002cc0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8002cc4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002cc8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002ccc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002cd0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002cd4:	f044 0418 	orr.w	r4, r4, #24
 8002cd8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002cdc:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8002ce0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002ce2:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002ce6:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8002cea:	bf08      	it	eq
 8002cec:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8002cf0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002cf4:	bf04      	itt	eq
 8002cf6:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8002cfa:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8002cfe:	2000      	movs	r0, #0
 8002d00:	bd10      	pop	{r4, pc}
	...

08002d04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002d04:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002d06:	3b01      	subs	r3, #1
 8002d08:	d101      	bne.n	8002d0e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002d0a:	2003      	movs	r0, #3
 8002d0c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002d0e:	6902      	ldr	r2, [r0, #16]
 8002d10:	2a00      	cmp	r2, #0
 8002d12:	daf8      	bge.n	8002d06 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002d14:	6903      	ldr	r3, [r0, #16]
 8002d16:	4a06      	ldr	r2, [pc, #24]	; (8002d30 <USB_CoreReset+0x2c>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002d1e:	3a01      	subs	r2, #1
 8002d20:	d0f3      	beq.n	8002d0a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002d22:	6903      	ldr	r3, [r0, #16]
 8002d24:	f013 0301 	ands.w	r3, r3, #1
 8002d28:	d1f9      	bne.n	8002d1e <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8002d2a:	4618      	mov	r0, r3
}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	00030d41 	.word	0x00030d41

08002d34 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002d34:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8002d38:	b11b      	cbz	r3, 8002d42 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8002d40:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8002d42:	2002      	movs	r0, #2
  }
}
 8002d44:	4770      	bx	lr

08002d46 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002d46:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8002d4a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002d4c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002d50:	b15b      	cbz	r3, 8002d6a <USBD_CDC_EP0_RxReady+0x24>
 8002d52:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002d56:	28ff      	cmp	r0, #255	; 0xff
 8002d58:	d007      	beq.n	8002d6a <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002d60:	4621      	mov	r1, r4
 8002d62:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002d64:	23ff      	movs	r3, #255	; 0xff
 8002d66:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	bd10      	pop	{r4, pc}
	...

08002d70 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002d70:	2343      	movs	r3, #67	; 0x43
 8002d72:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002d74:	4800      	ldr	r0, [pc, #0]	; (8002d78 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002d76:	4770      	bx	lr
 8002d78:	20000040 	.word	0x20000040

08002d7c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002d7c:	2343      	movs	r3, #67	; 0x43
 8002d7e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002d80:	4800      	ldr	r0, [pc, #0]	; (8002d84 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002d82:	4770      	bx	lr
 8002d84:	20000084 	.word	0x20000084

08002d88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002d88:	2343      	movs	r3, #67	; 0x43
 8002d8a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002d8c:	4800      	ldr	r0, [pc, #0]	; (8002d90 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002d8e:	4770      	bx	lr
 8002d90:	200000d4 	.word	0x200000d4

08002d94 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002d94:	230a      	movs	r3, #10
 8002d96:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002d98:	4800      	ldr	r0, [pc, #0]	; (8002d9c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002d9a:	4770      	bx	lr
 8002d9c:	200000c8 	.word	0x200000c8

08002da0 <USBD_CDC_DataOut>:
{      
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002da4:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002da8:	f001 fb54 	bl	8004454 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002dac:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002db0:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002db4:	b14b      	cbz	r3, 8002dca <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002db6:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002dba:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002dc4:	4798      	blx	r3
    return USBD_OK;
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002dca:	2002      	movs	r0, #2
}
 8002dcc:	bd38      	pop	{r3, r4, r5, pc}
	...

08002dd0 <USBD_CDC_Setup>:
{
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002dd2:	780f      	ldrb	r7, [r1, #0]
 8002dd4:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8002dd8:	4606      	mov	r6, r0
 8002dda:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002ddc:	d023      	beq.n	8002e26 <USBD_CDC_Setup+0x56>
 8002dde:	2b20      	cmp	r3, #32
 8002de0:	d119      	bne.n	8002e16 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8002de2:	88ca      	ldrh	r2, [r1, #6]
 8002de4:	784b      	ldrb	r3, [r1, #1]
 8002de6:	b1c2      	cbz	r2, 8002e1a <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8002de8:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002dea:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8002dee:	d50b      	bpl.n	8002e08 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002df0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8002df4:	4618      	mov	r0, r3
 8002df6:	688f      	ldr	r7, [r1, #8]
 8002df8:	4629      	mov	r1, r5
 8002dfa:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8002dfc:	88e2      	ldrh	r2, [r4, #6]
 8002dfe:	4629      	mov	r1, r5
 8002e00:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8002e02:	f000 fb84 	bl	800350e <USBD_CtlSendData>
      break;
 8002e06:	e006      	b.n	8002e16 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8002e08:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002e0c:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8002e10:	4629      	mov	r1, r5
 8002e12:	f000 fb91 	bl	8003538 <USBD_CtlPrepareRx>
}
 8002e16:	2000      	movs	r0, #0
 8002e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002e1a:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8002e1e:	6884      	ldr	r4, [r0, #8]
 8002e20:	4618      	mov	r0, r3
 8002e22:	47a0      	blx	r4
 8002e24:	e7f7      	b.n	8002e16 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8002e26:	784b      	ldrb	r3, [r1, #1]
 8002e28:	2b0a      	cmp	r3, #10
 8002e2a:	d1f4      	bne.n	8002e16 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4901      	ldr	r1, [pc, #4]	; (8002e34 <USBD_CDC_Setup+0x64>)
 8002e30:	e7e7      	b.n	8002e02 <USBD_CDC_Setup+0x32>
 8002e32:	bf00      	nop
 8002e34:	20000240 	.word	0x20000240

08002e38 <USBD_CDC_DeInit>:
{
 8002e38:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8002e3a:	2181      	movs	r1, #129	; 0x81
{
 8002e3c:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002e3e:	f001 faa1 	bl	8004384 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002e42:	2101      	movs	r1, #1
 8002e44:	4620      	mov	r0, r4
 8002e46:	f001 fa9d 	bl	8004384 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002e4a:	2182      	movs	r1, #130	; 0x82
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f001 fa99 	bl	8004384 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002e52:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002e56:	b153      	cbz	r3, 8002e6e <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002e58:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002e60:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002e64:	f003 ffa8 	bl	8006db8 <free>
    pdev->pClassData = NULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002e6e:	2000      	movs	r0, #0
 8002e70:	bd10      	pop	{r4, pc}

08002e72 <USBD_CDC_Init>:
{
 8002e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002e74:	7c03      	ldrb	r3, [r0, #16]
{
 8002e76:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002e78:	bb7b      	cbnz	r3, 8002eda <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8002e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e7e:	2202      	movs	r2, #2
 8002e80:	2181      	movs	r1, #129	; 0x81
 8002e82:	f001 fa6f 	bl	8004364 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002e86:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f001 fa68 	bl	8004364 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002e94:	2308      	movs	r3, #8
 8002e96:	2203      	movs	r2, #3
 8002e98:	2182      	movs	r1, #130	; 0x82
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	f001 fa62 	bl	8004364 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002ea0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002ea4:	f003 ff80 	bl	8006da8 <malloc>
 8002ea8:	4606      	mov	r6, r0
 8002eaa:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002eae:	b320      	cbz	r0, 8002efa <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002eb0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002eb8:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8002eba:	2500      	movs	r5, #0
 8002ebc:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8002ec0:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002ec4:	b987      	cbnz	r7, 8002ee8 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8002ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eca:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002ece:	2101      	movs	r1, #1
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f001 fab1 	bl	8004438 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002ed6:	4638      	mov	r0, r7
 8002ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8002eda:	2340      	movs	r3, #64	; 0x40
 8002edc:	2202      	movs	r2, #2
 8002ede:	2181      	movs	r1, #129	; 0x81
 8002ee0:	f001 fa40 	bl	8004364 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002ee4:	2340      	movs	r3, #64	; 0x40
 8002ee6:	e7d0      	b.n	8002e8a <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8002ee8:	2340      	movs	r3, #64	; 0x40
 8002eea:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002eee:	2101      	movs	r1, #1
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f001 faa1 	bl	8004438 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8002efa:	2001      	movs	r0, #1
}
 8002efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002efe <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8002efe:	b119      	cbz	r1, 8002f08 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002f00:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002f04:	2000      	movs	r0, #0
 8002f06:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002f08:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8002f0a:	4770      	bx	lr

08002f0c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002f0c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002f10:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002f12:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002f16:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002f1a:	4770      	bx	lr

08002f1c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002f1c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002f20:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002f22:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002f26:	4770      	bx	lr

08002f28 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002f28:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002f2c:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002f2e:	b162      	cbz	r2, 8002f4a <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002f30:	7c04      	ldrb	r4, [r0, #16]
 8002f32:	b944      	cbnz	r4, 8002f46 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002f34:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002f38:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	f001 fa7b 	bl	8004438 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002f42:	2000      	movs	r0, #0
 8002f44:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002f46:	2340      	movs	r3, #64	; 0x40
 8002f48:	e7f6      	b.n	8002f38 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002f4a:	2002      	movs	r0, #2
  }
}
 8002f4c:	bd10      	pop	{r4, pc}

08002f4e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002f4e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002f50:	b180      	cbz	r0, 8002f74 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002f52:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002f56:	b113      	cbz	r3, 8002f5e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002f5e:	b109      	cbz	r1, 8002f64 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002f60:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8002f6a:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002f6c:	f001 f9b8 	bl	80042e0 <USBD_LL_Init>
  
  return USBD_OK; 
 8002f70:	2000      	movs	r0, #0
 8002f72:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002f74:	2002      	movs	r0, #2
}
 8002f76:	bd08      	pop	{r3, pc}

08002f78 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002f78:	b119      	cbz	r1, 8002f82 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002f7a:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002f7e:	2000      	movs	r0, #0
 8002f80:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002f82:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002f84:	4770      	bx	lr

08002f86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002f86:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002f88:	f001 f9de 	bl	8004348 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	bd08      	pop	{r3, pc}

08002f90 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002f90:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002f92:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002f96:	b90b      	cbnz	r3, 8002f9c <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002f98:	2002      	movs	r0, #2
 8002f9a:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4798      	blx	r3
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d1f9      	bne.n	8002f98 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002fa4:	bd08      	pop	{r3, pc}

08002fa6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002fa6:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002fa8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4798      	blx	r3
  return USBD_OK;
}
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	bd08      	pop	{r3, pc}

08002fb4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002fb4:	b538      	push	{r3, r4, r5, lr}
 8002fb6:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002fb8:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f000 fa76 	bl	80034ae <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002fc2:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002fc4:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002fc8:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002fcc:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002fd0:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002fd4:	f001 031f 	and.w	r3, r1, #31
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d00e      	beq.n	8002ffa <USBD_LL_SetupStage+0x46>
 8002fdc:	d307      	bcc.n	8002fee <USBD_LL_SetupStage+0x3a>
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d010      	beq.n	8003004 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002fe2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f001 f9da 	bl	80043a0 <USBD_LL_StallEP>
    break;
 8002fec:	e003      	b.n	8002ff6 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002fee:	4629      	mov	r1, r5
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f000 f8e7 	bl	80031c4 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f000 f9db 	bl	80033b8 <USBD_StdItfReq>
    break;
 8003002:	e7f8      	b.n	8002ff6 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8003004:	4629      	mov	r1, r5
 8003006:	4620      	mov	r0, r4
 8003008:	f000 f9ee 	bl	80033e8 <USBD_StdEPReq>
    break;
 800300c:	e7f3      	b.n	8002ff6 <USBD_LL_SetupStage+0x42>

0800300e <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800300e:	b538      	push	{r3, r4, r5, lr}
 8003010:	4604      	mov	r4, r0
 8003012:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003014:	bb11      	cbnz	r1, 800305c <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003016:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800301a:	2b03      	cmp	r3, #3
 800301c:	d10f      	bne.n	800303e <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 800301e:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8003022:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003026:	4293      	cmp	r3, r2
 8003028:	d90b      	bls.n	8003042 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800302a:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800302c:	429a      	cmp	r2, r3
 800302e:	bf28      	it	cs
 8003030:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8003032:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8003036:	b292      	uxth	r2, r2
 8003038:	4629      	mov	r1, r5
 800303a:	f000 fa8c 	bl	8003556 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800303e:	2000      	movs	r0, #0
 8003040:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003042:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	b123      	cbz	r3, 8003054 <USBD_LL_DataOutStage+0x46>
 800304a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800304e:	2a03      	cmp	r2, #3
 8003050:	d100      	bne.n	8003054 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8003052:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003054:	4620      	mov	r0, r4
 8003056:	f000 fa86 	bl	8003566 <USBD_CtlSendStatus>
 800305a:	e7f0      	b.n	800303e <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800305c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0eb      	beq.n	800303e <USBD_LL_DataOutStage+0x30>
 8003066:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800306a:	2a03      	cmp	r2, #3
 800306c:	d1e7      	bne.n	800303e <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 800306e:	4798      	blx	r3
 8003070:	e7e5      	b.n	800303e <USBD_LL_DataOutStage+0x30>

08003072 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003072:	b570      	push	{r4, r5, r6, lr}
 8003074:	4613      	mov	r3, r2
 8003076:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003078:	460e      	mov	r6, r1
 800307a:	2900      	cmp	r1, #0
 800307c:	d13d      	bne.n	80030fa <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800307e:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003082:	2a02      	cmp	r2, #2
 8003084:	d10f      	bne.n	80030a6 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8003086:	69c5      	ldr	r5, [r0, #28]
 8003088:	6a02      	ldr	r2, [r0, #32]
 800308a:	4295      	cmp	r5, r2
 800308c:	d914      	bls.n	80030b8 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800308e:	1aaa      	subs	r2, r5, r2
 8003090:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8003092:	4619      	mov	r1, r3
 8003094:	b292      	uxth	r2, r2
 8003096:	f000 fa47 	bl	8003528 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800309a:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800309c:	461a      	mov	r2, r3
 800309e:	4619      	mov	r1, r3
 80030a0:	4620      	mov	r0, r4
 80030a2:	f001 f9c9 	bl	8004438 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80030a6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d102      	bne.n	80030b4 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80030b4:	2000      	movs	r0, #0
 80030b6:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80030b8:	6983      	ldr	r3, [r0, #24]
 80030ba:	fbb3 f5f2 	udiv	r5, r3, r2
 80030be:	fb02 3515 	mls	r5, r2, r5, r3
 80030c2:	b965      	cbnz	r5, 80030de <USBD_LL_DataInStage+0x6c>
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d80a      	bhi.n	80030de <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80030c8:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d206      	bcs.n	80030de <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80030d0:	462a      	mov	r2, r5
 80030d2:	f000 fa29 	bl	8003528 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80030d6:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80030da:	462b      	mov	r3, r5
 80030dc:	e7de      	b.n	800309c <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80030de:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	b12b      	cbz	r3, 80030f2 <USBD_LL_DataInStage+0x80>
 80030e6:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80030ea:	2a03      	cmp	r2, #3
 80030ec:	d101      	bne.n	80030f2 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80030ee:	4620      	mov	r0, r4
 80030f0:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80030f2:	4620      	mov	r0, r4
 80030f4:	f000 fa42 	bl	800357c <USBD_CtlReceiveStatus>
 80030f8:	e7d5      	b.n	80030a6 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80030fa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0d7      	beq.n	80030b4 <USBD_LL_DataInStage+0x42>
 8003104:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003108:	2a03      	cmp	r2, #3
 800310a:	d1d3      	bne.n	80030b4 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800310c:	4798      	blx	r3
 800310e:	e7d1      	b.n	80030b4 <USBD_LL_DataInStage+0x42>

08003110 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003110:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003112:	2200      	movs	r2, #0
{
 8003114:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8003116:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003118:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800311a:	2340      	movs	r3, #64	; 0x40
 800311c:	f001 f922 	bl	8004364 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003120:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003122:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8003126:	2200      	movs	r2, #0
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	4620      	mov	r0, r4
 800312c:	f001 f91a 	bl	8004364 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003130:	2301      	movs	r3, #1
 8003132:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003136:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800313a:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800313c:	b12b      	cbz	r3, 800314a <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800313e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003142:	7921      	ldrb	r1, [r4, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4620      	mov	r0, r4
 8003148:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800314a:	2000      	movs	r0, #0
 800314c:	bd38      	pop	{r3, r4, r5, pc}

0800314e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800314e:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003150:	2000      	movs	r0, #0
 8003152:	4770      	bx	lr

08003154 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003154:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003158:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800315c:	2304      	movs	r3, #4
 800315e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003162:	2000      	movs	r0, #0
 8003164:	4770      	bx	lr

08003166 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8003166:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800316a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800316e:	2000      	movs	r0, #0
 8003170:	4770      	bx	lr

08003172 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003172:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003174:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003178:	2a03      	cmp	r2, #3
 800317a:	d104      	bne.n	8003186 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800317c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	b103      	cbz	r3, 8003186 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003184:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003186:	2000      	movs	r0, #0
 8003188:	bd08      	pop	{r3, pc}

0800318a <USBD_LL_IsoINIncomplete>:
 800318a:	2000      	movs	r0, #0
 800318c:	4770      	bx	lr

0800318e <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 800318e:	2000      	movs	r0, #0
 8003190:	4770      	bx	lr

08003192 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8003192:	2000      	movs	r0, #0
 8003194:	4770      	bx	lr

08003196 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8003196:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003198:	2201      	movs	r2, #1
 800319a:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800319e:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 80031a2:	7901      	ldrb	r1, [r0, #4]
 80031a4:	6852      	ldr	r2, [r2, #4]
 80031a6:	4790      	blx	r2
   
  return USBD_OK;
}
 80031a8:	2000      	movs	r0, #0
 80031aa:	bd08      	pop	{r3, pc}

080031ac <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80031ac:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80031ae:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80031b0:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80031b2:	f001 f8f5 	bl	80043a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80031b6:	4620      	mov	r0, r4
 80031b8:	2100      	movs	r1, #0
}
 80031ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80031be:	f001 b8ef 	b.w	80043a0 <USBD_LL_StallEP>
	...

080031c4 <USBD_StdDevReq>:
{
 80031c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80031c6:	784b      	ldrb	r3, [r1, #1]
{
 80031c8:	4604      	mov	r4, r0
 80031ca:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80031cc:	2b09      	cmp	r3, #9
 80031ce:	d879      	bhi.n	80032c4 <USBD_StdDevReq+0x100>
 80031d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80031d4:	00e500c9 	.word	0x00e500c9
 80031d8:	00d90078 	.word	0x00d90078
 80031dc:	006d0078 	.word	0x006d0078
 80031e0:	0078000a 	.word	0x0078000a
 80031e4:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80031e8:	884b      	ldrh	r3, [r1, #2]
 80031ea:	0a1a      	lsrs	r2, r3, #8
 80031ec:	3a01      	subs	r2, #1
 80031ee:	2a06      	cmp	r2, #6
 80031f0:	d868      	bhi.n	80032c4 <USBD_StdDevReq+0x100>
 80031f2:	e8df f002 	tbb	[pc, r2]
 80031f6:	1c04      	.short	0x1c04
 80031f8:	49676729 	.word	0x49676729
 80031fc:	52          	.byte	0x52
 80031fd:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80031fe:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003202:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003204:	7c20      	ldrb	r0, [r4, #16]
 8003206:	f10d 0106 	add.w	r1, sp, #6
 800320a:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800320c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003210:	2a00      	cmp	r2, #0
 8003212:	d067      	beq.n	80032e4 <USBD_StdDevReq+0x120>
 8003214:	88eb      	ldrh	r3, [r5, #6]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d064      	beq.n	80032e4 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800321a:	429a      	cmp	r2, r3
 800321c:	bf28      	it	cs
 800321e:	461a      	movcs	r2, r3
 8003220:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8003224:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8003226:	4620      	mov	r0, r4
 8003228:	f000 f971 	bl	800350e <USBD_CtlSendData>
 800322c:	e05a      	b.n	80032e4 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800322e:	7c02      	ldrb	r2, [r0, #16]
 8003230:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003234:	b932      	cbnz	r2, 8003244 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003238:	f10d 0006 	add.w	r0, sp, #6
 800323c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800323e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003240:	7043      	strb	r3, [r0, #1]
 8003242:	e7e3      	b.n	800320c <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	e7f7      	b.n	8003238 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b05      	cmp	r3, #5
 800324c:	d83a      	bhi.n	80032c4 <USBD_StdDevReq+0x100>
 800324e:	e8df f003 	tbb	[pc, r3]
 8003252:	0703      	.short	0x0703
 8003254:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003258:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	e7d1      	b.n	8003204 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003260:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	e7cd      	b.n	8003204 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003268:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	e7c9      	b.n	8003204 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003270:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	e7c5      	b.n	8003204 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003278:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	e7c1      	b.n	8003204 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003280:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	e7bd      	b.n	8003204 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003288:	7c03      	ldrb	r3, [r0, #16]
 800328a:	b9db      	cbnz	r3, 80032c4 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800328c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003290:	f10d 0006 	add.w	r0, sp, #6
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003296:	4798      	blx	r3
 8003298:	e7b8      	b.n	800320c <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800329a:	7c03      	ldrb	r3, [r0, #16]
 800329c:	b993      	cbnz	r3, 80032c4 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800329e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80032a2:	f10d 0006 	add.w	r0, sp, #6
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80032aa:	2307      	movs	r3, #7
 80032ac:	e7c8      	b.n	8003240 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80032ae:	888b      	ldrh	r3, [r1, #4]
 80032b0:	b943      	cbnz	r3, 80032c4 <USBD_StdDevReq+0x100>
 80032b2:	88cb      	ldrh	r3, [r1, #6]
 80032b4:	b933      	cbnz	r3, 80032c4 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80032b6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80032ba:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80032bc:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80032be:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80032c2:	d103      	bne.n	80032cc <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80032c4:	4620      	mov	r0, r4
 80032c6:	f7ff ff71 	bl	80031ac <USBD_CtlError.constprop.0>
    break;
 80032ca:	e00b      	b.n	80032e4 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80032cc:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80032d0:	4629      	mov	r1, r5
 80032d2:	f001 f895 	bl	8004400 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80032d6:	4620      	mov	r0, r4
 80032d8:	f000 f945 	bl	8003566 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80032dc:	b12d      	cbz	r5, 80032ea <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80032de:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80032e0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80032e4:	2000      	movs	r0, #0
 80032e6:	b003      	add	sp, #12
 80032e8:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80032ea:	2301      	movs	r3, #1
 80032ec:	e7f8      	b.n	80032e0 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80032ee:	7889      	ldrb	r1, [r1, #2]
 80032f0:	4d30      	ldr	r5, [pc, #192]	; (80033b4 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80032f2:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80032f4:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80032f6:	d8e5      	bhi.n	80032c4 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80032f8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d00c      	beq.n	800331a <USBD_StdDevReq+0x156>
 8003300:	2b03      	cmp	r3, #3
 8003302:	d1df      	bne.n	80032c4 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8003304:	b9b1      	cbnz	r1, 8003334 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003306:	2302      	movs	r3, #2
 8003308:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800330c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800330e:	f7ff fe4a 	bl	8002fa6 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8003312:	4620      	mov	r0, r4
 8003314:	f000 f927 	bl	8003566 <USBD_CtlSendStatus>
 8003318:	e7e4      	b.n	80032e4 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800331a:	2900      	cmp	r1, #0
 800331c:	d0f9      	beq.n	8003312 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800331e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003320:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8003322:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003324:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003328:	4620      	mov	r0, r4
 800332a:	f7ff fe31 	bl	8002f90 <USBD_SetClassConfig>
 800332e:	2802      	cmp	r0, #2
 8003330:	d1ef      	bne.n	8003312 <USBD_StdDevReq+0x14e>
 8003332:	e7c7      	b.n	80032c4 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8003334:	6841      	ldr	r1, [r0, #4]
 8003336:	2901      	cmp	r1, #1
 8003338:	d0eb      	beq.n	8003312 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800333a:	b2c9      	uxtb	r1, r1
 800333c:	f7ff fe33 	bl	8002fa6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003340:	7829      	ldrb	r1, [r5, #0]
 8003342:	6061      	str	r1, [r4, #4]
 8003344:	e7f0      	b.n	8003328 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8003346:	88ca      	ldrh	r2, [r1, #6]
 8003348:	2a01      	cmp	r2, #1
 800334a:	d1bb      	bne.n	80032c4 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 800334c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003350:	2b02      	cmp	r3, #2
 8003352:	d003      	beq.n	800335c <USBD_StdDevReq+0x198>
 8003354:	2b03      	cmp	r3, #3
 8003356:	d1b5      	bne.n	80032c4 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8003358:	1d01      	adds	r1, r0, #4
 800335a:	e764      	b.n	8003226 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 800335c:	4601      	mov	r1, r0
 800335e:	2300      	movs	r3, #0
 8003360:	f841 3f08 	str.w	r3, [r1, #8]!
 8003364:	e75f      	b.n	8003226 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8003366:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800336a:	3b02      	subs	r3, #2
 800336c:	2b01      	cmp	r3, #1
 800336e:	d8a9      	bhi.n	80032c4 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003370:	2301      	movs	r3, #1
 8003372:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8003374:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003378:	b10b      	cbz	r3, 800337e <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800337a:	2303      	movs	r3, #3
 800337c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800337e:	2202      	movs	r2, #2
 8003380:	f104 010c 	add.w	r1, r4, #12
 8003384:	e74f      	b.n	8003226 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003386:	884b      	ldrh	r3, [r1, #2]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d1ab      	bne.n	80032e4 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800338c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003390:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003394:	4629      	mov	r1, r5
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4620      	mov	r0, r4
 800339a:	4798      	blx	r3
 800339c:	e7b9      	b.n	8003312 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800339e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80033a2:	3b02      	subs	r3, #2
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d88d      	bhi.n	80032c4 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80033a8:	884b      	ldrh	r3, [r1, #2]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d19a      	bne.n	80032e4 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80033ae:	2300      	movs	r3, #0
 80033b0:	e7ec      	b.n	800338c <USBD_StdDevReq+0x1c8>
 80033b2:	bf00      	nop
 80033b4:	20000241 	.word	0x20000241

080033b8 <USBD_StdItfReq>:
{
 80033b8:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80033ba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80033be:	2b03      	cmp	r3, #3
{
 80033c0:	4604      	mov	r4, r0
 80033c2:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80033c4:	d10d      	bne.n	80033e2 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80033c6:	790b      	ldrb	r3, [r1, #4]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d80a      	bhi.n	80033e2 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80033cc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80033d4:	88eb      	ldrh	r3, [r5, #6]
 80033d6:	b913      	cbnz	r3, 80033de <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80033d8:	4620      	mov	r0, r4
 80033da:	f000 f8c4 	bl	8003566 <USBD_CtlSendStatus>
}
 80033de:	2000      	movs	r0, #0
 80033e0:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80033e2:	f7ff fee3 	bl	80031ac <USBD_CtlError.constprop.0>
    break;
 80033e6:	e7fa      	b.n	80033de <USBD_StdItfReq+0x26>

080033e8 <USBD_StdEPReq>:
{
 80033e8:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80033ea:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80033ec:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80033ee:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80033f2:	2a20      	cmp	r2, #32
{
 80033f4:	4604      	mov	r4, r0
 80033f6:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80033f8:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80033fa:	d105      	bne.n	8003408 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80033fc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4798      	blx	r3
}
 8003404:	2000      	movs	r0, #0
 8003406:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8003408:	784a      	ldrb	r2, [r1, #1]
 800340a:	2a01      	cmp	r2, #1
 800340c:	d01c      	beq.n	8003448 <USBD_StdEPReq+0x60>
 800340e:	d32a      	bcc.n	8003466 <USBD_StdEPReq+0x7e>
 8003410:	2a03      	cmp	r2, #3
 8003412:	d1f7      	bne.n	8003404 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003414:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003418:	2a02      	cmp	r2, #2
 800341a:	d040      	beq.n	800349e <USBD_StdEPReq+0xb6>
 800341c:	2a03      	cmp	r2, #3
 800341e:	d002      	beq.n	8003426 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8003420:	f7ff fec4 	bl	80031ac <USBD_CtlError.constprop.0>
      break;
 8003424:	e7ee      	b.n	8003404 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003426:	884a      	ldrh	r2, [r1, #2]
 8003428:	b922      	cbnz	r2, 8003434 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800342a:	065e      	lsls	r6, r3, #25
 800342c:	d002      	beq.n	8003434 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800342e:	4619      	mov	r1, r3
 8003430:	f000 ffb6 	bl	80043a0 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003434:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003438:	4629      	mov	r1, r5
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4620      	mov	r0, r4
 800343e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003440:	4620      	mov	r0, r4
 8003442:	f000 f890 	bl	8003566 <USBD_CtlSendStatus>
 8003446:	e7dd      	b.n	8003404 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003448:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800344c:	2a02      	cmp	r2, #2
 800344e:	d026      	beq.n	800349e <USBD_StdEPReq+0xb6>
 8003450:	2a03      	cmp	r2, #3
 8003452:	d1e5      	bne.n	8003420 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003454:	884a      	ldrh	r2, [r1, #2]
 8003456:	2a00      	cmp	r2, #0
 8003458:	d1d4      	bne.n	8003404 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800345a:	0659      	lsls	r1, r3, #25
 800345c:	d0f0      	beq.n	8003440 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800345e:	4619      	mov	r1, r3
 8003460:	f000 ffac 	bl	80043bc <USBD_LL_ClearStallEP>
 8003464:	e7e6      	b.n	8003434 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8003466:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800346a:	2a02      	cmp	r2, #2
 800346c:	d017      	beq.n	800349e <USBD_StdEPReq+0xb6>
 800346e:	2a03      	cmp	r2, #3
 8003470:	d1d6      	bne.n	8003420 <USBD_StdEPReq+0x38>
 8003472:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003476:	f016 0f80 	tst.w	r6, #128	; 0x80
 800347a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800347e:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003480:	bf14      	ite	ne
 8003482:	3514      	addne	r5, #20
 8003484:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003488:	f000 ffa6 	bl	80043d8 <USBD_LL_IsStallEP>
 800348c:	b168      	cbz	r0, 80034aa <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800348e:	2301      	movs	r3, #1
 8003490:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8003492:	2202      	movs	r2, #2
 8003494:	4629      	mov	r1, r5
 8003496:	4620      	mov	r0, r4
 8003498:	f000 f839 	bl	800350e <USBD_CtlSendData>
      break;
 800349c:	e7b2      	b.n	8003404 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800349e:	065a      	lsls	r2, r3, #25
 80034a0:	d0b0      	beq.n	8003404 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80034a2:	4619      	mov	r1, r3
 80034a4:	f000 ff7c 	bl	80043a0 <USBD_LL_StallEP>
 80034a8:	e7ac      	b.n	8003404 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80034aa:	6028      	str	r0, [r5, #0]
 80034ac:	e7f1      	b.n	8003492 <USBD_StdEPReq+0xaa>

080034ae <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80034ae:	780b      	ldrb	r3, [r1, #0]
 80034b0:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80034b2:	784b      	ldrb	r3, [r1, #1]
 80034b4:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80034b6:	78ca      	ldrb	r2, [r1, #3]
 80034b8:	788b      	ldrb	r3, [r1, #2]
 80034ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80034be:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80034c0:	794a      	ldrb	r2, [r1, #5]
 80034c2:	790b      	ldrb	r3, [r1, #4]
 80034c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80034c8:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80034ca:	79ca      	ldrb	r2, [r1, #7]
 80034cc:	798b      	ldrb	r3, [r1, #6]
 80034ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80034d2:	80c3      	strh	r3, [r0, #6]
 80034d4:	4770      	bx	lr

080034d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80034d6:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80034d8:	b188      	cbz	r0, 80034fe <USBD_GetString+0x28>
 80034da:	4605      	mov	r5, r0
 80034dc:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80034de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2c00      	cmp	r4, #0
 80034e6:	d1f9      	bne.n	80034dc <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	3302      	adds	r3, #2
 80034ec:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80034ee:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80034f0:	2303      	movs	r3, #3
 80034f2:	704b      	strb	r3, [r1, #1]
 80034f4:	3801      	subs	r0, #1
 80034f6:	2302      	movs	r3, #2
    while (*desc != '\0') 
 80034f8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80034fc:	b905      	cbnz	r5, 8003500 <USBD_GetString+0x2a>
 80034fe:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8003506:	3302      	adds	r3, #2
 8003508:	b2db      	uxtb	r3, r3
 800350a:	548c      	strb	r4, [r1, r2]
 800350c:	e7f4      	b.n	80034f8 <USBD_GetString+0x22>

0800350e <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800350e:	b510      	push	{r4, lr}
 8003510:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003512:	2202      	movs	r2, #2
 8003514:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8003518:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800351a:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800351c:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800351e:	2100      	movs	r1, #0
 8003520:	f000 ff7c 	bl	800441c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003524:	2000      	movs	r0, #0
 8003526:	bd10      	pop	{r4, pc}

08003528 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003528:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800352a:	4613      	mov	r3, r2
 800352c:	460a      	mov	r2, r1
 800352e:	2100      	movs	r1, #0
 8003530:	f000 ff74 	bl	800441c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003534:	2000      	movs	r0, #0
 8003536:	bd08      	pop	{r3, pc}

08003538 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003538:	b510      	push	{r4, lr}
 800353a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800353c:	2203      	movs	r2, #3
 800353e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003542:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003546:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8003548:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800354c:	2100      	movs	r1, #0
 800354e:	f000 ff73 	bl	8004438 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003552:	2000      	movs	r0, #0
 8003554:	bd10      	pop	{r4, pc}

08003556 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003556:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8003558:	4613      	mov	r3, r2
 800355a:	460a      	mov	r2, r1
 800355c:	2100      	movs	r1, #0
 800355e:	f000 ff6b 	bl	8004438 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003562:	2000      	movs	r0, #0
 8003564:	bd08      	pop	{r3, pc}

08003566 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003566:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003568:	2304      	movs	r3, #4
 800356a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800356e:	2300      	movs	r3, #0
 8003570:	461a      	mov	r2, r3
 8003572:	4619      	mov	r1, r3
 8003574:	f000 ff52 	bl	800441c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003578:	2000      	movs	r0, #0
 800357a:	bd08      	pop	{r3, pc}

0800357c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800357c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800357e:	2305      	movs	r3, #5
 8003580:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003584:	2300      	movs	r3, #0
 8003586:	461a      	mov	r2, r3
 8003588:	4619      	mov	r1, r3
 800358a:	f000 ff55 	bl	8004438 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800358e:	2000      	movs	r0, #0
 8003590:	bd08      	pop	{r3, pc}
	...

08003594 <enableSensor>:
struct {
	VL53L1_Dev_t chip;
	uint8_t valid;
}sensors[16];

int enableSensor(int i) {
 8003594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	sensors[i].chip.I2cDevAddr = 0x29<<1;
 8003598:	4abe      	ldr	r2, [pc, #760]	; (8003894 <enableSensor+0x300>)
 800359a:	f44f 756a 	mov.w	r5, #936	; 0x3a8
 800359e:	fb05 2300 	mla	r3, r5, r0, r2
	if (i < 8) {
 80035a2:	2807      	cmp	r0, #7
 80035a4:	4690      	mov	r8, r2
		sensors[i].chip.I2cHandle = &hi2c1;
	} else {
		sensors[i].chip.I2cHandle = &hi2c2;
	}

	sensors[i].valid = 0;
 80035a6:	fb05 8500 	mla	r5, r5, r0, r8
		sensors[i].chip.I2cHandle = &hi2c1;
 80035aa:	bfd4      	ite	le
 80035ac:	4aba      	ldrle	r2, [pc, #744]	; (8003898 <enableSensor+0x304>)
		sensors[i].chip.I2cHandle = &hi2c2;
 80035ae:	4abb      	ldrgt	r2, [pc, #748]	; (800389c <enableSensor+0x308>)
 80035b0:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	sensors[i].chip.I2cDevAddr = 0x29<<1;
 80035b4:	2152      	movs	r1, #82	; 0x52
int enableSensor(int i) {
 80035b6:	b094      	sub	sp, #80	; 0x50
	sensors[i].chip.I2cDevAddr = 0x29<<1;
 80035b8:	f883 1398 	strb.w	r1, [r3, #920]	; 0x398
	sensors[i].valid = 0;
 80035bc:	2300      	movs	r3, #0

	char buff[15];
	sprintf(buff, "sensor: %d\n", i);
 80035be:	4602      	mov	r2, r0
	sensors[i].valid = 0;
 80035c0:	f885 33a4 	strb.w	r3, [r5, #932]	; 0x3a4
	sprintf(buff, "sensor: %d\n", i);
 80035c4:	49b6      	ldr	r1, [pc, #728]	; (80038a0 <enableSensor+0x30c>)
int enableSensor(int i) {
 80035c6:	4606      	mov	r6, r0
	sprintf(buff, "sensor: %d\n", i);
 80035c8:	a801      	add	r0, sp, #4
 80035ca:	f003 fccd 	bl	8006f68 <siprintf>
	HAL_UART_Transmit(&huart1, buff, strlen(buff), 0xFFFF);
 80035ce:	a801      	add	r0, sp, #4
 80035d0:	f7fc fe06 	bl	80001e0 <strlen>
 80035d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035d8:	b282      	uxth	r2, r0
 80035da:	a901      	add	r1, sp, #4
 80035dc:	48b1      	ldr	r0, [pc, #708]	; (80038a4 <enableSensor+0x310>)
 80035de:	f7fe fe51 	bl	8002284 <HAL_UART_Transmit>

	/*** VL53L1X Initialization ***/
	VL53L1_Error err;
	err = VL53L1_WaitDeviceBooted(&sensors[i].chip);
 80035e2:	4628      	mov	r0, r5
 80035e4:	f001 f80c 	bl	8004600 <VL53L1_WaitDeviceBooted>
	if (err != VL53L1_ERROR_NONE) {
 80035e8:	4602      	mov	r2, r0
 80035ea:	b1f0      	cbz	r0, 800362a <enableSensor+0x96>
		uint8_t msg[] = "VL53L1_WaitDeviceBooted failed    \n";
 80035ec:	4bae      	ldr	r3, [pc, #696]	; (80038a8 <enableSensor+0x314>)
 80035ee:	ac05      	add	r4, sp, #20
 80035f0:	f103 0720 	add.w	r7, r3, #32
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	4625      	mov	r5, r4
 80035fa:	c503      	stmia	r5!, {r0, r1}
 80035fc:	3308      	adds	r3, #8
 80035fe:	42bb      	cmp	r3, r7
 8003600:	462c      	mov	r4, r5
 8003602:	d1f7      	bne.n	80035f4 <enableSensor+0x60>
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	6028      	str	r0, [r5, #0]
		uint8_t len = sizeof(msg) - 1;
		msg[len - 1 - 1] = i + '0';
		msg[len - 3 - 1] = err + '0';
 8003608:	3230      	adds	r2, #48	; 0x30
 800360a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
		msg[len - 1 - 1] = i + '0';
 800360e:	3630      	adds	r6, #48	; 0x30
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8003610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003614:	2223      	movs	r2, #35	; 0x23
 8003616:	a905      	add	r1, sp, #20
 8003618:	48a2      	ldr	r0, [pc, #648]	; (80038a4 <enableSensor+0x310>)
		msg[len - 1 - 1] = i + '0';
 800361a:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 800361e:	f7fe fe31 	bl	8002284 <HAL_UART_Transmit>
		return 1;
 8003622:	2001      	movs	r0, #1
		msg[len - 1 - 1] = i + '0';
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
	}
	sensors[i].valid = 1;
	return 0;
}
 8003624:	b014      	add	sp, #80	; 0x50
 8003626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t msg[] = "VL53L1_WaitDeviceBooted OK  \n";
 800362a:	4ba0      	ldr	r3, [pc, #640]	; (80038ac <enableSensor+0x318>)
 800362c:	aa05      	add	r2, sp, #20
 800362e:	f103 0718 	add.w	r7, r3, #24
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	4614      	mov	r4, r2
 8003638:	c403      	stmia	r4!, {r0, r1}
 800363a:	3308      	adds	r3, #8
 800363c:	42bb      	cmp	r3, r7
 800363e:	4622      	mov	r2, r4
 8003640:	d1f7      	bne.n	8003632 <enableSensor+0x9e>
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	889b      	ldrh	r3, [r3, #4]
 8003646:	6020      	str	r0, [r4, #0]
		msg[len - 1 - 1] = i + '0';
 8003648:	b2f7      	uxtb	r7, r6
		uint8_t msg[] = "VL53L1_WaitDeviceBooted OK  \n";
 800364a:	80a3      	strh	r3, [r4, #4]
		msg[len - 1 - 1] = i + '0';
 800364c:	f107 0430 	add.w	r4, r7, #48	; 0x30
	err = VL53L1_SetDeviceAddress(&sensors[i].chip, (0x29+i+1) << 1);
 8003650:	372a      	adds	r7, #42	; 0x2a
 8003652:	007f      	lsls	r7, r7, #1
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8003654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003658:	221d      	movs	r2, #29
 800365a:	a905      	add	r1, sp, #20
	err = VL53L1_SetDeviceAddress(&sensors[i].chip, (0x29+i+1) << 1);
 800365c:	b2ff      	uxtb	r7, r7
		msg[len - 1 - 1] = i + '0';
 800365e:	b2e4      	uxtb	r4, r4
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8003660:	4890      	ldr	r0, [pc, #576]	; (80038a4 <enableSensor+0x310>)
		msg[len - 1 - 1] = i + '0';
 8003662:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8003666:	f7fe fe0d 	bl	8002284 <HAL_UART_Transmit>
	err = VL53L1_SetDeviceAddress(&sensors[i].chip, (0x29+i+1) << 1);
 800366a:	4639      	mov	r1, r7
 800366c:	4628      	mov	r0, r5
 800366e:	f000 ffc3 	bl	80045f8 <VL53L1_SetDeviceAddress>
	sensors[i].chip.I2cDevAddr = (0x29+i+1) << 1; //change address even in case of error to reduce miss-talk
 8003672:	f44f 736a 	mov.w	r3, #936	; 0x3a8
 8003676:	fb03 8306 	mla	r3, r3, r6, r8
	if (err != VL53L1_ERROR_NONE){
 800367a:	4602      	mov	r2, r0
	sensors[i].chip.I2cDevAddr = (0x29+i+1) << 1; //change address even in case of error to reduce miss-talk
 800367c:	f883 7398 	strb.w	r7, [r3, #920]	; 0x398
	if (err != VL53L1_ERROR_NONE){
 8003680:	b1d8      	cbz	r0, 80036ba <enableSensor+0x126>
		uint8_t msg[] = "VL53L1_SetDeviceAddress failed    \n";
 8003682:	4b8b      	ldr	r3, [pc, #556]	; (80038b0 <enableSensor+0x31c>)
 8003684:	ad05      	add	r5, sp, #20
 8003686:	f103 0720 	add.w	r7, r3, #32
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	6859      	ldr	r1, [r3, #4]
 800368e:	462e      	mov	r6, r5
 8003690:	c603      	stmia	r6!, {r0, r1}
 8003692:	3308      	adds	r3, #8
 8003694:	42bb      	cmp	r3, r7
 8003696:	4635      	mov	r5, r6
 8003698:	d1f7      	bne.n	800368a <enableSensor+0xf6>
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	6030      	str	r0, [r6, #0]
		msg[len - 3 - 1] = err + '0';
 800369e:	3230      	adds	r2, #48	; 0x30
 80036a0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80036a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036a8:	2223      	movs	r2, #35	; 0x23
 80036aa:	a905      	add	r1, sp, #20
 80036ac:	487d      	ldr	r0, [pc, #500]	; (80038a4 <enableSensor+0x310>)
		msg[len -1 -1] = i + '0';
 80036ae:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80036b2:	f7fe fde7 	bl	8002284 <HAL_UART_Transmit>
		return 2;
 80036b6:	2002      	movs	r0, #2
 80036b8:	e7b4      	b.n	8003624 <enableSensor+0x90>
		uint8_t msg[] = "VL53L1_SetDeviceAddress OK  \n";
 80036ba:	4b7e      	ldr	r3, [pc, #504]	; (80038b4 <enableSensor+0x320>)
 80036bc:	aa05      	add	r2, sp, #20
 80036be:	f103 0e18 	add.w	lr, r3, #24
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	6859      	ldr	r1, [r3, #4]
 80036c6:	4617      	mov	r7, r2
 80036c8:	c703      	stmia	r7!, {r0, r1}
 80036ca:	3308      	adds	r3, #8
 80036cc:	4573      	cmp	r3, lr
 80036ce:	463a      	mov	r2, r7
 80036d0:	d1f7      	bne.n	80036c2 <enableSensor+0x12e>
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	889b      	ldrh	r3, [r3, #4]
 80036d6:	6038      	str	r0, [r7, #0]
 80036d8:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80036da:	221d      	movs	r2, #29
 80036dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036e0:	a905      	add	r1, sp, #20
 80036e2:	4870      	ldr	r0, [pc, #448]	; (80038a4 <enableSensor+0x310>)
		msg[len - 1 - 1] = i + '0';
 80036e4:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80036e8:	f7fe fdcc 	bl	8002284 <HAL_UART_Transmit>
	err = VL53L1_DataInit(&sensors[i].chip);
 80036ec:	4628      	mov	r0, r5
 80036ee:	f001 f934 	bl	800495a <VL53L1_DataInit>
	if (err != VL53L1_ERROR_NONE) {
 80036f2:	4602      	mov	r2, r0
 80036f4:	b1d8      	cbz	r0, 800372e <enableSensor+0x19a>
		uint8_t msg[] = "VL53L1_DataInit failed    \n";
 80036f6:	4b70      	ldr	r3, [pc, #448]	; (80038b8 <enableSensor+0x324>)
 80036f8:	ad05      	add	r5, sp, #20
 80036fa:	f103 0718 	add.w	r7, r3, #24
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	462e      	mov	r6, r5
 8003704:	c603      	stmia	r6!, {r0, r1}
 8003706:	3308      	adds	r3, #8
 8003708:	42bb      	cmp	r3, r7
 800370a:	4635      	mov	r5, r6
 800370c:	d1f7      	bne.n	80036fe <enableSensor+0x16a>
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	6030      	str	r0, [r6, #0]
		msg[len - 3 - 1] = err + '0';
 8003712:	3230      	adds	r2, #48	; 0x30
 8003714:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8003718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800371c:	221b      	movs	r2, #27
 800371e:	a905      	add	r1, sp, #20
 8003720:	4860      	ldr	r0, [pc, #384]	; (80038a4 <enableSensor+0x310>)
		msg[len - 1 - 1] = i + '0';
 8003722:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8003726:	f7fe fdad 	bl	8002284 <HAL_UART_Transmit>
		return 3;
 800372a:	2003      	movs	r0, #3
 800372c:	e77a      	b.n	8003624 <enableSensor+0x90>
		uint8_t msg[] = "VL53L1_DataInit OK  \n";
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <enableSensor+0x328>)
 8003730:	aa05      	add	r2, sp, #20
 8003732:	f103 0e10 	add.w	lr, r3, #16
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	4617      	mov	r7, r2
 800373c:	c703      	stmia	r7!, {r0, r1}
 800373e:	3308      	adds	r3, #8
 8003740:	4573      	cmp	r3, lr
 8003742:	463a      	mov	r2, r7
 8003744:	d1f7      	bne.n	8003736 <enableSensor+0x1a2>
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	889b      	ldrh	r3, [r3, #4]
 800374a:	6038      	str	r0, [r7, #0]
 800374c:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 800374e:	2215      	movs	r2, #21
 8003750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003754:	a905      	add	r1, sp, #20
 8003756:	4853      	ldr	r0, [pc, #332]	; (80038a4 <enableSensor+0x310>)
		msg[len - 1 - 1] = i + '0';
 8003758:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 800375c:	f7fe fd92 	bl	8002284 <HAL_UART_Transmit>
	err = VL53L1_StaticInit(&sensors[i].chip);
 8003760:	4628      	mov	r0, r5
 8003762:	f001 f835 	bl	80047d0 <VL53L1_StaticInit>
	if (err != VL53L1_ERROR_NONE) {
 8003766:	4607      	mov	r7, r0
 8003768:	b1e8      	cbz	r0, 80037a6 <enableSensor+0x212>
		uint8_t msg[] = "VL53L1_StaticInit failed    \n";
 800376a:	4b55      	ldr	r3, [pc, #340]	; (80038c0 <enableSensor+0x32c>)
 800376c:	aa05      	add	r2, sp, #20
 800376e:	f103 0618 	add.w	r6, r3, #24
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	6859      	ldr	r1, [r3, #4]
 8003776:	4615      	mov	r5, r2
 8003778:	c503      	stmia	r5!, {r0, r1}
 800377a:	3308      	adds	r3, #8
 800377c:	42b3      	cmp	r3, r6
 800377e:	462a      	mov	r2, r5
 8003780:	d1f7      	bne.n	8003772 <enableSensor+0x1de>
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	889b      	ldrh	r3, [r3, #4]
 8003786:	6028      	str	r0, [r5, #0]
 8003788:	80ab      	strh	r3, [r5, #4]
		msg[len - 3 - 1] = err + '0';
 800378a:	3730      	adds	r7, #48	; 0x30
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 800378c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003790:	221d      	movs	r2, #29
 8003792:	a905      	add	r1, sp, #20
 8003794:	4843      	ldr	r0, [pc, #268]	; (80038a4 <enableSensor+0x310>)
		msg[len - 1 - 1] = i + '0';
 8003796:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
		msg[len - 3 - 1] = err + '0';
 800379a:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 800379e:	f7fe fd71 	bl	8002284 <HAL_UART_Transmit>
		return 4;
 80037a2:	2004      	movs	r0, #4
 80037a4:	e73e      	b.n	8003624 <enableSensor+0x90>
		uint8_t msg[] = "VL53L1_StaticInit OK  \n";
 80037a6:	4b47      	ldr	r3, [pc, #284]	; (80038c4 <enableSensor+0x330>)
 80037a8:	af05      	add	r7, sp, #20
 80037aa:	f103 0e18 	add.w	lr, r3, #24
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	6859      	ldr	r1, [r3, #4]
 80037b2:	463a      	mov	r2, r7
 80037b4:	c203      	stmia	r2!, {r0, r1}
 80037b6:	3308      	adds	r3, #8
 80037b8:	4573      	cmp	r3, lr
 80037ba:	4617      	mov	r7, r2
 80037bc:	d1f7      	bne.n	80037ae <enableSensor+0x21a>
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80037be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037c2:	2217      	movs	r2, #23
 80037c4:	a905      	add	r1, sp, #20
 80037c6:	4837      	ldr	r0, [pc, #220]	; (80038a4 <enableSensor+0x310>)
		msg[len - 1 - 1] = i + '0';
 80037c8:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80037cc:	f7fe fd5a 	bl	8002284 <HAL_UART_Transmit>
	err = VL53L1_SetDistanceMode(&sensors[i].chip, VL53L1_DISTANCEMODE_LONG);
 80037d0:	2103      	movs	r1, #3
 80037d2:	4628      	mov	r0, r5
 80037d4:	f000 ff18 	bl	8004608 <VL53L1_SetDistanceMode>
	if (err != VL53L1_ERROR_NONE) {
 80037d8:	4607      	mov	r7, r0
 80037da:	b1e8      	cbz	r0, 8003818 <enableSensor+0x284>
		uint8_t msg[] = "VL53L1_SetDistanceMode failed    \n";
 80037dc:	4b3a      	ldr	r3, [pc, #232]	; (80038c8 <enableSensor+0x334>)
 80037de:	aa05      	add	r2, sp, #20
 80037e0:	f103 0620 	add.w	r6, r3, #32
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	4615      	mov	r5, r2
 80037ea:	c503      	stmia	r5!, {r0, r1}
 80037ec:	3308      	adds	r3, #8
 80037ee:	42b3      	cmp	r3, r6
 80037f0:	462a      	mov	r2, r5
 80037f2:	d1f7      	bne.n	80037e4 <enableSensor+0x250>
 80037f4:	8819      	ldrh	r1, [r3, #0]
 80037f6:	789b      	ldrb	r3, [r3, #2]
 80037f8:	8029      	strh	r1, [r5, #0]
 80037fa:	70ab      	strb	r3, [r5, #2]
		msg[len - 3 - 1] = err + '0';
 80037fc:	3730      	adds	r7, #48	; 0x30
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80037fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003802:	2222      	movs	r2, #34	; 0x22
 8003804:	a905      	add	r1, sp, #20
 8003806:	4827      	ldr	r0, [pc, #156]	; (80038a4 <enableSensor+0x310>)
		msg[len - 1 - 1] = i + '0';
 8003808:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
		msg[len - 3 - 1] = err + '0';
 800380c:	f88d 7032 	strb.w	r7, [sp, #50]	; 0x32
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8003810:	f7fe fd38 	bl	8002284 <HAL_UART_Transmit>
		return 5;
 8003814:	2005      	movs	r0, #5
 8003816:	e705      	b.n	8003624 <enableSensor+0x90>
		uint8_t msg[] = "VL53L1_SetDistanceMode OK  \n";
 8003818:	4b2c      	ldr	r3, [pc, #176]	; (80038cc <enableSensor+0x338>)
 800381a:	aa05      	add	r2, sp, #20
 800381c:	f103 0e18 	add.w	lr, r3, #24
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	4617      	mov	r7, r2
 8003826:	c703      	stmia	r7!, {r0, r1}
 8003828:	3308      	adds	r3, #8
 800382a:	4573      	cmp	r3, lr
 800382c:	463a      	mov	r2, r7
 800382e:	d1f7      	bne.n	8003820 <enableSensor+0x28c>
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	791b      	ldrb	r3, [r3, #4]
 8003834:	6038      	str	r0, [r7, #0]
 8003836:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8003838:	221c      	movs	r2, #28
 800383a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800383e:	a905      	add	r1, sp, #20
 8003840:	4818      	ldr	r0, [pc, #96]	; (80038a4 <enableSensor+0x310>)
		msg[len - 1 - 1] = i + '0';
 8003842:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8003846:	f7fe fd1d 	bl	8002284 <HAL_UART_Transmit>
	err = VL53L1_SetMeasurementTimingBudgetMicroSeconds(&sensors[i].chip, 20000);
 800384a:	f644 6120 	movw	r1, #20000	; 0x4e20
 800384e:	4628      	mov	r0, r5
 8003850:	f000 ff16 	bl	8004680 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	if (err != VL53L1_ERROR_NONE) {
 8003854:	4602      	mov	r2, r0
 8003856:	2800      	cmp	r0, #0
 8003858:	d03c      	beq.n	80038d4 <enableSensor+0x340>
		uint8_t msg[] = "VL53L1_SetMeasurementTimingBudgetMicroSeconds failed    \n";
 800385a:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <enableSensor+0x33c>)
 800385c:	ad05      	add	r5, sp, #20
 800385e:	f103 0738 	add.w	r7, r3, #56	; 0x38
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	462e      	mov	r6, r5
 8003868:	c603      	stmia	r6!, {r0, r1}
 800386a:	3308      	adds	r3, #8
 800386c:	42bb      	cmp	r3, r7
 800386e:	4635      	mov	r5, r6
 8003870:	d1f7      	bne.n	8003862 <enableSensor+0x2ce>
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	8033      	strh	r3, [r6, #0]
		msg[len - 3 - 1] = err + '0';
 8003876:	3230      	adds	r2, #48	; 0x30
 8003878:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 800387c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003880:	2239      	movs	r2, #57	; 0x39
 8003882:	a905      	add	r1, sp, #20
 8003884:	4807      	ldr	r0, [pc, #28]	; (80038a4 <enableSensor+0x310>)
		msg[len - 1 - 1] = i + '0';
 8003886:	f88d 404b 	strb.w	r4, [sp, #75]	; 0x4b
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 800388a:	f7fe fcfb 	bl	8002284 <HAL_UART_Transmit>
		return 6;
 800388e:	2006      	movs	r0, #6
 8003890:	e6c8      	b.n	8003624 <enableSensor+0x90>
 8003892:	bf00      	nop
 8003894:	20000428 	.word	0x20000428
 8003898:	200002a8 	.word	0x200002a8
 800389c:	200002fc 	.word	0x200002fc
 80038a0:	08007670 	.word	0x08007670
 80038a4:	200003a8 	.word	0x200003a8
 80038a8:	0800767c 	.word	0x0800767c
 80038ac:	080076a0 	.word	0x080076a0
 80038b0:	080076be 	.word	0x080076be
 80038b4:	080076e2 	.word	0x080076e2
 80038b8:	08007700 	.word	0x08007700
 80038bc:	0800771c 	.word	0x0800771c
 80038c0:	08007732 	.word	0x08007732
 80038c4:	08007750 	.word	0x08007750
 80038c8:	08007768 	.word	0x08007768
 80038cc:	0800778b 	.word	0x0800778b
 80038d0:	080077a8 	.word	0x080077a8
		uint8_t msg[] = "VL53L1_SetMeasurementTimingBudgetMicroSeconds OK  \n";
 80038d4:	4b4a      	ldr	r3, [pc, #296]	; (8003a00 <enableSensor+0x46c>)
 80038d6:	aa05      	add	r2, sp, #20
 80038d8:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	4617      	mov	r7, r2
 80038e2:	c703      	stmia	r7!, {r0, r1}
 80038e4:	3308      	adds	r3, #8
 80038e6:	4573      	cmp	r3, lr
 80038e8:	463a      	mov	r2, r7
 80038ea:	d1f7      	bne.n	80038dc <enableSensor+0x348>
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	6038      	str	r0, [r7, #0]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80038f0:	2233      	movs	r2, #51	; 0x33
 80038f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038f6:	a905      	add	r1, sp, #20
 80038f8:	4842      	ldr	r0, [pc, #264]	; (8003a04 <enableSensor+0x470>)
		msg[len - 1 - 1] = i + '0';
 80038fa:	f88d 4045 	strb.w	r4, [sp, #69]	; 0x45
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80038fe:	f7fe fcc1 	bl	8002284 <HAL_UART_Transmit>
	err = VL53L1_SetInterMeasurementPeriodMilliSeconds(&sensors[i].chip, 25);
 8003902:	2119      	movs	r1, #25
 8003904:	4628      	mov	r0, r5
 8003906:	f000 ffdb 	bl	80048c0 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
	if (err != VL53L1_ERROR_NONE) {
 800390a:	4602      	mov	r2, r0
 800390c:	b1d8      	cbz	r0, 8003946 <enableSensor+0x3b2>
		uint8_t msg[] = "VL53L1_SetInterMeasurementPeriodMilliSeconds failed    \n";
 800390e:	4b3e      	ldr	r3, [pc, #248]	; (8003a08 <enableSensor+0x474>)
 8003910:	ad05      	add	r5, sp, #20
 8003912:	f103 0738 	add.w	r7, r3, #56	; 0x38
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	462e      	mov	r6, r5
 800391c:	c603      	stmia	r6!, {r0, r1}
 800391e:	3308      	adds	r3, #8
 8003920:	42bb      	cmp	r3, r7
 8003922:	4635      	mov	r5, r6
 8003924:	d1f7      	bne.n	8003916 <enableSensor+0x382>
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	7033      	strb	r3, [r6, #0]
		msg[len - 3 - 1] = err + '0';
 800392a:	3230      	adds	r2, #48	; 0x30
 800392c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8003930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003934:	2238      	movs	r2, #56	; 0x38
 8003936:	a905      	add	r1, sp, #20
 8003938:	4832      	ldr	r0, [pc, #200]	; (8003a04 <enableSensor+0x470>)
		msg[len - 1 - 1] = i + '0';
 800393a:	f88d 404a 	strb.w	r4, [sp, #74]	; 0x4a
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 800393e:	f7fe fca1 	bl	8002284 <HAL_UART_Transmit>
		return 7;
 8003942:	2007      	movs	r0, #7
 8003944:	e66e      	b.n	8003624 <enableSensor+0x90>
		uint8_t msg[] = "VL53L1_SetInterMeasurementPeriodMilliSeconds OK  \n";
 8003946:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <enableSensor+0x478>)
 8003948:	aa05      	add	r2, sp, #20
 800394a:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
 8003952:	4617      	mov	r7, r2
 8003954:	c703      	stmia	r7!, {r0, r1}
 8003956:	3308      	adds	r3, #8
 8003958:	4573      	cmp	r3, lr
 800395a:	463a      	mov	r2, r7
 800395c:	d1f7      	bne.n	800394e <enableSensor+0x3ba>
 800395e:	8819      	ldrh	r1, [r3, #0]
 8003960:	789b      	ldrb	r3, [r3, #2]
 8003962:	8039      	strh	r1, [r7, #0]
 8003964:	70bb      	strb	r3, [r7, #2]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8003966:	2232      	movs	r2, #50	; 0x32
 8003968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800396c:	a905      	add	r1, sp, #20
 800396e:	4825      	ldr	r0, [pc, #148]	; (8003a04 <enableSensor+0x470>)
		msg[len - 1 - 1] = i + '0';
 8003970:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 8003974:	f7fe fc86 	bl	8002284 <HAL_UART_Transmit>
	err = VL53L1_StartMeasurement(&sensors[i].chip);
 8003978:	4628      	mov	r0, r5
 800397a:	f001 f843 	bl	8004a04 <VL53L1_StartMeasurement>
	if (err != VL53L1_ERROR_NONE) {
 800397e:	4602      	mov	r2, r0
 8003980:	b1d8      	cbz	r0, 80039ba <enableSensor+0x426>
		uint8_t msg[] = "VL53L1_StartMeasurement failed    \n";
 8003982:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <enableSensor+0x47c>)
 8003984:	ad05      	add	r5, sp, #20
 8003986:	f103 0720 	add.w	r7, r3, #32
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	6859      	ldr	r1, [r3, #4]
 800398e:	462e      	mov	r6, r5
 8003990:	c603      	stmia	r6!, {r0, r1}
 8003992:	3308      	adds	r3, #8
 8003994:	42bb      	cmp	r3, r7
 8003996:	4635      	mov	r5, r6
 8003998:	d1f7      	bne.n	800398a <enableSensor+0x3f6>
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	6030      	str	r0, [r6, #0]
		msg[len - 3 - 1] = err + '0';
 800399e:	3230      	adds	r2, #48	; 0x30
 80039a0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80039a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039a8:	2223      	movs	r2, #35	; 0x23
 80039aa:	a905      	add	r1, sp, #20
 80039ac:	4815      	ldr	r0, [pc, #84]	; (8003a04 <enableSensor+0x470>)
		msg[len - 1 - 1] = i + '0';
 80039ae:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80039b2:	f7fe fc67 	bl	8002284 <HAL_UART_Transmit>
		return 8;
 80039b6:	2008      	movs	r0, #8
 80039b8:	e634      	b.n	8003624 <enableSensor+0x90>
		uint8_t msg[] = "VL53L1_StartMeasurement OK  \n";
 80039ba:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <enableSensor+0x480>)
 80039bc:	aa05      	add	r2, sp, #20
 80039be:	f103 0718 	add.w	r7, r3, #24
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	6859      	ldr	r1, [r3, #4]
 80039c6:	4615      	mov	r5, r2
 80039c8:	c503      	stmia	r5!, {r0, r1}
 80039ca:	3308      	adds	r3, #8
 80039cc:	42bb      	cmp	r3, r7
 80039ce:	462a      	mov	r2, r5
 80039d0:	d1f7      	bne.n	80039c2 <enableSensor+0x42e>
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	889b      	ldrh	r3, [r3, #4]
 80039d6:	6028      	str	r0, [r5, #0]
 80039d8:	80ab      	strh	r3, [r5, #4]
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80039da:	221d      	movs	r2, #29
 80039dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039e0:	a905      	add	r1, sp, #20
 80039e2:	4808      	ldr	r0, [pc, #32]	; (8003a04 <enableSensor+0x470>)
		msg[len - 1 - 1] = i + '0';
 80039e4:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
		HAL_UART_Transmit(&huart1, msg, len, 0xFFFF);
 80039e8:	f7fe fc4c 	bl	8002284 <HAL_UART_Transmit>
	sensors[i].valid = 1;
 80039ec:	f44f 736a 	mov.w	r3, #936	; 0x3a8
 80039f0:	fb03 8606 	mla	r6, r3, r6, r8
 80039f4:	2301      	movs	r3, #1
 80039f6:	f886 33a4 	strb.w	r3, [r6, #932]	; 0x3a4
	return 0;
 80039fa:	2000      	movs	r0, #0
 80039fc:	e612      	b.n	8003624 <enableSensor+0x90>
 80039fe:	bf00      	nop
 8003a00:	080077e2 	.word	0x080077e2
 8003a04:	200003a8 	.word	0x200003a8
 8003a08:	08007816 	.word	0x08007816
 8003a0c:	0800784f 	.word	0x0800784f
 8003a10:	08007882 	.word	0x08007882
 8003a14:	080078a6 	.word	0x080078a6

08003a18 <scan>:

void scan(I2C_HandleTypeDef *hi2c) {
 8003a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		{
			HAL_UART_Transmit(&huart1, ".", 1, 0xFFFF);
		}
		if (result == HAL_OK) {
			char buff[80];
			sprintf(buff, "0x%X\n", i << 1);
 8003a1c:	4e21      	ldr	r6, [pc, #132]	; (8003aa4 <scan+0x8c>)
			HAL_UART_Transmit(&huart1, buff, strlen(buff), 0xFFFF);
 8003a1e:	4d22      	ldr	r5, [pc, #136]	; (8003aa8 <scan+0x90>)
			HAL_UART_Transmit(&huart1, ".", 1, 0xFFFF);
 8003a20:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8003ab0 <scan+0x98>
void scan(I2C_HandleTypeDef *hi2c) {
 8003a24:	b094      	sub	sp, #80	; 0x50
 8003a26:	4607      	mov	r7, r0
 8003a28:	2402      	movs	r4, #2
		HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(hi2c, (i << 1), 2, 2);
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	b2a1      	uxth	r1, r4
 8003a30:	4638      	mov	r0, r7
 8003a32:	f7fd fb37 	bl	80010a4 <HAL_I2C_IsDeviceReady>
		if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 8003a36:	b340      	cbz	r0, 8003a8a <scan+0x72>
			HAL_UART_Transmit(&huart1, ".", 1, 0xFFFF);
 8003a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	4641      	mov	r1, r8
 8003a40:	4628      	mov	r0, r5
 8003a42:	3402      	adds	r4, #2
 8003a44:	f7fe fc1e 	bl	8002284 <HAL_UART_Transmit>
	for (int i = 1; i < 128; i++) {
 8003a48:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8003a4c:	d1ed      	bne.n	8003a2a <scan+0x12>
		}
	}
	char buff[] = "\nSCAN FINISH\n";
 8003a4e:	4b17      	ldr	r3, [pc, #92]	; (8003aac <scan+0x94>)
 8003a50:	466a      	mov	r2, sp
 8003a52:	f103 0608 	add.w	r6, r3, #8
 8003a56:	466d      	mov	r5, sp
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	6859      	ldr	r1, [r3, #4]
 8003a5c:	4614      	mov	r4, r2
 8003a5e:	c403      	stmia	r4!, {r0, r1}
 8003a60:	3308      	adds	r3, #8
 8003a62:	42b3      	cmp	r3, r6
 8003a64:	4622      	mov	r2, r4
 8003a66:	d1f7      	bne.n	8003a58 <scan+0x40>
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	889b      	ldrh	r3, [r3, #4]
 8003a6c:	6020      	str	r0, [r4, #0]
 8003a6e:	80a3      	strh	r3, [r4, #4]
	HAL_UART_Transmit(&huart1, buff, strlen(buff), 0xFFFF);
 8003a70:	4628      	mov	r0, r5
 8003a72:	f7fc fbb5 	bl	80001e0 <strlen>
 8003a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a7a:	b282      	uxth	r2, r0
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	480a      	ldr	r0, [pc, #40]	; (8003aa8 <scan+0x90>)
 8003a80:	f7fe fc00 	bl	8002284 <HAL_UART_Transmit>
}
 8003a84:	b014      	add	sp, #80	; 0x50
 8003a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			sprintf(buff, "0x%X\n", i << 1);
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	4631      	mov	r1, r6
 8003a8e:	4668      	mov	r0, sp
 8003a90:	f003 fa6a 	bl	8006f68 <siprintf>
			HAL_UART_Transmit(&huart1, buff, strlen(buff), 0xFFFF);
 8003a94:	4668      	mov	r0, sp
 8003a96:	f7fc fba3 	bl	80001e0 <strlen>
 8003a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a9e:	b282      	uxth	r2, r0
 8003aa0:	4669      	mov	r1, sp
 8003aa2:	e7cd      	b.n	8003a40 <scan+0x28>
 8003aa4:	080078f2 	.word	0x080078f2
 8003aa8:	200003a8 	.word	0x200003a8
 8003aac:	080078f8 	.word	0x080078f8
 8003ab0:	080078f0 	.word	0x080078f0

08003ab4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003ab4:	b530      	push	{r4, r5, lr}
 8003ab6:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <SystemClock_Config+0xa4>)
 8003aba:	2100      	movs	r1, #0
 8003abc:	9101      	str	r1, [sp, #4]
 8003abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	9b01      	ldr	r3, [sp, #4]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ad0:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <SystemClock_Config+0xa8>)
 8003ad2:	9102      	str	r1, [sp, #8]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ae2:	9302      	str	r3, [sp, #8]
 8003ae4:	9b02      	ldr	r3, [sp, #8]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aee:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003af0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003af4:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 12;
 8003af6:	230c      	movs	r3, #12
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003af8:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLM = 12;
 8003afa:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 96;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8003afc:	2504      	movs	r5, #4
	RCC_OscInitStruct.PLL.PLLN = 96;
 8003afe:	2360      	movs	r3, #96	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003b00:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b02:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 96;
 8003b04:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b06:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8003b08:	9513      	str	r5, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003b0a:	f7fd ffcd 	bl	8001aa8 <HAL_RCC_OscConfig>
 8003b0e:	b100      	cbz	r0, 8003b12 <SystemClock_Config+0x5e>
 8003b10:	e7fe      	b.n	8003b10 <SystemClock_Config+0x5c>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003b12:	230f      	movs	r3, #15
 8003b14:	9303      	str	r3, [sp, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b16:	9005      	str	r0, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b1c:	9007      	str	r0, [sp, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8003b1e:	2103      	movs	r1, #3
 8003b20:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b22:	9404      	str	r4, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b24:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8003b26:	f7fe f96f 	bl	8001e08 <HAL_RCC_ClockConfig>
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	b100      	cbz	r0, 8003b30 <SystemClock_Config+0x7c>
 8003b2e:	e7fe      	b.n	8003b2e <SystemClock_Config+0x7a>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8003b30:	f7fe fa04 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
 8003b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b38:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b3c:	f7fc fde6 	bl	800070c <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003b40:	4628      	mov	r0, r5
 8003b42:	f7fc fdf9 	bl	8000738 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003b46:	4622      	mov	r2, r4
 8003b48:	4621      	mov	r1, r4
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4e:	f7fc fd9d 	bl	800068c <HAL_NVIC_SetPriority>
}
 8003b52:	b015      	add	sp, #84	; 0x54
 8003b54:	bd30      	pop	{r4, r5, pc}
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40007000 	.word	0x40007000

08003b60 <main>:
int main(void) {
 8003b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b64:	b0a2      	sub	sp, #136	; 0x88
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003b66:	2400      	movs	r4, #0
	HAL_Init();
 8003b68:	f7fc fd3e 	bl	80005e8 <HAL_Init>
	SystemClock_Config();
 8003b6c:	f7ff ffa2 	bl	8003ab4 <SystemClock_Config>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003b70:	4ba9      	ldr	r3, [pc, #676]	; (8003e18 <main+0x2b8>)
 8003b72:	9402      	str	r4, [sp, #8]
 8003b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8003b76:	48a9      	ldr	r0, [pc, #676]	; (8003e1c <main+0x2bc>)
	hi2c1.Instance = I2C1;
 8003b78:	4ea9      	ldr	r6, [pc, #676]	; (8003e20 <main+0x2c0>)
	hi2c1.Init.ClockSpeed = 400000;
 8003b7a:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8003e58 <main+0x2f8>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003b7e:	f042 0204 	orr.w	r2, r2, #4
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
 8003b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b86:	f002 0204 	and.w	r2, r2, #4
 8003b8a:	9202      	str	r2, [sp, #8]
 8003b8c:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8003b8e:	9403      	str	r4, [sp, #12]
 8003b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
 8003b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003b9e:	9203      	str	r2, [sp, #12]
 8003ba0:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8003ba2:	9404      	str	r4, [sp, #16]
 8003ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
 8003bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bae:	f002 0201 	and.w	r2, r2, #1
 8003bb2:	9204      	str	r2, [sp, #16]
 8003bb4:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003bb6:	9405      	str	r4, [sp, #20]
 8003bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bba:	f042 0202 	orr.w	r2, r2, #2
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8003bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bc2:	f002 0202 	and.w	r2, r2, #2
 8003bc6:	9205      	str	r2, [sp, #20]
 8003bc8:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8003bca:	9406      	str	r4, [sp, #24]
 8003bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bce:	f042 0208 	orr.w	r2, r2, #8
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	9306      	str	r3, [sp, #24]
	HAL_GPIO_WritePin(GPIOC,
 8003bdc:	4622      	mov	r2, r4
 8003bde:	f241 010f 	movw	r1, #4111	; 0x100f
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8003be2:	9b06      	ldr	r3, [sp, #24]
	HAL_GPIO_WritePin(GPIOC,
 8003be4:	f7fc fea2 	bl	800092c <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_12,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8003be8:	4622      	mov	r2, r4
 8003bea:	f248 01f0 	movw	r1, #33008	; 0x80f0
 8003bee:	488d      	ldr	r0, [pc, #564]	; (8003e24 <main+0x2c4>)
 8003bf0:	f7fc fe9c 	bl	800092c <HAL_GPIO_WritePin>
	GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_15,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8003bf4:	4622      	mov	r2, r4
 8003bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bfa:	488b      	ldr	r0, [pc, #556]	; (8003e28 <main+0x2c8>)
 8003bfc:	f7fc fe96 	bl	800092c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC14 PC15 PC4
	 PC5 PC6 PC7 PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_4
 8003c00:	f24e 13f0 	movw	r3, #57840	; 0xe1f0
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c04:	a90e      	add	r1, sp, #56	; 0x38
 8003c06:	4885      	ldr	r0, [pc, #532]	; (8003e1c <main+0x2bc>)
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_4
 8003c08:	930e      	str	r3, [sp, #56]	; 0x38

	/*Configure GPIO pins : PC0 PC1 PC2 PC3
	 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
			| GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c0a:	2501      	movs	r5, #1
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c0c:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0e:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c10:	f7fc fdb6 	bl	8000780 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8003c14:	f241 030f 	movw	r3, #4111	; 0x100f
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c18:	a90e      	add	r1, sp, #56	; 0x38
 8003c1a:	4880      	ldr	r0, [pc, #512]	; (8003e1c <main+0x2bc>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8003c1c:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c1e:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c20:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c22:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c24:	f7fc fdac 	bl	8000780 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003c28:	2303      	movs	r3, #3
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2a:	a90e      	add	r1, sp, #56	; 0x38
 8003c2c:	487d      	ldr	r0, [pc, #500]	; (8003e24 <main+0x2c4>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003c2e:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c30:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c32:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c34:	f7fc fda4 	bl	8000780 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA5 PA6 PA7
	 PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
 8003c38:	f248 03f0 	movw	r3, #33008	; 0x80f0
			| GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3c:	a90e      	add	r1, sp, #56	; 0x38
 8003c3e:	4879      	ldr	r0, [pc, #484]	; (8003e24 <main+0x2c4>)
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
 8003c40:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c42:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c44:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c46:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c48:	f7fc fd9a 	bl	8000780 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB14
	 PB15 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_14
 8003c4c:	f24c 2307 	movw	r3, #49671	; 0xc207
			| GPIO_PIN_15 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c50:	a90e      	add	r1, sp, #56	; 0x38
 8003c52:	4875      	ldr	r0, [pc, #468]	; (8003e28 <main+0x2c8>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_14
 8003c54:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c56:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5a:	f7fc fd91 	bl	8000780 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c5e:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c60:	a90e      	add	r1, sp, #56	; 0x38
 8003c62:	4872      	ldr	r0, [pc, #456]	; (8003e2c <main+0x2cc>)
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c64:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c66:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c6a:	f7fc fd89 	bl	8000780 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c72:	486d      	ldr	r0, [pc, #436]	; (8003e28 <main+0x2c8>)
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c74:	930e      	str	r3, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c76:	a90e      	add	r1, sp, #56	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c78:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7a:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7c:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c7e:	f7fc fd7f 	bl	8000780 <HAL_GPIO_Init>
	hi2c1.Init.ClockSpeed = 400000;
 8003c82:	4b6b      	ldr	r3, [pc, #428]	; (8003e30 <main+0x2d0>)
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c84:	60b4      	str	r4, [r6, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c86:	f44f 4780 	mov.w	r7, #16384	; 0x4000
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003c8a:	4630      	mov	r0, r6
	hi2c1.Init.ClockSpeed = 400000;
 8003c8c:	e886 0108 	stmia.w	r6, {r3, r8}
	hi2c1.Init.OwnAddress1 = 0;
 8003c90:	60f4      	str	r4, [r6, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c92:	6137      	str	r7, [r6, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c94:	6174      	str	r4, [r6, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003c96:	61b4      	str	r4, [r6, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c98:	61f4      	str	r4, [r6, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c9a:	6234      	str	r4, [r6, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003c9c:	f7fc ff48 	bl	8000b30 <HAL_I2C_Init>
 8003ca0:	b100      	cbz	r0, 8003ca4 <main+0x144>
 8003ca2:	e7fe      	b.n	8003ca2 <main+0x142>
	hi2c2.Instance = I2C2;
 8003ca4:	4d63      	ldr	r5, [pc, #396]	; (8003e34 <main+0x2d4>)
 8003ca6:	4b64      	ldr	r3, [pc, #400]	; (8003e38 <main+0x2d8>)
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ca8:	60a8      	str	r0, [r5, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8003caa:	60e8      	str	r0, [r5, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cac:	6168      	str	r0, [r5, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8003cae:	61a8      	str	r0, [r5, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cb0:	61e8      	str	r0, [r5, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cb2:	6228      	str	r0, [r5, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8003cb4:	4628      	mov	r0, r5
	hi2c2.Init.ClockSpeed = 400000;
 8003cb6:	e885 0108 	stmia.w	r5, {r3, r8}
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cba:	612f      	str	r7, [r5, #16]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8003cbc:	f7fc ff38 	bl	8000b30 <HAL_I2C_Init>
 8003cc0:	b100      	cbz	r0, 8003cc4 <main+0x164>
 8003cc2:	e7fe      	b.n	8003cc2 <main+0x162>
	huart1.Instance = USART1;
 8003cc4:	4b5d      	ldr	r3, [pc, #372]	; (8003e3c <main+0x2dc>)
	huart1.Init.BaudRate = 115200;
 8003cc6:	4a5e      	ldr	r2, [pc, #376]	; (8003e40 <main+0x2e0>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cc8:	6098      	str	r0, [r3, #8]
	huart1.Init.BaudRate = 115200;
 8003cca:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003cce:	60d8      	str	r0, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003cd0:	6118      	str	r0, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003cd2:	240c      	movs	r4, #12
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cd4:	6198      	str	r0, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cd6:	61d8      	str	r0, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003cd8:	4618      	mov	r0, r3
	huart1.Init.BaudRate = 115200;
 8003cda:	e883 0084 	stmia.w	r3, {r2, r7}
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003cde:	615c      	str	r4, [r3, #20]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003ce0:	f7fe faa2 	bl	8002228 <HAL_UART_Init>
 8003ce4:	b100      	cbz	r0, 8003ce8 <main+0x188>
 8003ce6:	e7fe      	b.n	8003ce6 <main+0x186>
	huart2.Instance = USART2;
 8003ce8:	4b56      	ldr	r3, [pc, #344]	; (8003e44 <main+0x2e4>)
 8003cea:	4a57      	ldr	r2, [pc, #348]	; (8003e48 <main+0x2e8>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cec:	6098      	str	r0, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003cee:	60d8      	str	r0, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003cf0:	6118      	str	r0, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cf2:	6198      	str	r0, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cf4:	61d8      	str	r0, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003cf6:	4618      	mov	r0, r3
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003cf8:	615c      	str	r4, [r3, #20]
	huart2.Init.BaudRate = 115200;
 8003cfa:	e883 0084 	stmia.w	r3, {r2, r7}
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003cfe:	f7fe fa93 	bl	8002228 <HAL_UART_Init>
 8003d02:	4604      	mov	r4, r0
 8003d04:	b100      	cbz	r0, 8003d08 <main+0x1a8>
 8003d06:	e7fe      	b.n	8003d06 <main+0x1a6>
	MX_USB_DEVICE_Init();
 8003d08:	f000 fa1e 	bl	8004148 <MX_USB_DEVICE_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3,
 8003d0c:	4622      	mov	r2, r4
 8003d0e:	210f      	movs	r1, #15
 8003d10:	4842      	ldr	r0, [pc, #264]	; (8003e1c <main+0x2bc>)
 8003d12:	f7fc fe0b 	bl	800092c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7,
 8003d16:	4622      	mov	r2, r4
 8003d18:	21f0      	movs	r1, #240	; 0xf0
 8003d1a:	4842      	ldr	r0, [pc, #264]	; (8003e24 <main+0x2c4>)
 8003d1c:	f7fc fe06 	bl	800092c <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8003d20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d24:	f7fc fc8c 	bl	8000640 <HAL_Delay>
	scan(&hi2c1);
 8003d28:	4630      	mov	r0, r6
 8003d2a:	f7ff fe75 	bl	8003a18 <scan>
	scan(&hi2c2);
 8003d2e:	4628      	mov	r0, r5
 8003d30:	f7ff fe72 	bl	8003a18 <scan>
		HAL_GPIO_WritePin(xshut[i].port, xshut[i].mask, GPIO_PIN_SET);
 8003d34:	4d45      	ldr	r5, [pc, #276]	; (8003e4c <main+0x2ec>)
 8003d36:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
 8003d3a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8003d3e:	2201      	movs	r2, #1
 8003d40:	8899      	ldrh	r1, [r3, #4]
 8003d42:	f7fc fdf3 	bl	800092c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8003d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d4a:	f7fc fc79 	bl	8000640 <HAL_Delay>
		int error = enableSensor(i); //i2c1
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f7ff fc20 	bl	8003594 <enableSensor>
		error += enableSensor(i+8); //i2c2
 8003d54:	f104 0008 	add.w	r0, r4, #8
	for (int i = 0; i < 8; i++){
 8003d58:	3401      	adds	r4, #1
		error += enableSensor(i+8); //i2c2
 8003d5a:	f7ff fc1b 	bl	8003594 <enableSensor>
	for (int i = 0; i < 8; i++){
 8003d5e:	2c08      	cmp	r4, #8
 8003d60:	d1e9      	bne.n	8003d36 <main+0x1d6>
	scan(&hi2c1);
 8003d62:	482f      	ldr	r0, [pc, #188]	; (8003e20 <main+0x2c0>)
					sprintf((char*) buff, "error %d reading sensor %d\n", err, i);
 8003d64:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8003e5c <main+0x2fc>
					HAL_UART_Transmit(&huart1, buff, strlen((char*) buff), 0xFFFF);
 8003d68:	4e34      	ldr	r6, [pc, #208]	; (8003e3c <main+0x2dc>)
					sprintf((char*) buff, "%x\t%d\n", i, rangingData.RangeMilliMeter);
 8003d6a:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8003e60 <main+0x300>
	scan(&hi2c1);
 8003d6e:	f7ff fe53 	bl	8003a18 <scan>
	scan(&hi2c2);
 8003d72:	4830      	ldr	r0, [pc, #192]	; (8003e34 <main+0x2d4>)
 8003d74:	f7ff fe50 	bl	8003a18 <scan>
	uint32_t start = HAL_GetTick();
 8003d78:	f7fc fc5c 	bl	8000634 <HAL_GetTick>
 8003d7c:	4680      	mov	r8, r0
	for (int i = 0; i < 8; i++){
 8003d7e:	2700      	movs	r7, #0
 8003d80:	4c33      	ldr	r4, [pc, #204]	; (8003e50 <main+0x2f0>)
		for (int i = 0; i < 16; i++)
 8003d82:	2500      	movs	r5, #0
			uint8_t ready = 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	f88d 3007 	strb.w	r3, [sp, #7]
			if (sensors[i].valid){
 8003d8a:	f894 33a4 	ldrb.w	r3, [r4, #932]	; 0x3a4
 8003d8e:	b31b      	cbz	r3, 8003dd8 <main+0x278>
				VL53L1_Error err = VL53L1_GetMeasurementDataReady(&sensors[i].chip, &ready);
 8003d90:	f10d 0107 	add.w	r1, sp, #7
 8003d94:	4620      	mov	r0, r4
 8003d96:	f000 feb0 	bl	8004afa <VL53L1_GetMeasurementDataReady>
				if (!err && ready) {
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	d161      	bne.n	8003e64 <main+0x304>
 8003da0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003da4:	b1c3      	cbz	r3, 8003dd8 <main+0x278>
					VL53L1_GetRangingMeasurementData(&sensors[i].chip, &rangingData);
 8003da6:	a907      	add	r1, sp, #28
 8003da8:	4620      	mov	r0, r4
 8003daa:	f000 fea9 	bl	8004b00 <VL53L1_GetRangingMeasurementData>
					VL53L1_ClearInterruptAndStartMeasurement(&sensors[i].chip);
 8003dae:	4620      	mov	r0, r4
 8003db0:	f000 fe5f 	bl	8004a72 <VL53L1_ClearInterruptAndStartMeasurement>
					sprintf((char*) buff, "%x\t%d\n", i, rangingData.RangeMilliMeter);
 8003db4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8003db8:	462a      	mov	r2, r5
 8003dba:	4651      	mov	r1, sl
 8003dbc:	a80e      	add	r0, sp, #56	; 0x38
 8003dbe:	f003 f8d3 	bl	8006f68 <siprintf>
					HAL_UART_Transmit(&huart1, buff, strlen((char*) buff), 0xFFFF);
 8003dc2:	a80e      	add	r0, sp, #56	; 0x38
 8003dc4:	f7fc fa0c 	bl	80001e0 <strlen>
 8003dc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dcc:	b282      	uxth	r2, r0
 8003dce:	a90e      	add	r1, sp, #56	; 0x38
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	f7fe fa57 	bl	8002284 <HAL_UART_Transmit>
					fps++;
 8003dd6:	3701      	adds	r7, #1
		for (int i = 0; i < 16; i++)
 8003dd8:	3501      	adds	r5, #1
 8003dda:	2d10      	cmp	r5, #16
 8003ddc:	f504 746a 	add.w	r4, r4, #936	; 0x3a8
 8003de0:	d1d0      	bne.n	8003d84 <main+0x224>
		if (HAL_GetTick() - start >= 1000){
 8003de2:	f7fc fc27 	bl	8000634 <HAL_GetTick>
 8003de6:	eba0 0008 	sub.w	r0, r0, r8
 8003dea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003dee:	d3c7      	bcc.n	8003d80 <main+0x220>
			start = HAL_GetTick();
 8003df0:	f7fc fc20 	bl	8000634 <HAL_GetTick>
			sprintf((char*) buff, "FPS: %d\n", fps);
 8003df4:	463a      	mov	r2, r7
 8003df6:	4917      	ldr	r1, [pc, #92]	; (8003e54 <main+0x2f4>)
			start = HAL_GetTick();
 8003df8:	4680      	mov	r8, r0
			sprintf((char*) buff, "FPS: %d\n", fps);
 8003dfa:	a80e      	add	r0, sp, #56	; 0x38
 8003dfc:	f003 f8b4 	bl	8006f68 <siprintf>
			HAL_UART_Transmit(&huart1, buff, strlen((char*) buff), 0xFFFF);
 8003e00:	a80e      	add	r0, sp, #56	; 0x38
 8003e02:	f7fc f9ed 	bl	80001e0 <strlen>
 8003e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e0a:	b282      	uxth	r2, r0
 8003e0c:	a90e      	add	r1, sp, #56	; 0x38
 8003e0e:	4630      	mov	r0, r6
 8003e10:	f7fe fa38 	bl	8002284 <HAL_UART_Transmit>
 8003e14:	e7b3      	b.n	8003d7e <main+0x21e>
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40020800 	.word	0x40020800
 8003e20:	200002a8 	.word	0x200002a8
 8003e24:	40020000 	.word	0x40020000
 8003e28:	40020400 	.word	0x40020400
 8003e2c:	40020c00 	.word	0x40020c00
 8003e30:	40005400 	.word	0x40005400
 8003e34:	200002fc 	.word	0x200002fc
 8003e38:	40005800 	.word	0x40005800
 8003e3c:	200003a8 	.word	0x200003a8
 8003e40:	40011000 	.word	0x40011000
 8003e44:	200003e8 	.word	0x200003e8
 8003e48:	40004400 	.word	0x40004400
 8003e4c:	20000118 	.word	0x20000118
 8003e50:	20000428 	.word	0x20000428
 8003e54:	080078e7 	.word	0x080078e7
 8003e58:	00061a80 	.word	0x00061a80
 8003e5c:	080078cb 	.word	0x080078cb
 8003e60:	080078c4 	.word	0x080078c4
					sprintf((char*) buff, "error %d reading sensor %d\n", err, i);
 8003e64:	462b      	mov	r3, r5
 8003e66:	4649      	mov	r1, r9
 8003e68:	a80e      	add	r0, sp, #56	; 0x38
 8003e6a:	f003 f87d 	bl	8006f68 <siprintf>
					HAL_UART_Transmit(&huart1, buff, strlen((char*) buff), 0xFFFF);
 8003e6e:	a80e      	add	r0, sp, #56	; 0x38
 8003e70:	f7fc f9b6 	bl	80001e0 <strlen>
 8003e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e78:	b282      	uxth	r2, r0
 8003e7a:	a90e      	add	r1, sp, #56	; 0x38
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	f7fe fa01 	bl	8002284 <HAL_UART_Transmit>
 8003e82:	e7a9      	b.n	8003dd8 <main+0x278>

08003e84 <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 8003e84:	e7fe      	b.n	8003e84 <_Error_Handler>
	...

08003e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e88:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8a:	4b22      	ldr	r3, [pc, #136]	; (8003f14 <HAL_MspInit+0x8c>)
 8003e8c:	2400      	movs	r4, #0
 8003e8e:	9400      	str	r4, [sp, #0]
 8003e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e96:	645a      	str	r2, [r3, #68]	; 0x44
 8003e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e9a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003e9e:	9200      	str	r2, [sp, #0]
 8003ea0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	9401      	str	r4, [sp, #4]
 8003ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eb4:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eb8:	f7fc fbd6 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003ebc:	4622      	mov	r2, r4
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	f06f 000b 	mvn.w	r0, #11
 8003ec4:	f7fc fbe2 	bl	800068c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003ec8:	4622      	mov	r2, r4
 8003eca:	4621      	mov	r1, r4
 8003ecc:	f06f 000a 	mvn.w	r0, #10
 8003ed0:	f7fc fbdc 	bl	800068c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	f06f 0009 	mvn.w	r0, #9
 8003edc:	f7fc fbd6 	bl	800068c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	f06f 0004 	mvn.w	r0, #4
 8003ee8:	f7fc fbd0 	bl	800068c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003eec:	4622      	mov	r2, r4
 8003eee:	4621      	mov	r1, r4
 8003ef0:	f06f 0003 	mvn.w	r0, #3
 8003ef4:	f7fc fbca 	bl	800068c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003ef8:	4622      	mov	r2, r4
 8003efa:	4621      	mov	r1, r4
 8003efc:	f06f 0001 	mvn.w	r0, #1
 8003f00:	f7fc fbc4 	bl	800068c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003f04:	4622      	mov	r2, r4
 8003f06:	4621      	mov	r1, r4
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0c:	f7fc fbbe 	bl	800068c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f10:	b002      	add	sp, #8
 8003f12:	bd10      	pop	{r4, pc}
 8003f14:	40023800 	.word	0x40023800

08003f18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f18:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8003f1a:	6803      	ldr	r3, [r0, #0]
 8003f1c:	4a39      	ldr	r2, [pc, #228]	; (8004004 <HAL_I2C_MspInit+0xec>)
 8003f1e:	4293      	cmp	r3, r2
{
 8003f20:	b089      	sub	sp, #36	; 0x24
  if(hi2c->Instance==I2C1)
 8003f22:	d11b      	bne.n	8003f5c <HAL_I2C_MspInit+0x44>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f24:	23c0      	movs	r3, #192	; 0xc0
 8003f26:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f28:	2312      	movs	r3, #18
 8003f2a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f30:	2303      	movs	r3, #3
 8003f32:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f34:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f36:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f38:	4833      	ldr	r0, [pc, #204]	; (8004008 <HAL_I2C_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f3a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f3c:	f7fc fc20 	bl	8000780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f40:	2300      	movs	r3, #0
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	4b31      	ldr	r3, [pc, #196]	; (800400c <HAL_I2C_MspInit+0xf4>)
 8003f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f48:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003f58:	b009      	add	sp, #36	; 0x24
 8003f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hi2c->Instance==I2C2)
 8003f5c:	4a2c      	ldr	r2, [pc, #176]	; (8004010 <HAL_I2C_MspInit+0xf8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d126      	bne.n	8003fb0 <HAL_I2C_MspInit+0x98>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f66:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f68:	2612      	movs	r6, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003f6a:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f6c:	2501      	movs	r5, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f6e:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f70:	a903      	add	r1, sp, #12
 8003f72:	4825      	ldr	r0, [pc, #148]	; (8004008 <HAL_I2C_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003f74:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f76:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f78:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f7c:	f7fc fc00 	bl	8000780 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f80:	2308      	movs	r3, #8
 8003f82:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f84:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003f86:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f88:	481f      	ldr	r0, [pc, #124]	; (8004008 <HAL_I2C_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003f8a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f8c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f8e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f90:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f92:	f7fc fbf5 	bl	8000780 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	4b1c      	ldr	r3, [pc, #112]	; (800400c <HAL_I2C_MspInit+0xf4>)
 8003f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	9b01      	ldr	r3, [sp, #4]
 8003fae:	e7d3      	b.n	8003f58 <HAL_I2C_MspInit+0x40>
  else if(hi2c->Instance==I2C3)
 8003fb0:	4a18      	ldr	r2, [pc, #96]	; (8004014 <HAL_I2C_MspInit+0xfc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d1d0      	bne.n	8003f58 <HAL_I2C_MspInit+0x40>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fb6:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fba:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fbc:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fbe:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003fc0:	2404      	movs	r4, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fc2:	a903      	add	r1, sp, #12
 8003fc4:	4814      	ldr	r0, [pc, #80]	; (8004018 <HAL_I2C_MspInit+0x100>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fc8:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fca:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fcc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003fce:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fd0:	f7fc fbd6 	bl	8000780 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd8:	a903      	add	r1, sp, #12
 8003fda:	4810      	ldr	r0, [pc, #64]	; (800401c <HAL_I2C_MspInit+0x104>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003fdc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fde:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fe0:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003fe4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe6:	f7fc fbcb 	bl	8000780 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	9302      	str	r3, [sp, #8]
 8003fee:	4b07      	ldr	r3, [pc, #28]	; (800400c <HAL_I2C_MspInit+0xf4>)
 8003ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ff2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ffe:	9302      	str	r3, [sp, #8]
 8004000:	9b02      	ldr	r3, [sp, #8]
}
 8004002:	e7a9      	b.n	8003f58 <HAL_I2C_MspInit+0x40>
 8004004:	40005400 	.word	0x40005400
 8004008:	40020400 	.word	0x40020400
 800400c:	40023800 	.word	0x40023800
 8004010:	40005800 	.word	0x40005800
 8004014:	40005c00 	.word	0x40005c00
 8004018:	40020800 	.word	0x40020800
 800401c:	40020000 	.word	0x40020000

08004020 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004020:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8004022:	6803      	ldr	r3, [r0, #0]
 8004024:	4a23      	ldr	r2, [pc, #140]	; (80040b4 <HAL_UART_MspInit+0x94>)
 8004026:	4293      	cmp	r3, r2
{
 8004028:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 800402a:	d124      	bne.n	8004076 <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800402c:	2400      	movs	r4, #0
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <HAL_UART_MspInit+0x98>)
 8004030:	9401      	str	r4, [sp, #4]
 8004032:	6c59      	ldr	r1, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004034:	4821      	ldr	r0, [pc, #132]	; (80040bc <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004036:	f041 0110 	orr.w	r1, r1, #16
 800403a:	6459      	str	r1, [r3, #68]	; 0x44
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004046:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800404a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404c:	2302      	movs	r3, #2
 800404e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004050:	2301      	movs	r3, #1
 8004052:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004054:	2303      	movs	r3, #3
 8004056:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004058:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800405a:	2307      	movs	r3, #7
 800405c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800405e:	f7fc fb8f 	bl	8000780 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004062:	2025      	movs	r0, #37	; 0x25
 8004064:	4622      	mov	r2, r4
 8004066:	4621      	mov	r1, r4
 8004068:	f7fc fb10 	bl	800068c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800406c:	2025      	movs	r0, #37	; 0x25
 800406e:	f7fc fb41 	bl	80006f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004072:	b008      	add	sp, #32
 8004074:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8004076:	4a12      	ldr	r2, [pc, #72]	; (80040c0 <HAL_UART_MspInit+0xa0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d1fa      	bne.n	8004072 <HAL_UART_MspInit+0x52>
    __HAL_RCC_USART2_CLK_ENABLE();
 800407c:	2300      	movs	r3, #0
 800407e:	9302      	str	r3, [sp, #8]
 8004080:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <HAL_UART_MspInit+0x98>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004082:	480e      	ldr	r0, [pc, #56]	; (80040bc <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004086:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	9302      	str	r3, [sp, #8]
 8004094:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004096:	230c      	movs	r3, #12
 8004098:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409a:	2302      	movs	r3, #2
 800409c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800409e:	2301      	movs	r3, #1
 80040a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a2:	2303      	movs	r3, #3
 80040a4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040a8:	2307      	movs	r3, #7
 80040aa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ac:	f7fc fb68 	bl	8000780 <HAL_GPIO_Init>
}
 80040b0:	e7df      	b.n	8004072 <HAL_UART_MspInit+0x52>
 80040b2:	bf00      	nop
 80040b4:	40011000 	.word	0x40011000
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40020000 	.word	0x40020000
 80040c0:	40004400 	.word	0x40004400

080040c4 <NMI_Handler>:
 80040c4:	4770      	bx	lr

080040c6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80040c6:	e7fe      	b.n	80040c6 <HardFault_Handler>

080040c8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80040c8:	e7fe      	b.n	80040c8 <MemManage_Handler>

080040ca <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80040ca:	e7fe      	b.n	80040ca <BusFault_Handler>

080040cc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80040cc:	e7fe      	b.n	80040cc <UsageFault_Handler>

080040ce <SVC_Handler>:
 80040ce:	4770      	bx	lr

080040d0 <DebugMon_Handler>:
 80040d0:	4770      	bx	lr

080040d2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80040d2:	4770      	bx	lr

080040d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80040d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040d6:	f7fc faa1 	bl	800061c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80040de:	f7fc bb38 	b.w	8000752 <HAL_SYSTICK_IRQHandler>
	...

080040e4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80040e4:	4801      	ldr	r0, [pc, #4]	; (80040ec <USART1_IRQHandler+0x8>)
 80040e6:	f7fe b967 	b.w	80023b8 <HAL_UART_IRQHandler>
 80040ea:	bf00      	nop
 80040ec:	200003a8 	.word	0x200003a8

080040f0 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80040f0:	4801      	ldr	r0, [pc, #4]	; (80040f8 <OTG_FS_IRQHandler+0x8>)
 80040f2:	f7fd b907 	b.w	8001304 <HAL_PCD_IRQHandler>
 80040f6:	bf00      	nop
 80040f8:	200050cc 	.word	0x200050cc

080040fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040fc:	490f      	ldr	r1, [pc, #60]	; (800413c <SystemInit+0x40>)
 80040fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004102:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <SystemInit+0x44>)
 800410c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800410e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004116:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800411e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004122:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004124:	4a07      	ldr	r2, [pc, #28]	; (8004144 <SystemInit+0x48>)
 8004126:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800412e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004130:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004132:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004136:	608b      	str	r3, [r1, #8]
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	e000ed00 	.word	0xe000ed00
 8004140:	40023800 	.word	0x40023800
 8004144:	24003010 	.word	0x24003010

08004148 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004148:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800414a:	4c09      	ldr	r4, [pc, #36]	; (8004170 <MX_USB_DEVICE_Init+0x28>)
 800414c:	4909      	ldr	r1, [pc, #36]	; (8004174 <MX_USB_DEVICE_Init+0x2c>)
 800414e:	2200      	movs	r2, #0
 8004150:	4620      	mov	r0, r4
 8004152:	f7fe fefc 	bl	8002f4e <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8004156:	4908      	ldr	r1, [pc, #32]	; (8004178 <MX_USB_DEVICE_Init+0x30>)
 8004158:	4620      	mov	r0, r4
 800415a:	f7fe ff0d 	bl	8002f78 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800415e:	4620      	mov	r0, r4
 8004160:	4906      	ldr	r1, [pc, #24]	; (800417c <MX_USB_DEVICE_Init+0x34>)
 8004162:	f7fe fecc 	bl	8002efe <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8004166:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 800416c:	f7fe bf0b 	b.w	8002f86 <USBD_Start>
 8004170:	20003ea8 	.word	0x20003ea8
 8004174:	2000016c 	.word	0x2000016c
 8004178:	20000008 	.word	0x20000008
 800417c:	2000015c 	.word	0x2000015c

08004180 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004180:	2000      	movs	r0, #0
 8004182:	4770      	bx	lr

08004184 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004184:	2000      	movs	r0, #0
 8004186:	4770      	bx	lr

08004188 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004188:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800418a:	4c05      	ldr	r4, [pc, #20]	; (80041a0 <CDC_Receive_FS+0x18>)
 800418c:	4601      	mov	r1, r0
 800418e:	4620      	mov	r0, r4
 8004190:	f7fe fec4 	bl	8002f1c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004194:	4620      	mov	r0, r4
 8004196:	f7fe fec7 	bl	8002f28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800419a:	2000      	movs	r0, #0
 800419c:	bd10      	pop	{r4, pc}
 800419e:	bf00      	nop
 80041a0:	20003ea8 	.word	0x20003ea8

080041a4 <CDC_Init_FS>:
{
 80041a4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80041a6:	4c06      	ldr	r4, [pc, #24]	; (80041c0 <CDC_Init_FS+0x1c>)
 80041a8:	4906      	ldr	r1, [pc, #24]	; (80041c4 <CDC_Init_FS+0x20>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	4620      	mov	r0, r4
 80041ae:	f7fe fead 	bl	8002f0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80041b2:	4905      	ldr	r1, [pc, #20]	; (80041c8 <CDC_Init_FS+0x24>)
 80041b4:	4620      	mov	r0, r4
 80041b6:	f7fe feb1 	bl	8002f1c <USBD_CDC_SetRxBuffer>
}
 80041ba:	2000      	movs	r0, #0
 80041bc:	bd10      	pop	{r4, pc}
 80041be:	bf00      	nop
 80041c0:	20003ea8 	.word	0x20003ea8
 80041c4:	200048cc 	.word	0x200048cc
 80041c8:	200040cc 	.word	0x200040cc

080041cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80041cc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 80041ce:	6803      	ldr	r3, [r0, #0]
 80041d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80041d4:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_FS)
 80041d6:	d125      	bne.n	8004224 <HAL_PCD_MspInit+0x58>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80041d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80041dc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041de:	2302      	movs	r3, #2
 80041e0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e2:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80041ea:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ec:	480e      	ldr	r0, [pc, #56]	; (8004228 <HAL_PCD_MspInit+0x5c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80041ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f0:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f2:	f7fc fac5 	bl	8000780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <HAL_PCD_MspInit+0x60>)
 80041f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041fe:	635a      	str	r2, [r3, #52]	; 0x34
 8004200:	9400      	str	r4, [sp, #0]
 8004202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004204:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004208:	645a      	str	r2, [r3, #68]	; 0x44
 800420a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004210:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004212:	2043      	movs	r0, #67	; 0x43
 8004214:	4622      	mov	r2, r4
 8004216:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004218:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800421a:	f7fc fa37 	bl	800068c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800421e:	2043      	movs	r0, #67	; 0x43
 8004220:	f7fc fa68 	bl	80006f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004224:	b006      	add	sp, #24
 8004226:	bd10      	pop	{r4, pc}
 8004228:	40020000 	.word	0x40020000
 800422c:	40023800 	.word	0x40023800

08004230 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004230:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8004234:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004238:	f7fe bebc 	b.w	8002fb4 <USBD_LL_SetupStage>

0800423c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800423c:	231c      	movs	r3, #28
 800423e:	fb03 0301 	mla	r3, r3, r1, r0
 8004242:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004246:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800424a:	f7fe bee0 	b.w	800300e <USBD_LL_DataOutStage>

0800424e <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800424e:	231c      	movs	r3, #28
 8004250:	fb03 0301 	mla	r3, r3, r1, r0
 8004254:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800425a:	f7fe bf0a 	b.w	8003072 <USBD_LL_DataInStage>

0800425e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800425e:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004262:	f7fe bf86 	b.w	8003172 <USBD_LL_SOF>

08004266 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8004266:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8004268:	68c1      	ldr	r1, [r0, #12]
{ 
 800426a:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800426c:	3100      	adds	r1, #0
 800426e:	bf18      	it	ne
 8004270:	2101      	movne	r1, #1
 8004272:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004276:	f7fe ff6a 	bl	800314e <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800427a:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 800427e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004282:	f7fe bf45 	b.w	8003110 <USBD_LL_Reset>
	...

08004288 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004288:	b510      	push	{r4, lr}
 800428a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800428c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004290:	f7fe ff60 	bl	8003154 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004294:	6822      	ldr	r2, [r4, #0]
 8004296:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80042a2:	6a23      	ldr	r3, [r4, #32]
 80042a4:	b123      	cbz	r3, 80042b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80042a6:	4a03      	ldr	r2, [pc, #12]	; (80042b4 <HAL_PCD_SuspendCallback+0x2c>)
 80042a8:	6913      	ldr	r3, [r2, #16]
 80042aa:	f043 0306 	orr.w	r3, r3, #6
 80042ae:	6113      	str	r3, [r2, #16]
 80042b0:	bd10      	pop	{r4, pc}
 80042b2:	bf00      	nop
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80042b8:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80042bc:	f7fe bf53 	b.w	8003166 <USBD_LL_Resume>

080042c0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80042c0:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80042c4:	f7fe bf63 	b.w	800318e <USBD_LL_IsoOUTIncomplete>

080042c8 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80042c8:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80042cc:	f7fe bf5d 	b.w	800318a <USBD_LL_IsoINIncomplete>

080042d0 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80042d0:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80042d4:	f7fe bf5d 	b.w	8003192 <USBD_LL_DevConnected>

080042d8 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80042d8:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80042dc:	f7fe bf5b 	b.w	8003196 <USBD_LL_DevDisconnected>

080042e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80042e0:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80042e2:	7802      	ldrb	r2, [r0, #0]
 80042e4:	bb52      	cbnz	r2, 800433c <USBD_LL_Init+0x5c>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80042e6:	4b16      	ldr	r3, [pc, #88]	; (8004340 <USBD_LL_Init+0x60>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80042e8:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 80042ea:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 80042ee:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80042f2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80042f6:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80042fa:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80042fc:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80042fe:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004300:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8004302:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004304:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004306:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004308:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800430a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800430c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004310:	f7fc ff76 	bl	8001200 <HAL_PCD_Init>
 8004314:	b120      	cbz	r0, 8004320 <USBD_LL_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004316:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800431a:	480a      	ldr	r0, [pc, #40]	; (8004344 <USBD_LL_Init+0x64>)
 800431c:	f7ff fdb2 	bl	8003e84 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004320:	2180      	movs	r1, #128	; 0x80
 8004322:	4807      	ldr	r0, [pc, #28]	; (8004340 <USBD_LL_Init+0x60>)
 8004324:	f7fd fbbb 	bl	8001a9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8004328:	2240      	movs	r2, #64	; 0x40
 800432a:	2100      	movs	r1, #0
 800432c:	4804      	ldr	r0, [pc, #16]	; (8004340 <USBD_LL_Init+0x60>)
 800432e:	f7fd fb95 	bl	8001a5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004332:	2280      	movs	r2, #128	; 0x80
 8004334:	2101      	movs	r1, #1
 8004336:	4802      	ldr	r0, [pc, #8]	; (8004340 <USBD_LL_Init+0x60>)
 8004338:	f7fd fb90 	bl	8001a5c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 800433c:	2000      	movs	r0, #0
 800433e:	bd08      	pop	{r3, pc}
 8004340:	200050cc 	.word	0x200050cc
 8004344:	08007922 	.word	0x08007922

08004348 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004348:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800434a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800434e:	f7fc ffc3 	bl	80012d8 <HAL_PCD_Start>
 8004352:	2803      	cmp	r0, #3
 8004354:	bf9a      	itte	ls
 8004356:	4b02      	ldrls	r3, [pc, #8]	; (8004360 <USBD_LL_Start+0x18>)
 8004358:	5c18      	ldrbls	r0, [r3, r0]
 800435a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800435c:	bd08      	pop	{r3, pc}
 800435e:	bf00      	nop
 8004360:	0800791e 	.word	0x0800791e

08004364 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004364:	b510      	push	{r4, lr}
 8004366:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004368:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800436c:	4613      	mov	r3, r2
 800436e:	4622      	mov	r2, r4
 8004370:	f7fd fa86 	bl	8001880 <HAL_PCD_EP_Open>
 8004374:	2803      	cmp	r0, #3
 8004376:	bf9a      	itte	ls
 8004378:	4b01      	ldrls	r3, [pc, #4]	; (8004380 <USBD_LL_OpenEP+0x1c>)
 800437a:	5c18      	ldrbls	r0, [r3, r0]
 800437c:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800437e:	bd10      	pop	{r4, pc}
 8004380:	0800791e 	.word	0x0800791e

08004384 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004384:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004386:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800438a:	f7fd faa7 	bl	80018dc <HAL_PCD_EP_Close>
 800438e:	2803      	cmp	r0, #3
 8004390:	bf9a      	itte	ls
 8004392:	4b02      	ldrls	r3, [pc, #8]	; (800439c <USBD_LL_CloseEP+0x18>)
 8004394:	5c18      	ldrbls	r0, [r3, r0]
 8004396:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004398:	bd08      	pop	{r3, pc}
 800439a:	bf00      	nop
 800439c:	0800791e 	.word	0x0800791e

080043a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80043a0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80043a2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80043a6:	f7fd fb08 	bl	80019ba <HAL_PCD_EP_SetStall>
 80043aa:	2803      	cmp	r0, #3
 80043ac:	bf9a      	itte	ls
 80043ae:	4b02      	ldrls	r3, [pc, #8]	; (80043b8 <USBD_LL_StallEP+0x18>)
 80043b0:	5c18      	ldrbls	r0, [r3, r0]
 80043b2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80043b4:	bd08      	pop	{r3, pc}
 80043b6:	bf00      	nop
 80043b8:	0800791e 	.word	0x0800791e

080043bc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80043bc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80043be:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80043c2:	f7fd fb26 	bl	8001a12 <HAL_PCD_EP_ClrStall>
 80043c6:	2803      	cmp	r0, #3
 80043c8:	bf9a      	itte	ls
 80043ca:	4b02      	ldrls	r3, [pc, #8]	; (80043d4 <USBD_LL_ClearStallEP+0x18>)
 80043cc:	5c18      	ldrbls	r0, [r3, r0]
 80043ce:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80043d0:	bd08      	pop	{r3, pc}
 80043d2:	bf00      	nop
 80043d4:	0800791e 	.word	0x0800791e

080043d8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80043d8:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80043dc:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 80043e0:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80043e4:	bf1b      	ittet	ne
 80043e6:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80043ea:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80043ee:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80043f2:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80043f6:	bf08      	it	eq
 80043f8:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 80043fc:	4770      	bx	lr
	...

08004400 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004400:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004402:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004406:	f7fd fa29 	bl	800185c <HAL_PCD_SetAddress>
 800440a:	2803      	cmp	r0, #3
 800440c:	bf9a      	itte	ls
 800440e:	4b02      	ldrls	r3, [pc, #8]	; (8004418 <USBD_LL_SetUSBAddress+0x18>)
 8004410:	5c18      	ldrbls	r0, [r3, r0]
 8004412:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004414:	bd08      	pop	{r3, pc}
 8004416:	bf00      	nop
 8004418:	0800791e 	.word	0x0800791e

0800441c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800441c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800441e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004422:	f7fd faaa 	bl	800197a <HAL_PCD_EP_Transmit>
 8004426:	2803      	cmp	r0, #3
 8004428:	bf9a      	itte	ls
 800442a:	4b02      	ldrls	r3, [pc, #8]	; (8004434 <USBD_LL_Transmit+0x18>)
 800442c:	5c18      	ldrbls	r0, [r3, r0]
 800442e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8004430:	bd08      	pop	{r3, pc}
 8004432:	bf00      	nop
 8004434:	0800791e 	.word	0x0800791e

08004438 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004438:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800443a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800443e:	f7fd fa70 	bl	8001922 <HAL_PCD_EP_Receive>
 8004442:	2803      	cmp	r0, #3
 8004444:	bf9a      	itte	ls
 8004446:	4b02      	ldrls	r3, [pc, #8]	; (8004450 <USBD_LL_PrepareReceive+0x18>)
 8004448:	5c18      	ldrbls	r0, [r3, r0]
 800444a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 800444c:	bd08      	pop	{r3, pc}
 800444e:	bf00      	nop
 8004450:	0800791e 	.word	0x0800791e

08004454 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004454:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004456:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800445a:	f7fd fa86 	bl	800196a <HAL_PCD_EP_GetRxCount>
}
 800445e:	bd08      	pop	{r3, pc}

08004460 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8004460:	2312      	movs	r3, #18
 8004462:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004464:	4800      	ldr	r0, [pc, #0]	; (8004468 <USBD_FS_DeviceDescriptor+0x8>)
 8004466:	4770      	bx	lr
 8004468:	20000188 	.word	0x20000188

0800446c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 800446c:	2304      	movs	r3, #4
 800446e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004470:	4800      	ldr	r0, [pc, #0]	; (8004474 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004472:	4770      	bx	lr
 8004474:	2000019c 	.word	0x2000019c

08004478 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004478:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800447a:	4c04      	ldr	r4, [pc, #16]	; (800448c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800447c:	4804      	ldr	r0, [pc, #16]	; (8004490 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800447e:	460a      	mov	r2, r1
 8004480:	4621      	mov	r1, r4
 8004482:	f7ff f828 	bl	80034d6 <USBD_GetString>
  return USBD_StrDesc;
}
 8004486:	4620      	mov	r0, r4
 8004488:	bd10      	pop	{r4, pc}
 800448a:	bf00      	nop
 800448c:	200054bc 	.word	0x200054bc
 8004490:	0800794e 	.word	0x0800794e

08004494 <USBD_FS_ProductStrDescriptor>:
{
 8004494:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004496:	4c04      	ldr	r4, [pc, #16]	; (80044a8 <USBD_FS_ProductStrDescriptor+0x14>)
 8004498:	4804      	ldr	r0, [pc, #16]	; (80044ac <USBD_FS_ProductStrDescriptor+0x18>)
 800449a:	460a      	mov	r2, r1
 800449c:	4621      	mov	r1, r4
 800449e:	f7ff f81a 	bl	80034d6 <USBD_GetString>
}
 80044a2:	4620      	mov	r0, r4
 80044a4:	bd10      	pop	{r4, pc}
 80044a6:	bf00      	nop
 80044a8:	200054bc 	.word	0x200054bc
 80044ac:	08007961 	.word	0x08007961

080044b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80044b0:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80044b2:	4c04      	ldr	r4, [pc, #16]	; (80044c4 <USBD_FS_SerialStrDescriptor+0x14>)
 80044b4:	4804      	ldr	r0, [pc, #16]	; (80044c8 <USBD_FS_SerialStrDescriptor+0x18>)
 80044b6:	460a      	mov	r2, r1
 80044b8:	4621      	mov	r1, r4
 80044ba:	f7ff f80c 	bl	80034d6 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80044be:	4620      	mov	r0, r4
 80044c0:	bd10      	pop	{r4, pc}
 80044c2:	bf00      	nop
 80044c4:	200054bc 	.word	0x200054bc
 80044c8:	08007977 	.word	0x08007977

080044cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80044cc:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80044ce:	4c04      	ldr	r4, [pc, #16]	; (80044e0 <USBD_FS_ConfigStrDescriptor+0x14>)
 80044d0:	4804      	ldr	r0, [pc, #16]	; (80044e4 <USBD_FS_ConfigStrDescriptor+0x18>)
 80044d2:	460a      	mov	r2, r1
 80044d4:	4621      	mov	r1, r4
 80044d6:	f7fe fffe 	bl	80034d6 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80044da:	4620      	mov	r0, r4
 80044dc:	bd10      	pop	{r4, pc}
 80044de:	bf00      	nop
 80044e0:	200054bc 	.word	0x200054bc
 80044e4:	08007935 	.word	0x08007935

080044e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80044e8:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80044ea:	4c04      	ldr	r4, [pc, #16]	; (80044fc <USBD_FS_InterfaceStrDescriptor+0x14>)
 80044ec:	4804      	ldr	r0, [pc, #16]	; (8004500 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80044ee:	460a      	mov	r2, r1
 80044f0:	4621      	mov	r1, r4
 80044f2:	f7fe fff0 	bl	80034d6 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80044f6:	4620      	mov	r0, r4
 80044f8:	bd10      	pop	{r4, pc}
 80044fa:	bf00      	nop
 80044fc:	200054bc 	.word	0x200054bc
 8004500:	08007940 	.word	0x08007940

08004504 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8004504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8004508:	2903      	cmp	r1, #3
{
 800450a:	b088      	sub	sp, #32
 800450c:	4605      	mov	r5, r0
 800450e:	460c      	mov	r4, r1
 8004510:	461f      	mov	r7, r3
	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8004512:	d030      	beq.n	8004576 <SetPresetMode+0x72>
 8004514:	2908      	cmp	r1, #8
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8004516:	bf14      	ite	ne
 8004518:	2620      	movne	r6, #32
 800451a:	2640      	moveq	r6, #64	; 0x40
	VL53L1_DevicePresetModes LightModes[3] = {
 800451c:	2302      	movs	r3, #2
 800451e:	f88d 3014 	strb.w	r3, [sp, #20]
 8004522:	2301      	movs	r3, #1
 8004524:	f88d 3015 	strb.w	r3, [sp, #21]
 8004528:	2303      	movs	r3, #3
 800452a:	f88d 3016 	strb.w	r3, [sp, #22]
	VL53L1_DevicePresetModes TimedModes[3] = {
 800452e:	2307      	movs	r3, #7
 8004530:	f88d 3018 	strb.w	r3, [sp, #24]
 8004534:	2306      	movs	r3, #6
 8004536:	f88d 3019 	strb.w	r3, [sp, #25]
 800453a:	2308      	movs	r3, #8
 800453c:	f88d 301a 	strb.w	r3, [sp, #26]
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8004540:	2324      	movs	r3, #36	; 0x24
 8004542:	f88d 301c 	strb.w	r3, [sp, #28]
 8004546:	2325      	movs	r3, #37	; 0x25
 8004548:	f88d 301d 	strb.w	r3, [sp, #29]
	switch (DistanceMode) {
 800454c:	2a01      	cmp	r2, #1
	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 800454e:	f04f 0326 	mov.w	r3, #38	; 0x26
 8004552:	f88d 301e 	strb.w	r3, [sp, #30]
	switch (DistanceMode) {
 8004556:	d010      	beq.n	800457a <SetPresetMode+0x76>
 8004558:	2a02      	cmp	r2, #2
		DistIdx = 2;
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2302      	movne	r3, #2
	switch (PresetMode) {
 8004560:	2c04      	cmp	r4, #4
 8004562:	d00c      	beq.n	800457e <SetPresetMode+0x7a>
 8004564:	2c08      	cmp	r4, #8
 8004566:	d02d      	beq.n	80045c4 <SetPresetMode+0xc0>
 8004568:	2c03      	cmp	r4, #3
 800456a:	d130      	bne.n	80045ce <SetPresetMode+0xca>
		*pDevicePresetMode = TimedModes[DistIdx];
 800456c:	aa08      	add	r2, sp, #32
 800456e:	4413      	add	r3, r2
 8004570:	f813 8c08 	ldrb.w	r8, [r3, #-8]
 8004574:	e007      	b.n	8004586 <SetPresetMode+0x82>
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8004576:	2640      	movs	r6, #64	; 0x40
 8004578:	e7d0      	b.n	800451c <SetPresetMode+0x18>
		DistIdx = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	e7f0      	b.n	8004560 <SetPresetMode+0x5c>
		*pDevicePresetMode = LightModes[DistIdx];
 800457e:	aa08      	add	r2, sp, #32
 8004580:	4413      	add	r3, r2
 8004582:	f813 8c0c 	ldrb.w	r8, [r3, #-12]

	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8004586:	ab07      	add	r3, sp, #28
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	ab06      	add	r3, sp, #24
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	f10d 0212 	add.w	r2, sp, #18
 8004592:	ab05      	add	r3, sp, #20
 8004594:	4641      	mov	r1, r8
 8004596:	4628      	mov	r0, r5
 8004598:	f000 fc55 	bl	8004e46 <VL53L1_get_preset_mode_timing_cfg>
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800459c:	b978      	cbnz	r0, 80045be <SetPresetMode+0xba>
		Status = VL53L1_set_preset_mode(
 800459e:	9b07      	ldr	r3, [sp, #28]
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	9b06      	ldr	r3, [sp, #24]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80045aa:	9702      	str	r7, [sp, #8]
 80045ac:	9b05      	ldr	r3, [sp, #20]
 80045ae:	4641      	mov	r1, r8
 80045b0:	4628      	mov	r0, r5
 80045b2:	f000 fc81 	bl	8004eb8 <VL53L1_set_preset_mode>
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80045b6:	b910      	cbnz	r0, 80045be <SetPresetMode+0xba>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80045b8:	70ae      	strb	r6, [r5, #2]

	if (Status == VL53L1_ERROR_NONE)
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 80045ba:	f885 437c 	strb.w	r4, [r5, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
}
 80045be:	b008      	add	sp, #32
 80045c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 80045c4:	aa08      	add	r2, sp, #32
 80045c6:	4413      	add	r3, r2
 80045c8:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 80045cc:	e7db      	b.n	8004586 <SetPresetMode+0x82>
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80045ce:	f06f 0007 	mvn.w	r0, #7
 80045d2:	e7f4      	b.n	80045be <SetPresetMode+0xba>

080045d4 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 80045d4:	b510      	push	{r4, lr}
	VL53L1_Error Status = VL53L1_ERROR_NONE;
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80045d6:	b121      	cbz	r1, 80045e2 <SetLimitValue+0xe>
 80045d8:	2901      	cmp	r1, #1
 80045da:	d008      	beq.n	80045ee <SetLimitValue+0x1a>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
		break;
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80045dc:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80045e0:	bd10      	pop	{r4, pc}
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 80045e2:	f3c2 318f 	ubfx	r1, r2, #14, #16
 80045e6:	f000 fd7d 	bl	80050e4 <VL53L1_set_lite_sigma_threshold>
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80045ea:	2000      	movs	r0, #0
		break;
 80045ec:	bd10      	pop	{r4, pc}
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80045ee:	f3c2 214f 	ubfx	r1, r2, #9, #16
 80045f2:	f000 fd80 	bl	80050f6 <VL53L1_set_lite_min_count_rate>
 80045f6:	e7f8      	b.n	80045ea <SetLimitValue+0x16>

080045f8 <VL53L1_SetDeviceAddress>:
	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 80045f8:	084a      	lsrs	r2, r1, #1
 80045fa:	2101      	movs	r1, #1
 80045fc:	f002 baf6 	b.w	8006bec <VL53L1_WrByte>

08004600 <VL53L1_WaitDeviceBooted>:
	Status = VL53L1_poll_for_boot_completion(Dev,
 8004600:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004604:	f002 ba80 	b.w	8006b08 <VL53L1_poll_for_boot_completion>

08004608 <VL53L1_SetDistanceMode>:
{
 8004608:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800460c:	1e4b      	subs	r3, r1, #1
 800460e:	b2db      	uxtb	r3, r3
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8004610:	2b02      	cmp	r3, #2
{
 8004612:	4604      	mov	r4, r0
 8004614:	460e      	mov	r6, r1
	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8004616:	f890 737c 	ldrb.w	r7, [r0, #892]	; 0x37c
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800461a:	d82d      	bhi.n	8004678 <VL53L1_SetDistanceMode+0x70>
 800461c:	bf18      	it	ne
 800461e:	460d      	movne	r5, r1
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8004620:	a903      	add	r1, sp, #12
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8004622:	bf08      	it	eq
 8004624:	2503      	moveq	r5, #3
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8004626:	f000 fba1 	bl	8004d6c <VL53L1_get_user_zone>
	if (Status == VL53L1_ERROR_NONE)
 800462a:	bb10      	cbnz	r0, 8004672 <VL53L1_SetDistanceMode+0x6a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800462c:	466b      	mov	r3, sp
 800462e:	aa01      	add	r2, sp, #4
 8004630:	a902      	add	r1, sp, #8
 8004632:	4620      	mov	r0, r4
	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8004634:	f8d4 8014 	ldr.w	r8, [r4, #20]
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8004638:	f000 fb3b 	bl	8004cb2 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 800463c:	b9c8      	cbnz	r0, 8004672 <VL53L1_SetDistanceMode+0x6a>
		Status = SetPresetMode(Dev,
 800463e:	4643      	mov	r3, r8
 8004640:	462a      	mov	r2, r5
 8004642:	4639      	mov	r1, r7
 8004644:	4620      	mov	r0, r4
 8004646:	f7ff ff5d 	bl	8004504 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 800464a:	b990      	cbnz	r0, 8004672 <VL53L1_SetDistanceMode+0x6a>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800464c:	f884 537e 	strb.w	r5, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8004650:	f884 537f 	strb.w	r5, [r4, #895]	; 0x37f
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8004654:	f884 637d 	strb.w	r6, [r4, #893]	; 0x37d
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8004658:	9b00      	ldr	r3, [sp, #0]
 800465a:	9a01      	ldr	r2, [sp, #4]
 800465c:	9902      	ldr	r1, [sp, #8]
 800465e:	4620      	mov	r0, r4
 8004660:	f000 fb0f 	bl	8004c82 <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 8004664:	b928      	cbnz	r0, 8004672 <VL53L1_SetDistanceMode+0x6a>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8004666:	9b00      	ldr	r3, [sp, #0]
 8004668:	6123      	str	r3, [r4, #16]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800466a:	a903      	add	r1, sp, #12
 800466c:	4620      	mov	r0, r4
 800466e:	f000 fb6c 	bl	8004d4a <VL53L1_set_user_zone>
}
 8004672:	b004      	add	sp, #16
 8004674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return VL53L1_ERROR_INVALID_PARAMS;
 8004678:	f06f 0003 	mvn.w	r0, #3
 800467c:	e7f9      	b.n	8004672 <VL53L1_SetDistanceMode+0x6a>
	...

08004680 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:
{
 8004680:	b570      	push	{r4, r5, r6, lr}
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8004682:	4b3e      	ldr	r3, [pc, #248]	; (800477c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>)
 8004684:	4299      	cmp	r1, r3
{
 8004686:	b086      	sub	sp, #24
 8004688:	4604      	mov	r4, r0
 800468a:	460d      	mov	r5, r1
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 800468c:	d93d      	bls.n	800470a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8a>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800468e:	f06f 0003 	mvn.w	r0, #3
}
 8004692:	b006      	add	sp, #24
 8004694:	bd70      	pop	{r4, r5, r6, pc}
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004696:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d064      	beq.n	8004768 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800469e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80046a2:	4837      	ldr	r0, [pc, #220]	; (8004780 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046aa:	f04f 0301 	mov.w	r3, #1
 80046ae:	bf18      	it	ne
 80046b0:	f44f 727a 	movne.w	r2, #1000	; 0x3e8
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80046b4:	4295      	cmp	r5, r2
 80046b6:	d9ea      	bls.n	800468e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
					- TimingGuard);
 80046b8:	1aaa      	subs	r2, r5, r2
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80046ba:	4282      	cmp	r2, r0
 80046bc:	d8e7      	bhi.n	800468e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
				TimingBudget /= divisor;
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
				Status = VL53L1_set_timeouts_us(
 80046c2:	9904      	ldr	r1, [sp, #16]
 80046c4:	9a03      	ldr	r2, [sp, #12]
				TimingBudget /= divisor;
 80046c6:	9302      	str	r3, [sp, #8]
				Status = VL53L1_set_timeouts_us(
 80046c8:	4620      	mov	r0, r4
 80046ca:	f000 fada 	bl	8004c82 <VL53L1_set_timeouts_us>
			if (Status == VL53L1_ERROR_NONE)
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d1df      	bne.n	8004692 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
				VL53L1DevDataSet(Dev,
 80046d2:	9b02      	ldr	r3, [sp, #8]
 80046d4:	6123      	str	r3, [r4, #16]
		VL53L1DevDataSet(Dev,
 80046d6:	f8c4 5380 	str.w	r5, [r4, #896]	; 0x380
 80046da:	e7da      	b.n	8004692 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
			VL53L1_get_tuning_parm(Dev,
 80046dc:	aa05      	add	r2, sp, #20
 80046de:	f248 0136 	movw	r1, #32822	; 0x8036
 80046e2:	4620      	mov	r0, r4
 80046e4:	f000 ff34 	bl	8005550 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 80046e8:	9b05      	ldr	r3, [sp, #20]
			FDAMaxTimingBudgetUs *= 2;
 80046ea:	4826      	ldr	r0, [pc, #152]	; (8004784 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
			if (vhv_loops > 0) {
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f04f 02f5 	mov.w	r2, #245	; 0xf5
				vhv += vhv_loops *
 80046f2:	bfc4      	itt	gt
 80046f4:	435a      	mulgt	r2, r3
 80046f6:	32f5      	addgt	r2, #245	; 0xf5
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80046f8:	f602 52dc 	addw	r2, r2, #3548	; 0xddc
			divisor = 2;
 80046fc:	2302      	movs	r3, #2
		break;
 80046fe:	e7d9      	b.n	80046b4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8004700:	2d00      	cmp	r5, #0
 8004702:	d0c4      	beq.n	800468e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe>
 8004704:	f06f 0007 	mvn.w	r0, #7
 8004708:	e7c3      	b.n	8004692 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
{
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800470a:	f10d 0206 	add.w	r2, sp, #6
 800470e:	2105      	movs	r1, #5
 8004710:	f000 fb08 	bl	8004d24 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE) {
 8004714:	2800      	cmp	r0, #0
 8004716:	d1bc      	bne.n	8004692 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
	Status = VL53L1_get_sequence_config_bit(Dev,
 8004718:	f10d 0207 	add.w	r2, sp, #7
 800471c:	2106      	movs	r1, #6
 800471e:	4620      	mov	r0, r4
 8004720:	f000 fb00 	bl	8004d24 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 8004724:	2800      	cmp	r0, #0
 8004726:	d1b4      	bne.n	8004692 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
		Status = VL53L1_get_timeouts_us(Dev,
 8004728:	ab02      	add	r3, sp, #8
 800472a:	aa03      	add	r2, sp, #12
 800472c:	a904      	add	r1, sp, #16
 800472e:	4620      	mov	r0, r4
 8004730:	f000 fabf 	bl	8004cb2 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 8004734:	2800      	cmp	r0, #0
 8004736:	d1ac      	bne.n	8004692 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12>
		switch (PresetMode) {
 8004738:	f894 337c 	ldrb.w	r3, [r4, #892]	; 0x37c
 800473c:	2b04      	cmp	r3, #4
 800473e:	d0aa      	beq.n	8004696 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x16>
 8004740:	2b08      	cmp	r3, #8
 8004742:	d0cb      	beq.n	80046dc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5c>
 8004744:	2b03      	cmp	r3, #3
 8004746:	d1db      	bne.n	8004700 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x80>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004748:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d00f      	beq.n	8004770 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
 8004750:	f89d 6007 	ldrb.w	r6, [sp, #7]
			FDAMaxTimingBudgetUs *= 2;
 8004754:	480b      	ldr	r0, [pc, #44]	; (8004784 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
 8004756:	f245 4260 	movw	r2, #21600	; 0x5460
 800475a:	f246 71e8 	movw	r1, #26600	; 0x67e8
 800475e:	2302      	movs	r3, #2
 8004760:	2e01      	cmp	r6, #1
 8004762:	bf08      	it	eq
 8004764:	460a      	moveq	r2, r1
 8004766:	e7a5      	b.n	80046b4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004768:	4805      	ldr	r0, [pc, #20]	; (8004780 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x100>)
				TimingGuard = 5000;
 800476a:	f241 3288 	movw	r2, #5000	; 0x1388
 800476e:	e7a1      	b.n	80046b4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
			FDAMaxTimingBudgetUs *= 2;
 8004770:	4804      	ldr	r0, [pc, #16]	; (8004784 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x104>)
			divisor = 2;
 8004772:	2302      	movs	r3, #2
				TimingGuard = 26600;
 8004774:	f246 72e8 	movw	r2, #26600	; 0x67e8
 8004778:	e79c      	b.n	80046b4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x34>
 800477a:	bf00      	nop
 800477c:	00989680 	.word	0x00989680
 8004780:	00086470 	.word	0x00086470
 8004784:	0010c8e0 	.word	0x0010c8e0

08004788 <VL53L1_SetPresetMode>:
{
 8004788:	b538      	push	{r3, r4, r5, lr}
	Status = SetPresetMode(Dev,
 800478a:	2203      	movs	r2, #3
 800478c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8004790:	4604      	mov	r4, r0
 8004792:	460d      	mov	r5, r1
	Status = SetPresetMode(Dev,
 8004794:	f7ff feb6 	bl	8004504 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 8004798:	b9c8      	cbnz	r0, 80047ce <VL53L1_SetPresetMode+0x46>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 800479a:	2303      	movs	r3, #3
 800479c:	f884 337e 	strb.w	r3, [r4, #894]	; 0x37e
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80047a0:	f884 337f 	strb.w	r3, [r4, #895]	; 0x37f
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 80047a4:	1eeb      	subs	r3, r5, #3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d901      	bls.n	80047ae <VL53L1_SetPresetMode+0x26>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80047aa:	2d08      	cmp	r5, #8
 80047ac:	d10c      	bne.n	80047c8 <VL53L1_SetPresetMode+0x40>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80047ae:	f24a 0128 	movw	r1, #41000	; 0xa028
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80047b2:	4620      	mov	r0, r4
 80047b4:	f7ff ff64 	bl	8004680 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L1_ERROR_NONE) {
 80047b8:	b948      	cbnz	r0, 80047ce <VL53L1_SetPresetMode+0x46>
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80047ba:	4620      	mov	r0, r4
 80047bc:	f44f 6185 	mov.w	r1, #1064	; 0x428
}
 80047c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80047c4:	f000 ba44 	b.w	8004c50 <VL53L1_set_inter_measurement_period_ms>
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80047c8:	f248 2135 	movw	r1, #33333	; 0x8235
 80047cc:	e7f1      	b.n	80047b2 <VL53L1_SetPresetMode+0x2a>
}
 80047ce:	bd38      	pop	{r3, r4, r5, pc}

080047d0 <VL53L1_StaticInit>:
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80047d0:	2203      	movs	r2, #3
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80047d2:	2120      	movs	r1, #32
 80047d4:	7081      	strb	r1, [r0, #2]
	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80047d6:	f880 2378 	strb.w	r2, [r0, #888]	; 0x378
	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80047da:	f880 237f 	strb.w	r2, [r0, #895]	; 0x37f
	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80047de:	f880 237e 	strb.w	r2, [r0, #894]	; 0x37e
	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 80047e2:	f880 237d 	strb.w	r2, [r0, #893]	; 0x37d
	Status = VL53L1_SetPresetMode(Dev,
 80047e6:	2108      	movs	r1, #8
 80047e8:	f7ff bfce 	b.w	8004788 <VL53L1_SetPresetMode>

080047ec <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:
{
 80047ec:	b570      	push	{r4, r5, r6, lr}
	uint8_t Mm1Enabled = 0;
 80047ee:	2300      	movs	r3, #0
{
 80047f0:	b086      	sub	sp, #24
	*pMeasurementTimingBudgetMicroSeconds = 0;
 80047f2:	600b      	str	r3, [r1, #0]
{
 80047f4:	460c      	mov	r4, r1
	Status = VL53L1_get_sequence_config_bit(Dev,
 80047f6:	f10d 0206 	add.w	r2, sp, #6
 80047fa:	2105      	movs	r1, #5
{
 80047fc:	4606      	mov	r6, r0
	uint8_t Mm1Enabled = 0;
 80047fe:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t Mm2Enabled = 0;
 8004802:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t  MmTimeoutUs = 0;
 8004806:	9302      	str	r3, [sp, #8]
	uint32_t  RangeTimeoutUs = 0;
 8004808:	9303      	str	r3, [sp, #12]
	uint32_t PhaseCalTimeoutUs = 0;
 800480a:	9304      	str	r3, [sp, #16]
	Status = VL53L1_get_sequence_config_bit(Dev,
 800480c:	f000 fa8a 	bl	8004d24 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 8004810:	4605      	mov	r5, r0
 8004812:	2800      	cmp	r0, #0
 8004814:	d151      	bne.n	80048ba <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
	Status = VL53L1_get_sequence_config_bit(Dev,
 8004816:	f10d 0207 	add.w	r2, sp, #7
 800481a:	2106      	movs	r1, #6
 800481c:	4630      	mov	r0, r6
 800481e:	f000 fa81 	bl	8004d24 <VL53L1_get_sequence_config_bit>
	if (Status == VL53L1_ERROR_NONE)
 8004822:	4605      	mov	r5, r0
 8004824:	2800      	cmp	r0, #0
 8004826:	d148      	bne.n	80048ba <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
		Status = VL53L1_get_timeouts_us(Dev,
 8004828:	ab03      	add	r3, sp, #12
 800482a:	aa02      	add	r2, sp, #8
 800482c:	a904      	add	r1, sp, #16
 800482e:	4630      	mov	r0, r6
 8004830:	f000 fa3f 	bl	8004cb2 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE) {
 8004834:	4605      	mov	r5, r0
 8004836:	2800      	cmp	r0, #0
 8004838:	d13f      	bne.n	80048ba <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
		switch (PresetMode) {
 800483a:	f896 337c 	ldrb.w	r3, [r6, #892]	; 0x37c
 800483e:	2b04      	cmp	r3, #4
 8004840:	d011      	beq.n	8004866 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x7a>
 8004842:	2b08      	cmp	r3, #8
 8004844:	d024      	beq.n	8004890 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xa4>
 8004846:	2b03      	cmp	r3, #3
 8004848:	d135      	bne.n	80048b6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xca>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800484a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800484e:	2b01      	cmp	r3, #1
 8004850:	9b03      	ldr	r3, [sp, #12]
 8004852:	d003      	beq.n	800485c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x70>
 8004854:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004858:	2a01      	cmp	r2, #1
 800485a:	d115      	bne.n	8004888 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x9c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 800485c:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8004860:	3334      	adds	r3, #52	; 0x34
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	e00b      	b.n	800487e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x92>
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004866:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800486a:	2b01      	cmp	r3, #1
 800486c:	9b03      	ldr	r3, [sp, #12]
 800486e:	d003      	beq.n	8004878 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x8c>
 8004870:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004874:	2a01      	cmp	r2, #1
 8004876:	d104      	bne.n	8004882 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x96>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8004878:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800487c:	3308      	adds	r3, #8
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800487e:	6023      	str	r3, [r4, #0]
	return Status;
 8004880:	e01b      	b.n	80048ba <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8004882:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004886:	e7fa      	b.n	800487e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x92>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8004888:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800488c:	3330      	adds	r3, #48	; 0x30
 800488e:	e7e8      	b.n	8004862 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x76>
			VL53L1_get_tuning_parm(Dev,
 8004890:	aa05      	add	r2, sp, #20
 8004892:	f248 0136 	movw	r1, #32822	; 0x8036
 8004896:	4630      	mov	r0, r6
 8004898:	f000 fe5a 	bl	8005550 <VL53L1_get_tuning_parm>
			if (vhv_loops > 0) {
 800489c:	9a05      	ldr	r2, [sp, #20]
 800489e:	23f5      	movs	r3, #245	; 0xf5
 80048a0:	2a00      	cmp	r2, #0
				vhv += vhv_loops *
 80048a2:	bfc8      	it	gt
 80048a4:	4353      	mulgt	r3, r2
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 80048a6:	9a03      	ldr	r2, [sp, #12]
				vhv += vhv_loops *
 80048a8:	bfc8      	it	gt
 80048aa:	33f5      	addgt	r3, #245	; 0xf5
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 80048ac:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80048b0:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
		break;
 80048b4:	e7e3      	b.n	800487e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x92>
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80048b6:	f06f 0507 	mvn.w	r5, #7
}
 80048ba:	4628      	mov	r0, r5
 80048bc:	b006      	add	sp, #24
 80048be:	bd70      	pop	{r4, r5, r6, pc}

080048c0 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:
	adjustedIMP += (adjustedIMP * 64) / 1000;
 80048c0:	018b      	lsls	r3, r1, #6
 80048c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048c6:	fbb3 f3f2 	udiv	r3, r3, r2
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80048ca:	4419      	add	r1, r3
 80048cc:	f000 b9c0 	b.w	8004c50 <VL53L1_set_inter_measurement_period_ms>

080048d0 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:
{
 80048d0:	b513      	push	{r0, r1, r4, lr}
 80048d2:	460c      	mov	r4, r1
	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 80048d4:	a901      	add	r1, sp, #4
 80048d6:	f000 f9c7 	bl	8004c68 <VL53L1_get_inter_measurement_period_ms>
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 80048da:	9b01      	ldr	r3, [sp, #4]
 80048dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80048e0:	019a      	lsls	r2, r3, #6
 80048e2:	fbb2 f2f1 	udiv	r2, r2, r1
 80048e6:	1a9b      	subs	r3, r3, r2
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 80048e8:	6023      	str	r3, [r4, #0]
}
 80048ea:	b002      	add	sp, #8
 80048ec:	bd10      	pop	{r4, pc}

080048ee <VL53L1_SetLimitCheckEnable>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80048ee:	2901      	cmp	r1, #1
{
 80048f0:	b570      	push	{r4, r5, r6, lr}
 80048f2:	4604      	mov	r4, r0
 80048f4:	460e      	mov	r6, r1
 80048f6:	4615      	mov	r5, r2
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80048f8:	d811      	bhi.n	800491e <VL53L1_SetLimitCheckEnable+0x30>
		if (LimitCheckEnable == 0)
 80048fa:	b17a      	cbz	r2, 800491c <VL53L1_SetLimitCheckEnable+0x2e>
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80048fc:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8004900:	f8d3 2388 	ldr.w	r2, [r3, #904]	; 0x388
		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8004904:	4631      	mov	r1, r6
 8004906:	4620      	mov	r0, r4
 8004908:	f7ff fe64 	bl	80045d4 <SetLimitValue>
	if (Status == VL53L1_ERROR_NONE)
 800490c:	b948      	cbnz	r0, 8004922 <VL53L1_SetLimitCheckEnable+0x34>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800490e:	3500      	adds	r5, #0
 8004910:	4434      	add	r4, r6
 8004912:	bf18      	it	ne
 8004914:	2501      	movne	r5, #1
 8004916:	f884 5384 	strb.w	r5, [r4, #900]	; 0x384
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	e7f2      	b.n	8004904 <VL53L1_SetLimitCheckEnable+0x16>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800491e:	f06f 0003 	mvn.w	r0, #3
}
 8004922:	bd70      	pop	{r4, r5, r6, pc}

08004924 <VL53L1_SetLimitCheckValue>:
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004924:	2901      	cmp	r1, #1
{
 8004926:	b570      	push	{r4, r5, r6, lr}
 8004928:	4604      	mov	r4, r0
 800492a:	460d      	mov	r5, r1
 800492c:	4616      	mov	r6, r2
	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800492e:	d811      	bhi.n	8004954 <VL53L1_SetLimitCheckValue+0x30>
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004930:	1843      	adds	r3, r0, r1
		if (LimitChecksEnable == 0) {
 8004932:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8004936:	b92b      	cbnz	r3, 8004944 <VL53L1_SetLimitCheckValue+0x20>
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004938:	eb00 0481 	add.w	r4, r0, r1, lsl #2
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800493c:	4618      	mov	r0, r3
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800493e:	f8c4 2388 	str.w	r2, [r4, #904]	; 0x388
 8004942:	bd70      	pop	{r4, r5, r6, pc}
			Status = SetLimitValue(Dev, LimitCheckId,
 8004944:	f7ff fe46 	bl	80045d4 <SetLimitValue>
			if (Status == VL53L1_ERROR_NONE) {
 8004948:	b930      	cbnz	r0, 8004958 <VL53L1_SetLimitCheckValue+0x34>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800494a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800494e:	f8c4 6388 	str.w	r6, [r4, #904]	; 0x388
 8004952:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004954:	f06f 0003 	mvn.w	r0, #3
}
 8004958:	bd70      	pop	{r4, r5, r6, pc}

0800495a <VL53L1_DataInit>:
{
 800495a:	b538      	push	{r3, r4, r5, lr}
		Status = VL53L1_data_init(Dev, 1);
 800495c:	2101      	movs	r1, #1
{
 800495e:	4604      	mov	r4, r0
		Status = VL53L1_data_init(Dev, 1);
 8004960:	f000 fb62 	bl	8005028 <VL53L1_data_init>
	if (Status == VL53L1_ERROR_NONE) {
 8004964:	bb00      	cbnz	r0, 80049a8 <VL53L1_DataInit+0x4e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8004966:	2501      	movs	r5, #1
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8004968:	2308      	movs	r3, #8
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800496a:	4601      	mov	r1, r0
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800496c:	f884 5378 	strb.w	r5, [r4, #888]	; 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8004970:	f884 337c 	strb.w	r3, [r4, #892]	; 0x37c
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8004974:	462a      	mov	r2, r5
 8004976:	4620      	mov	r0, r4
 8004978:	f7ff ffb9 	bl	80048ee <VL53L1_SetLimitCheckEnable>
		if (Status == VL53L1_ERROR_NONE)
 800497c:	b9a0      	cbnz	r0, 80049a8 <VL53L1_DataInit+0x4e>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800497e:	462a      	mov	r2, r5
 8004980:	4629      	mov	r1, r5
 8004982:	4620      	mov	r0, r4
 8004984:	f7ff ffb3 	bl	80048ee <VL53L1_SetLimitCheckEnable>
	if (Status == VL53L1_ERROR_NONE) {
 8004988:	b970      	cbnz	r0, 80049a8 <VL53L1_DataInit+0x4e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 800498a:	4601      	mov	r1, r0
 800498c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004990:	4620      	mov	r0, r4
 8004992:	f7ff ffc7 	bl	8004924 <VL53L1_SetLimitCheckValue>
	if (Status == VL53L1_ERROR_NONE) {
 8004996:	b938      	cbnz	r0, 80049a8 <VL53L1_DataInit+0x4e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8004998:	4629      	mov	r1, r5
 800499a:	4620      	mov	r0, r4
 800499c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
}
 80049a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L1_SetLimitCheckValue(Dev,
 80049a4:	f7ff bfbe 	b.w	8004924 <VL53L1_SetLimitCheckValue>
}
 80049a8:	bd38      	pop	{r3, r4, r5, pc}

080049aa <VL53L1_GetLimitCheckValue>:
{
 80049aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049ac:	4605      	mov	r5, r0
 80049ae:	4616      	mov	r6, r2
	switch (LimitCheckId) {
 80049b0:	460c      	mov	r4, r1
 80049b2:	b121      	cbz	r1, 80049be <VL53L1_GetLimitCheckValue+0x14>
 80049b4:	2901      	cmp	r1, #1
 80049b6:	d016      	beq.n	80049e6 <VL53L1_GetLimitCheckValue+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80049b8:	f06f 0003 	mvn.w	r0, #3
 80049bc:	e011      	b.n	80049e2 <VL53L1_GetLimitCheckValue+0x38>
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80049be:	f10d 0106 	add.w	r1, sp, #6
 80049c2:	f000 fb8a 	bl	80050da <VL53L1_get_lite_sigma_threshold>
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80049c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80049ca:	039b      	lsls	r3, r3, #14
	if (Status == VL53L1_ERROR_NONE) {
 80049cc:	b948      	cbnz	r0, 80049e2 <VL53L1_GetLimitCheckValue+0x38>
 80049ce:	f104 02e0 	add.w	r2, r4, #224	; 0xe0
 80049d2:	442c      	add	r4, r5
		if (TempFix1616 == 0) {
 80049d4:	b973      	cbnz	r3, 80049f4 <VL53L1_GetLimitCheckValue+0x4a>
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80049d6:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80049da:	68ab      	ldr	r3, [r5, #8]
			*pLimitCheckValue = TempFix1616;
 80049dc:	6033      	str	r3, [r6, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80049de:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
}
 80049e2:	b002      	add	sp, #8
 80049e4:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80049e6:	a901      	add	r1, sp, #4
 80049e8:	f000 fb80 	bl	80050ec <VL53L1_get_lite_min_count_rate>
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80049ec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80049f0:	025b      	lsls	r3, r3, #9
		break;
 80049f2:	e7eb      	b.n	80049cc <VL53L1_GetLimitCheckValue+0x22>
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80049f4:	eb05 0582 	add.w	r5, r5, r2, lsl #2
			*pLimitCheckValue = TempFix1616;
 80049f8:	6033      	str	r3, [r6, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80049fa:	60ab      	str	r3, [r5, #8]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80049fc:	2301      	movs	r3, #1
 80049fe:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
 8004a02:	e7ee      	b.n	80049e2 <VL53L1_GetLimitCheckValue+0x38>

08004a04 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8004a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
	switch (CurrPalState) {
 8004a06:	f890 3378 	ldrb.w	r3, [r0, #888]	; 0x378
 8004a0a:	2b05      	cmp	r3, #5
{
 8004a0c:	4604      	mov	r4, r0
	switch (CurrPalState) {
 8004a0e:	d807      	bhi.n	8004a20 <VL53L1_StartMeasurement+0x1c>
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d201      	bcs.n	8004a18 <VL53L1_StartMeasurement+0x14>
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d80c      	bhi.n	8004a32 <VL53L1_StartMeasurement+0x2e>
 8004a18:	f06f 000d 	mvn.w	r0, #13
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);


	LOG_FUNCTION_END(Status);
	return Status;
}
 8004a1c:	b003      	add	sp, #12
 8004a1e:	bd30      	pop	{r4, r5, pc}
	switch (CurrPalState) {
 8004a20:	3b62      	subs	r3, #98	; 0x62
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d9f8      	bls.n	8004a18 <VL53L1_StartMeasurement+0x14>
		Status = VL53L1_ERROR_UNDEFINED;
 8004a26:	f06f 0002 	mvn.w	r0, #2
 8004a2a:	e7f7      	b.n	8004a1c <VL53L1_StartMeasurement+0x18>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8004a2c:	f06f 0003 	mvn.w	r0, #3
 8004a30:	e7f4      	b.n	8004a1c <VL53L1_StartMeasurement+0x18>
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004a32:	7885      	ldrb	r5, [r0, #2]
	if ((Status == VL53L1_ERROR_NONE) &&
 8004a34:	2d40      	cmp	r5, #64	; 0x40
 8004a36:	d111      	bne.n	8004a5c <VL53L1_StartMeasurement+0x58>
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004a38:	4669      	mov	r1, sp
 8004a3a:	f7ff fed7 	bl	80047ec <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004a3e:	a901      	add	r1, sp, #4
 8004a40:	4620      	mov	r0, r4
		MTBus /= 1000;
 8004a42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a46:	9b00      	ldr	r3, [sp, #0]
 8004a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a4c:	9300      	str	r3, [sp, #0]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004a4e:	f7ff ff3f 	bl	80048d0 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8004a52:	9b00      	ldr	r3, [sp, #0]
 8004a54:	9a01      	ldr	r2, [sp, #4]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d8e7      	bhi.n	8004a2c <VL53L1_StartMeasurement+0x28>
		Status = VL53L1_init_and_start_range(
 8004a5c:	2206      	movs	r2, #6
 8004a5e:	4629      	mov	r1, r5
 8004a60:	4620      	mov	r0, r4
 8004a62:	f000 fb4d 	bl	8005100 <VL53L1_init_and_start_range>
	if (Status == VL53L1_ERROR_NONE)
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d1d8      	bne.n	8004a1c <VL53L1_StartMeasurement+0x18>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8004a6a:	2304      	movs	r3, #4
 8004a6c:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378
 8004a70:	e7d4      	b.n	8004a1c <VL53L1_StartMeasurement+0x18>

08004a72 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8004a72:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	InternalDistanceMode = VL53L1DevDataGet(Dev,
			CurrentParameters.InternalDistanceMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
			CurrentParameters.NewDistanceMode);

	if (NewDistanceMode != InternalDistanceMode)
 8004a74:	f890 237e 	ldrb.w	r2, [r0, #894]	; 0x37e
 8004a78:	f890 337f 	ldrb.w	r3, [r0, #895]	; 0x37f
 8004a7c:	429a      	cmp	r2, r3
{
 8004a7e:	4604      	mov	r4, r0
	if (NewDistanceMode != InternalDistanceMode)
 8004a80:	d037      	beq.n	8004af2 <VL53L1_ClearInterruptAndStartMeasurement+0x80>
	Status = VL53L1_get_user_zone(Dev, &user_zone);
 8004a82:	4669      	mov	r1, sp
 8004a84:	f000 f972 	bl	8004d6c <VL53L1_get_user_zone>
	if (Status == VL53L1_ERROR_NONE)
 8004a88:	bb88      	cbnz	r0, 8004aee <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8004a8a:	ab01      	add	r3, sp, #4
 8004a8c:	aa02      	add	r2, sp, #8
 8004a8e:	a903      	add	r1, sp, #12
 8004a90:	4620      	mov	r0, r4
	PresetMode = VL53L1DevDataGet(Dev,
 8004a92:	f894 637c 	ldrb.w	r6, [r4, #892]	; 0x37c
	NewDistanceMode = VL53L1DevDataGet(Dev,
 8004a96:	f894 537f 	ldrb.w	r5, [r4, #895]	; 0x37f
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8004a9a:	f000 f90a 	bl	8004cb2 <VL53L1_get_timeouts_us>
	if (Status == VL53L1_ERROR_NONE)
 8004a9e:	bb30      	cbnz	r0, 8004aee <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_stop_range(Dev);
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f000 fc07 	bl	80052b4 <VL53L1_stop_range>
	if (Status == VL53L1_ERROR_NONE)
 8004aa6:	bb10      	cbnz	r0, 8004aee <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_WaitUs(Dev, 500);
 8004aa8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004aac:	4620      	mov	r0, r4
 8004aae:	f002 f8e5 	bl	8006c7c <VL53L1_WaitUs>
	if (Status == VL53L1_ERROR_NONE) {
 8004ab2:	b9e0      	cbnz	r0, 8004aee <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = SetPresetMode(Dev,
 8004ab4:	6963      	ldr	r3, [r4, #20]
 8004ab6:	462a      	mov	r2, r5
 8004ab8:	4631      	mov	r1, r6
 8004aba:	4620      	mov	r0, r4
 8004abc:	f7ff fd22 	bl	8004504 <SetPresetMode>
	if (Status == VL53L1_ERROR_NONE) {
 8004ac0:	b9a8      	cbnz	r0, 8004aee <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8004ac2:	9b01      	ldr	r3, [sp, #4]
 8004ac4:	9a02      	ldr	r2, [sp, #8]
 8004ac6:	9903      	ldr	r1, [sp, #12]
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f000 f8da 	bl	8004c82 <VL53L1_set_timeouts_us>
		if (Status == VL53L1_ERROR_NONE)
 8004ace:	b970      	cbnz	r0, 8004aee <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8004ad0:	9b01      	ldr	r3, [sp, #4]
 8004ad2:	6123      	str	r3, [r4, #16]
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8004ad4:	4669      	mov	r1, sp
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f000 f937 	bl	8004d4a <VL53L1_set_user_zone>
	if (Status == VL53L1_ERROR_NONE) {
 8004adc:	b938      	cbnz	r0, 8004aee <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		Status = VL53L1_init_and_start_range(
 8004ade:	2206      	movs	r2, #6
 8004ae0:	78a1      	ldrb	r1, [r4, #2]
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f000 fb0c 	bl	8005100 <VL53L1_init_and_start_range>
	if (Status == VL53L1_ERROR_NONE)
 8004ae8:	b908      	cbnz	r0, 8004aee <VL53L1_ClearInterruptAndStartMeasurement+0x7c>
		VL53L1DevDataSet(Dev,
 8004aea:	f884 537e 	strb.w	r5, [r4, #894]	; 0x37e
						Dev,
						DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
}
 8004aee:	b004      	add	sp, #16
 8004af0:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 8004af2:	7881      	ldrb	r1, [r0, #2]
 8004af4:	f000 fc2e 	bl	8005354 <VL53L1_clear_interrupt_and_enable_next_range>
 8004af8:	e7f9      	b.n	8004aee <VL53L1_ClearInterruptAndStartMeasurement+0x7c>

08004afa <VL53L1_GetMeasurementDataReady>:
{
	VL53L1_Error Status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8004afa:	f001 bfeb 	b.w	8006ad4 <VL53L1_is_new_data_ready>
	...

08004b00 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b02:	460c      	mov	r4, r1
 8004b04:	b0a3      	sub	sp, #140	; 0x8c
 8004b06:	4605      	mov	r5, r0

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8004b08:	221c      	movs	r2, #28
 8004b0a:	21ff      	movs	r1, #255	; 0xff
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f002 f966 	bl	8006dde <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8004b12:	aa01      	add	r2, sp, #4
 8004b14:	2102      	movs	r1, #2
 8004b16:	4628      	mov	r0, r5
 8004b18:	f000 fcd4 	bl	80054c4 <VL53L1_get_device_results>
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	f040 8088 	bne.w	8004c32 <VL53L1_GetRangingMeasurementData+0x132>
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8004b22:	f89d 6046 	ldrb.w	r6, [sp, #70]	; 0x46
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8004b26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004b2a:	7123      	strb	r3, [r4, #4]
	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8004b2c:	f006 061f 	and.w	r6, r6, #31
	pRangeData->TimeStamp = presults_data->time_stamp;
 8004b30:	9b03      	ldr	r3, [sp, #12]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
		Status = SetSimpleData(Dev, 1,
 8004b32:	f89d 1007 	ldrb.w	r1, [sp, #7]
	pRangeData->TimeStamp = presults_data->time_stamp;
 8004b36:	6023      	str	r3, [r4, #0]
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8004b38:	2e07      	cmp	r6, #7
 8004b3a:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8004b3e:	d039      	beq.n	8004bb4 <VL53L1_GetRangingMeasurementData+0xb4>
		if (presults_data->median_range_mm < SRL)
 8004b40:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 8004b44:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
			RAS = LRAP * presults_data->median_range_mm;
 8004b48:	bfa6      	itte	ge
 8004b4a:	f641 139a 	movwge	r3, #6554	; 0x199a
 8004b4e:	fb12 f203 	smulbbge	r2, r2, r3
			RAS = SRAS * 65536;
 8004b52:	f44f 12f0 	movlt.w	r2, #1966080	; 0x1e0000
			partial = partial + (RAS >> 1);
 8004b56:	4b3a      	ldr	r3, [pc, #232]	; (8004c40 <VL53L1_GetRangingMeasurementData+0x140>)
 8004b58:	0857      	lsrs	r7, r2, #1
 8004b5a:	fb03 7300 	mla	r3, r3, r0, r7
			partial = partial / RAS;
 8004b5e:	fbb3 f3f2 	udiv	r3, r3, r2
			partial = partial * 65536;
 8004b62:	041a      	lsls	r2, r3, #16
			if (partial <= GI)
 8004b64:	4b37      	ldr	r3, [pc, #220]	; (8004c44 <VL53L1_GetRangingMeasurementData+0x144>)
 8004b66:	429a      	cmp	r2, r3
				SRQL = GI - partial;
 8004b68:	bf94      	ite	ls
 8004b6a:	1a9b      	subls	r3, r3, r2
				SRQL = 50 * 65536;
 8004b6c:	f44f 1348 	movhi.w	r3, #3276800	; 0x320000
		finalvalue = (uint8_t)(SRQL >> 16);
 8004b70:	0c1b      	lsrs	r3, r3, #16
		returnvalue = MAX(50, MIN(100, finalvalue));
 8004b72:	2b32      	cmp	r3, #50	; 0x32
 8004b74:	d91e      	bls.n	8004bb4 <VL53L1_GetRangingMeasurementData+0xb4>
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b64      	cmp	r3, #100	; 0x64
 8004b7a:	bf28      	it	cs
 8004b7c:	2364      	movcs	r3, #100	; 0x64
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004b7e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8004b82:	7163      	strb	r3, [r4, #5]
	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004b84:	0252      	lsls	r2, r2, #9
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004b86:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8004b8a:	60e2      	str	r2, [r4, #12]
	pRangeData->EffectiveSpadRtnCount =
 8004b8c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8004b90:	8222      	strh	r2, [r4, #16]
	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8004b92:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8004b96:	8322      	strh	r2, [r4, #24]
	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004b98:	025b      	lsls	r3, r3, #9
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004b9a:	0240      	lsls	r0, r0, #9
	pRangeData->RangeFractionalPart = 0;
 8004b9c:	2200      	movs	r2, #0
	switch (device_status) {
 8004b9e:	290d      	cmp	r1, #13
		= SignalRate;
 8004ba0:	60a3      	str	r3, [r4, #8]
	pRangeData->SigmaMilliMeter = TempFix1616;
 8004ba2:	6160      	str	r0, [r4, #20]
	pRangeData->RangeFractionalPart = 0;
 8004ba4:	76a2      	strb	r2, [r4, #26]
	switch (device_status) {
 8004ba6:	d00b      	beq.n	8004bc0 <VL53L1_GetRangingMeasurementData+0xc0>
 8004ba8:	d806      	bhi.n	8004bb8 <VL53L1_GetRangingMeasurementData+0xb8>
 8004baa:	3901      	subs	r1, #1
 8004bac:	2902      	cmp	r1, #2
 8004bae:	d805      	bhi.n	8004bbc <VL53L1_GetRangingMeasurementData+0xbc>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8004bb0:	2205      	movs	r2, #5
 8004bb2:	e003      	b.n	8004bbc <VL53L1_GetRangingMeasurementData+0xbc>
		returnvalue = 50;
 8004bb4:	2332      	movs	r3, #50	; 0x32
 8004bb6:	e7e2      	b.n	8004b7e <VL53L1_GetRangingMeasurementData+0x7e>
	switch (device_status) {
 8004bb8:	2911      	cmp	r1, #17
 8004bba:	d0f9      	beq.n	8004bb0 <VL53L1_GetRangingMeasurementData+0xb0>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8004bbc:	76e2      	strb	r2, [r4, #27]
 8004bbe:	e000      	b.n	8004bc2 <VL53L1_GetRangingMeasurementData+0xc2>
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8004bc0:	76e1      	strb	r1, [r4, #27]
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8004bc2:	7ee2      	ldrb	r2, [r4, #27]
 8004bc4:	b93a      	cbnz	r2, 8004bd6 <VL53L1_GetRangingMeasurementData+0xd6>
 8004bc6:	1f32      	subs	r2, r6, #4
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	2a0f      	cmp	r2, #15
 8004bcc:	bf96      	itet	ls
 8004bce:	491e      	ldrls	r1, [pc, #120]	; (8004c48 <VL53L1_GetRangingMeasurementData+0x148>)
 8004bd0:	22ff      	movhi	r2, #255	; 0xff
 8004bd2:	5c8a      	ldrbls	r2, [r1, r2]
			pRangeData->RangeStatus =
 8004bd4:	76e2      	strb	r2, [r4, #27]
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004bd6:	f8c5 0390 	str.w	r0, [r5, #912]	; 0x390
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004bda:	f8c5 3394 	str.w	r3, [r5, #916]	; 0x394
	VL53L1_GetLimitCheckValue(Dev,
 8004bde:	466a      	mov	r2, sp
 8004be0:	2100      	movs	r1, #0
 8004be2:	4628      	mov	r0, r5
 8004be4:	f7ff fee1 	bl	80049aa <VL53L1_GetLimitCheckValue>
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8004be8:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d122      	bne.n	8004c36 <VL53L1_GetRangingMeasurementData+0x136>
 8004bf0:	1fb2      	subs	r2, r6, #6
 8004bf2:	4253      	negs	r3, r2
 8004bf4:	4153      	adcs	r3, r2
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004bf6:	f885 3386 	strb.w	r3, [r5, #902]	; 0x386
	VL53L1_GetLimitCheckValue(Dev,
 8004bfa:	466a      	mov	r2, sp
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f7ff fed3 	bl	80049aa <VL53L1_GetLimitCheckValue>
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8004c04:	f895 3385 	ldrb.w	r3, [r5, #901]	; 0x385
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d116      	bne.n	8004c3a <VL53L1_GetRangingMeasurementData+0x13a>
 8004c0c:	1f33      	subs	r3, r6, #4
 8004c0e:	425e      	negs	r6, r3
 8004c10:	415e      	adcs	r6, r3
 8004c12:	f885 6387 	strb.w	r6, [r5, #903]	; 0x387
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8004c16:	7ee3      	ldrb	r3, [r4, #27]
 8004c18:	b953      	cbnz	r3, 8004c30 <VL53L1_GetRangingMeasurementData+0x130>
	Range = pRangeData->RangeMilliMeter;
 8004c1a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8004c1e:	2a00      	cmp	r2, #0
 8004c20:	da06      	bge.n	8004c30 <VL53L1_GetRangingMeasurementData+0x130>
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8004c22:	490a      	ldr	r1, [pc, #40]	; (8004c4c <VL53L1_GetRangingMeasurementData+0x14c>)
 8004c24:	6849      	ldr	r1, [r1, #4]
 8004c26:	428a      	cmp	r2, r1
			pRangeData->RangeStatus =
 8004c28:	bfba      	itte	lt
 8004c2a:	230e      	movlt	r3, #14
 8004c2c:	76e3      	strblt	r3, [r4, #27]
			pRangeData->RangeMilliMeter = 0;
 8004c2e:	8323      	strhge	r3, [r4, #24]
		Status = SetSimpleData(Dev, 1,
 8004c30:	2000      	movs	r0, #0
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8004c32:	b023      	add	sp, #140	; 0x8c
 8004c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e7dd      	b.n	8004bf6 <VL53L1_GetRangingMeasurementData+0xf6>
	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8004c3a:	2600      	movs	r6, #0
 8004c3c:	e7e9      	b.n	8004c12 <VL53L1_GetRangingMeasurementData+0x112>
 8004c3e:	bf00      	nop
 8004c40:	0030cccd 	.word	0x0030cccd
 8004c44:	0075b333 	.word	0x0075b333
 8004c48:	08007984 	.word	0x08007984
 8004c4c:	200001a0 	.word	0x200001a0

08004c50 <VL53L1_set_inter_measurement_period_ms>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004c50:	f8b0 32b4 	ldrh.w	r3, [r0, #692]	; 0x2b4
 8004c54:	b913      	cbnz	r3, 8004c5c <VL53L1_set_inter_measurement_period_ms+0xc>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004c56:	f06f 000e 	mvn.w	r0, #14
 8004c5a:	4770      	bx	lr

	if (status == VL53L1_ERROR_NONE) {
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004c5c:	6141      	str	r1, [r0, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
 8004c5e:	4359      	muls	r1, r3
		pdev->tim_cfg.system__intermeasurement_period = \
 8004c60:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c64:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004c66:	4770      	bx	lr

08004c68 <VL53L1_get_inter_measurement_period_ms>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004c68:	f8b0 22b4 	ldrh.w	r2, [r0, #692]	; 0x2b4
 8004c6c:	b912      	cbnz	r2, 8004c74 <VL53L1_get_inter_measurement_period_ms+0xc>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004c6e:	f06f 000e 	mvn.w	r0, #14
 8004c72:	4770      	bx	lr

	if (status == VL53L1_ERROR_NONE)
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8004c74:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
 8004c78:	fbb3 f3f2 	udiv	r3, r3, r2
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c7c:	2000      	movs	r0, #0
		*pinter_measurement_period_ms = \
 8004c7e:	600b      	str	r3, [r1, #0]


	LOG_FUNCTION_END(status);

	return status;
}
 8004c80:	4770      	bx	lr

08004c82 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004c82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c84:	460d      	mov	r5, r1
 8004c86:	4611      	mov	r1, r2
 8004c88:	461a      	mov	r2, r3
	VL53L1_LLDriverData_t *pdev =
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004c8a:	f8b0 315e 	ldrh.w	r3, [r0, #350]	; 0x15e
 8004c8e:	b91b      	cbnz	r3, 8004c98 <VL53L1_set_timeouts_us+0x16>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004c90:	f06f 000e 	mvn.w	r0, #14
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004c94:	b003      	add	sp, #12
 8004c96:	bd30      	pop	{r4, r5, pc}
		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004c98:	6085      	str	r5, [r0, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004c9a:	60c1      	str	r1, [r0, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004c9c:	6102      	str	r2, [r0, #16]
			VL53L1_calc_timeout_register_values(
 8004c9e:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
 8004ca2:	f500 70c2 	add.w	r0, r0, #388	; 0x184
		status =
 8004ca6:	9000      	str	r0, [sp, #0]
 8004ca8:	9401      	str	r4, [sp, #4]
 8004caa:	4628      	mov	r0, r5
 8004cac:	f001 f94d 	bl	8005f4a <VL53L1_calc_timeout_register_values>
	return status;
 8004cb0:	e7f0      	b.n	8004c94 <VL53L1_set_timeouts_us+0x12>

08004cb2 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb6:	4604      	mov	r4, r0
	uint32_t  macro_period_us = 0;
	uint16_t  timeout_encoded = 0;

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004cb8:	f8b0 015e 	ldrh.w	r0, [r0, #350]	; 0x15e
{
 8004cbc:	460f      	mov	r7, r1
 8004cbe:	4690      	mov	r8, r2
 8004cc0:	461e      	mov	r6, r3
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004cc2:	b918      	cbnz	r0, 8004ccc <VL53L1_get_timeouts_us+0x1a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004cc4:	f06f 000e 	mvn.w	r0, #14
 8004cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (status == VL53L1_ERROR_NONE) {

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
 8004ccc:	f894 11a2 	ldrb.w	r1, [r4, #418]	; 0x1a2
 8004cd0:	f001 f8d6 	bl	8005e80 <VL53L1_calc_macro_period_us>
 8004cd4:	4605      	mov	r5, r0
				pdev->tim_cfg.range_config__vcsel_period_a);

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
 8004cd6:	4601      	mov	r1, r0
 8004cd8:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
 8004cdc:	f001 f904 	bl	8005ee8 <VL53L1_calc_timeout_us>
		*pphasecal_config_timeout_us =
 8004ce0:	6038      	str	r0, [r7, #0]
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
 8004ce2:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004ce6:	f894 019d 	ldrb.w	r0, [r4, #413]	; 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8004cea:	eb00 2003 	add.w	r0, r0, r3, lsl #8

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004cee:	4629      	mov	r1, r5
 8004cf0:	b280      	uxth	r0, r0
 8004cf2:	f001 f91e 	bl	8005f32 <VL53L1_calc_decoded_timeout_us>
		*pmm_config_timeout_us =
 8004cf6:	f8c8 0000 	str.w	r0, [r8]
				timeout_encoded,
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
 8004cfa:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
		timeout_encoded = (timeout_encoded << 8) +
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004cfe:	f894 01a1 	ldrb.w	r0, [r4, #417]	; 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 8004d02:	eb00 2003 	add.w	r0, r0, r3, lsl #8

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004d06:	4629      	mov	r1, r5
 8004d08:	b280      	uxth	r0, r0
 8004d0a:	f001 f912 	bl	8005f32 <VL53L1_calc_decoded_timeout_us>
		*prange_config_timeout_us =
 8004d0e:	6030      	str	r0, [r6, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	60a3      	str	r3, [r4, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004d14:	f8d8 3000 	ldr.w	r3, [r8]
 8004d18:	60e3      	str	r3, [r4, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004d1a:	6833      	ldr	r3, [r6, #0]
 8004d1c:	6123      	str	r3, [r4, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d1e:	2000      	movs	r0, #0
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d24 <VL53L1_get_sequence_config_bit>:
	VL53L1_LLDriverData_t *pdev =
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8004d24:	2907      	cmp	r1, #7
 8004d26:	d80d      	bhi.n	8004d44 <VL53L1_get_sequence_config_bit+0x20>
 8004d28:	2301      	movs	r3, #1

		if (bit_id > 0) {
 8004d2a:	b101      	cbz	r1, 8004d2e <VL53L1_get_sequence_config_bit+0xa>
			bit_mask  = 0x01 << bit_id;
 8004d2c:	408b      	lsls	r3, r1
		}

		*pvalue =
 8004d2e:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
 8004d32:	4018      	ands	r0, r3
			pdev->dyn_cfg.system__sequence_config & bit_mask;

		if (bit_id > 0) {
 8004d34:	b911      	cbnz	r1, 8004d3c <VL53L1_get_sequence_config_bit+0x18>
		*pvalue =
 8004d36:	7010      	strb	r0, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d38:	2000      	movs	r0, #0
 8004d3a:	4770      	bx	lr
			*pvalue  = *pvalue >> bit_id;
 8004d3c:	fa40 f101 	asr.w	r1, r0, r1
 8004d40:	7011      	strb	r1, [r2, #0]
 8004d42:	e7f9      	b.n	8004d38 <VL53L1_get_sequence_config_bit+0x14>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004d44:	f06f 0003 	mvn.w	r0, #3
	}

	return status;
}
 8004d48:	4770      	bx	lr

08004d4a <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004d4a:	b538      	push	{r3, r4, r5, lr}
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	4605      	mov	r5, r0
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8004d50:	f200 12c3 	addw	r2, r0, #451	; 0x1c3
 8004d54:	7809      	ldrb	r1, [r1, #0]
 8004d56:	7860      	ldrb	r0, [r4, #1]
 8004d58:	f001 f936 	bl	8005fc8 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8004d5c:	78a0      	ldrb	r0, [r4, #2]
 8004d5e:	78e1      	ldrb	r1, [r4, #3]
 8004d60:	f505 72e2 	add.w	r2, r5, #452	; 0x1c4
 8004d64:	f001 f941 	bl	8005fea <VL53L1_encode_zone_size>
	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
}
 8004d68:	2000      	movs	r0, #0
 8004d6a:	bd38      	pop	{r3, r4, r5, pc}

08004d6c <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4605      	mov	r5, r0
 8004d70:	460c      	mov	r4, r1
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8004d72:	460a      	mov	r2, r1
 8004d74:	f890 01c3 	ldrb.w	r0, [r0, #451]	; 0x1c3
 8004d78:	3101      	adds	r1, #1
 8004d7a:	f001 f9c7 	bl	800610c <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8004d7e:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
 8004d82:	1ce2      	adds	r2, r4, #3
 8004d84:	1ca1      	adds	r1, r4, #2
 8004d86:	f001 f92a 	bl	8005fde <VL53L1_decode_zone_size>
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
}
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	bd38      	pop	{r3, r4, r5, pc}

08004d8e <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8004d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d90:	460c      	mov	r4, r1
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  x       = 0;
 8004d92:	2500      	movs	r5, #0
{
 8004d94:	4606      	mov	r6, r0
	uint8_t  xy_size = 0;

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8004d96:	f10d 0206 	add.w	r2, sp, #6
 8004d9a:	f10d 0107 	add.w	r1, sp, #7
 8004d9e:	f890 022a 	ldrb.w	r0, [r0, #554]	; 0x22a
	uint8_t  x       = 0;
 8004da2:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t  y       = 0;
 8004da6:	f88d 5007 	strb.w	r5, [sp, #7]
	VL53L1_decode_row_col(
 8004daa:	f001 f9af 	bl	800610c <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004dae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004db2:	7023      	strb	r3, [r4, #0]
	pmm_roi->y_centre = y;
 8004db4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004db8:	7063      	strb	r3, [r4, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004dba:	f896 322b 	ldrb.w	r3, [r6, #555]	; 0x22b
	pmm_roi->width  = xy_size & 0x0F;

	LOG_FUNCTION_END(status);

	return status;
}
 8004dbe:	4628      	mov	r0, r5
	pmm_roi->height = xy_size >> 4;
 8004dc0:	091a      	lsrs	r2, r3, #4
	pmm_roi->width  = xy_size & 0x0F;
 8004dc2:	f003 030f 	and.w	r3, r3, #15
	pmm_roi->height = xy_size >> 4;
 8004dc6:	70e2      	strb	r2, [r4, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004dc8:	70a3      	strb	r3, [r4, #2]
}
 8004dca:	b002      	add	sp, #8
 8004dcc:	bd70      	pop	{r4, r5, r6, pc}

08004dce <VL53L1_read_p2p_data>:
{
 8004dce:	b538      	push	{r3, r4, r5, lr}
		status = VL53L1_get_static_nvm_managed(
 8004dd0:	f500 71ac 	add.w	r1, r0, #344	; 0x158
{
 8004dd4:	4604      	mov	r4, r0
		status = VL53L1_get_static_nvm_managed(
 8004dd6:	f001 fa06 	bl	80061e6 <VL53L1_get_static_nvm_managed>
	if (status == VL53L1_ERROR_NONE)
 8004dda:	b9b8      	cbnz	r0, 8004e0c <VL53L1_read_p2p_data+0x3e>
		status = VL53L1_get_customer_nvm_managed(
 8004ddc:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8004de0:	4620      	mov	r0, r4
 8004de2:	f001 faad 	bl	8006340 <VL53L1_get_customer_nvm_managed>
	if (status == VL53L1_ERROR_NONE) {
 8004de6:	b988      	cbnz	r0, 8004e0c <VL53L1_read_p2p_data+0x3e>
		status = VL53L1_get_nvm_copy_data(
 8004de8:	f504 75fd 	add.w	r5, r4, #506	; 0x1fa
 8004dec:	4629      	mov	r1, r5
 8004dee:	4620      	mov	r0, r4
 8004df0:	f001 fe5f 	bl	8006ab2 <VL53L1_get_nvm_copy_data>
		if (status == VL53L1_ERROR_NONE)
 8004df4:	b950      	cbnz	r0, 8004e0c <VL53L1_read_p2p_data+0x3e>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8004df6:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f000 ffa7 	bl	8005d4e <VL53L1_copy_rtn_good_spads_to_buffer>
		status =
 8004e00:	f504 722d 	add.w	r2, r4, #692	; 0x2b4
 8004e04:	21de      	movs	r1, #222	; 0xde
 8004e06:	4620      	mov	r0, r4
 8004e08:	f001 ff1a 	bl	8006c40 <VL53L1_RdWord>
	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8004e0c:	f8b4 315e 	ldrh.w	r3, [r4, #350]	; 0x15e
 8004e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004e14:	bf3c      	itt	cc
 8004e16:	f64b 43cc 	movwcc	r3, #48332	; 0xbccc
 8004e1a:	f8a4 315e 	strhcc.w	r3, [r4, #350]	; 0x15e
	if (status == VL53L1_ERROR_NONE)
 8004e1e:	b920      	cbnz	r0, 8004e2a <VL53L1_read_p2p_data+0x5c>
		status =
 8004e20:	f104 019e 	add.w	r1, r4, #158	; 0x9e
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7ff ffb2 	bl	8004d8e <VL53L1_get_mode_mitigation_roi>
	if (pdev->optical_centre.x_centre == 0 &&
 8004e2a:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 8004e2e:	b94b      	cbnz	r3, 8004e44 <VL53L1_read_p2p_data+0x76>
				pdev->mm_roi.x_centre << 4;
 8004e30:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8004e34:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.x_centre =
 8004e36:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
				pdev->mm_roi.y_centre << 4;
 8004e3a:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8004e3e:	011b      	lsls	r3, r3, #4
		pdev->optical_centre.y_centre =
 8004e40:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
}
 8004e44:	bd38      	pop	{r3, r4, r5, pc}

08004e46 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004e46:	b530      	push	{r4, r5, lr}
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004e48:	2908      	cmp	r1, #8
{
 8004e4a:	9d03      	ldr	r5, [sp, #12]
 8004e4c:	9c04      	ldr	r4, [sp, #16]
	switch (device_preset_mode) {
 8004e4e:	d810      	bhi.n	8004e72 <VL53L1_get_preset_mode_timing_cfg+0x2c>
 8004e50:	2906      	cmp	r1, #6
 8004e52:	d225      	bcs.n	8004ea0 <VL53L1_get_preset_mode_timing_cfg+0x5a>
 8004e54:	b191      	cbz	r1, 8004e7c <VL53L1_get_preset_mode_timing_cfg+0x36>
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004e56:	f8b0 10ca 	ldrh.w	r1, [r0, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 8004e5a:	8011      	strh	r1, [r2, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8004e5c:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 8004e60:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8004e62:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
		*pmm_config_timeout_us =
 8004e66:	602b      	str	r3, [r5, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8004e68:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
				pdev->tuning_parms.tp_dss_target_timed_mcps;
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
		*prange_config_timeout_us =
 8004e6c:	6023      	str	r3, [r4, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e6e:	2000      	movs	r0, #0
				pdev->tuning_parms.tp_range_timeout_lpa_us;
	break;
 8004e70:	bd30      	pop	{r4, r5, pc}
	switch (device_preset_mode) {
 8004e72:	2912      	cmp	r1, #18
 8004e74:	d014      	beq.n	8004ea0 <VL53L1_get_preset_mode_timing_cfg+0x5a>
 8004e76:	d804      	bhi.n	8004e82 <VL53L1_get_preset_mode_timing_cfg+0x3c>
 8004e78:	2911      	cmp	r1, #17
 8004e7a:	d0ec      	beq.n	8004e56 <VL53L1_get_preset_mode_timing_cfg+0x10>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004e7c:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8004e80:	bd30      	pop	{r4, r5, pc}
	switch (device_preset_mode) {
 8004e82:	3924      	subs	r1, #36	; 0x24
 8004e84:	2902      	cmp	r1, #2
 8004e86:	d8f9      	bhi.n	8004e7c <VL53L1_get_preset_mode_timing_cfg+0x36>
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004e88:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8004e8c:	8011      	strh	r1, [r2, #0]
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004e8e:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8004e92:	601a      	str	r2, [r3, #0]
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8004e94:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
		*pmm_config_timeout_us =
 8004e98:	602b      	str	r3, [r5, #0]
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8004e9a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8004e9e:	e7e5      	b.n	8004e6c <VL53L1_get_preset_mode_timing_cfg+0x26>
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004ea0:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8004ea4:	8011      	strh	r1, [r2, #0]
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004ea6:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8004eaa:	601a      	str	r2, [r3, #0]
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8004eac:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
		*pmm_config_timeout_us =
 8004eb0:	602b      	str	r3, [r5, #0]
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8004eb2:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 8004eb6:	e7d9      	b.n	8004e6c <VL53L1_get_preset_mode_timing_cfg+0x26>

08004eb8 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8004eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ebc:	b08b      	sub	sp, #44	; 0x2c
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	9307      	str	r3, [sp, #28]
 8004ec2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ec4:	9304      	str	r3, [sp, #16]
 8004ec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ec8:	9305      	str	r3, [sp, #20]
 8004eca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004ecc:	9306      	str	r3, [sp, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004ece:	f500 73da 	add.w	r3, r0, #436	; 0x1b4
 8004ed2:	9308      	str	r3, [sp, #32]

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8004ed4:	9b04      	ldr	r3, [sp, #16]
	pdev->preset_mode                 = device_preset_mode;
 8004ed6:	7061      	strb	r1, [r4, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8004ed8:	60c3      	str	r3, [r0, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8004eda:	9b05      	ldr	r3, [sp, #20]
 8004edc:	6103      	str	r3, [r0, #16]
{
 8004ede:	4688      	mov	r8, r1
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004ee0:	9b06      	ldr	r3, [sp, #24]
 8004ee2:	6143      	str	r3, [r0, #20]
{
 8004ee4:	4691      	mov	r9, r2

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8004ee6:	2103      	movs	r1, #3
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004ee8:	f500 72ce 	add.w	r2, r0, #412	; 0x19c
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8004eec:	f108 38ff 	add.w	r8, r8, #4294967295
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004ef0:	9209      	str	r2, [sp, #36]	; 0x24
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004ef2:	f500 75b2 	add.w	r5, r0, #356	; 0x164
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004ef6:	f500 76c2 	add.w	r6, r0, #388	; 0x184
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004efa:	f500 77e4 	add.w	r7, r0, #456	; 0x1c8
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8004efe:	f100 0aa4 	add.w	sl, r0, #164	; 0xa4
	VL53L1_low_power_auto_data_t  *plpadata      =
 8004f02:	f500 7b39 	add.w	fp, r0, #740	; 0x2e4
	VL53L1_init_ll_driver_state(
 8004f06:	f000 fe5f 	bl	8005bc8 <VL53L1_init_ll_driver_state>
	switch (device_preset_mode) {
 8004f0a:	9b08      	ldr	r3, [sp, #32]
 8004f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f0e:	f1b8 0f25 	cmp.w	r8, #37	; 0x25
 8004f12:	f200 8084 	bhi.w	800501e <VL53L1_set_preset_mode+0x166>
 8004f16:	e8df f008 	tbb	[pc, r8]
 8004f1a:	2e13      	.short	0x2e13
 8004f1c:	4a433c35 	.word	0x4a433c35
 8004f20:	82825851 	.word	0x82825851
 8004f24:	82828282 	.word	0x82828282
 8004f28:	665f8282 	.word	0x665f8282
 8004f2c:	82828282 	.word	0x82828282
 8004f30:	82828282 	.word	0x82828282
 8004f34:	82828282 	.word	0x82828282
 8004f38:	82828282 	.word	0x82828282
 8004f3c:	7b746d82 	.word	0x7b746d82

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8004f40:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004f44:	4631      	mov	r1, r6
 8004f46:	4628      	mov	r0, r5
 8004f48:	f000 fc7c 	bl	8005844 <VL53L1_preset_mode_standard_ranging>

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d168      	bne.n	8005022 <VL53L1_set_preset_mode+0x16a>

		pstatic->dss_config__target_total_rate_mcps =
 8004f50:	f8a4 9164 	strh.w	r9, [r4, #356]	; 0x164
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8004f54:	f8a4 9018 	strh.w	r9, [r4, #24]
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
		status =
 8004f58:	9b05      	ldr	r3, [sp, #20]
 8004f5a:	9a04      	ldr	r2, [sp, #16]
 8004f5c:	9907      	ldr	r1, [sp, #28]
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f7ff fe8f 	bl	8004c82 <VL53L1_set_timeouts_us>
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8004f64:	2800      	cmp	r0, #0
 8004f66:	d15c      	bne.n	8005022 <VL53L1_set_preset_mode+0x16a>
		status =
 8004f68:	9906      	ldr	r1, [sp, #24]
 8004f6a:	4620      	mov	r0, r4
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
}
 8004f6c:	b00b      	add	sp, #44	; 0x2c
 8004f6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		status =
 8004f72:	f7ff be6d 	b.w	8004c50 <VL53L1_set_inter_measurement_period_ms>
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8004f76:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004f7a:	4631      	mov	r1, r6
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f000 fd05 	bl	800598c <VL53L1_preset_mode_standard_ranging_short_range>
		break;
 8004f82:	e7e3      	b.n	8004f4c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8004f84:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004f88:	4631      	mov	r1, r6
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 fd1c 	bl	80059c8 <VL53L1_preset_mode_standard_ranging_long_range>
		break;
 8004f90:	e7dc      	b.n	8004f4c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8004f92:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004f96:	4631      	mov	r1, r6
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f000 fd33 	bl	8005a04 <VL53L1_preset_mode_standard_ranging_mm1_cal>
		break;
 8004f9e:	e7d5      	b.n	8004f4c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8004fa0:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	f000 fd3c 	bl	8005a24 <VL53L1_preset_mode_standard_ranging_mm2_cal>
		break;
 8004fac:	e7ce      	b.n	8004f4c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging(
 8004fae:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	f000 fd45 	bl	8005a44 <VL53L1_preset_mode_timed_ranging>
		break;
 8004fba:	e7c7      	b.n	8004f4c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8004fbc:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f000 fd59 	bl	8005a7a <VL53L1_preset_mode_timed_ranging_short_range>
		break;
 8004fc8:	e7c0      	b.n	8004f4c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8004fca:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004fce:	4631      	mov	r1, r6
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	f000 fd6e 	bl	8005ab2 <VL53L1_preset_mode_timed_ranging_long_range>
		break;
 8004fd6:	e7b9      	b.n	8004f4c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_olt(
 8004fd8:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 fdd9 	bl	8005b96 <VL53L1_preset_mode_olt>
		break;
 8004fe4:	e7b2      	b.n	8004f4c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_singleshot_ranging(
 8004fe6:	e88d 0480 	stmia.w	sp, {r7, sl}
 8004fea:	4631      	mov	r1, r6
 8004fec:	4628      	mov	r0, r5
 8004fee:	f000 fdba 	bl	8005b66 <VL53L1_preset_mode_singleshot_ranging>
		break;
 8004ff2:	e7ab      	b.n	8004f4c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8004ff4:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 8004ff8:	4631      	mov	r1, r6
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f000 fd89 	bl	8005b12 <VL53L1_preset_mode_low_power_auto_short_ranging>
		break;
 8005000:	e7a4      	b.n	8004f4c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8005002:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 8005006:	4631      	mov	r1, r6
 8005008:	4628      	mov	r0, r5
 800500a:	f000 fd6d 	bl	8005ae8 <VL53L1_preset_mode_low_power_auto_ranging>
		break;
 800500e:	e79d      	b.n	8004f4c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8005010:	e88d 0c80 	stmia.w	sp, {r7, sl, fp}
 8005014:	4631      	mov	r1, r6
 8005016:	4628      	mov	r0, r5
 8005018:	f000 fd90 	bl	8005b3c <VL53L1_preset_mode_low_power_auto_long_ranging>
		break;
 800501c:	e796      	b.n	8004f4c <VL53L1_set_preset_mode+0x94>
		status = VL53L1_ERROR_INVALID_PARAMS;
 800501e:	f06f 0003 	mvn.w	r0, #3
}
 8005022:	b00b      	add	sp, #44	; 0x2c
 8005024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005028 <VL53L1_data_init>:
{
 8005028:	b530      	push	{r4, r5, lr}
 800502a:	4604      	mov	r4, r0
 800502c:	b085      	sub	sp, #20
 800502e:	460d      	mov	r5, r1
	VL53L1_init_ll_driver_state(
 8005030:	2162      	movs	r1, #98	; 0x62
 8005032:	f000 fdc9 	bl	8005bc8 <VL53L1_init_ll_driver_state>
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8005036:	2201      	movs	r2, #1
 8005038:	7062      	strb	r2, [r4, #1]
	pdev->offset_calibration_mode =
 800503a:	70e2      	strb	r2, [r4, #3]
	pdev->offset_correction_mode  =
 800503c:	7122      	strb	r2, [r4, #4]
	pdev->phasecal_config_timeout_us  =  1000;
 800503e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005042:	60a2      	str	r2, [r4, #8]
	pdev->mm_config_timeout_us        =  2000;
 8005044:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005048:	60e2      	str	r2, [r4, #12]
	pdev->range_config_timeout_us     = 13000;
 800504a:	f243 22c8 	movw	r2, #13000	; 0x32c8
	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800504e:	2300      	movs	r3, #0
	pdev->range_config_timeout_us     = 13000;
 8005050:	6122      	str	r2, [r4, #16]
	pdev->inter_measurement_period_ms =   100;
 8005052:	2264      	movs	r2, #100	; 0x64
	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8005054:	7023      	strb	r3, [r4, #0]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8005056:	70a3      	strb	r3, [r4, #2]
	pdev->inter_measurement_period_ms =   100;
 8005058:	6162      	str	r2, [r4, #20]
	pdev->debug_mode                  =  0x00;
 800505a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800505e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
	pdev->gain_cal.standard_ranging_gain_factor =
 8005062:	f240 73db 	movw	r3, #2011	; 0x7db
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8005066:	8322      	strh	r2, [r4, #24]
	pdev->gain_cal.standard_ranging_gain_factor =
 8005068:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
	VL53L1_init_version(Dev);
 800506c:	4620      	mov	r0, r4
 800506e:	f000 fd9e 	bl	8005bae <VL53L1_init_version>
	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005072:	b115      	cbz	r5, 800507a <VL53L1_data_init+0x52>
			status = VL53L1_read_p2p_data(Dev);
 8005074:	4620      	mov	r0, r4
 8005076:	f7ff feaa 	bl	8004dce <VL53L1_read_p2p_data>
	status =
 800507a:	f504 7088 	add.w	r0, r4, #272	; 0x110
 800507e:	f000 fb3e 	bl	80056fe <VL53L1_init_refspadchar_config_struct>
	status =
 8005082:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8005086:	f000 fb4c 	bl	8005722 <VL53L1_init_ssc_config_struct>
	status =
 800508a:	f504 7196 	add.w	r1, r4, #300	; 0x12c
 800508e:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8005092:	f000 fb55 	bl	8005740 <VL53L1_init_xtalk_config_struct>
	status =
 8005096:	f504 70a2 	add.w	r0, r4, #324	; 0x144
 800509a:	f000 fb76 	bl	800578a <VL53L1_init_offset_cal_config_struct>
	status =
 800509e:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 80050a2:	f000 fb84 	bl	80057ae <VL53L1_init_tuning_parm_storage_struct>
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80050a6:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
		status = VL53L1_set_preset_mode(
 80050aa:	8b22      	ldrh	r2, [r4, #24]
 80050ac:	7861      	ldrb	r1, [r4, #1]
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	3b80      	subs	r3, #128	; 0x80
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80050b4:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
		status = VL53L1_set_preset_mode(
 80050b8:	6963      	ldr	r3, [r4, #20]
 80050ba:	9302      	str	r3, [sp, #8]
 80050bc:	6923      	ldr	r3, [r4, #16]
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	68e3      	ldr	r3, [r4, #12]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	4620      	mov	r0, r4
 80050c6:	68a3      	ldr	r3, [r4, #8]
 80050c8:	f7ff fef6 	bl	8004eb8 <VL53L1_set_preset_mode>
 80050cc:	4605      	mov	r5, r0
	VL53L1_low_power_auto_data_init(
 80050ce:	4620      	mov	r0, r4
 80050d0:	f000 ff8f 	bl	8005ff2 <VL53L1_low_power_auto_data_init>
}
 80050d4:	4628      	mov	r0, r5
 80050d6:	b005      	add	sp, #20
 80050d8:	bd30      	pop	{r4, r5, pc}

080050da <VL53L1_get_lite_sigma_threshold>:
			pdev->tim_cfg.range_config__sigma_thresh;
 80050da:	f8b0 31a6 	ldrh.w	r3, [r0, #422]	; 0x1a6
	*plite_sigma =
 80050de:	800b      	strh	r3, [r1, #0]
}
 80050e0:	2000      	movs	r0, #0
 80050e2:	4770      	bx	lr

080050e4 <VL53L1_set_lite_sigma_threshold>:
	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 80050e4:	f8a0 11a6 	strh.w	r1, [r0, #422]	; 0x1a6
}
 80050e8:	2000      	movs	r0, #0
 80050ea:	4770      	bx	lr

080050ec <VL53L1_get_lite_min_count_rate>:
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 80050ec:	f8b0 31a8 	ldrh.w	r3, [r0, #424]	; 0x1a8
	*plite_mincountrate =
 80050f0:	800b      	strh	r3, [r1, #0]
}
 80050f2:	2000      	movs	r0, #0
 80050f4:	4770      	bx	lr

080050f6 <VL53L1_set_lite_min_count_rate>:
	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80050f6:	f8a0 11a8 	strh.w	r1, [r0, #424]	; 0x1a8
}
 80050fa:	2000      	movs	r0, #0
 80050fc:	4770      	bx	lr
	...

08005100 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8005100:	b570      	push	{r4, r5, r6, lr}
	pdev->measurement_mode = measurement_mode;

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8005102:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
	pdev->measurement_mode = measurement_mode;
 8005106:	7081      	strb	r1, [r0, #2]
		(psystem->system__mode_start &
 8005108:	f003 030f 	and.w	r3, r3, #15
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800510c:	4319      	orrs	r1, r3
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800510e:	f8b0 3142 	ldrh.w	r3, [r0, #322]	; 0x142
 8005112:	f8a0 317c 	strh.w	r3, [r0, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8005116:	f890 32e6 	ldrb.w	r3, [r0, #742]	; 0x2e6
	psystem->system__mode_start =
 800511a:	f880 11cc 	strb.w	r1, [r0, #460]	; 0x1cc
	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800511e:	2bff      	cmp	r3, #255	; 0xff
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8005120:	bf04      	itt	eq
 8005122:	2300      	moveq	r3, #0
 8005124:	f880 32e6 	strbeq.w	r3, [r0, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005128:	f8d0 32e4 	ldr.w	r3, [r0, #740]	; 0x2e4
 800512c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005130:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
{
 8005138:	b0c0      	sub	sp, #256	; 0x100
 800513a:	4604      	mov	r4, r0
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800513c:	d114      	bne.n	8005168 <VL53L1_init_and_start_range+0x68>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
 800513e:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
 8005142:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
			pdev->gen_cfg.system__interrupt_config_gpio;
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8005146:	2320      	movs	r3, #32
 8005148:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800514c:	f890 31c5 	ldrb.w	r3, [r0, #453]	; 0x1c5
 8005150:	f013 0f60 	tst.w	r3, #96	; 0x60
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8005154:	bf0a      	itet	eq
 8005156:	f8b0 3058 	ldrheq.w	r3, [r0, #88]	; 0x58
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800515a:	2300      	movne	r3, #0
				pdev->customer.mm_config__outer_offset_mm * 4;
 800515c:	009b      	lsleq	r3, r3, #2
 800515e:	2a05      	cmp	r2, #5
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8005160:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
 8005164:	bf38      	it	cc
 8005166:	2205      	movcc	r2, #5
			device_config_level =
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005168:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 800516c:	494f      	ldr	r1, [pc, #316]	; (80052ac <VL53L1_init_and_start_range+0x1ac>)
 800516e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005176:	428b      	cmp	r3, r1
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
 8005178:	bf02      	ittt	eq
 800517a:	f894 32e7 	ldrbeq.w	r3, [r4, #743]	; 0x2e7
 800517e:	f884 3186 	strbeq.w	r3, [r4, #390]	; 0x186
			pdev->low_power_auto_data.saved_interrupt_config;

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8005182:	2206      	moveq	r2, #6
 8005184:	1e53      	subs	r3, r2, #1
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b05      	cmp	r3, #5
 800518a:	bf9a      	itte	ls
 800518c:	4948      	ldrls	r1, [pc, #288]	; (80052b0 <VL53L1_init_and_start_range+0x1b0>)
 800518e:	5ccd      	ldrbls	r5, [r1, r3]
 8005190:	2583      	movhi	r5, #131	; 0x83
 8005192:	b2ad      	uxth	r5, r5
		break;
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8005194:	f1c5 0688 	rsb	r6, r5, #136	; 0x88
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8005198:	2300      	movs	r3, #0
	i2c_buffer_size_bytes = \
 800519a:	b2b6      	uxth	r6, r6
		*pbuffer++ = 0;
 800519c:	4618      	mov	r0, r3
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800519e:	b299      	uxth	r1, r3
 80051a0:	42b1      	cmp	r1, r6
 80051a2:	d325      	bcc.n	80051f0 <VL53L1_init_and_start_range+0xf0>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 80051a4:	2a05      	cmp	r2, #5
 80051a6:	d953      	bls.n	8005250 <VL53L1_init_and_start_range+0x150>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80051a8:	f1c5 0201 	rsb	r2, r5, #1
			VL53L1_STATIC_NVM_MANAGED_I2C_INDEX - i2c_index;

		status =
 80051ac:	466b      	mov	r3, sp
 80051ae:	fa13 f282 	uxtah	r2, r3, r2
 80051b2:	210b      	movs	r1, #11
 80051b4:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 80051b8:	f000 ffbb 	bl	8006132 <VL53L1_i2c_encode_static_nvm_managed>
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80051bc:	b9b0      	cbnz	r0, 80051ec <VL53L1_init_and_start_range+0xec>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80051be:	f1c5 020d 	rsb	r2, r5, #13
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX - i2c_index;

		status =
 80051c2:	466b      	mov	r3, sp
 80051c4:	fa13 f282 	uxtah	r2, r3, r2
 80051c8:	2117      	movs	r1, #23
 80051ca:	f104 0042 	add.w	r0, r4, #66	; 0x42
 80051ce:	f001 f819 	bl	8006204 <VL53L1_i2c_encode_customer_nvm_managed>
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80051d2:	b958      	cbnz	r0, 80051ec <VL53L1_init_and_start_range+0xec>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80051d4:	f1c5 0224 	rsb	r2, r5, #36	; 0x24
			VL53L1_STATIC_CONFIG_I2C_INDEX - i2c_index;

		status =
 80051d8:	466b      	mov	r3, sp
 80051da:	fa13 f282 	uxtah	r2, r3, r2
 80051de:	2120      	movs	r1, #32
 80051e0:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 80051e4:	f001 f8bc 	bl	8006360 <VL53L1_i2c_encode_static_config>
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d036      	beq.n	800525a <VL53L1_init_and_start_range+0x15a>
		status = VL53L1_update_ll_driver_cfg_state(Dev);

	LOG_FUNCTION_END(status);

	return status;
}
 80051ec:	b040      	add	sp, #256	; 0x100
 80051ee:	bd70      	pop	{r4, r5, r6, pc}
		*pbuffer++ = 0;
 80051f0:	f80d 0003 	strb.w	r0, [sp, r3]
 80051f4:	3301      	adds	r3, #1
 80051f6:	e7d2      	b.n	800519e <VL53L1_init_and_start_range+0x9e>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80051f8:	2a02      	cmp	r2, #2
 80051fa:	d03a      	beq.n	8005272 <VL53L1_init_and_start_range+0x172>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80051fc:	2a00      	cmp	r2, #0
 80051fe:	d144      	bne.n	800528a <VL53L1_init_and_start_range+0x18a>
		i2c_buffer_offset_bytes = \
 8005200:	f1c5 0283 	rsb	r2, r5, #131	; 0x83
		status =
 8005204:	466b      	mov	r3, sp
 8005206:	fa13 f282 	uxtah	r2, r3, r2
 800520a:	2105      	movs	r1, #5
 800520c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
 8005210:	f001 f9de 	bl	80065d0 <VL53L1_i2c_encode_system_control>
	if (status == VL53L1_ERROR_NONE) {
 8005214:	2800      	cmp	r0, #0
 8005216:	d1e9      	bne.n	80051ec <VL53L1_init_and_start_range+0xec>
		status =
 8005218:	4633      	mov	r3, r6
 800521a:	466a      	mov	r2, sp
 800521c:	4629      	mov	r1, r5
 800521e:	4620      	mov	r0, r4
 8005220:	f001 fcac 	bl	8006b7c <VL53L1_WriteMulti>
	if (status == VL53L1_ERROR_NONE)
 8005224:	2800      	cmp	r0, #0
 8005226:	d1e1      	bne.n	80051ec <VL53L1_init_and_start_range+0xec>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8005228:	4620      	mov	r0, r4
 800522a:	f000 fce0 	bl	8005bee <VL53L1_update_ll_driver_rd_state>
	if (status == VL53L1_ERROR_NONE)
 800522e:	2800      	cmp	r0, #0
 8005230:	d1dc      	bne.n	80051ec <VL53L1_init_and_start_range+0xec>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8005232:	4620      	mov	r0, r4
 8005234:	f000 fd4f 	bl	8005cd6 <VL53L1_update_ll_driver_cfg_state>
	return status;
 8005238:	e7d8      	b.n	80051ec <VL53L1_init_and_start_range+0xec>
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800523a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800523e:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8005242:	f043 0101 	orr.w	r1, r3, #1
 8005246:	f884 11b4 	strb.w	r1, [r4, #436]	; 0x1b4
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800524a:	f884 11c0 	strb.w	r1, [r4, #448]	; 0x1c0
 800524e:	e023      	b.n	8005298 <VL53L1_init_and_start_range+0x198>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8005250:	d0b5      	beq.n	80051be <VL53L1_init_and_start_range+0xbe>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005252:	2a04      	cmp	r2, #4
 8005254:	d0be      	beq.n	80051d4 <VL53L1_init_and_start_range+0xd4>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8005256:	2a03      	cmp	r2, #3
 8005258:	d1ce      	bne.n	80051f8 <VL53L1_init_and_start_range+0xf8>
		i2c_buffer_offset_bytes =
 800525a:	f1c5 0244 	rsb	r2, r5, #68	; 0x44
		status =
 800525e:	466b      	mov	r3, sp
 8005260:	fa13 f282 	uxtah	r2, r3, r2
 8005264:	2116      	movs	r1, #22
 8005266:	f504 70c2 	add.w	r0, r4, #388	; 0x184
 800526a:	f001 f8e7 	bl	800643c <VL53L1_i2c_encode_general_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800526e:	2800      	cmp	r0, #0
 8005270:	d1bc      	bne.n	80051ec <VL53L1_init_and_start_range+0xec>
		i2c_buffer_offset_bytes = \
 8005272:	f1c5 025a 	rsb	r2, r5, #90	; 0x5a
		status =
 8005276:	466b      	mov	r3, sp
 8005278:	fa13 f282 	uxtah	r2, r3, r2
 800527c:	2117      	movs	r1, #23
 800527e:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 8005282:	f001 f920 	bl	80064c6 <VL53L1_i2c_encode_timing_config>
	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8005286:	2800      	cmp	r0, #0
 8005288:	d1b0      	bne.n	80051ec <VL53L1_init_and_start_range+0xec>
		if ((psystem->system__mode_start &
 800528a:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
		i2c_buffer_offset_bytes = \
 800528e:	f1c5 0271 	rsb	r2, r5, #113	; 0x71
		if ((psystem->system__mode_start &
 8005292:	069b      	lsls	r3, r3, #26
		i2c_buffer_offset_bytes = \
 8005294:	b292      	uxth	r2, r2
		if ((psystem->system__mode_start &
 8005296:	d4d0      	bmi.n	800523a <VL53L1_init_and_start_range+0x13a>
		status =
 8005298:	446a      	add	r2, sp
 800529a:	2112      	movs	r1, #18
 800529c:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
 80052a0:	f001 f954 	bl	800654c <VL53L1_i2c_encode_dynamic_config>
	if (status == VL53L1_ERROR_NONE) {
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d1a1      	bne.n	80051ec <VL53L1_init_and_start_range+0xec>
 80052a8:	e7aa      	b.n	8005200 <VL53L1_init_and_start_range+0x100>
 80052aa:	bf00      	nop
 80052ac:	00010100 	.word	0x00010100
 80052b0:	08007994 	.word	0x08007994

080052b4 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 80052b4:	b538      	push	{r3, r4, r5, lr}
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80052b6:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 80052ba:	f003 030f 	and.w	r3, r3, #15
{
 80052be:	4604      	mov	r4, r0
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80052c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
	pdev->sys_ctrl.system__mode_start =
 80052c4:	f880 31cc 	strb.w	r3, [r0, #460]	; 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 80052c8:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
 80052cc:	f001 f999 	bl	8006602 <VL53L1_set_system_control>
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 80052d0:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 80052d4:	f003 030f 	and.w	r3, r3, #15
	pdev->sys_ctrl.system__mode_start =
 80052d8:	f884 31cc 	strb.w	r3, [r4, #460]	; 0x1cc
	status = VL53L1_set_system_control(
 80052dc:	4605      	mov	r5, r0

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 80052de:	2103      	movs	r1, #3
 80052e0:	4620      	mov	r0, r4
 80052e2:	f000 fc71 	bl	8005bc8 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 80052e6:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d102      	bne.n	80052f4 <VL53L1_stop_range+0x40>
		VL53L1_low_power_auto_data_stop_range(Dev);
 80052ee:	4620      	mov	r0, r4
 80052f0:	f000 fe95 	bl	800601e <VL53L1_low_power_auto_data_stop_range>

	return status;
}
 80052f4:	4628      	mov	r0, r5
 80052f6:	bd38      	pop	{r3, r4, r5, pc}

080052f8 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 80052f8:	b530      	push	{r4, r5, lr}

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 80052fa:	2901      	cmp	r1, #1
{
 80052fc:	b0c1      	sub	sp, #260	; 0x104
 80052fe:	4604      	mov	r4, r0
 8005300:	460d      	mov	r5, r1
	switch (device_results_level) {
 8005302:	d01a      	beq.n	800533a <VL53L1_get_measurement_results+0x42>
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
	default:
		i2c_buffer_size_bytes =
 8005304:	2902      	cmp	r1, #2
 8005306:	bf0c      	ite	eq
 8005308:	2386      	moveq	r3, #134	; 0x86
 800530a:	232c      	movne	r3, #44	; 0x2c
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status =
 800530c:	466a      	mov	r2, sp
 800530e:	2188      	movs	r1, #136	; 0x88
 8005310:	4620      	mov	r0, r4
 8005312:	f001 fc53 	bl	8006bbc <VL53L1_ReadMulti>
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8005316:	2d01      	cmp	r5, #1
 8005318:	d911      	bls.n	800533e <VL53L1_get_measurement_results+0x46>
 800531a:	b9c8      	cbnz	r0, 8005350 <VL53L1_get_measurement_results+0x58>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
 800531c:	f504 722b 	add.w	r2, r4, #684	; 0x2ac
 8005320:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
 8005324:	2038      	movs	r0, #56	; 0x38
 8005326:	f001 fa46 	bl	80067b6 <VL53L1_i2c_decode_debug_results>
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800532a:	b988      	cbnz	r0, 8005350 <VL53L1_get_measurement_results+0x58>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
 800532c:	f504 7222 	add.w	r2, r4, #648	; 0x288
 8005330:	a90b      	add	r1, sp, #44	; 0x2c
 8005332:	2021      	movs	r0, #33	; 0x21
 8005334:	f001 fa04 	bl	8006740 <VL53L1_i2c_decode_core_results>
 8005338:	e003      	b.n	8005342 <VL53L1_get_measurement_results+0x4a>
		i2c_buffer_size_bytes =
 800533a:	234d      	movs	r3, #77	; 0x4d
 800533c:	e7e6      	b.n	800530c <VL53L1_get_measurement_results+0x14>
	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800533e:	2d00      	cmp	r5, #0
 8005340:	d1f3      	bne.n	800532a <VL53L1_get_measurement_results+0x32>
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8005342:	b928      	cbnz	r0, 8005350 <VL53L1_get_measurement_results+0x58>

		i2c_buffer_offset_bytes = 0;
		status =
 8005344:	f504 72e7 	add.w	r2, r4, #462	; 0x1ce
 8005348:	4669      	mov	r1, sp
 800534a:	202c      	movs	r0, #44	; 0x2c
 800534c:	f001 f969 	bl	8006622 <VL53L1_i2c_decode_system_results>
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005350:	b041      	add	sp, #260	; 0x104
 8005352:	bd30      	pop	{r4, r5, pc}

08005354 <VL53L1_clear_interrupt_and_enable_next_range>:
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_init_and_start_range(
 8005354:	2203      	movs	r2, #3
 8005356:	f7ff bed3 	b.w	8005100 <VL53L1_init_and_start_range>
	...

0800535c <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800535c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 8005360:	2500      	movs	r5, #0
 8005362:	78cf      	ldrb	r7, [r1, #3]
{
 8005364:	9001      	str	r0, [sp, #4]
	presults->stream_count    = psys->result__stream_count;
 8005366:	709f      	strb	r7, [r3, #2]
 8005368:	f103 0444 	add.w	r4, r3, #68	; 0x44
	pdata = &(presults->data[0]);

	for (i = 0 ; i < 2 ; i++) {

		pdata->range_id     = i;
		pdata->time_stamp   = 0;
 800536c:	46ac      	mov	ip, r5

		if ((psys->result__stream_count == 0) &&
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800536e:	f04f 0813 	mov.w	r8, #19

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
			pdata->avg_signal_count_rate_mcps =
 8005372:	f64f 76ff 	movw	r6, #65535	; 0xffff
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;

			/* apply correction gain */
			range_mm *= gain_factor;
			range_mm += 0x0400;
			range_mm /= 0x0800;
 8005376:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 800537a:	fa5f fa85 	uxtb.w	sl, r5
		pdata->range_id     = i;
 800537e:	f804 ac40 	strb.w	sl, [r4, #-64]
		pdata->time_stamp   = 0;
 8005382:	f844 cc3c 	str.w	ip, [r4, #-60]
 8005386:	f891 9001 	ldrb.w	r9, [r1, #1]
		if ((psys->result__stream_count == 0) &&
 800538a:	2f00      	cmp	r7, #0
 800538c:	d159      	bne.n	8005442 <VL53L1_copy_sys_and_core_results_to_range_results+0xe6>
 800538e:	f009 0b1f 	and.w	fp, r9, #31
 8005392:	f1bb 0f09 	cmp.w	fp, #9
 8005396:	d154      	bne.n	8005442 <VL53L1_copy_sys_and_core_results_to_range_results+0xe6>
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8005398:	f804 8c02 	strb.w	r8, [r4, #-2]
		switch (i) {
 800539c:	f1ba 0f01 	cmp.w	sl, #1
 80053a0:	d05c      	beq.n	800545c <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 80053a2:	f891 9002 	ldrb.w	r9, [r1, #2]
 80053a6:	f1b9 0f07 	cmp.w	r9, #7
 80053aa:	d14f      	bne.n	800544c <VL53L1_copy_sys_and_core_results_to_range_results+0xf0>
					psys->result__mm_inner_actual_effective_spads_sd0;
 80053ac:	f8b1 9012 	ldrh.w	r9, [r1, #18]
				pdata->actual_effective_spads =
 80053b0:	f824 9c30 	strh.w	r9, [r4, #-48]
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 80053b4:	f8b1 9010 	ldrh.w	r9, [r1, #16]
			pdata->peak_signal_count_rate_mcps =
 80053b8:	f824 9c14 	strh.w	r9, [r4, #-20]
				psys->result__avg_signal_count_rate_mcps_sd0;
 80053bc:	f8b1 9016 	ldrh.w	r9, [r1, #22]
			pdata->avg_signal_count_rate_mcps =
 80053c0:	f824 9c12 	strh.w	r9, [r4, #-18]
				psys->result__ambient_count_rate_mcps_sd0;
 80053c4:	f8b1 9008 	ldrh.w	r9, [r1, #8]
			pdata->ambient_count_rate_mcps =
 80053c8:	f824 9c10 	strh.w	r9, [r4, #-16]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80053cc:	f8b1 900a 	ldrh.w	r9, [r1, #10]
			range_mm *= gain_factor;
 80053d0:	9801      	ldr	r0, [sp, #4]
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80053d2:	ea4f 1949 	mov.w	r9, r9, lsl #5
			pdata->sigma_mm = (uint16_t)tmpu32;
 80053d6:	45b1      	cmp	r9, r6
 80053d8:	bf28      	it	cs
 80053da:	46b1      	movcs	r9, r6
 80053dc:	f824 9c08 	strh.w	r9, [r4, #-8]
				psys->result__phase_sd0;
 80053e0:	f8b1 900c 	ldrh.w	r9, [r1, #12]
			pdata->median_phase =
 80053e4:	f824 9c06 	strh.w	r9, [r4, #-6]
			range_mm =
 80053e8:	f8b1 900e 	ldrh.w	r9, [r1, #14]
			range_mm *= gain_factor;
 80053ec:	fb00 f909 	mul.w	r9, r0, r9
			pdata->ranging_total_events =
 80053f0:	6850      	ldr	r0, [r2, #4]
 80053f2:	f844 0c1c 	str.w	r0, [r4, #-28]
			pdata->signal_total_events =
 80053f6:	6890      	ldr	r0, [r2, #8]
 80053f8:	f844 0c18 	str.w	r0, [r4, #-24]
			pdata->total_periods_elapsed =
 80053fc:	68d0      	ldr	r0, [r2, #12]
 80053fe:	f844 0c2c 	str.w	r0, [r4, #-44]
			pdata->ambient_window_events =
 8005402:	6810      	ldr	r0, [r2, #0]
			range_mm += 0x0400;
 8005404:	f509 6980 	add.w	r9, r9, #1024	; 0x400
			range_mm /= 0x0800;
 8005408:	fb99 f9fe 	sdiv	r9, r9, lr
			pdata->median_range_mm = (int16_t)range_mm;
 800540c:	f824 9c04 	strh.w	r9, [r4, #-4]
 8005410:	3501      	adds	r5, #1
	for (i = 0 ; i < 2 ; i++) {
 8005412:	2d02      	cmp	r5, #2
				pcore->result_core__ranging_total_events_sd1;
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
			pdata->ambient_window_events =
 8005414:	f844 0c20 	str.w	r0, [r4, #-32]
 8005418:	f104 0440 	add.w	r4, r4, #64	; 0x40
	for (i = 0 ; i < 2 ; i++) {
 800541c:	d1ad      	bne.n	800537a <VL53L1_copy_sys_and_core_results_to_range_results+0x1e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800541e:	2000      	movs	r0, #0
 8005420:	70d8      	strb	r0, [r3, #3]
 8005422:	784a      	ldrb	r2, [r1, #1]
 8005424:	f002 021f 	and.w	r2, r2, #31
 8005428:	2a11      	cmp	r2, #17
 800542a:	d807      	bhi.n	800543c <VL53L1_copy_sys_and_core_results_to_range_results+0xe0>
 800542c:	2101      	movs	r1, #1
 800542e:	4c24      	ldr	r4, [pc, #144]	; (80054c0 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>)
 8005430:	4091      	lsls	r1, r2
 8005432:	4221      	tst	r1, r4
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8005434:	bf1c      	itt	ne
 8005436:	70da      	strbne	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8005438:	f883 0042 	strbne.w	r0, [r3, #66]	; 0x42
	break;

	}

	LOG_FUNCTION_END(0);
}
 800543c:	b003      	add	sp, #12
 800543e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8005442:	f009 091f 	and.w	r9, r9, #31
			pdata->range_status =
 8005446:	f804 9c02 	strb.w	r9, [r4, #-2]
 800544a:	e7a7      	b.n	800539c <VL53L1_copy_sys_and_core_results_to_range_results+0x40>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800544c:	f1b9 0f08 	cmp.w	r9, #8
						psys->result__mm_outer_actual_effective_spads_sd0;
 8005450:	bf0c      	ite	eq
 8005452:	f8b1 9014 	ldrheq.w	r9, [r1, #20]
					psys->result__dss_actual_effective_spads_sd0;
 8005456:	f8b1 9004 	ldrhne.w	r9, [r1, #4]
 800545a:	e7a9      	b.n	80053b0 <VL53L1_copy_sys_and_core_results_to_range_results+0x54>
				psys->result__dss_actual_effective_spads_sd1;
 800545c:	f8b1 9018 	ldrh.w	r9, [r1, #24]
			pdata->actual_effective_spads =
 8005460:	f824 9c30 	strh.w	r9, [r4, #-48]
				psys->result__peak_signal_count_rate_mcps_sd1;
 8005464:	f8b1 901a 	ldrh.w	r9, [r1, #26]
			pdata->peak_signal_count_rate_mcps =
 8005468:	f824 9c14 	strh.w	r9, [r4, #-20]
			pdata->avg_signal_count_rate_mcps =
 800546c:	f824 6c12 	strh.w	r6, [r4, #-18]
				psys->result__ambient_count_rate_mcps_sd1;
 8005470:	f8b1 901c 	ldrh.w	r9, [r1, #28]
			pdata->ambient_count_rate_mcps =
 8005474:	f824 9c10 	strh.w	r9, [r4, #-16]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8005478:	f8b1 901e 	ldrh.w	r9, [r1, #30]
			range_mm *= gain_factor;
 800547c:	9801      	ldr	r0, [sp, #4]
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800547e:	ea4f 1949 	mov.w	r9, r9, lsl #5
			pdata->sigma_mm = (uint16_t)tmpu32;
 8005482:	45b1      	cmp	r9, r6
 8005484:	bf28      	it	cs
 8005486:	46b1      	movcs	r9, r6
 8005488:	f824 9c08 	strh.w	r9, [r4, #-8]
				psys->result__phase_sd1;
 800548c:	f8b1 9020 	ldrh.w	r9, [r1, #32]
			pdata->median_phase =
 8005490:	f824 9c06 	strh.w	r9, [r4, #-6]
			range_mm =
 8005494:	f8b1 9022 	ldrh.w	r9, [r1, #34]	; 0x22
			range_mm *= gain_factor;
 8005498:	fb09 f900 	mul.w	r9, r9, r0
			pdata->ranging_total_events =
 800549c:	6950      	ldr	r0, [r2, #20]
 800549e:	f844 0c1c 	str.w	r0, [r4, #-28]
			pdata->signal_total_events =
 80054a2:	6990      	ldr	r0, [r2, #24]
 80054a4:	f844 0c18 	str.w	r0, [r4, #-24]
			pdata->total_periods_elapsed  =
 80054a8:	69d0      	ldr	r0, [r2, #28]
 80054aa:	f844 0c2c 	str.w	r0, [r4, #-44]
			range_mm += 0x0400;
 80054ae:	f509 6980 	add.w	r9, r9, #1024	; 0x400
			pdata->ambient_window_events =
 80054b2:	6910      	ldr	r0, [r2, #16]
			range_mm /= 0x0800;
 80054b4:	fb99 f9fe 	sdiv	r9, r9, lr
			pdata->median_range_mm = (int16_t)range_mm;
 80054b8:	f824 9c04 	strh.w	r9, [r4, #-4]
 80054bc:	e7a8      	b.n	8005410 <VL53L1_copy_sys_and_core_results_to_range_results+0xb4>
 80054be:	bf00      	nop
 80054c0:	0002200e 	.word	0x0002200e

080054c4 <VL53L1_get_device_results>:
{
 80054c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c8:	4604      	mov	r4, r0
 80054ca:	4690      	mov	r8, r2
	VL53L1_range_results_t   *presults = &(pres->range_results);
 80054cc:	f500 763d 	add.w	r6, r0, #756	; 0x2f4
		status = VL53L1_get_measurement_results(
 80054d0:	f7ff ff12 	bl	80052f8 <VL53L1_get_measurement_results>
	if (status == VL53L1_ERROR_NONE)
 80054d4:	4605      	mov	r5, r0
 80054d6:	b940      	cbnz	r0, 80054ea <VL53L1_get_device_results+0x26>
		VL53L1_copy_sys_and_core_results_to_range_results(
 80054d8:	4633      	mov	r3, r6
 80054da:	f504 7222 	add.w	r2, r4, #648	; 0x288
 80054de:	f504 71e7 	add.w	r1, r4, #462	; 0x1ce
 80054e2:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
 80054e6:	f7ff ff39 	bl	800535c <VL53L1_copy_sys_and_core_results_to_range_results>
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 80054ea:	f894 72e5 	ldrb.w	r7, [r4, #741]	; 0x2e5
 80054ee:	2f01      	cmp	r7, #1
 80054f0:	d112      	bne.n	8005518 <VL53L1_get_device_results+0x54>
		if ((status == VL53L1_ERROR_NONE) &&
 80054f2:	b945      	cbnz	r5, 8005506 <VL53L1_get_device_results+0x42>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80054f4:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 80054f8:	bb0b      	cbnz	r3, 800553e <VL53L1_get_device_results+0x7a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 80054fa:	4620      	mov	r0, r4
 80054fc:	f000 fdb5 	bl	800606a <VL53L1_low_power_auto_setup_manual_calibration>
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8005500:	f884 72e6 	strb.w	r7, [r4, #742]	; 0x2e6
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8005504:	4605      	mov	r5, r0
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 8005506:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 800550a:	2bff      	cmp	r3, #255	; 0xff
 800550c:	d004      	beq.n	8005518 <VL53L1_get_device_results+0x54>
 800550e:	b91d      	cbnz	r5, 8005518 <VL53L1_get_device_results+0x54>
			status = VL53L1_low_power_auto_update_DSS(
 8005510:	4620      	mov	r0, r4
 8005512:	f000 fdc9 	bl	80060a8 <VL53L1_low_power_auto_update_DSS>
 8005516:	4605      	mov	r5, r0
	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8005518:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800551c:	f884 32f4 	strb.w	r3, [r4, #756]	; 0x2f4
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8005520:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005524:	f884 32f5 	strb.w	r3, [r4, #757]	; 0x2f5
	memcpy(
 8005528:	2284      	movs	r2, #132	; 0x84
 800552a:	4631      	mov	r1, r6
 800552c:	4640      	mov	r0, r8
 800552e:	f001 fc4b 	bl	8006dc8 <memcpy>
	if (status == VL53L1_ERROR_NONE)
 8005532:	b955      	cbnz	r5, 800554a <VL53L1_get_device_results+0x86>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8005534:	4620      	mov	r0, r4
}
 8005536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800553a:	f000 bba0 	b.w	8005c7e <VL53L1_check_ll_driver_rd_state>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800553e:	2b01      	cmp	r3, #1
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8005540:	bf04      	itt	eq
 8005542:	2302      	moveq	r3, #2
 8005544:	f884 32e6 	strbeq.w	r3, [r4, #742]	; 0x2e6
 8005548:	e7dd      	b.n	8005506 <VL53L1_get_device_results+0x42>
}
 800554a:	4628      	mov	r0, r5
 800554c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005550 <VL53L1_get_tuning_parm>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8005550:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8005554:	2938      	cmp	r1, #56	; 0x38
 8005556:	f200 80cc 	bhi.w	80056f2 <VL53L1_get_tuning_parm+0x1a2>
 800555a:	e8df f001 	tbb	[pc, r1]
 800555e:	221d      	.short	0x221d
 8005560:	2e2b2825 	.word	0x2e2b2825
 8005564:	3a373431 	.word	0x3a373431
 8005568:	4643403d 	.word	0x4643403d
 800556c:	524f4c49 	.word	0x524f4c49
 8005570:	5e5b5855 	.word	0x5e5b5855
 8005574:	6a676461 	.word	0x6a676461
 8005578:	7673706d 	.word	0x7673706d
 800557c:	827f7c79 	.word	0x827f7c79
 8005580:	8e8b8885 	.word	0x8e8b8885
 8005584:	9a979491 	.word	0x9a979491
 8005588:	a6a3a09d 	.word	0xa6a3a09d
 800558c:	b2afaca9 	.word	0xb2afaca9
 8005590:	bebbb8b5 	.word	0xbebbb8b5
 8005594:	c4c1      	.short	0xc4c1
 8005596:	c7          	.byte	0xc7
 8005597:	00          	.byte	0x00

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8005598:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
	break;
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800559c:	6013      	str	r3, [r2, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800559e:	2000      	movs	r0, #0
	break;
 80055a0:	4770      	bx	lr
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80055a2:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 80055a6:	e7f9      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80055a8:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
 80055ac:	e7f6      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 80055ae:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 80055b2:	e7f3      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 80055b4:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 80055b8:	e7f0      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 80055ba:	f8b0 30b2 	ldrh.w	r3, [r0, #178]	; 0xb2
 80055be:	e7ed      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 80055c0:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
 80055c4:	e7ea      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 80055c6:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
 80055ca:	e7e7      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 80055cc:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
 80055d0:	e7e4      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 80055d2:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
 80055d6:	e7e1      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 80055d8:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
 80055dc:	e7de      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 80055de:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
 80055e2:	e7db      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 80055e4:	f8b0 30be 	ldrh.w	r3, [r0, #190]	; 0xbe
 80055e8:	e7d8      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 80055ea:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 80055ee:	e7d5      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 80055f0:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
 80055f4:	e7d2      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 80055f6:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 80055fa:	e7cf      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80055fc:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
 8005600:	e7cc      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005602:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8005606:	e7c9      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8005608:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
 800560c:	e7c6      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800560e:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 8005612:	e7c3      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005614:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
 8005618:	e7c0      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800561a:	f9b0 313e 	ldrsh.w	r3, [r0, #318]	; 0x13e
 800561e:	e7bd      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005620:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 8005624:	e7ba      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8005626:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 800562a:	e7b7      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800562c:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8005630:	e7b4      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8005632:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 8005636:	e7b1      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8005638:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800563c:	e7ae      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800563e:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 8005642:	e7ab      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8005644:	f890 30c6 	ldrb.w	r3, [r0, #198]	; 0xc6
 8005648:	e7a8      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800564a:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
 800564e:	e7a5      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8005650:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
 8005654:	e7a2      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8005656:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 800565a:	e79f      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 800565c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8005660:	e79c      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->refspadchar.timeout_us;
	break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8005662:	f8b0 3118 	ldrh.w	r3, [r0, #280]	; 0x118
 8005666:	e799      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8005668:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
 800566c:	e796      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800566e:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
 8005672:	e793      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8005674:	f8b0 3144 	ldrh.w	r3, [r0, #324]	; 0x144
 8005678:	e790      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
 800567a:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 800567e:	e78d      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
	break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
 8005680:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 8005684:	e78a      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
	break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
 8005686:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800568a:	e787      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
	break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800568c:	f890 3154 	ldrb.w	r3, [r0, #340]	; 0x154
 8005690:	e784      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8005692:	f890 3155 	ldrb.w	r3, [r0, #341]	; 0x155
 8005696:	e781      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8005698:	f890 3156 	ldrb.w	r3, [r0, #342]	; 0x156
 800569c:	e77e      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800569e:	f890 3121 	ldrb.w	r3, [r0, #289]	; 0x121
 80056a2:	e77b      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 80056a4:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
 80056a8:	e778      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 80056aa:	f8b0 3128 	ldrh.w	r3, [r0, #296]	; 0x128
 80056ae:	e775      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 80056b0:	f8b0 30ca 	ldrh.w	r3, [r0, #202]	; 0xca
 80056b4:	e772      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80056b6:	f8b0 30cc 	ldrh.w	r3, [r0, #204]	; 0xcc
 80056ba:	e76f      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80056bc:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 80056c0:	e76c      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
	break;
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80056c2:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 80056c6:	e769      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
	break;
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80056c8:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80056cc:	e766      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
	break;
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80056ce:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 80056d2:	e763      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
	break;
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80056d4:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
 80056d8:	e760      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
	break;
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80056da:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 80056de:	e75d      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
	break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80056e0:	f890 32e4 	ldrb.w	r3, [r0, #740]	; 0x2e4
 80056e4:	e75a      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
	break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80056e6:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 80056ea:	e757      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
	break;
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
 80056ec:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80056f0:	e754      	b.n	800559c <VL53L1_get_tuning_parm+0x4c>
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
	break;


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80056f2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80056f6:	6013      	str	r3, [r2, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80056f8:	f06f 0003 	mvn.w	r0, #3
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80056fc:	4770      	bx	lr

080056fe <VL53L1_init_refspadchar_config_struct>:
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 80056fe:	2308      	movs	r3, #8
 8005700:	7003      	strb	r3, [r0, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 8005702:	230b      	movs	r3, #11
 8005704:	7043      	strb	r3, [r0, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8005706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800570a:	6043      	str	r3, [r0, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800570c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005710:	8103      	strh	r3, [r0, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8005712:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8005716:	8143      	strh	r3, [r0, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8005718:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800571c:	8183      	strh	r3, [r0, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 800571e:	2000      	movs	r0, #0
 8005720:	4770      	bx	lr

08005722 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8005722:	4603      	mov	r3, r0
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8005724:	2212      	movs	r2, #18
 8005726:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 8005728:	220f      	movs	r2, #15
 800572a:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800572c:	2202      	movs	r2, #2
 800572e:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8005730:	f648 42a0 	movw	r2, #36000	; 0x8ca0
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8005734:	2000      	movs	r0, #0
	pdata->timeout_us   = 36000;
 8005736:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8005738:	220c      	movs	r2, #12
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800573a:	7018      	strb	r0, [r3, #0]
	pdata->rate_limit_mcps =
 800573c:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 800573e:	4770      	bx	lr

08005740 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8005740:	4603      	mov	r3, r0
 8005742:	b510      	push	{r4, lr}
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8005744:	8940      	ldrh	r0, [r0, #10]
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8005746:	6008      	str	r0, [r1, #0]
{
 8005748:	460c      	mov	r4, r1
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800574a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800574e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8005752:	80a1      	strh	r1, [r4, #4]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8005754:	2300      	movs	r3, #0
 8005756:	8263      	strh	r3, [r4, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8005758:	2340      	movs	r3, #64	; 0x40
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800575a:	80e2      	strh	r2, [r4, #6]
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800575c:	60a0      	str	r0, [r4, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800575e:	81a1      	strh	r1, [r4, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8005760:	81e2      	strh	r2, [r4, #14]
	pdata->crosstalk_range_ignore_threshold_mult =
 8005762:	7523      	strb	r3, [r4, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8005764:	b958      	cbnz	r0, 800577e <VL53L1_init_xtalk_config_struct+0x3e>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8005766:	6863      	ldr	r3, [r4, #4]
 8005768:	b94b      	cbnz	r3, 800577e <VL53L1_init_xtalk_config_struct+0x3e>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800576a:	7420      	strb	r0, [r4, #16]
	else
		pdata->global_crosstalk_compensation_enable = 0x01;


	if ((status == VL53L1_ERROR_NONE) &&
 800576c:	7c23      	ldrb	r3, [r4, #16]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d108      	bne.n	8005784 <VL53L1_init_xtalk_config_struct+0x44>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 8005772:	2340      	movs	r3, #64	; 0x40
 8005774:	f000 fb93 	bl	8005e9e <VL53L1_calc_range_ignore_threshold>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8005778:	82e0      	strh	r0, [r4, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 800577a:	2000      	movs	r0, #0
 800577c:	bd10      	pop	{r4, pc}
		pdata->global_crosstalk_compensation_enable = 0x01;
 800577e:	2301      	movs	r3, #1
 8005780:	7423      	strb	r3, [r4, #16]
 8005782:	e7f3      	b.n	800576c <VL53L1_init_xtalk_config_struct+0x2c>
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	82e3      	strh	r3, [r4, #22]
 8005788:	e7f7      	b.n	800577a <VL53L1_init_xtalk_config_struct+0x3a>

0800578a <VL53L1_init_offset_cal_config_struct>:

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800578a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800578e:	8003      	strh	r3, [r0, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 8005790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005794:	6043      	str	r3, [r0, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8005796:	f243 23c8 	movw	r3, #13000	; 0x32c8
 800579a:	6083      	str	r3, [r0, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800579c:	60c3      	str	r3, [r0, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800579e:	2308      	movs	r3, #8
 80057a0:	7403      	strb	r3, [r0, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80057a2:	2328      	movs	r3, #40	; 0x28
 80057a4:	7443      	strb	r3, [r0, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80057a6:	2309      	movs	r3, #9
 80057a8:	7483      	strb	r3, [r0, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
}
 80057aa:	2000      	movs	r0, #0
 80057ac:	4770      	bx	lr

080057ae <VL53L1_init_tuning_parm_storage_struct>:
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 80057ae:	f248 0203 	movw	r2, #32771	; 0x8003
 80057b2:	8002      	strh	r2, [r0, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80057b4:	f248 0201 	movw	r2, #32769	; 0x8001
{
 80057b8:	4603      	mov	r3, r0
	pdata->tp_tuning_parm_key_table_version    =
 80057ba:	8042      	strh	r2, [r0, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80057bc:	f248 0241 	movw	r2, #32833	; 0x8041
 80057c0:	8082      	strh	r2, [r0, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80057c2:	210a      	movs	r1, #10
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80057c4:	2206      	movs	r2, #6
	pdata->tp_init_phase_rtn_lite_med          =
 80057c6:	71d9      	strb	r1, [r3, #7]
	pdata->tp_init_phase_rtn_lite_short        =
 80057c8:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80057ca:	7299      	strb	r1, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80057cc:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80057ce:	2102      	movs	r1, #2
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80057d0:	2221      	movs	r2, #33	; 0x21
	pdata->tp_consistency_lite_phase_tolerance =
 80057d2:	7319      	strb	r1, [r3, #12]
	pdata->tp_phasecal_target                  =
 80057d4:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 80057d6:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
	pdata->tp_lite_long_sigma_thresh_mm        =
 80057da:	f44f 72b4 	mov.w	r2, #360	; 0x168
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 80057de:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 80057e2:	f44f 6120 	mov.w	r1, #2560	; 0xa00
	pdata->tp_lite_long_sigma_thresh_mm        =
 80057e6:	825a      	strh	r2, [r3, #18]
	pdata->tp_lite_med_sigma_thresh_mm         =
 80057e8:	829a      	strh	r2, [r3, #20]
	pdata->tp_lite_short_sigma_thresh_mm       =
 80057ea:	82da      	strh	r2, [r3, #22]
	pdata->tp_dss_target_lite_mcps               =
 80057ec:	84d9      	strh	r1, [r3, #38]	; 0x26
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80057ee:	22c0      	movs	r2, #192	; 0xc0
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 80057f0:	8519      	strh	r1, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80057f2:	f248 0130 	movw	r1, #32816	; 0x8030
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80057f6:	831a      	strh	r2, [r3, #24]
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 80057f8:	835a      	strh	r2, [r3, #26]
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 80057fa:	839a      	strh	r2, [r3, #28]
	pdata->tp_phasecal_timeout_lite_us           =
 80057fc:	62d9      	str	r1, [r3, #44]	; 0x2c
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 80057fe:	2208      	movs	r2, #8
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 8005800:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	pdata->tp_init_phase_rtn_lite_long         =
 8005804:	200e      	movs	r0, #14
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8005806:	779a      	strb	r2, [r3, #30]
	pdata->tp_phasecal_timeout_timed_us          =
 8005808:	6319      	str	r1, [r3, #48]	; 0x30
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800580a:	2210      	movs	r2, #16
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800580c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	pdata->tp_init_phase_rtn_lite_long         =
 8005810:	7198      	strb	r0, [r3, #6]
	pdata->tp_init_phase_ref_lite_long         =
 8005812:	7258      	strb	r0, [r3, #9]
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8005814:	77da      	strb	r2, [r3, #31]
	pdata->tp_cal_repeat_rate                  =
 8005816:	2000      	movs	r0, #0
	pdata->tp_lite_sigma_ref_mm                  =
 8005818:	2201      	movs	r2, #1
	pdata->tp_mm_timeout_lite_us                 =
 800581a:	6359      	str	r1, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800581c:	6399      	str	r1, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800581e:	f24f 6118 	movw	r1, #63000	; 0xf618
	pdata->tp_lite_sigma_ref_mm                  =
 8005822:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->tp_timed_seed_cfg                     =
 8005826:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pdata->tp_cal_repeat_rate                  =
 800582a:	81d8      	strh	r0, [r3, #14]
	pdata->tp_lite_min_clip                    =
 800582c:	7418      	strb	r0, [r3, #16]
	pdata->tp_lite_first_order_select            =
 800582e:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
	pdata->tp_range_timeout_lite_us              =
 8005832:	6419      	str	r1, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8005834:	f243 21c8 	movw	r1, #13000	; 0x32c8
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8005838:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800583a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
	pdata->tp_range_timeout_timed_us             =
 800583e:	6459      	str	r1, [r3, #68]	; 0x44
	pdata->tp_range_timeout_lpa_us =
 8005840:	649a      	str	r2, [r3, #72]	; 0x48


	LOG_FUNCTION_END(status);

	return status;
}
 8005842:	4770      	bx	lr

08005844 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005848:	4604      	mov	r4, r0
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800584a:	f44f 6020 	mov.w	r0, #2560	; 0xa00
{
 800584e:	9d09      	ldr	r5, [sp, #36]	; 0x24
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8005850:	8020      	strh	r0, [r4, #0]
	 */
	pstatic->gpio_hv_mux__ctrl  = \
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8005852:	f04f 0e02 	mov.w	lr, #2
	pstatic->debug__ctrl                                      = 0x00;
 8005856:	2000      	movs	r0, #0
	pstatic->gpio__fio_hv_status                              = 0x00;
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8005858:	f04f 0808 	mov.w	r8, #8
	pstatic->gpio_hv_mux__ctrl  = \
 800585c:	2611      	movs	r6, #17
	pstatic->debug__ctrl                                      = 0x00;
 800585e:	70a0      	strb	r0, [r4, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8005860:	70e0      	strb	r0, [r4, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8005862:	7120      	strb	r0, [r4, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8005864:	7160      	strb	r0, [r4, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8005866:	71a0      	strb	r0, [r4, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8005868:	71e0      	strb	r0, [r4, #7]
	pstatic->host_if__status                                  = 0x00;
 800586a:	7220      	strb	r0, [r4, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800586c:	7260      	strb	r0, [r4, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800586e:	72a0      	strb	r0, [r4, #10]
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8005870:	72e0      	strb	r0, [r4, #11]
	pstatic->gpio__tio_hv_status                              = 0x02;
 8005872:	f884 e00d 	strb.w	lr, [r4, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8005876:	73a0      	strb	r0, [r4, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8005878:	f884 e00f 	strb.w	lr, [r4, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800587c:	f884 8010 	strb.w	r8, [r4, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8005880:	7460      	strb	r0, [r4, #17]
	pstatic->gpio_hv_mux__ctrl  = \
 8005882:	7326      	strb	r6, [r4, #12]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8005884:	7fae      	ldrb	r6, [r5, #30]
 8005886:	74a6      	strb	r6, [r4, #18]
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8005888:	7fee      	ldrb	r6, [r5, #31]
 800588a:	74e6      	strb	r6, [r4, #19]
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800588c:	f895 6020 	ldrb.w	r6, [r5, #32]
 8005890:	7526      	strb	r6, [r4, #20]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8005892:	f04f 0cff 	mov.w	ip, #255	; 0xff
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8005896:	2601      	movs	r6, #1
 8005898:	7566      	strb	r6, [r4, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800589a:	75a0      	strb	r0, [r4, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800589c:	75e0      	strb	r0, [r4, #23]
	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800589e:	8320      	strh	r0, [r4, #24]
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 80058a0:	f884 c01a 	strb.w	ip, [r4, #26]
	pstatic->algo__range_min_clip                             =
 80058a4:	f895 9010 	ldrb.w	r9, [r5, #16]
{
 80058a8:	9f08      	ldr	r7, [sp, #32]
	pstatic->algo__range_min_clip                             =
 80058aa:	f884 901b 	strb.w	r9, [r4, #27]
	/*
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
 80058ae:	f895 900c 	ldrb.w	r9, [r5, #12]
 80058b2:	f884 901c 	strb.w	r9, [r4, #28]
			ptuning_parms->tp_consistency_lite_phase_tolerance;
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 80058b6:	7760      	strb	r0, [r4, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 80058b8:	77a0      	strb	r0, [r4, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 80058ba:	77e0      	strb	r0, [r4, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
	pgeneral->global_config__stream_divider                   = 0x00;
	pgeneral->system__interrupt_config_gpio =
 80058bc:	f04f 0920 	mov.w	r9, #32
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 80058c0:	240b      	movs	r4, #11
	pgeneral->gph_config__stream_count_update_value           = 0x00;
 80058c2:	7008      	strb	r0, [r1, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 80058c4:	7048      	strb	r0, [r1, #1]
	pgeneral->system__interrupt_config_gpio =
 80058c6:	f881 9002 	strb.w	r9, [r1, #2]
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 80058ca:	70cc      	strb	r4, [r1, #3]
	 * Set VHV / Phase Cal repeat rate to 1 every
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
 80058cc:	f8b5 a00e 	ldrh.w	sl, [r5, #14]
 80058d0:	f8a1 a004 	strh.w	sl, [r1, #4]
			ptuning_parms->tp_cal_repeat_rate;
	pgeneral->global_config__vcsel_width                      = 0x02;
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 80058d4:	f04f 0a0d 	mov.w	sl, #13
	pgeneral->global_config__vcsel_width                      = 0x02;
 80058d8:	f881 e006 	strb.w	lr, [r1, #6]
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 80058dc:	f881 a007 	strb.w	sl, [r1, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
 80058e0:	f895 a00d 	ldrb.w	sl, [r5, #13]
 80058e4:	f881 a008 	strb.w	sl, [r1, #8]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
	pgeneral->system__thresh_rate_low                         = 0x0000;
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 80058e8:	f44f 4a0c 	mov.w	sl, #35840	; 0x8c00
 80058ec:	f8a1 a010 	strh.w	sl, [r1, #16]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 80058f0:	f04f 0a38 	mov.w	sl, #56	; 0x38
	pgeneral->phasecal_config__override                       = 0x00;
 80058f4:	7248      	strb	r0, [r1, #9]
	pgeneral->dss_config__roi_mode_control =
 80058f6:	728e      	strb	r6, [r1, #10]
	pgeneral->system__thresh_rate_high                        = 0x0000;
 80058f8:	8188      	strh	r0, [r1, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 80058fa:	81c8      	strh	r0, [r1, #14]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 80058fc:	7488      	strb	r0, [r1, #18]
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 80058fe:	f881 a013 	strb.w	sl, [r1, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 8005902:	f881 c014 	strb.w	ip, [r1, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8005906:	754e      	strb	r6, [r1, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8005908:	211a      	movs	r1, #26
 800590a:	7051      	strb	r1, [r2, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800590c:	21cc      	movs	r1, #204	; 0xcc
 800590e:	7151      	strb	r1, [r2, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8005910:	21f5      	movs	r1, #245	; 0xf5
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8005912:	7010      	strb	r0, [r2, #0]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8005914:	7090      	strb	r0, [r2, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8005916:	f882 9003 	strb.w	r9, [r2, #3]
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800591a:	7116      	strb	r6, [r2, #4]
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800591c:	7194      	strb	r4, [r2, #6]
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800591e:	71d6      	strb	r6, [r2, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8005920:	7211      	strb	r1, [r2, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8005922:	2109      	movs	r1, #9
 8005924:	7251      	strb	r1, [r2, #9]
	 * Sigma thresh register - format 14.2
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
 8005926:	f8b5 9014 	ldrh.w	r9, [r5, #20]
 800592a:	f8a2 900a 	strh.w	r9, [r2, #10]
	/*
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800592e:	f8b5 901a 	ldrh.w	r9, [r5, #26]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8005932:	f882 800e 	strb.w	r8, [r2, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8005936:	f04f 0878 	mov.w	r8, #120	; 0x78
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800593a:	f8a2 900c 	strh.w	r9, [r2, #12]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800593e:	f882 800f 	strb.w	r8, [r2, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8005942:	6110      	str	r0, [r2, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8005944:	7510      	strb	r0, [r2, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8005946:	701e      	strb	r6, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 8005948:	8058      	strh	r0, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800594a:	8098      	strh	r0, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800594c:	7198      	strb	r0, [r3, #6]
	pdynamic->system__seed_config =
 800594e:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 8005952:	71da      	strb	r2, [r3, #7]
			ptuning_parms->tp_lite_seed_cfg;

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8005954:	721c      	strb	r4, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8005956:	7259      	strb	r1, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
 8005958:	79ea      	ldrb	r2, [r5, #7]
 800595a:	729a      	strb	r2, [r3, #10]
			ptuning_parms->tp_init_phase_rtn_lite_med;
	pdynamic->sd_config__initial_phase_sd1                     =
 800595c:	7aaa      	ldrb	r2, [r5, #10]
 800595e:	72da      	strb	r2, [r3, #11]
			ptuning_parms->tp_init_phase_ref_lite_med;;

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8005960:	731e      	strb	r6, [r3, #12]
	 *        3  -> 4095
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
 8005962:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8005966:	735a      	strb	r2, [r3, #13]
			ptuning_parms->tp_lite_first_order_select;
	pdynamic->sd_config__quantifier         =
 8005968:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 800596c:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800596e:	22c7      	movs	r2, #199	; 0xc7
 8005970:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;


	pdynamic->system__sequence_config                          = \
 8005972:	22db      	movs	r2, #219	; 0xdb
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8005974:	f883 c010 	strb.w	ip, [r3, #16]
	pdynamic->system__sequence_config                          = \
 8005978:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800597a:	f883 e012 	strb.w	lr, [r3, #18]
	psystem->system__stream_count_ctrl                         = 0x00;
	psystem->firmware__enable                                  = 0x01;
	psystem->system__interrupt_clear                           = \
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800597e:	2321      	movs	r3, #33	; 0x21
	psystem->system__stream_count_ctrl                         = 0x00;
 8005980:	7078      	strb	r0, [r7, #1]
	psystem->firmware__enable                                  = 0x01;
 8005982:	70be      	strb	r6, [r7, #2]
	psystem->system__interrupt_clear                           = \
 8005984:	70fe      	strb	r6, [r7, #3]
	psystem->system__mode_start                                = \
 8005986:	713b      	strb	r3, [r7, #4]
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
}
 8005988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800598c <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800598c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800598e:	9d09      	ldr	r5, [sp, #36]	; 0x24

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8005990:	9f08      	ldr	r7, [sp, #32]
 8005992:	9501      	str	r5, [sp, #4]
 8005994:	9700      	str	r7, [sp, #0]
{
 8005996:	4614      	mov	r4, r2
 8005998:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 800599a:	f7ff ff53 	bl	8005844 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800599e:	b988      	cbnz	r0, 80059c4 <VL53L1_preset_mode_standard_ranging_short_range+0x38>
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
		ptiming->range_config__vcsel_period_b                = 0x05;
 80059a0:	2305      	movs	r3, #5
		ptiming->range_config__vcsel_period_a                = 0x07;
 80059a2:	2207      	movs	r2, #7
 80059a4:	71a2      	strb	r2, [r4, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 80059a6:	7263      	strb	r3, [r4, #9]
		ptiming->range_config__sigma_thresh                  =
 80059a8:	8ae9      	ldrh	r1, [r5, #22]
 80059aa:	8161      	strh	r1, [r4, #10]
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80059ac:	8ba9      	ldrh	r1, [r5, #28]
 80059ae:	81a1      	strh	r1, [r4, #12]
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low               = 0x08;
 80059b0:	2108      	movs	r1, #8
 80059b2:	73a1      	strb	r1, [r4, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 80059b4:	2138      	movs	r1, #56	; 0x38
 80059b6:	73e1      	strb	r1, [r4, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 80059b8:	7232      	strb	r2, [r6, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 80059ba:	7273      	strb	r3, [r6, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 80059bc:	7a2b      	ldrb	r3, [r5, #8]
 80059be:	72b3      	strb	r3, [r6, #10]
				ptuning_parms->tp_init_phase_rtn_lite_short;
		pdynamic->sd_config__initial_phase_sd1               =
 80059c0:	7aeb      	ldrb	r3, [r5, #11]
 80059c2:	72f3      	strb	r3, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80059c4:	b003      	add	sp, #12
 80059c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059c8 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80059c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ca:	9d09      	ldr	r5, [sp, #36]	; 0x24

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80059cc:	9f08      	ldr	r7, [sp, #32]
 80059ce:	9501      	str	r5, [sp, #4]
 80059d0:	9700      	str	r7, [sp, #0]
{
 80059d2:	4614      	mov	r4, r2
 80059d4:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 80059d6:	f7ff ff35 	bl	8005844 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80059da:	b988      	cbnz	r0, 8005a00 <VL53L1_preset_mode_standard_ranging_long_range+0x38>
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
		ptiming->range_config__vcsel_period_b                = 0x0D;
 80059dc:	230d      	movs	r3, #13
		ptiming->range_config__vcsel_period_a                = 0x0F;
 80059de:	220f      	movs	r2, #15
 80059e0:	71a2      	strb	r2, [r4, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 80059e2:	7263      	strb	r3, [r4, #9]
		ptiming->range_config__sigma_thresh                  =
 80059e4:	8a69      	ldrh	r1, [r5, #18]
 80059e6:	8161      	strh	r1, [r4, #10]
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80059e8:	8b29      	ldrh	r1, [r5, #24]
 80059ea:	81a1      	strh	r1, [r4, #12]
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
		ptiming->range_config__valid_phase_low               = 0x08;
 80059ec:	2108      	movs	r1, #8
 80059ee:	73a1      	strb	r1, [r4, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 80059f0:	21b8      	movs	r1, #184	; 0xb8
 80059f2:	73e1      	strb	r1, [r4, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 80059f4:	7232      	strb	r2, [r6, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 80059f6:	7273      	strb	r3, [r6, #9]
		pdynamic->sd_config__initial_phase_sd0               =
 80059f8:	79ab      	ldrb	r3, [r5, #6]
 80059fa:	72b3      	strb	r3, [r6, #10]
				ptuning_parms->tp_init_phase_rtn_lite_long;
		pdynamic->sd_config__initial_phase_sd1               =
 80059fc:	7a6b      	ldrb	r3, [r5, #9]
 80059fe:	72f3      	strb	r3, [r6, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005a00:	b003      	add	sp, #12
 8005a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a04 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005a04:	b573      	push	{r0, r1, r4, r5, r6, lr}

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8005a06:	9e07      	ldr	r6, [sp, #28]
 8005a08:	9601      	str	r6, [sp, #4]
 8005a0a:	9e06      	ldr	r6, [sp, #24]
 8005a0c:	9600      	str	r6, [sp, #0]
{
 8005a0e:	460d      	mov	r5, r1
 8005a10:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging(
 8005a12:	f7ff ff17 	bl	8005844 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005a16:	b918      	cbnz	r0, 8005a20 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x1c>

		pgeneral->dss_config__roi_mode_control =
 8005a18:	2302      	movs	r3, #2
 8005a1a:	72ab      	strb	r3, [r5, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8005a1c:	233b      	movs	r3, #59	; 0x3b
 8005a1e:	7463      	strb	r3, [r4, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005a20:	b002      	add	sp, #8
 8005a22:	bd70      	pop	{r4, r5, r6, pc}

08005a24 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005a24:	b573      	push	{r0, r1, r4, r5, r6, lr}

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8005a26:	9e07      	ldr	r6, [sp, #28]
 8005a28:	9601      	str	r6, [sp, #4]
 8005a2a:	9e06      	ldr	r6, [sp, #24]
 8005a2c:	9600      	str	r6, [sp, #0]
{
 8005a2e:	460d      	mov	r5, r1
 8005a30:	461c      	mov	r4, r3
	status = VL53L1_preset_mode_standard_ranging(
 8005a32:	f7ff ff07 	bl	8005844 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005a36:	b918      	cbnz	r0, 8005a40 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x1c>

		pgeneral->dss_config__roi_mode_control =
 8005a38:	2302      	movs	r3, #2
 8005a3a:	72ab      	strb	r3, [r5, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8005a3c:	235b      	movs	r3, #91	; 0x5b
 8005a3e:	7463      	strb	r3, [r4, #17]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005a40:	b002      	add	sp, #8
 8005a42:	bd70      	pop	{r4, r5, r6, pc}

08005a44 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a46:	9d08      	ldr	r5, [sp, #32]
 8005a48:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8005a4a:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 8005a4e:	4614      	mov	r4, r2
 8005a50:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 8005a52:	f7ff fef7 	bl	8005844 <VL53L1_preset_mode_standard_ranging>
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005a56:	b970      	cbnz	r0, 8005a76 <VL53L1_preset_mode_timed_ranging+0x32>
		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8005a58:	23b1      	movs	r3, #177	; 0xb1
		pdynamic->system__grouped_parameter_hold = 0x00;
 8005a5a:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8005a5c:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8005a5e:	23d4      	movs	r3, #212	; 0xd4
 8005a60:	7223      	strb	r3, [r4, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 8005a62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8005a66:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8005a68:	71e0      	strb	r0, [r4, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 8005a6a:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 8005a6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005a70:	71f3      	strb	r3, [r6, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8005a72:	2340      	movs	r3, #64	; 0x40
 8005a74:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005a76:	b003      	add	sp, #12
 8005a78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a7a <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005a7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a7c:	9d08      	ldr	r5, [sp, #32]
 8005a7e:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 8005a80:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 8005a84:	4614      	mov	r4, r2
 8005a86:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging_short_range(
 8005a88:	f7ff ff80 	bl	800598c <VL53L1_preset_mode_standard_ranging_short_range>
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005a8c:	b978      	cbnz	r0, 8005aae <VL53L1_preset_mode_timed_ranging_short_range+0x34>


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8005a8e:	2301      	movs	r3, #1
		pdynamic->system__grouped_parameter_hold = 0x00;
 8005a90:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8005a92:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8005a94:	71e3      	strb	r3, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8005a96:	23b1      	movs	r3, #177	; 0xb1
 8005a98:	7223      	strb	r3, [r4, #8]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 8005a9a:	2284      	movs	r2, #132	; 0x84

		ptiming->system__intermeasurement_period = 0x00000600;
 8005a9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 8005aa0:	7162      	strb	r2, [r4, #5]
		ptiming->system__intermeasurement_period = 0x00000600;
 8005aa2:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 8005aa4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005aa8:	71f3      	strb	r3, [r6, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8005aaa:	2340      	movs	r3, #64	; 0x40
 8005aac:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005aae:	b003      	add	sp, #12
 8005ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ab2 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005ab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ab4:	9d08      	ldr	r5, [sp, #32]
 8005ab6:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 8005ab8:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 8005abc:	4614      	mov	r4, r2
 8005abe:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging_long_range(
 8005ac0:	f7ff ff82 	bl	80059c8 <VL53L1_preset_mode_standard_ranging_long_range>
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005ac4:	b970      	cbnz	r0, 8005ae4 <VL53L1_preset_mode_timed_ranging_long_range+0x32>

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8005ac6:	2397      	movs	r3, #151	; 0x97
		pdynamic->system__grouped_parameter_hold = 0x00;
 8005ac8:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8005aca:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8005acc:	23b1      	movs	r3, #177	; 0xb1
 8005ace:	7223      	strb	r3, [r4, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8005ad0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8005ad4:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8005ad6:	71e0      	strb	r0, [r4, #7]
		ptiming->system__intermeasurement_period = 0x00000600;
 8005ad8:	6123      	str	r3, [r4, #16]
		pdynamic->system__seed_config =
 8005ada:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005ade:	71f3      	strb	r3, [r6, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8005ae0:	2340      	movs	r3, #64	; 0x40
 8005ae2:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005ae4:	b003      	add	sp, #12
 8005ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ae8 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8005ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 8005aea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005aec:	9701      	str	r7, [sp, #4]
 8005aee:	9f08      	ldr	r7, [sp, #32]
 8005af0:	9700      	str	r7, [sp, #0]
{
 8005af2:	460c      	mov	r4, r1
 8005af4:	461d      	mov	r5, r3
 8005af6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging(
 8005af8:	f7ff ffa4 	bl	8005a44 <VL53L1_preset_mode_timed_ranging>
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8005afc:	b938      	cbnz	r0, 8005b0e <VL53L1_preset_mode_low_power_auto_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 8005afe:	4632      	mov	r2, r6
 8005b00:	4629      	mov	r1, r5
 8005b02:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005b04:	b003      	add	sp, #12
 8005b06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8005b0a:	f000 baa1 	b.w	8006050 <VL53L1_config_low_power_auto_mode>
}
 8005b0e:	b003      	add	sp, #12
 8005b10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b12 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8005b12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8005b14:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005b16:	9701      	str	r7, [sp, #4]
 8005b18:	9f08      	ldr	r7, [sp, #32]
 8005b1a:	9700      	str	r7, [sp, #0]
{
 8005b1c:	460c      	mov	r4, r1
 8005b1e:	461d      	mov	r5, r3
 8005b20:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging_short_range(
 8005b22:	f7ff ffaa 	bl	8005a7a <VL53L1_preset_mode_timed_ranging_short_range>
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8005b26:	b938      	cbnz	r0, 8005b38 <VL53L1_preset_mode_low_power_auto_short_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 8005b28:	4632      	mov	r2, r6
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005b2e:	b003      	add	sp, #12
 8005b30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8005b34:	f000 ba8c 	b.w	8006050 <VL53L1_config_low_power_auto_mode>
}
 8005b38:	b003      	add	sp, #12
 8005b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b3c <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8005b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 8005b3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005b40:	9701      	str	r7, [sp, #4]
 8005b42:	9f08      	ldr	r7, [sp, #32]
 8005b44:	9700      	str	r7, [sp, #0]
{
 8005b46:	460c      	mov	r4, r1
 8005b48:	461d      	mov	r5, r3
 8005b4a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	status = VL53L1_preset_mode_timed_ranging_long_range(
 8005b4c:	f7ff ffb1 	bl	8005ab2 <VL53L1_preset_mode_timed_ranging_long_range>
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8005b50:	b938      	cbnz	r0, 8005b62 <VL53L1_preset_mode_low_power_auto_long_ranging+0x26>
		status = VL53L1_config_low_power_auto_mode(
 8005b52:	4632      	mov	r2, r6
 8005b54:	4629      	mov	r1, r5
 8005b56:	4620      	mov	r0, r4
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005b58:	b003      	add	sp, #12
 8005b5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = VL53L1_config_low_power_auto_mode(
 8005b5e:	f000 ba77 	b.w	8006050 <VL53L1_config_low_power_auto_mode>
}
 8005b62:	b003      	add	sp, #12
 8005b64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b66 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005b66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b68:	9d08      	ldr	r5, [sp, #32]
 8005b6a:	9f09      	ldr	r7, [sp, #36]	; 0x24

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8005b6c:	e88d 00a0 	stmia.w	sp, {r5, r7}
{
 8005b70:	4614      	mov	r4, r2
 8005b72:	461e      	mov	r6, r3
	status = VL53L1_preset_mode_standard_ranging(
 8005b74:	f7ff fe66 	bl	8005844 <VL53L1_preset_mode_standard_ranging>
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005b78:	b958      	cbnz	r0, 8005b92 <VL53L1_preset_mode_singleshot_ranging+0x2c>

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8005b7a:	23b1      	movs	r3, #177	; 0xb1
		pdynamic->system__grouped_parameter_hold = 0x00;
 8005b7c:	74b0      	strb	r0, [r6, #18]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8005b7e:	7163      	strb	r3, [r4, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8005b80:	23d4      	movs	r3, #212	; 0xd4
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8005b82:	7120      	strb	r0, [r4, #4]
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8005b84:	71e0      	strb	r0, [r4, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8005b86:	7223      	strb	r3, [r4, #8]

		pdynamic->system__seed_config =
 8005b88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005b8c:	71f3      	strb	r3, [r6, #7]
				ptuning_parms->tp_timed_seed_cfg;

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8005b8e:	2310      	movs	r3, #16
 8005b90:	712b      	strb	r3, [r5, #4]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005b92:	b003      	add	sp, #12
 8005b94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b96 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005b96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b98:	9c06      	ldr	r4, [sp, #24]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8005b9a:	9d07      	ldr	r5, [sp, #28]
 8005b9c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8005ba0:	f7ff fe50 	bl	8005844 <VL53L1_preset_mode_standard_ranging>
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005ba4:	b908      	cbnz	r0, 8005baa <VL53L1_preset_mode_olt+0x14>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	7063      	strb	r3, [r4, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
}
 8005baa:	b003      	add	sp, #12
 8005bac:	bd30      	pop	{r4, r5, pc}

08005bae <VL53L1_init_version>:
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8005bba:	230a      	movs	r3, #10
 8005bbc:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8005bc0:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8005bc4:	6243      	str	r3, [r0, #36]	; 0x24
 8005bc6:	4770      	bx	lr

08005bc8 <VL53L1_init_ll_driver_state>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);

	pstate->cfg_device_state  = device_state;
	pstate->cfg_stream_count  = 0;
 8005bc8:	2300      	movs	r3, #0
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005bca:	2202      	movs	r2, #2
	pstate->cfg_device_state  = device_state;
 8005bcc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
	pstate->cfg_stream_count  = 0;
 8005bd0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005bd4:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
	pstate->cfg_timing_status = 0;
 8005bd8:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f

	pstate->rd_device_state   = device_state;
 8005bdc:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	pstate->rd_stream_count   = 0;
 8005be0:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005be4:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
	pstate->rd_timing_status  = 0;
 8005be8:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 8005bec:	4770      	bx	lr

08005bee <VL53L1_update_ll_driver_rd_state>:

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8005bee:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8005bf2:	f013 03f0 	ands.w	r3, r3, #240	; 0xf0
 8005bf6:	d108      	bne.n	8005c0a <VL53L1_update_ll_driver_rd_state+0x1c>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8005bf8:	2203      	movs	r2, #3
 8005bfa:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
		default:

			pstate->rd_device_state  =
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005bfe:	2202      	movs	r2, #2
			pstate->rd_stream_count  = 0;
 8005c00:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005c04:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
 8005c08:	e022      	b.n	8005c50 <VL53L1_update_ll_driver_rd_state+0x62>
		if (pstate->rd_stream_count == 0xFF) {
 8005c0a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8005c0e:	2bff      	cmp	r3, #255	; 0xff
			pstate->rd_stream_count = 0x80;
 8005c10:	bf0c      	ite	eq
 8005c12:	2380      	moveq	r3, #128	; 0x80
			pstate->rd_stream_count++;
 8005c14:	3301      	addne	r3, #1
 8005c16:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005c1a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8005c1e:	f083 0302 	eor.w	r3, r3, #2
 8005c22:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
		switch (pstate->rd_device_state) {
 8005c26:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8005c2a:	3b03      	subs	r3, #3
 8005c2c:	2b05      	cmp	r3, #5
 8005c2e:	d821      	bhi.n	8005c74 <VL53L1_update_ll_driver_rd_state+0x86>
 8005c30:	e8df f003 	tbb	[pc, r3]
 8005c34:	11202003 	.word	0x11202003
 8005c38:	1914      	.short	0x1914
			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8005c3a:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
 8005c3e:	079b      	lsls	r3, r3, #30
				pstate->rd_device_state =
 8005c40:	bf4c      	ite	mi
 8005c42:	2306      	movmi	r3, #6
				pstate->rd_device_state =
 8005c44:	2308      	movpl	r3, #8
 8005c46:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			pstate->rd_stream_count  = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_timing_status = 0;
 8005c50:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33

		break;
 8005c54:	e005      	b.n	8005c62 <VL53L1_update_ll_driver_rd_state+0x74>
			pstate->rd_stream_count = 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
			pstate->rd_device_state =
 8005c5c:	2308      	movs	r3, #8
 8005c5e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 8005c62:	2000      	movs	r0, #0
 8005c64:	4770      	bx	lr
			pstate->rd_timing_status ^= 0x01;
 8005c66:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8005c6a:	f083 0301 	eor.w	r3, r3, #1
 8005c6e:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 8005c72:	e7f3      	b.n	8005c5c <VL53L1_update_ll_driver_rd_state+0x6e>
			pstate->rd_device_state  =
 8005c74:	2303      	movs	r3, #3
 8005c76:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
			pstate->rd_stream_count  = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e7bf      	b.n	8005bfe <VL53L1_update_ll_driver_rd_state+0x10>

08005c7e <VL53L1_check_ll_driver_rd_state>:
	device_gph_id = (psys_results->result__interrupt_status &
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8005c7e:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8005c82:	f013 0320 	ands.w	r3, r3, #32
{
 8005c86:	4602      	mov	r2, r0
	if ((pdev->sys_ctrl.system__mode_start &
 8005c88:	d023      	beq.n	8005cd2 <VL53L1_check_ll_driver_rd_state+0x54>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8005c8a:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
			psys_results->result__range_status &
 8005c8e:	f890 31cf 	ldrb.w	r3, [r0, #463]	; 0x1cf
		if (pstate->rd_device_state ==
 8005c92:	2906      	cmp	r1, #6
 8005c94:	d107      	bne.n	8005ca6 <VL53L1_check_ll_driver_rd_state+0x28>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 8005c96:	f003 031f 	and.w	r3, r3, #31
 8005c9a:	2b12      	cmp	r3, #18
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8005c9c:	bf0c      	ite	eq
 8005c9e:	2000      	moveq	r0, #0
 8005ca0:	f06f 0010 	mvnne.w	r0, #16
 8005ca4:	4770      	bx	lr
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8005ca6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8005caa:	f890 11d1 	ldrb.w	r1, [r0, #465]	; 0x1d1
 8005cae:	4299      	cmp	r1, r3
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8005cb0:	f892 31ce 	ldrb.w	r3, [r2, #462]	; 0x1ce

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8005cb4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8005cb8:	ea4f 1323 	mov.w	r3, r3, asr #4
		if (pstate->rd_gph_id != device_gph_id) {
 8005cbc:	f003 0302 	and.w	r3, r3, #2
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8005cc0:	bf14      	ite	ne
 8005cc2:	f06f 0011 	mvnne.w	r0, #17
 8005cc6:	2000      	moveq	r0, #0
		if (pstate->rd_gph_id != device_gph_id) {
 8005cc8:	429a      	cmp	r2, r3
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8005cca:	bf18      	it	ne
 8005ccc:	f06f 0012 	mvnne.w	r0, #18
 8005cd0:	4770      	bx	lr
	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8005cd2:	4618      	mov	r0, r3
	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
}
 8005cd4:	4770      	bx	lr

08005cd6 <VL53L1_update_ll_driver_cfg_state>:
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8005cd6:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
 8005cda:	f013 03f0 	ands.w	r3, r3, #240	; 0xf0
 8005cde:	d108      	bne.n	8005cf2 <VL53L1_update_ll_driver_cfg_state+0x1c>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8005ce0:	2203      	movs	r2, #3
 8005ce2:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005ce6:	2202      	movs	r2, #2
			pstate->cfg_stream_count = 0;
 8005ce8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005cec:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8005cf0:	e02a      	b.n	8005d48 <VL53L1_update_ll_driver_cfg_state+0x72>
		if (pstate->cfg_stream_count == 0xFF) {
 8005cf2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8005cf6:	2bff      	cmp	r3, #255	; 0xff
			pstate->cfg_stream_count = 0x80;
 8005cf8:	bf0c      	ite	eq
 8005cfa:	2380      	moveq	r3, #128	; 0x80
			pstate->cfg_stream_count++;
 8005cfc:	3301      	addne	r3, #1
 8005cfe:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8005d02:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8005d06:	f083 0302 	eor.w	r3, r3, #2
 8005d0a:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
		switch (pstate->cfg_device_state) {
 8005d0e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d006      	beq.n	8005d24 <VL53L1_update_ll_driver_cfg_state+0x4e>
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d012      	beq.n	8005d40 <VL53L1_update_ll_driver_cfg_state+0x6a>
			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
			pstate->cfg_stream_count = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e7e0      	b.n	8005ce6 <VL53L1_update_ll_driver_cfg_state+0x10>
			pstate->cfg_timing_status ^= 0x01;
 8005d24:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8005d28:	f083 0301 	eor.w	r3, r3, #1
 8005d2c:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			pstate->cfg_stream_count = 1;
 8005d30:	2301      	movs	r3, #1
 8005d32:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8005d36:	2304      	movs	r3, #4
 8005d38:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
#endif

	LOG_FUNCTION_END(status);

	return status;
}
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	4770      	bx	lr
			pstate->cfg_timing_status ^= 0x01;
 8005d40:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8005d44:	f083 0301 	eor.w	r3, r3, #1
			pstate->cfg_timing_status = 0;
 8005d48:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
		break;
 8005d4c:	e7f6      	b.n	8005d3c <VL53L1_update_ll_driver_cfg_state+0x66>

08005d4e <VL53L1_copy_rtn_good_spads_to_buffer>:
{
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8005d4e:	7c03      	ldrb	r3, [r0, #16]
 8005d50:	700b      	strb	r3, [r1, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8005d52:	7c43      	ldrb	r3, [r0, #17]
 8005d54:	704b      	strb	r3, [r1, #1]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8005d56:	7c83      	ldrb	r3, [r0, #18]
 8005d58:	708b      	strb	r3, [r1, #2]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8005d5a:	7cc3      	ldrb	r3, [r0, #19]
 8005d5c:	70cb      	strb	r3, [r1, #3]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8005d5e:	7d03      	ldrb	r3, [r0, #20]
 8005d60:	710b      	strb	r3, [r1, #4]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8005d62:	7d43      	ldrb	r3, [r0, #21]
 8005d64:	714b      	strb	r3, [r1, #5]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8005d66:	7d83      	ldrb	r3, [r0, #22]
 8005d68:	718b      	strb	r3, [r1, #6]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8005d6a:	7dc3      	ldrb	r3, [r0, #23]
 8005d6c:	71cb      	strb	r3, [r1, #7]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8005d6e:	7e03      	ldrb	r3, [r0, #24]
 8005d70:	720b      	strb	r3, [r1, #8]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8005d72:	7e43      	ldrb	r3, [r0, #25]
 8005d74:	724b      	strb	r3, [r1, #9]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8005d76:	7e83      	ldrb	r3, [r0, #26]
 8005d78:	728b      	strb	r3, [r1, #10]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8005d7a:	7ec3      	ldrb	r3, [r0, #27]
 8005d7c:	72cb      	strb	r3, [r1, #11]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8005d7e:	7f03      	ldrb	r3, [r0, #28]
 8005d80:	730b      	strb	r3, [r1, #12]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8005d82:	7f43      	ldrb	r3, [r0, #29]
 8005d84:	734b      	strb	r3, [r1, #13]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8005d86:	7f83      	ldrb	r3, [r0, #30]
 8005d88:	738b      	strb	r3, [r1, #14]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8005d8a:	7fc3      	ldrb	r3, [r0, #31]
 8005d8c:	73cb      	strb	r3, [r1, #15]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8005d8e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005d92:	740b      	strb	r3, [r1, #16]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8005d94:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005d98:	744b      	strb	r3, [r1, #17]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8005d9a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8005d9e:	748b      	strb	r3, [r1, #18]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8005da0:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8005da4:	74cb      	strb	r3, [r1, #19]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8005da6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8005daa:	750b      	strb	r3, [r1, #20]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8005dac:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8005db0:	754b      	strb	r3, [r1, #21]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8005db2:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8005db6:	758b      	strb	r3, [r1, #22]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8005db8:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8005dbc:	75cb      	strb	r3, [r1, #23]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8005dbe:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8005dc2:	760b      	strb	r3, [r1, #24]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8005dc4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005dc8:	764b      	strb	r3, [r1, #25]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8005dca:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8005dce:	768b      	strb	r3, [r1, #26]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8005dd0:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8005dd4:	76cb      	strb	r3, [r1, #27]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8005dd6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005dda:	770b      	strb	r3, [r1, #28]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8005ddc:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8005de0:	774b      	strb	r3, [r1, #29]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8005de2:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8005de6:	778b      	strb	r3, [r1, #30]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8005de8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8005dec:	77cb      	strb	r3, [r1, #31]
 8005dee:	4770      	bx	lr

08005df0 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8005df0:	4411      	add	r1, r2
	uint16_t   i    = 0;
	uint16_t   data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 8005df2:	4291      	cmp	r1, r2
 8005df4:	d100      	bne.n	8005df8 <VL53L1_i2c_encode_uint16_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 8005df6:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8005df8:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 8005dfc:	0a00      	lsrs	r0, r0, #8
 8005dfe:	e7f8      	b.n	8005df2 <VL53L1_i2c_encode_uint16_t+0x2>

08005e00 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8005e00:	180b      	adds	r3, r1, r0
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 8005e02:	2000      	movs	r0, #0

	while (count-- > 0) {
 8005e04:	4299      	cmp	r1, r3
 8005e06:	d100      	bne.n	8005e0a <VL53L1_i2c_decode_uint16_t+0xa>
		value = (value << 8) | (uint16_t)*pbuffer++;
	}

	return value;
}
 8005e08:	4770      	bx	lr
		value = (value << 8) | (uint16_t)*pbuffer++;
 8005e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e0e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8005e12:	b280      	uxth	r0, r0
 8005e14:	e7f6      	b.n	8005e04 <VL53L1_i2c_decode_uint16_t+0x4>

08005e16 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8005e16:	4411      	add	r1, r2
	uint16_t   i    = 0;
	int16_t    data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 8005e18:	4291      	cmp	r1, r2
 8005e1a:	d100      	bne.n	8005e1e <VL53L1_i2c_encode_int16_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 8005e1c:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8005e1e:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 8005e22:	1200      	asrs	r0, r0, #8
 8005e24:	e7f8      	b.n	8005e18 <VL53L1_i2c_encode_int16_t+0x2>

08005e26 <VL53L1_i2c_decode_int16_t>:
	 */

	int16_t    value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8005e26:	f991 3000 	ldrsb.w	r3, [r1]
 8005e2a:	4408      	add	r0, r1
 8005e2c:	17db      	asrs	r3, r3, #31
		value = 0xFFFF;
	}

	while (count-- > 0) {
 8005e2e:	4281      	cmp	r1, r0
 8005e30:	d101      	bne.n	8005e36 <VL53L1_i2c_decode_int16_t+0x10>
		value = (value << 8) | (int16_t)*pbuffer++;
	}

	return value;
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	4770      	bx	lr
		value = (value << 8) | (int16_t)*pbuffer++;
 8005e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e3a:	b25b      	sxtb	r3, r3
 8005e3c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005e40:	e7f5      	b.n	8005e2e <VL53L1_i2c_decode_int16_t+0x8>

08005e42 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8005e42:	4411      	add	r1, r2
	uint16_t   i    = 0;
	uint32_t   data = 0;

	data =  ip_value;

	for (i = 0; i < count ; i++) {
 8005e44:	4291      	cmp	r1, r2
 8005e46:	d100      	bne.n	8005e4a <VL53L1_i2c_encode_uint32_t+0x8>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
		data = data >> 8;
	}
}
 8005e48:	4770      	bx	lr
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8005e4a:	f801 0d01 	strb.w	r0, [r1, #-1]!
		data = data >> 8;
 8005e4e:	0a00      	lsrs	r0, r0, #8
 8005e50:	e7f8      	b.n	8005e44 <VL53L1_i2c_encode_uint32_t+0x2>

08005e52 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8005e52:	180b      	adds	r3, r1, r0
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8005e54:	2000      	movs	r0, #0

	while (count-- > 0) {
 8005e56:	4299      	cmp	r1, r3
 8005e58:	d100      	bne.n	8005e5c <VL53L1_i2c_decode_uint32_t+0xa>
		value = (value << 8) | (uint32_t)*pbuffer++;
	}

	return value;
}
 8005e5a:	4770      	bx	lr
		value = (value << 8) | (uint32_t)*pbuffer++;
 8005e5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e60:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8005e64:	e7f7      	b.n	8005e56 <VL53L1_i2c_decode_uint32_t+0x4>

08005e66 <VL53L1_i2c_decode_int32_t>:
	 */

	int32_t    value = 0x00;

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8005e66:	f991 3000 	ldrsb.w	r3, [r1]
 8005e6a:	4408      	add	r0, r1
 8005e6c:	17db      	asrs	r3, r3, #31
		value = 0xFFFFFFFF;
	}

	while (count-- > 0) {
 8005e6e:	4281      	cmp	r1, r0
 8005e70:	d101      	bne.n	8005e76 <VL53L1_i2c_decode_int32_t+0x10>
		value = (value << 8) | (int32_t)*pbuffer++;
	}

	return value;
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	4770      	bx	lr
		value = (value << 8) | (int32_t)*pbuffer++;
 8005e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e7a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005e7e:	e7f6      	b.n	8005e6e <VL53L1_i2c_decode_int32_t+0x8>

08005e80 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	460d      	mov	r5, r1

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8005e84:	f000 f938 	bl	80060f8 <VL53L1_calc_pll_period_us>
 8005e88:	4604      	mov	r4, r0

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f000 f939 	bl	8006102 <VL53L1_decode_vcsel_period>
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8005e90:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005e94:	4363      	muls	r3, r4
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8005e96:	099b      	lsrs	r3, r3, #6

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8005e98:	4358      	muls	r0, r3
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
}
 8005e9a:	0980      	lsrs	r0, r0, #6
 8005e9c:	bd38      	pop	{r3, r4, r5, pc}

08005e9e <VL53L1_calc_range_ignore_threshold>:

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);

	if (x_gradient < 0) {
 8005e9e:	2900      	cmp	r1, #0
		x_gradient_int = x_gradient * -1;
 8005ea0:	bfba      	itte	lt
 8005ea2:	4249      	neglt	r1, r1
 8005ea4:	b289      	uxthlt	r1, r1
 8005ea6:	2100      	movge	r1, #0
	}

	if (y_gradient < 0) {
 8005ea8:	2a00      	cmp	r2, #0
		y_gradient_int = y_gradient * -1;
 8005eaa:	bfba      	itte	lt
 8005eac:	4252      	neglt	r2, r2
 8005eae:	b292      	uxthlt	r2, r2
 8005eb0:	2200      	movge	r2, #0
 8005eb2:	b209      	sxth	r1, r1

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8005eb4:	fa01 f282 	sxtah	r2, r1, r2
{
 8005eb8:	b510      	push	{r4, lr}

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8005eba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8005ebe:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005ec2:	0100      	lsls	r0, r0, #4
	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8005ec4:	0152      	lsls	r2, r2, #5
	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8005ec6:	fb90 f0f4 	sdiv	r0, r0, r4
	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8005eca:	fb92 f2f1 	sdiv	r2, r2, r1

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8005ece:	4410      	add	r0, r2

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8005ed0:	4358      	muls	r0, r3

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8005ed2:	3010      	adds	r0, #16
 8005ed4:	2320      	movs	r3, #32
 8005ed6:	fb90 f0f3 	sdiv	r0, r0, r3
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8005eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ede:	4298      	cmp	r0, r3
 8005ee0:	bfa8      	it	ge
 8005ee2:	4618      	movge	r0, r3
}
 8005ee4:	b280      	uxth	r0, r0
 8005ee6:	bd10      	pop	{r4, pc}

08005ee8 <VL53L1_calc_timeout_us>:
	uint64_t tmp            = 0;

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
	tmp += 0x00800;
 8005ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eec:	2300      	movs	r3, #0
 8005eee:	fbe1 2300 	umlal	r2, r3, r1, r0
	tmp  = tmp >> 12;
 8005ef2:	0b10      	lsrs	r0, r2, #12
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
}
 8005ef4:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8005ef8:	4770      	bx	lr

08005efa <VL53L1_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_mclks > 0) {
 8005efa:	b150      	cbz	r0, 8005f12 <VL53L1_encode_timeout+0x18>
		ls_byte = timeout_mclks - 1;
 8005efc:	3801      	subs	r0, #1
 8005efe:	2300      	movs	r3, #0

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005f00:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	f103 0301 	add.w	r3, r3, #1
 8005f0a:	d103      	bne.n	8005f14 <VL53L1_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 8005f0c:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8005f10:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;
}
 8005f12:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 8005f14:	0840      	lsrs	r0, r0, #1
 8005f16:	e7f3      	b.n	8005f00 <VL53L1_encode_timeout+0x6>

08005f18 <VL53L1_calc_encoded_timeout>:
			((timeout_us << 12) + (macro_period_us>>1)) /
 8005f18:	0300      	lsls	r0, r0, #12
 8005f1a:	eb00 0051 	add.w	r0, r0, r1, lsr #1
	timeout_encoded =
 8005f1e:	fbb0 f0f1 	udiv	r0, r0, r1
 8005f22:	f7ff bfea 	b.w	8005efa <VL53L1_encode_timeout>

08005f26 <VL53L1_decode_timeout>:
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005f26:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005f28:	0a00      	lsrs	r0, r0, #8
 8005f2a:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 8005f2e:	3001      	adds	r0, #1
 8005f30:	4770      	bx	lr

08005f32 <VL53L1_calc_decoded_timeout_us>:
{
 8005f32:	b508      	push	{r3, lr}
	timeout_mclks =
 8005f34:	f7ff fff7 	bl	8005f26 <VL53L1_decode_timeout>
	tmp += 0x00800;
 8005f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	fbe0 2301 	umlal	r2, r3, r0, r1
	tmp  = tmp >> 12;
 8005f42:	0b10      	lsrs	r0, r2, #12
}
 8005f44:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8005f48:	bd08      	pop	{r3, pc}

08005f4a <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8005f4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f4e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005f50:	4605      	mov	r5, r0
 8005f52:	4688      	mov	r8, r1
 8005f54:	4617      	mov	r7, r2
	uint32_t timeout_mclks      = 0;
	uint16_t timeout_encoded    = 0;

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8005f56:	4699      	mov	r9, r3
 8005f58:	b393      	cbz	r3, 8005fc0 <VL53L1_calc_timeout_register_values+0x76>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
 8005f5a:	79a1      	ldrb	r1, [r4, #6]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff ff8f 	bl	8005e80 <VL53L1_calc_macro_period_us>
 8005f62:	4606      	mov	r6, r0
			((timeout_us << 12) + (macro_period_us>>1)) /
 8005f64:	0328      	lsls	r0, r5, #12
		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
			timeout_mclks = 0xFF;

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8005f66:	9b08      	ldr	r3, [sp, #32]
			((timeout_us << 12) + (macro_period_us>>1)) /
 8005f68:	eb00 0056 	add.w	r0, r0, r6, lsr #1
	timeout_mclks   =
 8005f6c:	fbb0 f0f6 	udiv	r0, r0, r6
				(uint8_t)timeout_mclks;
 8005f70:	28ff      	cmp	r0, #255	; 0xff
 8005f72:	bf28      	it	cs
 8005f74:	20ff      	movcs	r0, #255	; 0xff
 8005f76:	71d8      	strb	r0, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	f7ff ffcc 	bl	8005f18 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005f80:	0a03      	lsrs	r3, r0, #8
 8005f82:	7023      	strb	r3, [r4, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8005f84:	7060      	strb	r0, [r4, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
 8005f86:	4631      	mov	r1, r6
 8005f88:	4638      	mov	r0, r7
 8005f8a:	f7ff ffc5 	bl	8005f18 <VL53L1_calc_encoded_timeout>
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005f8e:	0a03      	lsrs	r3, r0, #8
 8005f90:	7123      	strb	r3, [r4, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8005f92:	7160      	strb	r0, [r4, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
 8005f94:	7a61      	ldrb	r1, [r4, #9]
 8005f96:	4648      	mov	r0, r9
 8005f98:	f7ff ff72 	bl	8005e80 <VL53L1_calc_macro_period_us>
 8005f9c:	4605      	mov	r5, r0
				VL53L1_calc_macro_period_us(
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
 8005f9e:	4601      	mov	r1, r0
 8005fa0:	4640      	mov	r0, r8
 8005fa2:	f7ff ffb9 	bl	8005f18 <VL53L1_calc_encoded_timeout>
				VL53L1_calc_encoded_timeout(
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005fa6:	0a03      	lsrs	r3, r0, #8
 8005fa8:	70a3      	strb	r3, [r4, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8005faa:	70e0      	strb	r0, [r4, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 8005fac:	4629      	mov	r1, r5
 8005fae:	4638      	mov	r0, r7
 8005fb0:	f7ff ffb2 	bl	8005f18 <VL53L1_calc_encoded_timeout>
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005fb4:	0a03      	lsrs	r3, r0, #8
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8005fb6:	7220      	strb	r0, [r4, #8]
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8005fb8:	71e3      	strb	r3, [r4, #7]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005fba:	2000      	movs	r0, #0
 8005fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005fc0:	f06f 000e 	mvn.w	r0, #14

	LOG_FUNCTION_END(0);

	return status;

}
 8005fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005fc8 <VL53L1_encode_row_col>:
{
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8005fc8:	2807      	cmp	r0, #7
		*pspad_number = 128 + (col << 3) + (15-row);
 8005fca:	bf8b      	itete	hi
 8005fcc:	ebc0 00c1 	rsbhi	r0, r0, r1, lsl #3
	} else {
		*pspad_number = ((15-col) << 3) + row;
 8005fd0:	f1c1 010f 	rsbls	r1, r1, #15
		*pspad_number = 128 + (col << 3) + (15-row);
 8005fd4:	3871      	subhi	r0, #113	; 0x71
		*pspad_number = ((15-col) << 3) + row;
 8005fd6:	eb00 00c1 	addls.w	r0, r0, r1, lsl #3
 8005fda:	7010      	strb	r0, [r2, #0]
 8005fdc:	4770      	bx	lr

08005fde <VL53L1_decode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8005fde:	0903      	lsrs	r3, r0, #4
	*pwidth  = encoded_xy_size & 0x0F;
 8005fe0:	f000 000f 	and.w	r0, r0, #15
	*pheight = encoded_xy_size >> 4;
 8005fe4:	7013      	strb	r3, [r2, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8005fe6:	7008      	strb	r0, [r1, #0]
 8005fe8:	4770      	bx	lr

08005fea <VL53L1_encode_zone_size>:
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8005fea:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005fee:	7011      	strb	r1, [r2, #0]
 8005ff0:	4770      	bx	lr

08005ff2 <VL53L1_low_power_auto_data_init>:

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	f880 32e4 	strb.w	r3, [r0, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f880 32e5 	strb.w	r3, [r0, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8005ffe:	f880 32e6 	strb.w	r3, [r0, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8006002:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8006006:	f880 32e8 	strb.w	r3, [r0, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800600a:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800600e:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8006012:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8006016:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
}
 800601a:	4618      	mov	r0, r3
 800601c:	4770      	bx	lr

0800601e <VL53L1_low_power_auto_data_stop_range>:
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800601e:	22ff      	movs	r2, #255	; 0xff
 8006020:	f880 22e6 	strb.w	r2, [r0, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8006024:	2200      	movs	r2, #0
 8006026:	f880 22ea 	strb.w	r2, [r0, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800602a:	f8c0 22ec 	str.w	r2, [r0, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800602e:	f8a0 22f0 	strh.w	r2, [r0, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8006032:	f890 22e8 	ldrb.w	r2, [r0, #744]	; 0x2e8
{
 8006036:	4603      	mov	r3, r0
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8006038:	b10a      	cbz	r2, 800603e <VL53L1_low_power_auto_data_stop_range+0x20>
		pdev->stat_nvm.vhv_config__init =
 800603a:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
			pdev->low_power_auto_data.saved_vhv_init;
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800603e:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
 8006042:	b10a      	cbz	r2, 8006048 <VL53L1_low_power_auto_data_stop_range+0x2a>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8006044:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			pdev->low_power_auto_data.saved_vhv_timeout;

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 8006048:	2000      	movs	r0, #0
 800604a:	f883 018d 	strb.w	r0, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
}
 800604e:	4770      	bx	lr

08006050 <VL53L1_config_low_power_auto_mode>:
	VL53L1_Error  status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8006050:	2301      	movs	r3, #1
 8006052:	7053      	strb	r3, [r2, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	7093      	strb	r3, [r2, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8006058:	228b      	movs	r2, #139	; 0x8b
 800605a:	744a      	strb	r2, [r1, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 800605c:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8006060:	8202      	strh	r2, [r0, #16]
	pgeneral->dss_config__roi_mode_control =
 8006062:	2202      	movs	r2, #2
 8006064:	7282      	strb	r2, [r0, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
}
 8006066:	4618      	mov	r0, r3
 8006068:	4770      	bx	lr

0800606a <VL53L1_low_power_auto_setup_manual_calibration>:

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800606a:	f890 2163 	ldrb.w	r2, [r0, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800606e:	f890 3160 	ldrb.w	r3, [r0, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_init =
 8006072:	f880 22e8 	strb.w	r2, [r0, #744]	; 0x2e8

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8006076:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800607a:	f880 2163 	strb.w	r2, [r0, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800607e:	f890 22e4 	ldrb.w	r2, [r0, #740]	; 0x2e4
	pdev->low_power_auto_data.saved_vhv_timeout =
 8006082:	f880 32e9 	strb.w	r3, [r0, #745]	; 0x2e9
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800608e:	f880 3160 	strb.w	r3, [r0, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8006092:	2301      	movs	r3, #1
 8006094:	f880 318d 	strb.w	r3, [r0, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8006098:	f890 32ae 	ldrb.w	r3, [r0, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800609c:	f880 32ea 	strb.w	r3, [r0, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 80060a0:	f880 3187 	strb.w	r3, [r0, #391]	; 0x187
		pdev->low_power_auto_data.first_run_phasecal_result;

	LOG_FUNCTION_END(status);

	return status;
}
 80060a4:	2000      	movs	r0, #0
 80060a6:	4770      	bx	lr

080060a8 <VL53L1_low_power_auto_update_DSS>:
	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 80060a8:	f8b0 31d2 	ldrh.w	r3, [r0, #466]	; 0x1d2
 80060ac:	b30b      	cbz	r3, 80060f2 <VL53L1_low_power_auto_update_DSS+0x4a>
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 80060ae:	f8b0 11d6 	ldrh.w	r1, [r0, #470]	; 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 80060b2:	f8b0 21de 	ldrh.w	r2, [r0, #478]	; 0x1de
 80060b6:	440a      	add	r2, r1
 80060b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80060bc:	428a      	cmp	r2, r1
 80060be:	bfa8      	it	ge
 80060c0:	460a      	movge	r2, r1
	utemp32a = utemp32a << 16;
 80060c2:	0412      	lsls	r2, r2, #16
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
 80060c4:	fbb2 f3f3 	udiv	r3, r2, r3
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 80060c8:	f8c0 32ec 	str.w	r3, [r0, #748]	; 0x2ec
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 80060cc:	b18b      	cbz	r3, 80060f2 <VL53L1_low_power_auto_update_DSS+0x4a>
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 80060ce:	f8b0 2164 	ldrh.w	r2, [r0, #356]	; 0x164
 80060d2:	0412      	lsls	r2, r2, #16
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
 80060d4:	fbb2 f3f3 	udiv	r3, r2, r3
			if (utemp32a > 0xFFFF)
				utemp32a = 0xFFFF;

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 80060d8:	428b      	cmp	r3, r1
 80060da:	bf28      	it	cs
 80060dc:	460b      	movcs	r3, r1
 80060de:	b29b      	uxth	r3, r3
	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 80060e0:	f8a0 32f0 	strh.w	r3, [r0, #752]	; 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80060e4:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
		pdev->low_power_auto_data.dss__required_spads;
		pdev->gen_cfg.dss_config__roi_mode_control =
 80060e8:	2302      	movs	r3, #2
 80060ea:	f880 318e 	strb.w	r3, [r0, #398]	; 0x18e
	}

	LOG_FUNCTION_END(status);

	return status;
}
 80060ee:	2000      	movs	r0, #0
 80060f0:	4770      	bx	lr
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 80060f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060f6:	e7f3      	b.n	80060e0 <VL53L1_low_power_auto_update_DSS+0x38>

080060f8 <VL53L1_calc_pll_period_us>:
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
}
 80060f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060fc:	fb93 f0f0 	sdiv	r0, r3, r0
 8006100:	4770      	bx	lr

08006102 <VL53L1_decode_vcsel_period>:
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006102:	3001      	adds	r0, #1
 8006104:	0040      	lsls	r0, r0, #1

	return vcsel_period_pclks;
}
 8006106:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 800610a:	4770      	bx	lr

0800610c <VL53L1_decode_row_col>:
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800610c:	0603      	lsls	r3, r0, #24
		*prow = 8 + ((255-spad_number) & 0x07);
 800610e:	bf49      	itett	mi
 8006110:	43c3      	mvnmi	r3, r0
		*pcol = (spad_number-128) >> 3;
	} else {
		*prow = spad_number & 0x07;
 8006112:	f000 0307 	andpl.w	r3, r0, #7
		*prow = 8 + ((255-spad_number) & 0x07);
 8006116:	f003 0307 	andmi.w	r3, r3, #7
		*pcol = (spad_number-128) >> 3;
 800611a:	3880      	submi	r0, #128	; 0x80
		*pcol = (127-spad_number) >> 3;
 800611c:	bf54      	ite	pl
 800611e:	f1c0 007f 	rsbpl	r0, r0, #127	; 0x7f
		*prow = 8 + ((255-spad_number) & 0x07);
 8006122:	3308      	addmi	r3, #8
		*pcol = (127-spad_number) >> 3;
 8006124:	ea4f 00e0 	mov.w	r0, r0, asr #3
		*prow = 8 + ((255-spad_number) & 0x07);
 8006128:	bf4c      	ite	mi
 800612a:	700b      	strbmi	r3, [r1, #0]
		*prow = spad_number & 0x07;
 800612c:	700b      	strbpl	r3, [r1, #0]
		*pcol = (127-spad_number) >> 3;
 800612e:	7010      	strb	r0, [r2, #0]
 8006130:	4770      	bx	lr

08006132 <VL53L1_i2c_encode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8006132:	290a      	cmp	r1, #10
{
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4605      	mov	r5, r0
 8006138:	4614      	mov	r4, r2
	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800613a:	d924      	bls.n	8006186 <VL53L1_i2c_encode_static_nvm_managed+0x54>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800613c:	7803      	ldrb	r3, [r0, #0]
 800613e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   0) =
 8006142:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8006144:	7843      	ldrb	r3, [r0, #1]
 8006146:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   1) =
 800614a:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800614c:	7883      	ldrb	r3, [r0, #2]
 800614e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   2) =
 8006152:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8006154:	78c3      	ldrb	r3, [r0, #3]
 8006156:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 800615a:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800615c:	7903      	ldrb	r3, [r0, #4]
 800615e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   4) =
 8006162:	7113      	strb	r3, [r2, #4]
	VL53L1_i2c_encode_uint16_t(
 8006164:	2102      	movs	r1, #2
 8006166:	3205      	adds	r2, #5
 8006168:	88c0      	ldrh	r0, [r0, #6]
 800616a:	f7ff fe41 	bl	8005df0 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
		pdata->vhv_config__timeout_macrop_loop_bound;
 800616e:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   7) =
 8006170:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->vhv_config__count_thresh;
 8006172:	7a6b      	ldrb	r3, [r5, #9]
	*(pbuffer +   8) =
 8006174:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8006176:	7aab      	ldrb	r3, [r5, #10]
 8006178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 800617c:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  10) =
		pdata->vhv_config__init;
 800617e:	7aeb      	ldrb	r3, [r5, #11]
	*(pbuffer +  10) =
 8006180:	72a3      	strb	r3, [r4, #10]
	LOG_FUNCTION_END(status);


	return status;
 8006182:	2000      	movs	r0, #0
 8006184:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006186:	f06f 0009 	mvn.w	r0, #9
}
 800618a:	bd38      	pop	{r3, r4, r5, pc}

0800618c <VL53L1_i2c_decode_static_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800618c:	280a      	cmp	r0, #10
{
 800618e:	b538      	push	{r3, r4, r5, lr}
 8006190:	460d      	mov	r5, r1
 8006192:	4614      	mov	r4, r2
	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8006194:	d924      	bls.n	80061e0 <VL53L1_i2c_decode_static_nvm_managed+0x54>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8006196:	780b      	ldrb	r3, [r1, #0]
 8006198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->i2c_slave__device_address =
 800619c:	7013      	strb	r3, [r2, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800619e:	784b      	ldrb	r3, [r1, #1]
 80061a0:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__vhv_ref_sel_vddpix =
 80061a4:	7053      	strb	r3, [r2, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80061a6:	788b      	ldrb	r3, [r1, #2]
 80061a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__vhv_ref_sel_vquench =
 80061ac:	7093      	strb	r3, [r2, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80061ae:	78cb      	ldrb	r3, [r1, #3]
 80061b0:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__reg_avdd1v2_sel =
 80061b4:	70d3      	strb	r3, [r2, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80061b6:	790b      	ldrb	r3, [r1, #4]
 80061b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim =
 80061bc:	7113      	strb	r3, [r2, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 80061be:	3105      	adds	r1, #5
 80061c0:	2002      	movs	r0, #2
 80061c2:	f7ff fe1d 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->osc_measured__fast_osc__frequency =
 80061c6:	80e0      	strh	r0, [r4, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 80061c8:	79eb      	ldrb	r3, [r5, #7]
 80061ca:	7223      	strb	r3, [r4, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 80061cc:	7a2b      	ldrb	r3, [r5, #8]
 80061ce:	7263      	strb	r3, [r4, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 80061d0:	7a6b      	ldrb	r3, [r5, #9]
 80061d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_config__offset =
 80061d6:	72a3      	strb	r3, [r4, #10]
	pdata->vhv_config__init =
 80061d8:	7aab      	ldrb	r3, [r5, #10]
 80061da:	72e3      	strb	r3, [r4, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 80061dc:	2000      	movs	r0, #0
 80061de:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80061e0:	f06f 0009 	mvn.w	r0, #9
}
 80061e4:	bd38      	pop	{r3, r4, r5, pc}

080061e6 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80061e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061e8:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 80061ea:	230b      	movs	r3, #11
 80061ec:	aa01      	add	r2, sp, #4
 80061ee:	2101      	movs	r1, #1
 80061f0:	f000 fce4 	bl	8006bbc <VL53L1_ReadMulti>
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80061f4:	b920      	cbnz	r0, 8006200 <VL53L1_get_static_nvm_managed+0x1a>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80061f6:	4622      	mov	r2, r4
 80061f8:	a901      	add	r1, sp, #4
 80061fa:	200b      	movs	r0, #11
 80061fc:	f7ff ffc6 	bl	800618c <VL53L1_i2c_decode_static_nvm_managed>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 8006200:	b004      	add	sp, #16
 8006202:	bd10      	pop	{r4, pc}

08006204 <VL53L1_i2c_encode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8006204:	2916      	cmp	r1, #22
{
 8006206:	b538      	push	{r3, r4, r5, lr}
 8006208:	4604      	mov	r4, r0
 800620a:	4615      	mov	r5, r2
	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800620c:	d948      	bls.n	80062a0 <VL53L1_i2c_encode_customer_nvm_managed+0x9c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800620e:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 8006210:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__spad_enables_ref_1;
 8006212:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 8006214:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->global_config__spad_enables_ref_2;
 8006216:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 8006218:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->global_config__spad_enables_ref_3;
 800621a:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 800621c:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->global_config__spad_enables_ref_4;
 800621e:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 8006220:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8006222:	7943      	ldrb	r3, [r0, #5]
 8006224:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   5) =
 8006228:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->global_config__ref_en_start_select;
 800622a:	7983      	ldrb	r3, [r0, #6]
	*(pbuffer +   6) =
 800622c:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800622e:	79c3      	ldrb	r3, [r0, #7]
 8006230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   7) =
 8006234:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8006236:	7a03      	ldrb	r3, [r0, #8]
 8006238:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   8) =
 800623c:	7213      	strb	r3, [r2, #8]
	VL53L1_i2c_encode_uint16_t(
 800623e:	2102      	movs	r1, #2
 8006240:	3209      	adds	r2, #9
 8006242:	8940      	ldrh	r0, [r0, #10]
 8006244:	f7ff fdd4 	bl	8005df0 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8006248:	f105 020b 	add.w	r2, r5, #11
 800624c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8006250:	2102      	movs	r1, #2
 8006252:	f7ff fde0 	bl	8005e16 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8006256:	f105 020d 	add.w	r2, r5, #13
 800625a:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800625e:	2102      	movs	r1, #2
 8006260:	f7ff fdd9 	bl	8005e16 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8006264:	f105 020f 	add.w	r2, r5, #15
 8006268:	8a20      	ldrh	r0, [r4, #16]
 800626a:	2102      	movs	r1, #2
 800626c:	f7ff fdc0 	bl	8005df0 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
 8006270:	8a60      	ldrh	r0, [r4, #18]
 8006272:	f105 0211 	add.w	r2, r5, #17
 8006276:	2102      	movs	r1, #2
 8006278:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800627c:	f7ff fdcb 	bl	8005e16 <VL53L1_i2c_encode_int16_t>
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8006280:	f105 0213 	add.w	r2, r5, #19
 8006284:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8006288:	2102      	movs	r1, #2
 800628a:	f7ff fdc4 	bl	8005e16 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800628e:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8006292:	f105 0215 	add.w	r2, r5, #21
 8006296:	2102      	movs	r1, #2
 8006298:	f7ff fdbd 	bl	8005e16 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800629c:	2000      	movs	r0, #0
 800629e:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80062a0:	f06f 0009 	mvn.w	r0, #9
}
 80062a4:	bd38      	pop	{r3, r4, r5, pc}

080062a6 <VL53L1_i2c_decode_customer_nvm_managed>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80062a6:	2816      	cmp	r0, #22
{
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	460d      	mov	r5, r1
 80062ac:	4614      	mov	r4, r2
	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80062ae:	d944      	bls.n	800633a <VL53L1_i2c_decode_customer_nvm_managed+0x94>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80062b0:	780b      	ldrb	r3, [r1, #0]
	pdata->global_config__spad_enables_ref_0 =
 80062b2:	7013      	strb	r3, [r2, #0]
	pdata->global_config__spad_enables_ref_1 =
 80062b4:	784b      	ldrb	r3, [r1, #1]
 80062b6:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80062b8:	788b      	ldrb	r3, [r1, #2]
 80062ba:	7093      	strb	r3, [r2, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80062bc:	78cb      	ldrb	r3, [r1, #3]
 80062be:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80062c0:	790b      	ldrb	r3, [r1, #4]
 80062c2:	7113      	strb	r3, [r2, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80062c4:	794b      	ldrb	r3, [r1, #5]
 80062c6:	f003 030f 	and.w	r3, r3, #15
	pdata->global_config__spad_enables_ref_5 =
 80062ca:	7153      	strb	r3, [r2, #5]
	pdata->global_config__ref_en_start_select =
 80062cc:	798b      	ldrb	r3, [r1, #6]
 80062ce:	7193      	strb	r3, [r2, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 80062d0:	79cb      	ldrb	r3, [r1, #7]
 80062d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_man__num_requested_ref_spads =
 80062d6:	71d3      	strb	r3, [r2, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 80062d8:	7a0b      	ldrb	r3, [r1, #8]
 80062da:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_man__ref_location =
 80062de:	7213      	strb	r3, [r2, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 80062e0:	3109      	adds	r1, #9
 80062e2:	2002      	movs	r0, #2
 80062e4:	f7ff fd8c 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 80062e8:	f105 010b 	add.w	r1, r5, #11
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 80062ec:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 80062ee:	2002      	movs	r0, #2
 80062f0:	f7ff fd99 	bl	8005e26 <VL53L1_i2c_decode_int16_t>
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 80062f4:	f105 010d 	add.w	r1, r5, #13
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80062f8:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 80062fa:	2002      	movs	r0, #2
 80062fc:	f7ff fd93 	bl	8005e26 <VL53L1_i2c_decode_int16_t>
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8006300:	f105 010f 	add.w	r1, r5, #15
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8006304:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8006306:	2002      	movs	r0, #2
 8006308:	f7ff fd7a 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800630c:	f105 0111 	add.w	r1, r5, #17
	pdata->ref_spad_char__total_rate_target_mcps =
 8006310:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8006312:	2002      	movs	r0, #2
 8006314:	f7ff fd87 	bl	8005e26 <VL53L1_i2c_decode_int16_t>
 8006318:	f3c0 000c 	ubfx	r0, r0, #0, #13
	pdata->algo__part_to_part_range_offset_mm =
 800631c:	8260      	strh	r0, [r4, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800631e:	f105 0113 	add.w	r1, r5, #19
 8006322:	2002      	movs	r0, #2
 8006324:	f7ff fd7f 	bl	8005e26 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8006328:	f105 0115 	add.w	r1, r5, #21
	pdata->mm_config__inner_offset_mm =
 800632c:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800632e:	2002      	movs	r0, #2
 8006330:	f7ff fd79 	bl	8005e26 <VL53L1_i2c_decode_int16_t>
	pdata->mm_config__outer_offset_mm =
 8006334:	82e0      	strh	r0, [r4, #22]

	LOG_FUNCTION_END(status);

	return status;
 8006336:	2000      	movs	r0, #0
 8006338:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800633a:	f06f 0009 	mvn.w	r0, #9
}
 800633e:	bd38      	pop	{r3, r4, r5, pc}

08006340 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8006340:	b510      	push	{r4, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 8006346:	2317      	movs	r3, #23
 8006348:	466a      	mov	r2, sp
 800634a:	210d      	movs	r1, #13
 800634c:	f000 fc36 	bl	8006bbc <VL53L1_ReadMulti>
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8006350:	b920      	cbnz	r0, 800635c <VL53L1_get_customer_nvm_managed+0x1c>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8006352:	4622      	mov	r2, r4
 8006354:	4669      	mov	r1, sp
 8006356:	2017      	movs	r0, #23
 8006358:	f7ff ffa5 	bl	80062a6 <VL53L1_i2c_decode_customer_nvm_managed>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 800635c:	b006      	add	sp, #24
 800635e:	bd10      	pop	{r4, pc}

08006360 <VL53L1_i2c_encode_static_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8006360:	291f      	cmp	r1, #31
{
 8006362:	b538      	push	{r3, r4, r5, lr}
 8006364:	4604      	mov	r4, r0
 8006366:	4615      	mov	r5, r2
	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8006368:	d965      	bls.n	8006436 <VL53L1_i2c_encode_static_config+0xd6>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	VL53L1_i2c_encode_uint16_t(
 800636a:	2102      	movs	r1, #2
 800636c:	8800      	ldrh	r0, [r0, #0]
 800636e:	f7ff fd3f 	bl	8005df0 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8006372:	78a3      	ldrb	r3, [r4, #2]
 8006374:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 8006378:	70ab      	strb	r3, [r5, #2]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800637a:	78e3      	ldrb	r3, [r4, #3]
 800637c:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   3) =
 8006380:	70eb      	strb	r3, [r5, #3]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8006382:	7923      	ldrb	r3, [r4, #4]
 8006384:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 8006388:	712b      	strb	r3, [r5, #4]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800638a:	7963      	ldrb	r3, [r4, #5]
 800638c:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +   5) =
 8006390:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8006392:	79a3      	ldrb	r3, [r4, #6]
 8006394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 8006398:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800639a:	79e3      	ldrb	r3, [r4, #7]
 800639c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   7) =
 80063a0:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80063a2:	7a23      	ldrb	r3, [r4, #8]
 80063a4:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   8) =
 80063a8:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->pad_i2c_hv__config;
 80063aa:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   9) =
 80063ac:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80063ae:	7aa3      	ldrb	r3, [r4, #10]
 80063b0:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  10) =
 80063b4:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80063b6:	7ae3      	ldrb	r3, [r4, #11]
 80063b8:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 80063bc:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80063be:	7b23      	ldrb	r3, [r4, #12]
 80063c0:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  12) =
 80063c4:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 80063c6:	7b63      	ldrb	r3, [r4, #13]
 80063c8:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  13) =
 80063cc:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 80063ce:	7ba3      	ldrb	r3, [r4, #14]
 80063d0:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  14) =
 80063d4:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80063d6:	7be3      	ldrb	r3, [r4, #15]
 80063d8:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  15) =
 80063dc:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 80063de:	7c23      	ldrb	r3, [r4, #16]
 80063e0:	f003 031f 	and.w	r3, r3, #31
	*(pbuffer +  16) =
 80063e4:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80063e6:	7c63      	ldrb	r3, [r4, #17]
 80063e8:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  17) =
 80063ec:	746b      	strb	r3, [r5, #17]
	*(pbuffer +  18) =
		pdata->sigma_estimator__effective_pulse_width_ns;
 80063ee:	7ca3      	ldrb	r3, [r4, #18]
	*(pbuffer +  18) =
 80063f0:	74ab      	strb	r3, [r5, #18]
	*(pbuffer +  19) =
		pdata->sigma_estimator__effective_ambient_width_ns;
 80063f2:	7ce3      	ldrb	r3, [r4, #19]
	*(pbuffer +  19) =
 80063f4:	74eb      	strb	r3, [r5, #19]
	*(pbuffer +  20) =
		pdata->sigma_estimator__sigma_ref_mm;
 80063f6:	7d23      	ldrb	r3, [r4, #20]
	*(pbuffer +  20) =
 80063f8:	752b      	strb	r3, [r5, #20]
	*(pbuffer +  21) =
		pdata->algo__crosstalk_compensation_valid_height_mm;
 80063fa:	7d63      	ldrb	r3, [r4, #21]
	*(pbuffer +  21) =
 80063fc:	756b      	strb	r3, [r5, #21]
	*(pbuffer +  22) =
		pdata->spare_host_config__static_config_spare_0;
 80063fe:	7da3      	ldrb	r3, [r4, #22]
	*(pbuffer +  22) =
 8006400:	75ab      	strb	r3, [r5, #22]
	*(pbuffer +  23) =
		pdata->spare_host_config__static_config_spare_1;
 8006402:	7de3      	ldrb	r3, [r4, #23]
	*(pbuffer +  23) =
 8006404:	75eb      	strb	r3, [r5, #23]
	VL53L1_i2c_encode_uint16_t(
 8006406:	8b20      	ldrh	r0, [r4, #24]
 8006408:	f105 0218 	add.w	r2, r5, #24
 800640c:	2102      	movs	r1, #2
 800640e:	f7ff fcef 	bl	8005df0 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
		pdata->algo__range_ignore_valid_height_mm;
 8006412:	7ea3      	ldrb	r3, [r4, #26]
	*(pbuffer +  26) =
 8006414:	76ab      	strb	r3, [r5, #26]
	*(pbuffer +  27) =
		pdata->algo__range_min_clip;
 8006416:	7ee3      	ldrb	r3, [r4, #27]
	*(pbuffer +  27) =
 8006418:	76eb      	strb	r3, [r5, #27]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800641a:	7f23      	ldrb	r3, [r4, #28]
 800641c:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  28) =
 8006420:	772b      	strb	r3, [r5, #28]
	*(pbuffer +  29) =
		pdata->spare_host_config__static_config_spare_2;
 8006422:	7f63      	ldrb	r3, [r4, #29]
	*(pbuffer +  29) =
 8006424:	776b      	strb	r3, [r5, #29]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8006426:	7fa3      	ldrb	r3, [r4, #30]
 8006428:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  30) =
 800642c:	77ab      	strb	r3, [r5, #30]
	*(pbuffer +  31) =
		pdata->sd_config__reset_stages_lsb;
 800642e:	7fe3      	ldrb	r3, [r4, #31]
	*(pbuffer +  31) =
 8006430:	77eb      	strb	r3, [r5, #31]
	LOG_FUNCTION_END(status);


	return status;
 8006432:	2000      	movs	r0, #0
 8006434:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006436:	f06f 0009 	mvn.w	r0, #9
}
 800643a:	bd38      	pop	{r3, r4, r5, pc}

0800643c <VL53L1_i2c_encode_general_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800643c:	2915      	cmp	r1, #21
{
 800643e:	b538      	push	{r3, r4, r5, lr}
 8006440:	4605      	mov	r5, r0
 8006442:	4614      	mov	r4, r2
	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8006444:	d93c      	bls.n	80064c0 <VL53L1_i2c_encode_general_config+0x84>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8006446:	7803      	ldrb	r3, [r0, #0]
	*(pbuffer +   0) =
 8006448:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->global_config__stream_divider;
 800644a:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 800644c:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->system__interrupt_config_gpio;
 800644e:	7883      	ldrb	r3, [r0, #2]
	*(pbuffer +   2) =
 8006450:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8006452:	78c3      	ldrb	r3, [r0, #3]
 8006454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   3) =
 8006458:	70d3      	strb	r3, [r2, #3]
	VL53L1_i2c_encode_uint16_t(
 800645a:	8880      	ldrh	r0, [r0, #4]
 800645c:	3204      	adds	r2, #4
 800645e:	2102      	movs	r1, #2
 8006460:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8006464:	f7ff fcc4 	bl	8005df0 <VL53L1_i2c_encode_uint16_t>
		pdata->cal_config__repeat_rate & 0xFFF,
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8006468:	79ab      	ldrb	r3, [r5, #6]
 800646a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   6) =
 800646e:	71a3      	strb	r3, [r4, #6]
	*(pbuffer +   7) =
		pdata->phasecal_config__timeout_macrop;
 8006470:	79eb      	ldrb	r3, [r5, #7]
	*(pbuffer +   7) =
 8006472:	71e3      	strb	r3, [r4, #7]
	*(pbuffer +   8) =
		pdata->phasecal_config__target;
 8006474:	7a2b      	ldrb	r3, [r5, #8]
	*(pbuffer +   8) =
 8006476:	7223      	strb	r3, [r4, #8]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8006478:	7a6b      	ldrb	r3, [r5, #9]
 800647a:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   9) =
 800647e:	7263      	strb	r3, [r4, #9]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8006480:	7aab      	ldrb	r3, [r5, #10]
 8006482:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +  11) =
 8006486:	72e3      	strb	r3, [r4, #11]
	VL53L1_i2c_encode_uint16_t(
 8006488:	f104 020c 	add.w	r2, r4, #12
 800648c:	89a8      	ldrh	r0, [r5, #12]
 800648e:	2102      	movs	r1, #2
 8006490:	f7ff fcae 	bl	8005df0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8006494:	f104 020e 	add.w	r2, r4, #14
 8006498:	89e8      	ldrh	r0, [r5, #14]
 800649a:	2102      	movs	r1, #2
 800649c:	f7ff fca8 	bl	8005df0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 80064a0:	8a28      	ldrh	r0, [r5, #16]
 80064a2:	f104 0210 	add.w	r2, r4, #16
 80064a6:	2102      	movs	r1, #2
 80064a8:	f7ff fca2 	bl	8005df0 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
		pdata->dss_config__manual_block_select;
 80064ac:	7cab      	ldrb	r3, [r5, #18]
	*(pbuffer +  18) =
 80064ae:	74a3      	strb	r3, [r4, #18]
	*(pbuffer +  19) =
		pdata->dss_config__aperture_attenuation;
 80064b0:	7ceb      	ldrb	r3, [r5, #19]
	*(pbuffer +  19) =
 80064b2:	74e3      	strb	r3, [r4, #19]
	*(pbuffer +  20) =
		pdata->dss_config__max_spads_limit;
 80064b4:	7d2b      	ldrb	r3, [r5, #20]
	*(pbuffer +  20) =
 80064b6:	7523      	strb	r3, [r4, #20]
	*(pbuffer +  21) =
		pdata->dss_config__min_spads_limit;
 80064b8:	7d6b      	ldrb	r3, [r5, #21]
	*(pbuffer +  21) =
 80064ba:	7563      	strb	r3, [r4, #21]
	LOG_FUNCTION_END(status);


	return status;
 80064bc:	2000      	movs	r0, #0
 80064be:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80064c0:	f06f 0009 	mvn.w	r0, #9
}
 80064c4:	bd38      	pop	{r3, r4, r5, pc}

080064c6 <VL53L1_i2c_encode_timing_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 80064c6:	2916      	cmp	r1, #22
{
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4605      	mov	r5, r0
 80064cc:	4614      	mov	r4, r2
	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 80064ce:	d93a      	bls.n	8006546 <VL53L1_i2c_encode_timing_config+0x80>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 80064d0:	7803      	ldrb	r3, [r0, #0]
 80064d2:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   0) =
 80064d6:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->mm_config__timeout_macrop_a_lo;
 80064d8:	7843      	ldrb	r3, [r0, #1]
	*(pbuffer +   1) =
 80064da:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80064dc:	7883      	ldrb	r3, [r0, #2]
 80064de:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   2) =
 80064e2:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->mm_config__timeout_macrop_b_lo;
 80064e4:	78c3      	ldrb	r3, [r0, #3]
	*(pbuffer +   3) =
 80064e6:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80064e8:	7903      	ldrb	r3, [r0, #4]
 80064ea:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   4) =
 80064ee:	7113      	strb	r3, [r2, #4]
	*(pbuffer +   5) =
		pdata->range_config__timeout_macrop_a_lo;
 80064f0:	7943      	ldrb	r3, [r0, #5]
	*(pbuffer +   5) =
 80064f2:	7153      	strb	r3, [r2, #5]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 80064f4:	7983      	ldrb	r3, [r0, #6]
 80064f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   6) =
 80064fa:	7193      	strb	r3, [r2, #6]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80064fc:	79c3      	ldrb	r3, [r0, #7]
 80064fe:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +   7) =
 8006502:	71d3      	strb	r3, [r2, #7]
	*(pbuffer +   8) =
		pdata->range_config__timeout_macrop_b_lo;
 8006504:	7a03      	ldrb	r3, [r0, #8]
	*(pbuffer +   8) =
 8006506:	7213      	strb	r3, [r2, #8]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8006508:	7a43      	ldrb	r3, [r0, #9]
 800650a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	*(pbuffer +   9) =
 800650e:	7253      	strb	r3, [r2, #9]
	VL53L1_i2c_encode_uint16_t(
 8006510:	2102      	movs	r1, #2
 8006512:	320a      	adds	r2, #10
 8006514:	8940      	ldrh	r0, [r0, #10]
 8006516:	f7ff fc6b 	bl	8005df0 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800651a:	f104 020c 	add.w	r2, r4, #12
 800651e:	89a8      	ldrh	r0, [r5, #12]
 8006520:	2102      	movs	r1, #2
 8006522:	f7ff fc65 	bl	8005df0 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
		pdata->range_config__valid_phase_low;
 8006526:	7bab      	ldrb	r3, [r5, #14]
	*(pbuffer +  14) =
 8006528:	73a3      	strb	r3, [r4, #14]
	*(pbuffer +  15) =
		pdata->range_config__valid_phase_high;
 800652a:	7beb      	ldrb	r3, [r5, #15]
	*(pbuffer +  15) =
 800652c:	73e3      	strb	r3, [r4, #15]
	VL53L1_i2c_encode_uint32_t(
 800652e:	6928      	ldr	r0, [r5, #16]
 8006530:	f104 0212 	add.w	r2, r4, #18
 8006534:	2104      	movs	r1, #4
 8006536:	f7ff fc84 	bl	8005e42 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800653a:	7d2b      	ldrb	r3, [r5, #20]
 800653c:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +  22) =
 8006540:	75a3      	strb	r3, [r4, #22]
	LOG_FUNCTION_END(status);


	return status;
 8006542:	2000      	movs	r0, #0
 8006544:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006546:	f06f 0009 	mvn.w	r0, #9
}
 800654a:	bd38      	pop	{r3, r4, r5, pc}

0800654c <VL53L1_i2c_encode_dynamic_config>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800654c:	2911      	cmp	r1, #17
{
 800654e:	b538      	push	{r3, r4, r5, lr}
 8006550:	4604      	mov	r4, r0
 8006552:	4615      	mov	r5, r2
	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8006554:	d939      	bls.n	80065ca <VL53L1_i2c_encode_dynamic_config+0x7e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8006556:	7803      	ldrb	r3, [r0, #0]
 8006558:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   0) =
 800655c:	f802 3b01 	strb.w	r3, [r2], #1
	VL53L1_i2c_encode_uint16_t(
 8006560:	2102      	movs	r1, #2
 8006562:	8840      	ldrh	r0, [r0, #2]
 8006564:	f7ff fc44 	bl	8005df0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8006568:	88a0      	ldrh	r0, [r4, #4]
 800656a:	1cea      	adds	r2, r5, #3
 800656c:	2102      	movs	r1, #2
 800656e:	f7ff fc3f 	bl	8005df0 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8006572:	79a3      	ldrb	r3, [r4, #6]
 8006574:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   5) =
 8006578:	716b      	strb	r3, [r5, #5]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800657a:	79e3      	ldrb	r3, [r4, #7]
 800657c:	f003 0307 	and.w	r3, r3, #7
	*(pbuffer +   6) =
 8006580:	71ab      	strb	r3, [r5, #6]
	*(pbuffer +   7) =
		pdata->sd_config__woi_sd0;
 8006582:	7a23      	ldrb	r3, [r4, #8]
	*(pbuffer +   7) =
 8006584:	71eb      	strb	r3, [r5, #7]
	*(pbuffer +   8) =
		pdata->sd_config__woi_sd1;
 8006586:	7a63      	ldrb	r3, [r4, #9]
	*(pbuffer +   8) =
 8006588:	722b      	strb	r3, [r5, #8]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800658a:	7aa3      	ldrb	r3, [r4, #10]
 800658c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +   9) =
 8006590:	726b      	strb	r3, [r5, #9]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8006592:	7ae3      	ldrb	r3, [r4, #11]
 8006594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	*(pbuffer +  10) =
 8006598:	72ab      	strb	r3, [r5, #10]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800659a:	7b23      	ldrb	r3, [r4, #12]
 800659c:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  11) =
 80065a0:	72eb      	strb	r3, [r5, #11]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 80065a2:	7b63      	ldrb	r3, [r4, #13]
 80065a4:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  12) =
 80065a8:	732b      	strb	r3, [r5, #12]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 80065aa:	7ba3      	ldrb	r3, [r4, #14]
 80065ac:	f003 030f 	and.w	r3, r3, #15
	*(pbuffer +  13) =
 80065b0:	736b      	strb	r3, [r5, #13]
	*(pbuffer +  14) =
		pdata->roi_config__user_roi_centre_spad;
 80065b2:	7be3      	ldrb	r3, [r4, #15]
	*(pbuffer +  14) =
 80065b4:	73ab      	strb	r3, [r5, #14]
	*(pbuffer +  15) =
		pdata->roi_config__user_roi_requested_global_xy_size;
 80065b6:	7c23      	ldrb	r3, [r4, #16]
	*(pbuffer +  15) =
 80065b8:	73eb      	strb	r3, [r5, #15]
	*(pbuffer +  16) =
		pdata->system__sequence_config;
 80065ba:	7c63      	ldrb	r3, [r4, #17]
	*(pbuffer +  16) =
 80065bc:	742b      	strb	r3, [r5, #16]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 80065be:	7ca3      	ldrb	r3, [r4, #18]
 80065c0:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +  17) =
 80065c4:	746b      	strb	r3, [r5, #17]
	LOG_FUNCTION_END(status);


	return status;
 80065c6:	2000      	movs	r0, #0
 80065c8:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80065ca:	f06f 0009 	mvn.w	r0, #9
}
 80065ce:	bd38      	pop	{r3, r4, r5, pc}

080065d0 <VL53L1_i2c_encode_system_control>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 80065d0:	2904      	cmp	r1, #4
 80065d2:	d913      	bls.n	80065fc <VL53L1_i2c_encode_system_control+0x2c>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 80065d4:	7803      	ldrb	r3, [r0, #0]
 80065d6:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   0) =
 80065da:	7013      	strb	r3, [r2, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 80065dc:	7843      	ldrb	r3, [r0, #1]
 80065de:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   1) =
 80065e2:	7053      	strb	r3, [r2, #1]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 80065e4:	7883      	ldrb	r3, [r0, #2]
 80065e6:	f003 0301 	and.w	r3, r3, #1
	*(pbuffer +   2) =
 80065ea:	7093      	strb	r3, [r2, #2]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 80065ec:	78c3      	ldrb	r3, [r0, #3]
 80065ee:	f003 0303 	and.w	r3, r3, #3
	*(pbuffer +   3) =
 80065f2:	70d3      	strb	r3, [r2, #3]
	*(pbuffer +   4) =
		pdata->system__mode_start;
 80065f4:	7903      	ldrb	r3, [r0, #4]
	*(pbuffer +   4) =
 80065f6:	7113      	strb	r3, [r2, #4]
	LOG_FUNCTION_END(status);


	return status;
 80065f8:	2000      	movs	r0, #0
 80065fa:	4770      	bx	lr
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80065fc:	f06f 0009 	mvn.w	r0, #9
}
 8006600:	4770      	bx	lr

08006602 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8006602:	b513      	push	{r0, r1, r4, lr}
 8006604:	4604      	mov	r4, r0
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_i2c_encode_system_control(
 8006606:	466a      	mov	r2, sp
{
 8006608:	4608      	mov	r0, r1
		status = VL53L1_i2c_encode_system_control(
 800660a:	2105      	movs	r1, #5
 800660c:	f7ff ffe0 	bl	80065d0 <VL53L1_i2c_encode_system_control>
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8006610:	b928      	cbnz	r0, 800661e <VL53L1_set_system_control+0x1c>
		status = VL53L1_WriteMulti(
 8006612:	2305      	movs	r3, #5
 8006614:	466a      	mov	r2, sp
 8006616:	2183      	movs	r1, #131	; 0x83
 8006618:	4620      	mov	r0, r4
 800661a:	f000 faaf 	bl	8006b7c <VL53L1_WriteMulti>
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
}
 800661e:	b002      	add	sp, #8
 8006620:	bd10      	pop	{r4, pc}

08006622 <VL53L1_i2c_decode_system_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8006622:	282b      	cmp	r0, #43	; 0x2b
{
 8006624:	b538      	push	{r3, r4, r5, lr}
 8006626:	460d      	mov	r5, r1
 8006628:	4614      	mov	r4, r2
	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800662a:	f240 8086 	bls.w	800673a <VL53L1_i2c_decode_system_results+0x118>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800662e:	780b      	ldrb	r3, [r1, #0]
 8006630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->result__interrupt_status =
 8006634:	7013      	strb	r3, [r2, #0]
	pdata->result__range_status =
 8006636:	784b      	ldrb	r3, [r1, #1]
 8006638:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800663a:	788b      	ldrb	r3, [r1, #2]
 800663c:	f003 030f 	and.w	r3, r3, #15
	pdata->result__report_status =
 8006640:	7093      	strb	r3, [r2, #2]
	pdata->result__stream_count =
 8006642:	78cb      	ldrb	r3, [r1, #3]
 8006644:	70d3      	strb	r3, [r2, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8006646:	3104      	adds	r1, #4
 8006648:	2002      	movs	r0, #2
 800664a:	f7ff fbd9 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800664e:	1da9      	adds	r1, r5, #6
	pdata->result__dss_actual_effective_spads_sd0 =
 8006650:	80a0      	strh	r0, [r4, #4]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8006652:	2002      	movs	r0, #2
 8006654:	f7ff fbd4 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8006658:	f105 0108 	add.w	r1, r5, #8
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800665c:	80e0      	strh	r0, [r4, #6]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800665e:	2002      	movs	r0, #2
 8006660:	f7ff fbce 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8006664:	f105 010a 	add.w	r1, r5, #10
	pdata->result__ambient_count_rate_mcps_sd0 =
 8006668:	8120      	strh	r0, [r4, #8]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800666a:	2002      	movs	r0, #2
 800666c:	f7ff fbc8 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8006670:	f105 010c 	add.w	r1, r5, #12
	pdata->result__sigma_sd0 =
 8006674:	8160      	strh	r0, [r4, #10]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8006676:	2002      	movs	r0, #2
 8006678:	f7ff fbc2 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800667c:	f105 010e 	add.w	r1, r5, #14
	pdata->result__phase_sd0 =
 8006680:	81a0      	strh	r0, [r4, #12]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8006682:	2002      	movs	r0, #2
 8006684:	f7ff fbbc 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8006688:	f105 0110 	add.w	r1, r5, #16
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800668c:	81e0      	strh	r0, [r4, #14]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800668e:	2002      	movs	r0, #2
 8006690:	f7ff fbb6 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8006694:	f105 0112 	add.w	r1, r5, #18
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8006698:	8220      	strh	r0, [r4, #16]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800669a:	2002      	movs	r0, #2
 800669c:	f7ff fbb0 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 80066a0:	f105 0114 	add.w	r1, r5, #20
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 80066a4:	8260      	strh	r0, [r4, #18]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 80066a6:	2002      	movs	r0, #2
 80066a8:	f7ff fbaa 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80066ac:	f105 0116 	add.w	r1, r5, #22
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 80066b0:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80066b2:	2002      	movs	r0, #2
 80066b4:	f7ff fba4 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80066b8:	f105 0118 	add.w	r1, r5, #24
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 80066bc:	82e0      	strh	r0, [r4, #22]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80066be:	2002      	movs	r0, #2
 80066c0:	f7ff fb9e 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 80066c4:	f105 011a 	add.w	r1, r5, #26
	pdata->result__dss_actual_effective_spads_sd1 =
 80066c8:	8320      	strh	r0, [r4, #24]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 80066ca:	2002      	movs	r0, #2
 80066cc:	f7ff fb98 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 80066d0:	f105 011c 	add.w	r1, r5, #28
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 80066d4:	8360      	strh	r0, [r4, #26]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 80066d6:	2002      	movs	r0, #2
 80066d8:	f7ff fb92 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 80066dc:	f105 011e 	add.w	r1, r5, #30
	pdata->result__ambient_count_rate_mcps_sd1 =
 80066e0:	83a0      	strh	r0, [r4, #28]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 80066e2:	2002      	movs	r0, #2
 80066e4:	f7ff fb8c 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 80066e8:	f105 0120 	add.w	r1, r5, #32
	pdata->result__sigma_sd1 =
 80066ec:	83e0      	strh	r0, [r4, #30]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 80066ee:	2002      	movs	r0, #2
 80066f0:	f7ff fb86 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 80066f4:	f105 0122 	add.w	r1, r5, #34	; 0x22
	pdata->result__phase_sd1 =
 80066f8:	8420      	strh	r0, [r4, #32]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 80066fa:	2002      	movs	r0, #2
 80066fc:	f7ff fb80 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8006700:	f105 0124 	add.w	r1, r5, #36	; 0x24
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8006704:	8460      	strh	r0, [r4, #34]	; 0x22
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8006706:	2002      	movs	r0, #2
 8006708:	f7ff fb7a 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800670c:	f105 0126 	add.w	r1, r5, #38	; 0x26
	pdata->result__spare_0_sd1 =
 8006710:	84a0      	strh	r0, [r4, #36]	; 0x24
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8006712:	2002      	movs	r0, #2
 8006714:	f7ff fb74 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8006718:	f105 0128 	add.w	r1, r5, #40	; 0x28
	pdata->result__spare_1_sd1 =
 800671c:	84e0      	strh	r0, [r4, #38]	; 0x26
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800671e:	2002      	movs	r0, #2
 8006720:	f7ff fb6e 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->result__spare_2_sd1 =
 8006724:	8520      	strh	r0, [r4, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8006726:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800672a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800672e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8006732:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8006736:	2000      	movs	r0, #0
 8006738:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800673a:	f06f 0009 	mvn.w	r0, #9
}
 800673e:	bd38      	pop	{r3, r4, r5, pc}

08006740 <VL53L1_i2c_decode_core_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8006740:	2820      	cmp	r0, #32
{
 8006742:	b538      	push	{r3, r4, r5, lr}
 8006744:	460d      	mov	r5, r1
 8006746:	4614      	mov	r4, r2
	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8006748:	d932      	bls.n	80067b0 <VL53L1_i2c_decode_core_results+0x70>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800674a:	2004      	movs	r0, #4
 800674c:	f7ff fb81 	bl	8005e52 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8006750:	1d29      	adds	r1, r5, #4
	pdata->result_core__ambient_window_events_sd0 =
 8006752:	6020      	str	r0, [r4, #0]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8006754:	2004      	movs	r0, #4
 8006756:	f7ff fb7c 	bl	8005e52 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800675a:	f105 0108 	add.w	r1, r5, #8
	pdata->result_core__ranging_total_events_sd0 =
 800675e:	6060      	str	r0, [r4, #4]
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8006760:	2004      	movs	r0, #4
 8006762:	f7ff fb80 	bl	8005e66 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8006766:	f105 010c 	add.w	r1, r5, #12
	pdata->result_core__signal_total_events_sd0 =
 800676a:	60a0      	str	r0, [r4, #8]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800676c:	2004      	movs	r0, #4
 800676e:	f7ff fb70 	bl	8005e52 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8006772:	f105 0110 	add.w	r1, r5, #16
	pdata->result_core__total_periods_elapsed_sd0 =
 8006776:	60e0      	str	r0, [r4, #12]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8006778:	2004      	movs	r0, #4
 800677a:	f7ff fb6a 	bl	8005e52 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800677e:	f105 0114 	add.w	r1, r5, #20
	pdata->result_core__ambient_window_events_sd1 =
 8006782:	6120      	str	r0, [r4, #16]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8006784:	2004      	movs	r0, #4
 8006786:	f7ff fb64 	bl	8005e52 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800678a:	f105 0118 	add.w	r1, r5, #24
	pdata->result_core__ranging_total_events_sd1 =
 800678e:	6160      	str	r0, [r4, #20]
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8006790:	2004      	movs	r0, #4
 8006792:	f7ff fb68 	bl	8005e66 <VL53L1_i2c_decode_int32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8006796:	f105 011c 	add.w	r1, r5, #28
	pdata->result_core__signal_total_events_sd1 =
 800679a:	61a0      	str	r0, [r4, #24]
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800679c:	2004      	movs	r0, #4
 800679e:	f7ff fb58 	bl	8005e52 <VL53L1_i2c_decode_uint32_t>
	pdata->result_core__total_periods_elapsed_sd1 =
 80067a2:	61e0      	str	r0, [r4, #28]
	pdata->result_core__spare_0 =
 80067a4:	f895 3020 	ldrb.w	r3, [r5, #32]
 80067a8:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 80067ac:	2000      	movs	r0, #0
 80067ae:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80067b0:	f06f 0009 	mvn.w	r0, #9
}
 80067b4:	bd38      	pop	{r3, r4, r5, pc}

080067b6 <VL53L1_i2c_decode_debug_results>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 80067b6:	2837      	cmp	r0, #55	; 0x37
{
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	460d      	mov	r5, r1
 80067bc:	4614      	mov	r4, r2
	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 80067be:	f240 80d0 	bls.w	8006962 <VL53L1_i2c_decode_debug_results+0x1ac>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 80067c2:	2002      	movs	r0, #2
 80067c4:	f7ff fb1c 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->phasecal_result__reference_phase =
 80067c8:	8020      	strh	r0, [r4, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 80067ca:	78ab      	ldrb	r3, [r5, #2]
 80067cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->phasecal_result__vcsel_start =
 80067d0:	70a3      	strb	r3, [r4, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 80067d2:	78eb      	ldrb	r3, [r5, #3]
 80067d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ref_spad_char_result__num_actual_ref_spads =
 80067d8:	70e3      	strb	r3, [r4, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 80067da:	792b      	ldrb	r3, [r5, #4]
 80067dc:	f003 0303 	and.w	r3, r3, #3
	pdata->ref_spad_char_result__ref_location =
 80067e0:	7123      	strb	r3, [r4, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 80067e2:	796b      	ldrb	r3, [r5, #5]
 80067e4:	f003 0301 	and.w	r3, r3, #1
	pdata->vhv_result__coldboot_status =
 80067e8:	7163      	strb	r3, [r4, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 80067ea:	79ab      	ldrb	r3, [r5, #6]
 80067ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__search_result =
 80067f0:	71a3      	strb	r3, [r4, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 80067f2:	79eb      	ldrb	r3, [r5, #7]
 80067f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->vhv_result__latest_setting =
 80067f8:	71e3      	strb	r3, [r4, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 80067fa:	f105 0108 	add.w	r1, r5, #8
 80067fe:	2002      	movs	r0, #2
 8006800:	f7ff fafe 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
 8006804:	f3c0 0009 	ubfx	r0, r0, #0, #10
	pdata->result__osc_calibrate_val =
 8006808:	8120      	strh	r0, [r4, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800680a:	7aab      	ldrb	r3, [r5, #10]
 800680c:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__powerdown_go1 =
 8006810:	72a3      	strb	r3, [r4, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8006812:	7aeb      	ldrb	r3, [r5, #11]
 8006814:	f003 0303 	and.w	r3, r3, #3
	pdata->ana_config__ref_bg_ctrl =
 8006818:	72e3      	strb	r3, [r4, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800681a:	7b2b      	ldrb	r3, [r5, #12]
 800681c:	f003 030f 	and.w	r3, r3, #15
	pdata->ana_config__regdvdd1v2_ctrl =
 8006820:	7323      	strb	r3, [r4, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8006822:	7b6b      	ldrb	r3, [r5, #13]
 8006824:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__osc_slow_ctrl =
 8006828:	7363      	strb	r3, [r4, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800682a:	7bab      	ldrb	r3, [r5, #14]
 800682c:	f003 0301 	and.w	r3, r3, #1
	pdata->test_mode__status =
 8006830:	73a3      	strb	r3, [r4, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8006832:	7beb      	ldrb	r3, [r5, #15]
 8006834:	f003 0303 	and.w	r3, r3, #3
	pdata->firmware__system_status =
 8006838:	73e3      	strb	r3, [r4, #15]
	pdata->firmware__mode_status =
 800683a:	7c2b      	ldrb	r3, [r5, #16]
 800683c:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800683e:	7c6b      	ldrb	r3, [r5, #17]
 8006840:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8006842:	f105 0112 	add.w	r1, r5, #18
 8006846:	2002      	movs	r0, #2
 8006848:	f7ff fada 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
 800684c:	f3c0 000b 	ubfx	r0, r0, #0, #12
	pdata->firmware__cal_repeat_rate_counter =
 8006850:	8260      	strh	r0, [r4, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8006852:	f105 0116 	add.w	r1, r5, #22
 8006856:	2002      	movs	r0, #2
 8006858:	f7ff fad2 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800685c:	f105 0118 	add.w	r1, r5, #24
	pdata->gph__system__thresh_high =
 8006860:	82a0      	strh	r0, [r4, #20]
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8006862:	2002      	movs	r0, #2
 8006864:	f7ff facc 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->gph__system__thresh_low =
 8006868:	82e0      	strh	r0, [r4, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800686a:	7eab      	ldrb	r3, [r5, #26]
 800686c:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__system__enable_xtalk_per_quadrant =
 8006870:	7623      	strb	r3, [r4, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8006872:	7eeb      	ldrb	r3, [r5, #27]
 8006874:	f003 0307 	and.w	r3, r3, #7
	pdata->gph__spare_0 =
 8006878:	7663      	strb	r3, [r4, #25]
	pdata->gph__sd_config__woi_sd0 =
 800687a:	7f2b      	ldrb	r3, [r5, #28]
 800687c:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800687e:	7f6b      	ldrb	r3, [r5, #29]
 8006880:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8006882:	7fab      	ldrb	r3, [r5, #30]
 8006884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd0 =
 8006888:	7723      	strb	r3, [r4, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800688a:	7feb      	ldrb	r3, [r5, #31]
 800688c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->gph__sd_config__initial_phase_sd1 =
 8006890:	7763      	strb	r3, [r4, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8006892:	f895 3020 	ldrb.w	r3, [r5, #32]
 8006896:	f003 0303 	and.w	r3, r3, #3
	pdata->gph__sd_config__first_order_select =
 800689a:	77a3      	strb	r3, [r4, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800689c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80068a0:	f003 030f 	and.w	r3, r3, #15
	pdata->gph__sd_config__quantifier =
 80068a4:	77e3      	strb	r3, [r4, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80068a6:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80068aa:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80068ae:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 80068b2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80068b6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80068ba:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80068be:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80068c2:	f003 0301 	and.w	r3, r3, #1
	pdata->gph__gph_id =
 80068c6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 80068ca:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 80068ce:	f003 0303 	and.w	r3, r3, #3
	pdata->system__interrupt_set =
 80068d2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 80068d6:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 80068da:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__enables =
 80068de:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 80068e2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80068e6:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__clear =
 80068ea:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80068ee:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 80068f2:	f003 031f 	and.w	r3, r3, #31
	pdata->interrupt_manager__status =
 80068f6:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80068fa:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 80068fe:	f003 0301 	and.w	r3, r3, #1
	pdata->mcu_to_host_bank__wr_access_en =
 8006902:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8006906:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800690a:	f003 0301 	and.w	r3, r3, #1
	pdata->power_management__go1_reset_status =
 800690e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8006912:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8006916:	f003 0303 	and.w	r3, r3, #3
	pdata->pad_startup_mode__value_ro =
 800691a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800691e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8006922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->pad_startup_mode__value_ctrl =
 8006926:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800692a:	f105 012e 	add.w	r1, r5, #46	; 0x2e
 800692e:	2004      	movs	r0, #4
 8006930:	f7ff fa8f 	bl	8005e52 <VL53L1_i2c_decode_uint32_t>
 8006934:	f3c0 0011 	ubfx	r0, r0, #0, #18
	pdata->pll_period_us =
 8006938:	62e0      	str	r0, [r4, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800693a:	f105 0132 	add.w	r1, r5, #50	; 0x32
 800693e:	2004      	movs	r0, #4
 8006940:	f7ff fa87 	bl	8005e52 <VL53L1_i2c_decode_uint32_t>
	pdata->interrupt_scheduler__data_out =
 8006944:	6320      	str	r0, [r4, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8006946:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800694a:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__complete =
 800694e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8006952:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 8006956:	f003 0301 	and.w	r3, r3, #1
	pdata->nvm_bist__status =
 800695a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800695e:	2000      	movs	r0, #0
 8006960:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006962:	f06f 0009 	mvn.w	r0, #9
}
 8006966:	bd38      	pop	{r3, r4, r5, pc}

08006968 <VL53L1_i2c_decode_nvm_copy_data>:

	VL53L1_Error status = VL53L1_ERROR_NONE;

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8006968:	2830      	cmp	r0, #48	; 0x30
{
 800696a:	b538      	push	{r3, r4, r5, lr}
 800696c:	460d      	mov	r5, r1
 800696e:	4614      	mov	r4, r2
	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8006970:	f240 809c 	bls.w	8006aac <VL53L1_i2c_decode_nvm_copy_data+0x144>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8006974:	780b      	ldrb	r3, [r1, #0]
	pdata->identification__model_id =
 8006976:	7013      	strb	r3, [r2, #0]
	pdata->identification__module_type =
 8006978:	784b      	ldrb	r3, [r1, #1]
 800697a:	7053      	strb	r3, [r2, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800697c:	788b      	ldrb	r3, [r1, #2]
 800697e:	7093      	strb	r3, [r2, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8006980:	3103      	adds	r1, #3
 8006982:	2002      	movs	r0, #2
 8006984:	f7ff fa3c 	bl	8005e00 <VL53L1_i2c_decode_uint16_t>
	pdata->identification__module_id =
 8006988:	80a0      	strh	r0, [r4, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800698a:	796b      	ldrb	r3, [r5, #5]
 800698c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->ana_config__fast_osc__trim_max =
 8006990:	71a3      	strb	r3, [r4, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8006992:	79ab      	ldrb	r3, [r5, #6]
 8006994:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__fast_osc__freq_set =
 8006998:	71e3      	strb	r3, [r4, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800699a:	79eb      	ldrb	r3, [r5, #7]
 800699c:	f003 0307 	and.w	r3, r3, #7
	pdata->ana_config__vcsel_trim =
 80069a0:	7223      	strb	r3, [r4, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80069a2:	7a2b      	ldrb	r3, [r5, #8]
 80069a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion =
 80069a8:	7263      	strb	r3, [r4, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80069aa:	7a6b      	ldrb	r3, [r5, #9]
 80069ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->ana_config__vcsel_selion_max =
 80069b0:	72a3      	strb	r3, [r4, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 80069b2:	7aab      	ldrb	r3, [r5, #10]
 80069b4:	f003 0301 	and.w	r3, r3, #1
	pdata->protected_laser_safety__lock_bit =
 80069b8:	72e3      	strb	r3, [r4, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80069ba:	7aeb      	ldrb	r3, [r5, #11]
 80069bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	pdata->laser_safety__key =
 80069c0:	7323      	strb	r3, [r4, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 80069c2:	7b2b      	ldrb	r3, [r5, #12]
 80069c4:	f003 0301 	and.w	r3, r3, #1
	pdata->laser_safety__key_ro =
 80069c8:	7363      	strb	r3, [r4, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80069ca:	7b6b      	ldrb	r3, [r5, #13]
 80069cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__clip =
 80069d0:	73a3      	strb	r3, [r4, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80069d2:	7bab      	ldrb	r3, [r5, #14]
 80069d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	pdata->laser_safety__mult =
 80069d8:	73e3      	strb	r3, [r4, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80069da:	7beb      	ldrb	r3, [r5, #15]
 80069dc:	7423      	strb	r3, [r4, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80069de:	7c2b      	ldrb	r3, [r5, #16]
 80069e0:	7463      	strb	r3, [r4, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80069e2:	7c6b      	ldrb	r3, [r5, #17]
 80069e4:	74a3      	strb	r3, [r4, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80069e6:	7cab      	ldrb	r3, [r5, #18]
 80069e8:	74e3      	strb	r3, [r4, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80069ea:	7ceb      	ldrb	r3, [r5, #19]
 80069ec:	7523      	strb	r3, [r4, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80069ee:	7d2b      	ldrb	r3, [r5, #20]
 80069f0:	7563      	strb	r3, [r4, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80069f2:	7d6b      	ldrb	r3, [r5, #21]
 80069f4:	75a3      	strb	r3, [r4, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80069f6:	7dab      	ldrb	r3, [r5, #22]
 80069f8:	75e3      	strb	r3, [r4, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 80069fa:	7deb      	ldrb	r3, [r5, #23]
 80069fc:	7623      	strb	r3, [r4, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80069fe:	7e2b      	ldrb	r3, [r5, #24]
 8006a00:	7663      	strb	r3, [r4, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8006a02:	7e6b      	ldrb	r3, [r5, #25]
 8006a04:	76a3      	strb	r3, [r4, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8006a06:	7eab      	ldrb	r3, [r5, #26]
 8006a08:	76e3      	strb	r3, [r4, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8006a0a:	7eeb      	ldrb	r3, [r5, #27]
 8006a0c:	7723      	strb	r3, [r4, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8006a0e:	7f2b      	ldrb	r3, [r5, #28]
 8006a10:	7763      	strb	r3, [r4, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8006a12:	7f6b      	ldrb	r3, [r5, #29]
 8006a14:	77a3      	strb	r3, [r4, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8006a16:	7fab      	ldrb	r3, [r5, #30]
 8006a18:	77e3      	strb	r3, [r4, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8006a1a:	7feb      	ldrb	r3, [r5, #31]
 8006a1c:	f884 3020 	strb.w	r3, [r4, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8006a20:	f895 3020 	ldrb.w	r3, [r5, #32]
 8006a24:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8006a28:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8006a2c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8006a30:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8006a34:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8006a38:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8006a3c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8006a40:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8006a44:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8006a48:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8006a4c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8006a50:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8006a54:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8006a58:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 8006a5c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8006a60:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8006a64:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8006a68:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8006a6c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8006a70:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8006a74:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8006a78:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8006a7c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8006a80:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8006a84:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8006a88:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8006a8c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8006a90:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 8006a94:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8006a98:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8006a9c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8006aa0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8006aa4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006aac:	f06f 0009 	mvn.w	r0, #9
}
 8006ab0:	bd38      	pop	{r3, r4, r5, pc}

08006ab2 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8006ab2:	b510      	push	{r4, lr}
 8006ab4:	b08e      	sub	sp, #56	; 0x38
 8006ab6:	460c      	mov	r4, r1
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
		status = VL53L1_ReadMulti(
 8006ab8:	2331      	movs	r3, #49	; 0x31
 8006aba:	aa01      	add	r2, sp, #4
 8006abc:	f240 110f 	movw	r1, #271	; 0x10f
 8006ac0:	f000 f87c 	bl	8006bbc <VL53L1_ReadMulti>
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8006ac4:	b920      	cbnz	r0, 8006ad0 <VL53L1_get_nvm_copy_data+0x1e>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8006ac6:	4622      	mov	r2, r4
 8006ac8:	a901      	add	r1, sp, #4
 8006aca:	2031      	movs	r0, #49	; 0x31
 8006acc:	f7ff ff4c 	bl	8006968 <VL53L1_i2c_decode_nvm_copy_data>
			pdata);

	LOG_FUNCTION_END(status);

	return status;
}
 8006ad0:	b00e      	add	sp, #56	; 0x38
 8006ad2:	bd10      	pop	{r4, pc}

08006ad4 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8006ad4:	b573      	push	{r0, r1, r4, r5, r6, lr}

	VL53L1_Error status = VL53L1_ERROR_NONE;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  gpio__mux_active_high_hv = 0;
	uint8_t  gpio__tio_hv_status      = 0;
 8006ad6:	aa02      	add	r2, sp, #8
 8006ad8:	2600      	movs	r6, #0
{
 8006ada:	460d      	mov	r5, r1
	uint8_t  gpio__tio_hv_status      = 0;
 8006adc:	f802 6d01 	strb.w	r6, [r2, #-1]!

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8006ae0:	f890 4170 	ldrb.w	r4, [r0, #368]	; 0x170
	else
		interrupt_ready = 0x00;

	/* read current range interrupt state */

	status = VL53L1_RdByte(
 8006ae4:	2131      	movs	r1, #49	; 0x31
 8006ae6:	f000 f893 	bl	8006c10 <VL53L1_RdByte>
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);

	/* set *pready = 1 if new range data ready complete zero otherwise */

	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8006aea:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8006aee:	f084 0410 	eor.w	r4, r4, #16
	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8006af2:	f003 0301 	and.w	r3, r3, #1
		interrupt_ready = 0x01;
 8006af6:	f3c4 1400 	ubfx	r4, r4, #4, #1
	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8006afa:	42a3      	cmp	r3, r4
		*pready = 0x01;
 8006afc:	bf06      	itte	eq
 8006afe:	2301      	moveq	r3, #1
 8006b00:	702b      	strbeq	r3, [r5, #0]
	else
		*pready = 0x00;
 8006b02:	702e      	strbne	r6, [r5, #0]

	LOG_FUNCTION_END(status);

	return status;
}
 8006b04:	b002      	add	sp, #8
 8006b06:	bd70      	pop	{r4, r5, r6, pc}

08006b08 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8006b08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b0a:	460e      	mov	r6, r1
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8006b0c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
{
 8006b10:	4605      	mov	r5, r0
	status = VL53L1_WaitUs(
 8006b12:	f000 f8b3 	bl	8006c7c <VL53L1_WaitUs>
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8006b16:	4604      	mov	r4, r0
 8006b18:	b968      	cbnz	r0, 8006b36 <VL53L1_poll_for_boot_completion+0x2e>
		status =
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	22e5      	movs	r2, #229	; 0xe5
 8006b22:	4631      	mov	r1, r6
 8006b24:	4628      	mov	r0, r5
 8006b26:	f000 f8b3 	bl	8006c90 <VL53L1_WaitValueMaskEx>
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	b918      	cbnz	r0, 8006b36 <VL53L1_poll_for_boot_completion+0x2e>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8006b2e:	2103      	movs	r1, #3
 8006b30:	4628      	mov	r0, r5
 8006b32:	f7ff f849 	bl	8005bc8 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
}
 8006b36:	4620      	mov	r0, r4
 8006b38:	b002      	add	sp, #8
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}

08006b3c <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8006b3c:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006b3e:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8006b42:	f890 4398 	ldrb.w	r4, [r0, #920]	; 0x398
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
 8006b4c:	b293      	uxth	r3, r2
 8006b4e:	460a      	mov	r2, r1
 8006b50:	4621      	mov	r1, r4
 8006b52:	f7fa f85b 	bl	8000c0c <HAL_I2C_Master_Transmit>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 8006b56:	b002      	add	sp, #8
 8006b58:	bd10      	pop	{r4, pc}

08006b5a <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8006b5a:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006b5c:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8006b60:	f890 4398 	ldrb.w	r4, [r0, #920]	; 0x398
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	f8d0 03a0 	ldr.w	r0, [r0, #928]	; 0x3a0
 8006b6a:	b293      	uxth	r3, r2
 8006b6c:	460a      	mov	r2, r1
 8006b6e:	f044 0101 	orr.w	r1, r4, #1
 8006b72:	f7fa f921 	bl	8000db8 <HAL_I2C_Master_Receive>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 8006b76:	b002      	add	sp, #8
 8006b78:	bd10      	pop	{r4, pc}
	...

08006b7c <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    if (count > sizeof(_I2CBuffer) - 1) {
 8006b7c:	2bff      	cmp	r3, #255	; 0xff
VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8006b7e:	b570      	push	{r4, r5, r6, lr}
 8006b80:	4606      	mov	r6, r0
 8006b82:	461d      	mov	r5, r3
 8006b84:	4610      	mov	r0, r2
    if (count > sizeof(_I2CBuffer) - 1) {
 8006b86:	d813      	bhi.n	8006bb0 <VL53L1_WriteMulti+0x34>
        return VL53L1_ERROR_INVALID_PARAMS;
    }
    _I2CBuffer[0] = index>>8;
 8006b88:	4c0b      	ldr	r4, [pc, #44]	; (8006bb8 <VL53L1_WriteMulti+0x3c>)
 8006b8a:	0a0b      	lsrs	r3, r1, #8
    _I2CBuffer[1] = index&0xFF;
 8006b8c:	7061      	strb	r1, [r4, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8006b8e:	462a      	mov	r2, r5
 8006b90:	4601      	mov	r1, r0
 8006b92:	1ca0      	adds	r0, r4, #2
    _I2CBuffer[0] = index>>8;
 8006b94:	7023      	strb	r3, [r4, #0]
    memcpy(&_I2CBuffer[2], pdata, count);
 8006b96:	f000 f917 	bl	8006dc8 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8006b9a:	1caa      	adds	r2, r5, #2
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f7ff ffcc 	bl	8006b3c <_I2CWrite>
    if (status_int != 0) {
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2000      	moveq	r0, #0
 8006baa:	f06f 000c 	mvnne.w	r0, #12
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
        return VL53L1_ERROR_INVALID_PARAMS;
 8006bb0:	f06f 0003 	mvn.w	r0, #3
    }
    VL53L1_PutI2cBus();
    return Status;
}
 8006bb4:	bd70      	pop	{r4, r5, r6, pc}
 8006bb6:	bf00      	nop
 8006bb8:	200056bc 	.word	0x200056bc

08006bbc <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8006bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bbe:	460c      	mov	r4, r1
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8006bc0:	4909      	ldr	r1, [pc, #36]	; (8006be8 <VL53L1_ReadMulti+0x2c>)
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8006bc2:	4616      	mov	r6, r2
 8006bc4:	461f      	mov	r7, r3
    _I2CBuffer[1] = index&0xFF;
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006bc6:	2202      	movs	r2, #2
    _I2CBuffer[0] = index>>8;
 8006bc8:	0a23      	lsrs	r3, r4, #8
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8006bca:	4605      	mov	r5, r0
    _I2CBuffer[0] = index>>8;
 8006bcc:	700b      	strb	r3, [r1, #0]
    _I2CBuffer[1] = index&0xFF;
 8006bce:	704c      	strb	r4, [r1, #1]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006bd0:	f7ff ffb4 	bl	8006b3c <_I2CWrite>
    if (status_int != 0) {
 8006bd4:	b928      	cbnz	r0, 8006be2 <VL53L1_ReadMulti+0x26>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, pdata, count);
 8006bd6:	463a      	mov	r2, r7
 8006bd8:	4631      	mov	r1, r6
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f7ff ffbd 	bl	8006b5a <_I2CRead>
    if (status_int != 0) {
 8006be0:	b108      	cbz	r0, 8006be6 <VL53L1_ReadMulti+0x2a>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006be2:	f06f 000c 	mvn.w	r0, #12
    }
done:
    VL53L1_PutI2cBus();
    return Status;
}
 8006be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be8:	200056bc 	.word	0x200056bc

08006bec <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8006bec:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <VL53L1_WrByte+0x20>)
VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8006bee:	b510      	push	{r4, lr}
    _I2CBuffer[0] = index>>8;
 8006bf0:	0a0c      	lsrs	r4, r1, #8
    _I2CBuffer[1] = index&0xFF;
 8006bf2:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data;
 8006bf4:	709a      	strb	r2, [r3, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	2203      	movs	r2, #3
    _I2CBuffer[0] = index>>8;
 8006bfa:	701c      	strb	r4, [r3, #0]
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8006bfc:	f7ff ff9e 	bl	8006b3c <_I2CWrite>
    if (status_int != 0) {
 8006c00:	2800      	cmp	r0, #0
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    VL53L1_PutI2cBus();
    return Status;
}
 8006c02:	bf14      	ite	ne
 8006c04:	f06f 000c 	mvnne.w	r0, #12
 8006c08:	2000      	moveq	r0, #0
 8006c0a:	bd10      	pop	{r4, pc}
 8006c0c:	200056bc 	.word	0x200056bc

08006c10 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8006c10:	b538      	push	{r3, r4, r5, lr}
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8006c12:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <VL53L1_RdByte+0x2c>)
VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8006c14:	4615      	mov	r5, r2
	_I2CBuffer[0] = index>>8;
 8006c16:	0a0a      	lsrs	r2, r1, #8
 8006c18:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8006c1a:	7059      	strb	r1, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	4619      	mov	r1, r3
VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8006c20:	4604      	mov	r4, r0
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006c22:	f7ff ff8b 	bl	8006b3c <_I2CWrite>
    if( status_int ){
 8006c26:	b928      	cbnz	r0, 8006c34 <VL53L1_RdByte+0x24>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, data, 1);
 8006c28:	2201      	movs	r2, #1
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f7ff ff94 	bl	8006b5a <_I2CRead>
    if (status_int != 0) {
 8006c32:	b108      	cbz	r0, 8006c38 <VL53L1_RdByte+0x28>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006c34:	f06f 000c 	mvn.w	r0, #12
    }
done:
    VL53L1_PutI2cBus();
    return Status;
}
 8006c38:	bd38      	pop	{r3, r4, r5, pc}
 8006c3a:	bf00      	nop
 8006c3c:	200056bc 	.word	0x200056bc

08006c40 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8006c40:	b570      	push	{r4, r5, r6, lr}
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8006c42:	4c0d      	ldr	r4, [pc, #52]	; (8006c78 <VL53L1_RdWord+0x38>)
 8006c44:	0a0b      	lsrs	r3, r1, #8
VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8006c46:	4615      	mov	r5, r2
	_I2CBuffer[1] = index&0xFF;
 8006c48:	7061      	strb	r1, [r4, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	4621      	mov	r1, r4
VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8006c4e:	4606      	mov	r6, r0
    _I2CBuffer[0] = index>>8;
 8006c50:	7023      	strb	r3, [r4, #0]
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006c52:	f7ff ff73 	bl	8006b3c <_I2CWrite>

    if( status_int ){
 8006c56:	b110      	cbz	r0, 8006c5e <VL53L1_RdWord+0x1e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006c58:	f06f 000c 	mvn.w	r0, #12
 8006c5c:	bd70      	pop	{r4, r5, r6, pc}
        goto done;
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8006c5e:	2202      	movs	r2, #2
 8006c60:	4621      	mov	r1, r4
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7ff ff79 	bl	8006b5a <_I2CRead>
    if (status_int != 0) {
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d1f5      	bne.n	8006c58 <VL53L1_RdWord+0x18>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8006c6c:	7822      	ldrb	r2, [r4, #0]
 8006c6e:	7863      	ldrb	r3, [r4, #1]
 8006c70:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006c74:	802b      	strh	r3, [r5, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
}
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	200056bc 	.word	0x200056bc

08006c7c <VL53L1_WaitUs>:
	(void)pdev;
	HAL_Delay(wait_ms);
    return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 8006c7c:	b508      	push	{r3, lr}
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8006c7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c82:	fb91 f0f0 	sdiv	r0, r1, r0
 8006c86:	f7f9 fcdb 	bl	8000640 <HAL_Delay>
    return VL53L1_ERROR_NONE;
}
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	bd08      	pop	{r3, pc}
	...

08006c90 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8006c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c94:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006c98:	4606      	mov	r6, r0
 8006c9a:	460f      	mov	r7, r1
 8006c9c:	4690      	mov	r8, r2

	VL53L1_Error status         = VL53L1_ERROR_NONE;
	uint32_t     start_time_ms = 0;
	uint32_t     current_time_ms = 0;
	uint32_t     polling_time_ms = 0;
	uint8_t      byte_value      = 0;
 8006c9e:	2400      	movs	r4, #0
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8006ca0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ca4:	4918      	ldr	r1, [pc, #96]	; (8006d08 <VL53L1_WaitValueMaskEx+0x78>)
{
 8006ca6:	f89d a228 	ldrb.w	sl, [sp, #552]	; 0x228
 8006caa:	9d8b      	ldr	r5, [sp, #556]	; 0x22c
	uint8_t      byte_value      = 0;
 8006cac:	f88d 4007 	strb.w	r4, [sp, #7]
	VL53L1_COPYSTRING(register_name, "");
 8006cb0:	a802      	add	r0, sp, #8
{
 8006cb2:	4699      	mov	r9, r3
	VL53L1_COPYSTRING(register_name, "");
 8006cb4:	f000 f97c 	bl	8006fb0 <strncpy>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8006cb8:	b1ff      	cbz	r7, 8006cfa <VL53L1_WaitValueMaskEx+0x6a>
		   (polling_time_ms < timeout_ms) &&
 8006cba:	b12c      	cbz	r4, 8006cc8 <VL53L1_WaitValueMaskEx+0x38>
 8006cbc:	2300      	movs	r3, #0

	if (found == 0 && status == VL53L1_ERROR_NONE)
		status = VL53L1_ERROR_TIME_OUT;

	return status;
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 8006cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			status = VL53L1_RdByte(
 8006cc8:	f10d 0207 	add.w	r2, sp, #7
 8006ccc:	4641      	mov	r1, r8
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f7ff ff9e 	bl	8006c10 <VL53L1_RdByte>
		if ((byte_value & mask) == value)
 8006cd4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006cd8:	ea0a 0202 	and.w	r2, sl, r2
 8006cdc:	454a      	cmp	r2, r9
			status = VL53L1_RdByte(
 8006cde:	4603      	mov	r3, r0
		if ((byte_value & mask) == value)
 8006ce0:	d103      	bne.n	8006cea <VL53L1_WaitValueMaskEx+0x5a>
	while ((status == VL53L1_ERROR_NONE) &&
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d1eb      	bne.n	8006cbe <VL53L1_WaitValueMaskEx+0x2e>
			found = 1;
 8006ce6:	2401      	movs	r4, #1
 8006ce8:	e7e6      	b.n	8006cb8 <VL53L1_WaitValueMaskEx+0x28>
		if (status == VL53L1_ERROR_NONE  &&
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d1e7      	bne.n	8006cbe <VL53L1_WaitValueMaskEx+0x2e>
			found == 0 &&
 8006cee:	2d00      	cmp	r5, #0
 8006cf0:	d0e2      	beq.n	8006cb8 <VL53L1_WaitValueMaskEx+0x28>
	HAL_Delay(wait_ms);
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f7f9 fca4 	bl	8000640 <HAL_Delay>
 8006cf8:	e7de      	b.n	8006cb8 <VL53L1_WaitValueMaskEx+0x28>
		status = VL53L1_ERROR_TIME_OUT;
 8006cfa:	2c00      	cmp	r4, #0
 8006cfc:	bf14      	ite	ne
 8006cfe:	2300      	movne	r3, #0
 8006d00:	f06f 0306 	mvneq.w	r3, #6
 8006d04:	e7db      	b.n	8006cbe <VL53L1_WaitValueMaskEx+0x2e>
 8006d06:	bf00      	nop
 8006d08:	0800769f 	.word	0x0800769f

08006d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006d10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006d12:	e003      	b.n	8006d1c <LoopCopyDataInit>

08006d14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006d14:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006d16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006d18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006d1a:	3104      	adds	r1, #4

08006d1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006d1c:	480b      	ldr	r0, [pc, #44]	; (8006d4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006d1e:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006d20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006d22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006d24:	d3f6      	bcc.n	8006d14 <CopyDataInit>
  ldr  r2, =_sbss
 8006d26:	4a0b      	ldr	r2, [pc, #44]	; (8006d54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006d28:	e002      	b.n	8006d30 <LoopFillZerobss>

08006d2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006d2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006d2c:	f842 3b04 	str.w	r3, [r2], #4

08006d30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006d30:	4b09      	ldr	r3, [pc, #36]	; (8006d58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006d32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006d34:	d3f9      	bcc.n	8006d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006d36:	f7fd f9e1 	bl	80040fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d3a:	f000 f811 	bl	8006d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d3e:	f7fc ff0f 	bl	8003b60 <main>
  bx  lr    
 8006d42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006d44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006d48:	080079e0 	.word	0x080079e0
  ldr  r0, =_sdata
 8006d4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006d50:	20000224 	.word	0x20000224
  ldr  r2, =_sbss
 8006d54:	20000224 	.word	0x20000224
  ldr  r3, = _ebss
 8006d58:	200057c0 	.word	0x200057c0

08006d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d5c:	e7fe      	b.n	8006d5c <ADC_IRQHandler>
	...

08006d60 <__libc_init_array>:
 8006d60:	b570      	push	{r4, r5, r6, lr}
 8006d62:	4e0d      	ldr	r6, [pc, #52]	; (8006d98 <__libc_init_array+0x38>)
 8006d64:	4c0d      	ldr	r4, [pc, #52]	; (8006d9c <__libc_init_array+0x3c>)
 8006d66:	1ba4      	subs	r4, r4, r6
 8006d68:	10a4      	asrs	r4, r4, #2
 8006d6a:	2500      	movs	r5, #0
 8006d6c:	42a5      	cmp	r5, r4
 8006d6e:	d109      	bne.n	8006d84 <__libc_init_array+0x24>
 8006d70:	4e0b      	ldr	r6, [pc, #44]	; (8006da0 <__libc_init_array+0x40>)
 8006d72:	4c0c      	ldr	r4, [pc, #48]	; (8006da4 <__libc_init_array+0x44>)
 8006d74:	f000 fc70 	bl	8007658 <_init>
 8006d78:	1ba4      	subs	r4, r4, r6
 8006d7a:	10a4      	asrs	r4, r4, #2
 8006d7c:	2500      	movs	r5, #0
 8006d7e:	42a5      	cmp	r5, r4
 8006d80:	d105      	bne.n	8006d8e <__libc_init_array+0x2e>
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d88:	4798      	blx	r3
 8006d8a:	3501      	adds	r5, #1
 8006d8c:	e7ee      	b.n	8006d6c <__libc_init_array+0xc>
 8006d8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d92:	4798      	blx	r3
 8006d94:	3501      	adds	r5, #1
 8006d96:	e7f2      	b.n	8006d7e <__libc_init_array+0x1e>
 8006d98:	080079d8 	.word	0x080079d8
 8006d9c:	080079d8 	.word	0x080079d8
 8006da0:	080079d8 	.word	0x080079d8
 8006da4:	080079dc 	.word	0x080079dc

08006da8 <malloc>:
 8006da8:	4b02      	ldr	r3, [pc, #8]	; (8006db4 <malloc+0xc>)
 8006daa:	4601      	mov	r1, r0
 8006dac:	6818      	ldr	r0, [r3, #0]
 8006dae:	f000 b86d 	b.w	8006e8c <_malloc_r>
 8006db2:	bf00      	nop
 8006db4:	200001c0 	.word	0x200001c0

08006db8 <free>:
 8006db8:	4b02      	ldr	r3, [pc, #8]	; (8006dc4 <free+0xc>)
 8006dba:	4601      	mov	r1, r0
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	f000 b817 	b.w	8006df0 <_free_r>
 8006dc2:	bf00      	nop
 8006dc4:	200001c0 	.word	0x200001c0

08006dc8 <memcpy>:
 8006dc8:	b510      	push	{r4, lr}
 8006dca:	1e43      	subs	r3, r0, #1
 8006dcc:	440a      	add	r2, r1
 8006dce:	4291      	cmp	r1, r2
 8006dd0:	d100      	bne.n	8006dd4 <memcpy+0xc>
 8006dd2:	bd10      	pop	{r4, pc}
 8006dd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ddc:	e7f7      	b.n	8006dce <memcpy+0x6>

08006dde <memset>:
 8006dde:	4402      	add	r2, r0
 8006de0:	4603      	mov	r3, r0
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d100      	bne.n	8006de8 <memset+0xa>
 8006de6:	4770      	bx	lr
 8006de8:	f803 1b01 	strb.w	r1, [r3], #1
 8006dec:	e7f9      	b.n	8006de2 <memset+0x4>
	...

08006df0 <_free_r>:
 8006df0:	b538      	push	{r3, r4, r5, lr}
 8006df2:	4605      	mov	r5, r0
 8006df4:	2900      	cmp	r1, #0
 8006df6:	d045      	beq.n	8006e84 <_free_r+0x94>
 8006df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dfc:	1f0c      	subs	r4, r1, #4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bfb8      	it	lt
 8006e02:	18e4      	addlt	r4, r4, r3
 8006e04:	f000 f8e9 	bl	8006fda <__malloc_lock>
 8006e08:	4a1f      	ldr	r2, [pc, #124]	; (8006e88 <_free_r+0x98>)
 8006e0a:	6813      	ldr	r3, [r2, #0]
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	b933      	cbnz	r3, 8006e1e <_free_r+0x2e>
 8006e10:	6063      	str	r3, [r4, #4]
 8006e12:	6014      	str	r4, [r2, #0]
 8006e14:	4628      	mov	r0, r5
 8006e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e1a:	f000 b8df 	b.w	8006fdc <__malloc_unlock>
 8006e1e:	42a3      	cmp	r3, r4
 8006e20:	d90c      	bls.n	8006e3c <_free_r+0x4c>
 8006e22:	6821      	ldr	r1, [r4, #0]
 8006e24:	1862      	adds	r2, r4, r1
 8006e26:	4293      	cmp	r3, r2
 8006e28:	bf04      	itt	eq
 8006e2a:	681a      	ldreq	r2, [r3, #0]
 8006e2c:	685b      	ldreq	r3, [r3, #4]
 8006e2e:	6063      	str	r3, [r4, #4]
 8006e30:	bf04      	itt	eq
 8006e32:	1852      	addeq	r2, r2, r1
 8006e34:	6022      	streq	r2, [r4, #0]
 8006e36:	6004      	str	r4, [r0, #0]
 8006e38:	e7ec      	b.n	8006e14 <_free_r+0x24>
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	b10a      	cbz	r2, 8006e44 <_free_r+0x54>
 8006e40:	42a2      	cmp	r2, r4
 8006e42:	d9fa      	bls.n	8006e3a <_free_r+0x4a>
 8006e44:	6819      	ldr	r1, [r3, #0]
 8006e46:	1858      	adds	r0, r3, r1
 8006e48:	42a0      	cmp	r0, r4
 8006e4a:	d10b      	bne.n	8006e64 <_free_r+0x74>
 8006e4c:	6820      	ldr	r0, [r4, #0]
 8006e4e:	4401      	add	r1, r0
 8006e50:	1858      	adds	r0, r3, r1
 8006e52:	4282      	cmp	r2, r0
 8006e54:	6019      	str	r1, [r3, #0]
 8006e56:	d1dd      	bne.n	8006e14 <_free_r+0x24>
 8006e58:	6810      	ldr	r0, [r2, #0]
 8006e5a:	6852      	ldr	r2, [r2, #4]
 8006e5c:	605a      	str	r2, [r3, #4]
 8006e5e:	4401      	add	r1, r0
 8006e60:	6019      	str	r1, [r3, #0]
 8006e62:	e7d7      	b.n	8006e14 <_free_r+0x24>
 8006e64:	d902      	bls.n	8006e6c <_free_r+0x7c>
 8006e66:	230c      	movs	r3, #12
 8006e68:	602b      	str	r3, [r5, #0]
 8006e6a:	e7d3      	b.n	8006e14 <_free_r+0x24>
 8006e6c:	6820      	ldr	r0, [r4, #0]
 8006e6e:	1821      	adds	r1, r4, r0
 8006e70:	428a      	cmp	r2, r1
 8006e72:	bf04      	itt	eq
 8006e74:	6811      	ldreq	r1, [r2, #0]
 8006e76:	6852      	ldreq	r2, [r2, #4]
 8006e78:	6062      	str	r2, [r4, #4]
 8006e7a:	bf04      	itt	eq
 8006e7c:	1809      	addeq	r1, r1, r0
 8006e7e:	6021      	streq	r1, [r4, #0]
 8006e80:	605c      	str	r4, [r3, #4]
 8006e82:	e7c7      	b.n	8006e14 <_free_r+0x24>
 8006e84:	bd38      	pop	{r3, r4, r5, pc}
 8006e86:	bf00      	nop
 8006e88:	20000244 	.word	0x20000244

08006e8c <_malloc_r>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	1ccd      	adds	r5, r1, #3
 8006e90:	f025 0503 	bic.w	r5, r5, #3
 8006e94:	3508      	adds	r5, #8
 8006e96:	2d0c      	cmp	r5, #12
 8006e98:	bf38      	it	cc
 8006e9a:	250c      	movcc	r5, #12
 8006e9c:	2d00      	cmp	r5, #0
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	db01      	blt.n	8006ea6 <_malloc_r+0x1a>
 8006ea2:	42a9      	cmp	r1, r5
 8006ea4:	d903      	bls.n	8006eae <_malloc_r+0x22>
 8006ea6:	230c      	movs	r3, #12
 8006ea8:	6033      	str	r3, [r6, #0]
 8006eaa:	2000      	movs	r0, #0
 8006eac:	bd70      	pop	{r4, r5, r6, pc}
 8006eae:	f000 f894 	bl	8006fda <__malloc_lock>
 8006eb2:	4a23      	ldr	r2, [pc, #140]	; (8006f40 <_malloc_r+0xb4>)
 8006eb4:	6814      	ldr	r4, [r2, #0]
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	b991      	cbnz	r1, 8006ee0 <_malloc_r+0x54>
 8006eba:	4c22      	ldr	r4, [pc, #136]	; (8006f44 <_malloc_r+0xb8>)
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	b91b      	cbnz	r3, 8006ec8 <_malloc_r+0x3c>
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f000 f841 	bl	8006f48 <_sbrk_r>
 8006ec6:	6020      	str	r0, [r4, #0]
 8006ec8:	4629      	mov	r1, r5
 8006eca:	4630      	mov	r0, r6
 8006ecc:	f000 f83c 	bl	8006f48 <_sbrk_r>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d126      	bne.n	8006f22 <_malloc_r+0x96>
 8006ed4:	230c      	movs	r3, #12
 8006ed6:	6033      	str	r3, [r6, #0]
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f000 f87f 	bl	8006fdc <__malloc_unlock>
 8006ede:	e7e4      	b.n	8006eaa <_malloc_r+0x1e>
 8006ee0:	680b      	ldr	r3, [r1, #0]
 8006ee2:	1b5b      	subs	r3, r3, r5
 8006ee4:	d41a      	bmi.n	8006f1c <_malloc_r+0x90>
 8006ee6:	2b0b      	cmp	r3, #11
 8006ee8:	d90f      	bls.n	8006f0a <_malloc_r+0x7e>
 8006eea:	600b      	str	r3, [r1, #0]
 8006eec:	50cd      	str	r5, [r1, r3]
 8006eee:	18cc      	adds	r4, r1, r3
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f000 f873 	bl	8006fdc <__malloc_unlock>
 8006ef6:	f104 000b 	add.w	r0, r4, #11
 8006efa:	1d23      	adds	r3, r4, #4
 8006efc:	f020 0007 	bic.w	r0, r0, #7
 8006f00:	1ac3      	subs	r3, r0, r3
 8006f02:	d01b      	beq.n	8006f3c <_malloc_r+0xb0>
 8006f04:	425a      	negs	r2, r3
 8006f06:	50e2      	str	r2, [r4, r3]
 8006f08:	bd70      	pop	{r4, r5, r6, pc}
 8006f0a:	428c      	cmp	r4, r1
 8006f0c:	bf0d      	iteet	eq
 8006f0e:	6863      	ldreq	r3, [r4, #4]
 8006f10:	684b      	ldrne	r3, [r1, #4]
 8006f12:	6063      	strne	r3, [r4, #4]
 8006f14:	6013      	streq	r3, [r2, #0]
 8006f16:	bf18      	it	ne
 8006f18:	460c      	movne	r4, r1
 8006f1a:	e7e9      	b.n	8006ef0 <_malloc_r+0x64>
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	6849      	ldr	r1, [r1, #4]
 8006f20:	e7ca      	b.n	8006eb8 <_malloc_r+0x2c>
 8006f22:	1cc4      	adds	r4, r0, #3
 8006f24:	f024 0403 	bic.w	r4, r4, #3
 8006f28:	42a0      	cmp	r0, r4
 8006f2a:	d005      	beq.n	8006f38 <_malloc_r+0xac>
 8006f2c:	1a21      	subs	r1, r4, r0
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f000 f80a 	bl	8006f48 <_sbrk_r>
 8006f34:	3001      	adds	r0, #1
 8006f36:	d0cd      	beq.n	8006ed4 <_malloc_r+0x48>
 8006f38:	6025      	str	r5, [r4, #0]
 8006f3a:	e7d9      	b.n	8006ef0 <_malloc_r+0x64>
 8006f3c:	bd70      	pop	{r4, r5, r6, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000244 	.word	0x20000244
 8006f44:	20000248 	.word	0x20000248

08006f48 <_sbrk_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4c06      	ldr	r4, [pc, #24]	; (8006f64 <_sbrk_r+0x1c>)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	4605      	mov	r5, r0
 8006f50:	4608      	mov	r0, r1
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	f000 fb72 	bl	800763c <_sbrk>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	d102      	bne.n	8006f62 <_sbrk_r+0x1a>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	b103      	cbz	r3, 8006f62 <_sbrk_r+0x1a>
 8006f60:	602b      	str	r3, [r5, #0]
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	200057bc 	.word	0x200057bc

08006f68 <siprintf>:
 8006f68:	b40e      	push	{r1, r2, r3}
 8006f6a:	b500      	push	{lr}
 8006f6c:	b09c      	sub	sp, #112	; 0x70
 8006f6e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006f72:	ab1d      	add	r3, sp, #116	; 0x74
 8006f74:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006f78:	9002      	str	r0, [sp, #8]
 8006f7a:	9006      	str	r0, [sp, #24]
 8006f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f80:	480a      	ldr	r0, [pc, #40]	; (8006fac <siprintf+0x44>)
 8006f82:	9104      	str	r1, [sp, #16]
 8006f84:	9107      	str	r1, [sp, #28]
 8006f86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006f92:	6800      	ldr	r0, [r0, #0]
 8006f94:	9301      	str	r3, [sp, #4]
 8006f96:	a902      	add	r1, sp, #8
 8006f98:	f000 f87c 	bl	8007094 <_svfiprintf_r>
 8006f9c:	9b02      	ldr	r3, [sp, #8]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	701a      	strb	r2, [r3, #0]
 8006fa2:	b01c      	add	sp, #112	; 0x70
 8006fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fa8:	b003      	add	sp, #12
 8006faa:	4770      	bx	lr
 8006fac:	200001c0 	.word	0x200001c0

08006fb0 <strncpy>:
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	b902      	cbnz	r2, 8006fb8 <strncpy+0x8>
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}
 8006fb8:	4623      	mov	r3, r4
 8006fba:	f811 5b01 	ldrb.w	r5, [r1], #1
 8006fbe:	f803 5b01 	strb.w	r5, [r3], #1
 8006fc2:	1e56      	subs	r6, r2, #1
 8006fc4:	b91d      	cbnz	r5, 8006fce <strncpy+0x1e>
 8006fc6:	4414      	add	r4, r2
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	d103      	bne.n	8006fd4 <strncpy+0x24>
 8006fcc:	bd70      	pop	{r4, r5, r6, pc}
 8006fce:	461c      	mov	r4, r3
 8006fd0:	4632      	mov	r2, r6
 8006fd2:	e7ef      	b.n	8006fb4 <strncpy+0x4>
 8006fd4:	f803 5b01 	strb.w	r5, [r3], #1
 8006fd8:	e7f6      	b.n	8006fc8 <strncpy+0x18>

08006fda <__malloc_lock>:
 8006fda:	4770      	bx	lr

08006fdc <__malloc_unlock>:
 8006fdc:	4770      	bx	lr

08006fde <__ssputs_r>:
 8006fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe2:	688e      	ldr	r6, [r1, #8]
 8006fe4:	429e      	cmp	r6, r3
 8006fe6:	4682      	mov	sl, r0
 8006fe8:	460c      	mov	r4, r1
 8006fea:	4691      	mov	r9, r2
 8006fec:	4698      	mov	r8, r3
 8006fee:	d835      	bhi.n	800705c <__ssputs_r+0x7e>
 8006ff0:	898a      	ldrh	r2, [r1, #12]
 8006ff2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ff6:	d031      	beq.n	800705c <__ssputs_r+0x7e>
 8006ff8:	6825      	ldr	r5, [r4, #0]
 8006ffa:	6909      	ldr	r1, [r1, #16]
 8006ffc:	1a6f      	subs	r7, r5, r1
 8006ffe:	6965      	ldr	r5, [r4, #20]
 8007000:	2302      	movs	r3, #2
 8007002:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007006:	fb95 f5f3 	sdiv	r5, r5, r3
 800700a:	f108 0301 	add.w	r3, r8, #1
 800700e:	443b      	add	r3, r7
 8007010:	429d      	cmp	r5, r3
 8007012:	bf38      	it	cc
 8007014:	461d      	movcc	r5, r3
 8007016:	0553      	lsls	r3, r2, #21
 8007018:	d531      	bpl.n	800707e <__ssputs_r+0xa0>
 800701a:	4629      	mov	r1, r5
 800701c:	f7ff ff36 	bl	8006e8c <_malloc_r>
 8007020:	4606      	mov	r6, r0
 8007022:	b950      	cbnz	r0, 800703a <__ssputs_r+0x5c>
 8007024:	230c      	movs	r3, #12
 8007026:	f8ca 3000 	str.w	r3, [sl]
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007030:	81a3      	strh	r3, [r4, #12]
 8007032:	f04f 30ff 	mov.w	r0, #4294967295
 8007036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703a:	463a      	mov	r2, r7
 800703c:	6921      	ldr	r1, [r4, #16]
 800703e:	f7ff fec3 	bl	8006dc8 <memcpy>
 8007042:	89a3      	ldrh	r3, [r4, #12]
 8007044:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800704c:	81a3      	strh	r3, [r4, #12]
 800704e:	6126      	str	r6, [r4, #16]
 8007050:	6165      	str	r5, [r4, #20]
 8007052:	443e      	add	r6, r7
 8007054:	1bed      	subs	r5, r5, r7
 8007056:	6026      	str	r6, [r4, #0]
 8007058:	60a5      	str	r5, [r4, #8]
 800705a:	4646      	mov	r6, r8
 800705c:	4546      	cmp	r6, r8
 800705e:	bf28      	it	cs
 8007060:	4646      	movcs	r6, r8
 8007062:	4632      	mov	r2, r6
 8007064:	4649      	mov	r1, r9
 8007066:	6820      	ldr	r0, [r4, #0]
 8007068:	f000 fa9e 	bl	80075a8 <memmove>
 800706c:	68a3      	ldr	r3, [r4, #8]
 800706e:	1b9b      	subs	r3, r3, r6
 8007070:	60a3      	str	r3, [r4, #8]
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	441e      	add	r6, r3
 8007076:	6026      	str	r6, [r4, #0]
 8007078:	2000      	movs	r0, #0
 800707a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707e:	462a      	mov	r2, r5
 8007080:	f000 faac 	bl	80075dc <_realloc_r>
 8007084:	4606      	mov	r6, r0
 8007086:	2800      	cmp	r0, #0
 8007088:	d1e1      	bne.n	800704e <__ssputs_r+0x70>
 800708a:	6921      	ldr	r1, [r4, #16]
 800708c:	4650      	mov	r0, sl
 800708e:	f7ff feaf 	bl	8006df0 <_free_r>
 8007092:	e7c7      	b.n	8007024 <__ssputs_r+0x46>

08007094 <_svfiprintf_r>:
 8007094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	b09d      	sub	sp, #116	; 0x74
 800709a:	4680      	mov	r8, r0
 800709c:	9303      	str	r3, [sp, #12]
 800709e:	898b      	ldrh	r3, [r1, #12]
 80070a0:	061c      	lsls	r4, r3, #24
 80070a2:	460d      	mov	r5, r1
 80070a4:	4616      	mov	r6, r2
 80070a6:	d50f      	bpl.n	80070c8 <_svfiprintf_r+0x34>
 80070a8:	690b      	ldr	r3, [r1, #16]
 80070aa:	b96b      	cbnz	r3, 80070c8 <_svfiprintf_r+0x34>
 80070ac:	2140      	movs	r1, #64	; 0x40
 80070ae:	f7ff feed 	bl	8006e8c <_malloc_r>
 80070b2:	6028      	str	r0, [r5, #0]
 80070b4:	6128      	str	r0, [r5, #16]
 80070b6:	b928      	cbnz	r0, 80070c4 <_svfiprintf_r+0x30>
 80070b8:	230c      	movs	r3, #12
 80070ba:	f8c8 3000 	str.w	r3, [r8]
 80070be:	f04f 30ff 	mov.w	r0, #4294967295
 80070c2:	e0c5      	b.n	8007250 <_svfiprintf_r+0x1bc>
 80070c4:	2340      	movs	r3, #64	; 0x40
 80070c6:	616b      	str	r3, [r5, #20]
 80070c8:	2300      	movs	r3, #0
 80070ca:	9309      	str	r3, [sp, #36]	; 0x24
 80070cc:	2320      	movs	r3, #32
 80070ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070d2:	2330      	movs	r3, #48	; 0x30
 80070d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070d8:	f04f 0b01 	mov.w	fp, #1
 80070dc:	4637      	mov	r7, r6
 80070de:	463c      	mov	r4, r7
 80070e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d13c      	bne.n	8007162 <_svfiprintf_r+0xce>
 80070e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80070ec:	d00b      	beq.n	8007106 <_svfiprintf_r+0x72>
 80070ee:	4653      	mov	r3, sl
 80070f0:	4632      	mov	r2, r6
 80070f2:	4629      	mov	r1, r5
 80070f4:	4640      	mov	r0, r8
 80070f6:	f7ff ff72 	bl	8006fde <__ssputs_r>
 80070fa:	3001      	adds	r0, #1
 80070fc:	f000 80a3 	beq.w	8007246 <_svfiprintf_r+0x1b2>
 8007100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007102:	4453      	add	r3, sl
 8007104:	9309      	str	r3, [sp, #36]	; 0x24
 8007106:	783b      	ldrb	r3, [r7, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 809c 	beq.w	8007246 <_svfiprintf_r+0x1b2>
 800710e:	2300      	movs	r3, #0
 8007110:	f04f 32ff 	mov.w	r2, #4294967295
 8007114:	9304      	str	r3, [sp, #16]
 8007116:	9307      	str	r3, [sp, #28]
 8007118:	9205      	str	r2, [sp, #20]
 800711a:	9306      	str	r3, [sp, #24]
 800711c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007120:	931a      	str	r3, [sp, #104]	; 0x68
 8007122:	2205      	movs	r2, #5
 8007124:	7821      	ldrb	r1, [r4, #0]
 8007126:	4850      	ldr	r0, [pc, #320]	; (8007268 <_svfiprintf_r+0x1d4>)
 8007128:	f7f9 f862 	bl	80001f0 <memchr>
 800712c:	1c67      	adds	r7, r4, #1
 800712e:	9b04      	ldr	r3, [sp, #16]
 8007130:	b9d8      	cbnz	r0, 800716a <_svfiprintf_r+0xd6>
 8007132:	06d9      	lsls	r1, r3, #27
 8007134:	bf44      	itt	mi
 8007136:	2220      	movmi	r2, #32
 8007138:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800713c:	071a      	lsls	r2, r3, #28
 800713e:	bf44      	itt	mi
 8007140:	222b      	movmi	r2, #43	; 0x2b
 8007142:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007146:	7822      	ldrb	r2, [r4, #0]
 8007148:	2a2a      	cmp	r2, #42	; 0x2a
 800714a:	d016      	beq.n	800717a <_svfiprintf_r+0xe6>
 800714c:	9a07      	ldr	r2, [sp, #28]
 800714e:	2100      	movs	r1, #0
 8007150:	200a      	movs	r0, #10
 8007152:	4627      	mov	r7, r4
 8007154:	3401      	adds	r4, #1
 8007156:	783b      	ldrb	r3, [r7, #0]
 8007158:	3b30      	subs	r3, #48	; 0x30
 800715a:	2b09      	cmp	r3, #9
 800715c:	d951      	bls.n	8007202 <_svfiprintf_r+0x16e>
 800715e:	b1c9      	cbz	r1, 8007194 <_svfiprintf_r+0x100>
 8007160:	e011      	b.n	8007186 <_svfiprintf_r+0xf2>
 8007162:	2b25      	cmp	r3, #37	; 0x25
 8007164:	d0c0      	beq.n	80070e8 <_svfiprintf_r+0x54>
 8007166:	4627      	mov	r7, r4
 8007168:	e7b9      	b.n	80070de <_svfiprintf_r+0x4a>
 800716a:	4a3f      	ldr	r2, [pc, #252]	; (8007268 <_svfiprintf_r+0x1d4>)
 800716c:	1a80      	subs	r0, r0, r2
 800716e:	fa0b f000 	lsl.w	r0, fp, r0
 8007172:	4318      	orrs	r0, r3
 8007174:	9004      	str	r0, [sp, #16]
 8007176:	463c      	mov	r4, r7
 8007178:	e7d3      	b.n	8007122 <_svfiprintf_r+0x8e>
 800717a:	9a03      	ldr	r2, [sp, #12]
 800717c:	1d11      	adds	r1, r2, #4
 800717e:	6812      	ldr	r2, [r2, #0]
 8007180:	9103      	str	r1, [sp, #12]
 8007182:	2a00      	cmp	r2, #0
 8007184:	db01      	blt.n	800718a <_svfiprintf_r+0xf6>
 8007186:	9207      	str	r2, [sp, #28]
 8007188:	e004      	b.n	8007194 <_svfiprintf_r+0x100>
 800718a:	4252      	negs	r2, r2
 800718c:	f043 0302 	orr.w	r3, r3, #2
 8007190:	9207      	str	r2, [sp, #28]
 8007192:	9304      	str	r3, [sp, #16]
 8007194:	783b      	ldrb	r3, [r7, #0]
 8007196:	2b2e      	cmp	r3, #46	; 0x2e
 8007198:	d10e      	bne.n	80071b8 <_svfiprintf_r+0x124>
 800719a:	787b      	ldrb	r3, [r7, #1]
 800719c:	2b2a      	cmp	r3, #42	; 0x2a
 800719e:	f107 0101 	add.w	r1, r7, #1
 80071a2:	d132      	bne.n	800720a <_svfiprintf_r+0x176>
 80071a4:	9b03      	ldr	r3, [sp, #12]
 80071a6:	1d1a      	adds	r2, r3, #4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	9203      	str	r2, [sp, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bfb8      	it	lt
 80071b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80071b4:	3702      	adds	r7, #2
 80071b6:	9305      	str	r3, [sp, #20]
 80071b8:	4c2c      	ldr	r4, [pc, #176]	; (800726c <_svfiprintf_r+0x1d8>)
 80071ba:	7839      	ldrb	r1, [r7, #0]
 80071bc:	2203      	movs	r2, #3
 80071be:	4620      	mov	r0, r4
 80071c0:	f7f9 f816 	bl	80001f0 <memchr>
 80071c4:	b138      	cbz	r0, 80071d6 <_svfiprintf_r+0x142>
 80071c6:	2340      	movs	r3, #64	; 0x40
 80071c8:	1b00      	subs	r0, r0, r4
 80071ca:	fa03 f000 	lsl.w	r0, r3, r0
 80071ce:	9b04      	ldr	r3, [sp, #16]
 80071d0:	4303      	orrs	r3, r0
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	3701      	adds	r7, #1
 80071d6:	7839      	ldrb	r1, [r7, #0]
 80071d8:	4825      	ldr	r0, [pc, #148]	; (8007270 <_svfiprintf_r+0x1dc>)
 80071da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071de:	2206      	movs	r2, #6
 80071e0:	1c7e      	adds	r6, r7, #1
 80071e2:	f7f9 f805 	bl	80001f0 <memchr>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d035      	beq.n	8007256 <_svfiprintf_r+0x1c2>
 80071ea:	4b22      	ldr	r3, [pc, #136]	; (8007274 <_svfiprintf_r+0x1e0>)
 80071ec:	b9fb      	cbnz	r3, 800722e <_svfiprintf_r+0x19a>
 80071ee:	9b03      	ldr	r3, [sp, #12]
 80071f0:	3307      	adds	r3, #7
 80071f2:	f023 0307 	bic.w	r3, r3, #7
 80071f6:	3308      	adds	r3, #8
 80071f8:	9303      	str	r3, [sp, #12]
 80071fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071fc:	444b      	add	r3, r9
 80071fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007200:	e76c      	b.n	80070dc <_svfiprintf_r+0x48>
 8007202:	fb00 3202 	mla	r2, r0, r2, r3
 8007206:	2101      	movs	r1, #1
 8007208:	e7a3      	b.n	8007152 <_svfiprintf_r+0xbe>
 800720a:	2300      	movs	r3, #0
 800720c:	9305      	str	r3, [sp, #20]
 800720e:	4618      	mov	r0, r3
 8007210:	240a      	movs	r4, #10
 8007212:	460f      	mov	r7, r1
 8007214:	3101      	adds	r1, #1
 8007216:	783a      	ldrb	r2, [r7, #0]
 8007218:	3a30      	subs	r2, #48	; 0x30
 800721a:	2a09      	cmp	r2, #9
 800721c:	d903      	bls.n	8007226 <_svfiprintf_r+0x192>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0ca      	beq.n	80071b8 <_svfiprintf_r+0x124>
 8007222:	9005      	str	r0, [sp, #20]
 8007224:	e7c8      	b.n	80071b8 <_svfiprintf_r+0x124>
 8007226:	fb04 2000 	mla	r0, r4, r0, r2
 800722a:	2301      	movs	r3, #1
 800722c:	e7f1      	b.n	8007212 <_svfiprintf_r+0x17e>
 800722e:	ab03      	add	r3, sp, #12
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	462a      	mov	r2, r5
 8007234:	4b10      	ldr	r3, [pc, #64]	; (8007278 <_svfiprintf_r+0x1e4>)
 8007236:	a904      	add	r1, sp, #16
 8007238:	4640      	mov	r0, r8
 800723a:	f3af 8000 	nop.w
 800723e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007242:	4681      	mov	r9, r0
 8007244:	d1d9      	bne.n	80071fa <_svfiprintf_r+0x166>
 8007246:	89ab      	ldrh	r3, [r5, #12]
 8007248:	065b      	lsls	r3, r3, #25
 800724a:	f53f af38 	bmi.w	80070be <_svfiprintf_r+0x2a>
 800724e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007250:	b01d      	add	sp, #116	; 0x74
 8007252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007256:	ab03      	add	r3, sp, #12
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	462a      	mov	r2, r5
 800725c:	4b06      	ldr	r3, [pc, #24]	; (8007278 <_svfiprintf_r+0x1e4>)
 800725e:	a904      	add	r1, sp, #16
 8007260:	4640      	mov	r0, r8
 8007262:	f000 f881 	bl	8007368 <_printf_i>
 8007266:	e7ea      	b.n	800723e <_svfiprintf_r+0x1aa>
 8007268:	0800799a 	.word	0x0800799a
 800726c:	080079a0 	.word	0x080079a0
 8007270:	080079a4 	.word	0x080079a4
 8007274:	00000000 	.word	0x00000000
 8007278:	08006fdf 	.word	0x08006fdf

0800727c <_printf_common>:
 800727c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007280:	4691      	mov	r9, r2
 8007282:	461f      	mov	r7, r3
 8007284:	688a      	ldr	r2, [r1, #8]
 8007286:	690b      	ldr	r3, [r1, #16]
 8007288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800728c:	4293      	cmp	r3, r2
 800728e:	bfb8      	it	lt
 8007290:	4613      	movlt	r3, r2
 8007292:	f8c9 3000 	str.w	r3, [r9]
 8007296:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800729a:	4606      	mov	r6, r0
 800729c:	460c      	mov	r4, r1
 800729e:	b112      	cbz	r2, 80072a6 <_printf_common+0x2a>
 80072a0:	3301      	adds	r3, #1
 80072a2:	f8c9 3000 	str.w	r3, [r9]
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	0699      	lsls	r1, r3, #26
 80072aa:	bf42      	ittt	mi
 80072ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80072b0:	3302      	addmi	r3, #2
 80072b2:	f8c9 3000 	strmi.w	r3, [r9]
 80072b6:	6825      	ldr	r5, [r4, #0]
 80072b8:	f015 0506 	ands.w	r5, r5, #6
 80072bc:	d107      	bne.n	80072ce <_printf_common+0x52>
 80072be:	f104 0a19 	add.w	sl, r4, #25
 80072c2:	68e3      	ldr	r3, [r4, #12]
 80072c4:	f8d9 2000 	ldr.w	r2, [r9]
 80072c8:	1a9b      	subs	r3, r3, r2
 80072ca:	429d      	cmp	r5, r3
 80072cc:	db29      	blt.n	8007322 <_printf_common+0xa6>
 80072ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80072d2:	6822      	ldr	r2, [r4, #0]
 80072d4:	3300      	adds	r3, #0
 80072d6:	bf18      	it	ne
 80072d8:	2301      	movne	r3, #1
 80072da:	0692      	lsls	r2, r2, #26
 80072dc:	d42e      	bmi.n	800733c <_printf_common+0xc0>
 80072de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072e2:	4639      	mov	r1, r7
 80072e4:	4630      	mov	r0, r6
 80072e6:	47c0      	blx	r8
 80072e8:	3001      	adds	r0, #1
 80072ea:	d021      	beq.n	8007330 <_printf_common+0xb4>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	68e5      	ldr	r5, [r4, #12]
 80072f0:	f8d9 2000 	ldr.w	r2, [r9]
 80072f4:	f003 0306 	and.w	r3, r3, #6
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	bf08      	it	eq
 80072fc:	1aad      	subeq	r5, r5, r2
 80072fe:	68a3      	ldr	r3, [r4, #8]
 8007300:	6922      	ldr	r2, [r4, #16]
 8007302:	bf0c      	ite	eq
 8007304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007308:	2500      	movne	r5, #0
 800730a:	4293      	cmp	r3, r2
 800730c:	bfc4      	itt	gt
 800730e:	1a9b      	subgt	r3, r3, r2
 8007310:	18ed      	addgt	r5, r5, r3
 8007312:	f04f 0900 	mov.w	r9, #0
 8007316:	341a      	adds	r4, #26
 8007318:	454d      	cmp	r5, r9
 800731a:	d11b      	bne.n	8007354 <_printf_common+0xd8>
 800731c:	2000      	movs	r0, #0
 800731e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007322:	2301      	movs	r3, #1
 8007324:	4652      	mov	r2, sl
 8007326:	4639      	mov	r1, r7
 8007328:	4630      	mov	r0, r6
 800732a:	47c0      	blx	r8
 800732c:	3001      	adds	r0, #1
 800732e:	d103      	bne.n	8007338 <_printf_common+0xbc>
 8007330:	f04f 30ff 	mov.w	r0, #4294967295
 8007334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007338:	3501      	adds	r5, #1
 800733a:	e7c2      	b.n	80072c2 <_printf_common+0x46>
 800733c:	18e1      	adds	r1, r4, r3
 800733e:	1c5a      	adds	r2, r3, #1
 8007340:	2030      	movs	r0, #48	; 0x30
 8007342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007346:	4422      	add	r2, r4
 8007348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800734c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007350:	3302      	adds	r3, #2
 8007352:	e7c4      	b.n	80072de <_printf_common+0x62>
 8007354:	2301      	movs	r3, #1
 8007356:	4622      	mov	r2, r4
 8007358:	4639      	mov	r1, r7
 800735a:	4630      	mov	r0, r6
 800735c:	47c0      	blx	r8
 800735e:	3001      	adds	r0, #1
 8007360:	d0e6      	beq.n	8007330 <_printf_common+0xb4>
 8007362:	f109 0901 	add.w	r9, r9, #1
 8007366:	e7d7      	b.n	8007318 <_printf_common+0x9c>

08007368 <_printf_i>:
 8007368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800736c:	4617      	mov	r7, r2
 800736e:	7e0a      	ldrb	r2, [r1, #24]
 8007370:	b085      	sub	sp, #20
 8007372:	2a6e      	cmp	r2, #110	; 0x6e
 8007374:	4698      	mov	r8, r3
 8007376:	4606      	mov	r6, r0
 8007378:	460c      	mov	r4, r1
 800737a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800737c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007380:	f000 80bc 	beq.w	80074fc <_printf_i+0x194>
 8007384:	d81a      	bhi.n	80073bc <_printf_i+0x54>
 8007386:	2a63      	cmp	r2, #99	; 0x63
 8007388:	d02e      	beq.n	80073e8 <_printf_i+0x80>
 800738a:	d80a      	bhi.n	80073a2 <_printf_i+0x3a>
 800738c:	2a00      	cmp	r2, #0
 800738e:	f000 80c8 	beq.w	8007522 <_printf_i+0x1ba>
 8007392:	2a58      	cmp	r2, #88	; 0x58
 8007394:	f000 808a 	beq.w	80074ac <_printf_i+0x144>
 8007398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800739c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80073a0:	e02a      	b.n	80073f8 <_printf_i+0x90>
 80073a2:	2a64      	cmp	r2, #100	; 0x64
 80073a4:	d001      	beq.n	80073aa <_printf_i+0x42>
 80073a6:	2a69      	cmp	r2, #105	; 0x69
 80073a8:	d1f6      	bne.n	8007398 <_printf_i+0x30>
 80073aa:	6821      	ldr	r1, [r4, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	f011 0f80 	tst.w	r1, #128	; 0x80
 80073b2:	d023      	beq.n	80073fc <_printf_i+0x94>
 80073b4:	1d11      	adds	r1, r2, #4
 80073b6:	6019      	str	r1, [r3, #0]
 80073b8:	6813      	ldr	r3, [r2, #0]
 80073ba:	e027      	b.n	800740c <_printf_i+0xa4>
 80073bc:	2a73      	cmp	r2, #115	; 0x73
 80073be:	f000 80b4 	beq.w	800752a <_printf_i+0x1c2>
 80073c2:	d808      	bhi.n	80073d6 <_printf_i+0x6e>
 80073c4:	2a6f      	cmp	r2, #111	; 0x6f
 80073c6:	d02a      	beq.n	800741e <_printf_i+0xb6>
 80073c8:	2a70      	cmp	r2, #112	; 0x70
 80073ca:	d1e5      	bne.n	8007398 <_printf_i+0x30>
 80073cc:	680a      	ldr	r2, [r1, #0]
 80073ce:	f042 0220 	orr.w	r2, r2, #32
 80073d2:	600a      	str	r2, [r1, #0]
 80073d4:	e003      	b.n	80073de <_printf_i+0x76>
 80073d6:	2a75      	cmp	r2, #117	; 0x75
 80073d8:	d021      	beq.n	800741e <_printf_i+0xb6>
 80073da:	2a78      	cmp	r2, #120	; 0x78
 80073dc:	d1dc      	bne.n	8007398 <_printf_i+0x30>
 80073de:	2278      	movs	r2, #120	; 0x78
 80073e0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80073e4:	496e      	ldr	r1, [pc, #440]	; (80075a0 <_printf_i+0x238>)
 80073e6:	e064      	b.n	80074b2 <_printf_i+0x14a>
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80073ee:	1d11      	adds	r1, r2, #4
 80073f0:	6019      	str	r1, [r3, #0]
 80073f2:	6813      	ldr	r3, [r2, #0]
 80073f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073f8:	2301      	movs	r3, #1
 80073fa:	e0a3      	b.n	8007544 <_printf_i+0x1dc>
 80073fc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007400:	f102 0104 	add.w	r1, r2, #4
 8007404:	6019      	str	r1, [r3, #0]
 8007406:	d0d7      	beq.n	80073b8 <_printf_i+0x50>
 8007408:	f9b2 3000 	ldrsh.w	r3, [r2]
 800740c:	2b00      	cmp	r3, #0
 800740e:	da03      	bge.n	8007418 <_printf_i+0xb0>
 8007410:	222d      	movs	r2, #45	; 0x2d
 8007412:	425b      	negs	r3, r3
 8007414:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007418:	4962      	ldr	r1, [pc, #392]	; (80075a4 <_printf_i+0x23c>)
 800741a:	220a      	movs	r2, #10
 800741c:	e017      	b.n	800744e <_printf_i+0xe6>
 800741e:	6820      	ldr	r0, [r4, #0]
 8007420:	6819      	ldr	r1, [r3, #0]
 8007422:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007426:	d003      	beq.n	8007430 <_printf_i+0xc8>
 8007428:	1d08      	adds	r0, r1, #4
 800742a:	6018      	str	r0, [r3, #0]
 800742c:	680b      	ldr	r3, [r1, #0]
 800742e:	e006      	b.n	800743e <_printf_i+0xd6>
 8007430:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007434:	f101 0004 	add.w	r0, r1, #4
 8007438:	6018      	str	r0, [r3, #0]
 800743a:	d0f7      	beq.n	800742c <_printf_i+0xc4>
 800743c:	880b      	ldrh	r3, [r1, #0]
 800743e:	4959      	ldr	r1, [pc, #356]	; (80075a4 <_printf_i+0x23c>)
 8007440:	2a6f      	cmp	r2, #111	; 0x6f
 8007442:	bf14      	ite	ne
 8007444:	220a      	movne	r2, #10
 8007446:	2208      	moveq	r2, #8
 8007448:	2000      	movs	r0, #0
 800744a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800744e:	6865      	ldr	r5, [r4, #4]
 8007450:	60a5      	str	r5, [r4, #8]
 8007452:	2d00      	cmp	r5, #0
 8007454:	f2c0 809c 	blt.w	8007590 <_printf_i+0x228>
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	f020 0004 	bic.w	r0, r0, #4
 800745e:	6020      	str	r0, [r4, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d13f      	bne.n	80074e4 <_printf_i+0x17c>
 8007464:	2d00      	cmp	r5, #0
 8007466:	f040 8095 	bne.w	8007594 <_printf_i+0x22c>
 800746a:	4675      	mov	r5, lr
 800746c:	2a08      	cmp	r2, #8
 800746e:	d10b      	bne.n	8007488 <_printf_i+0x120>
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	07da      	lsls	r2, r3, #31
 8007474:	d508      	bpl.n	8007488 <_printf_i+0x120>
 8007476:	6923      	ldr	r3, [r4, #16]
 8007478:	6862      	ldr	r2, [r4, #4]
 800747a:	429a      	cmp	r2, r3
 800747c:	bfde      	ittt	le
 800747e:	2330      	movle	r3, #48	; 0x30
 8007480:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007484:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007488:	ebae 0305 	sub.w	r3, lr, r5
 800748c:	6123      	str	r3, [r4, #16]
 800748e:	f8cd 8000 	str.w	r8, [sp]
 8007492:	463b      	mov	r3, r7
 8007494:	aa03      	add	r2, sp, #12
 8007496:	4621      	mov	r1, r4
 8007498:	4630      	mov	r0, r6
 800749a:	f7ff feef 	bl	800727c <_printf_common>
 800749e:	3001      	adds	r0, #1
 80074a0:	d155      	bne.n	800754e <_printf_i+0x1e6>
 80074a2:	f04f 30ff 	mov.w	r0, #4294967295
 80074a6:	b005      	add	sp, #20
 80074a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074ac:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80074b0:	493c      	ldr	r1, [pc, #240]	; (80075a4 <_printf_i+0x23c>)
 80074b2:	6822      	ldr	r2, [r4, #0]
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80074ba:	f100 0504 	add.w	r5, r0, #4
 80074be:	601d      	str	r5, [r3, #0]
 80074c0:	d001      	beq.n	80074c6 <_printf_i+0x15e>
 80074c2:	6803      	ldr	r3, [r0, #0]
 80074c4:	e002      	b.n	80074cc <_printf_i+0x164>
 80074c6:	0655      	lsls	r5, r2, #25
 80074c8:	d5fb      	bpl.n	80074c2 <_printf_i+0x15a>
 80074ca:	8803      	ldrh	r3, [r0, #0]
 80074cc:	07d0      	lsls	r0, r2, #31
 80074ce:	bf44      	itt	mi
 80074d0:	f042 0220 	orrmi.w	r2, r2, #32
 80074d4:	6022      	strmi	r2, [r4, #0]
 80074d6:	b91b      	cbnz	r3, 80074e0 <_printf_i+0x178>
 80074d8:	6822      	ldr	r2, [r4, #0]
 80074da:	f022 0220 	bic.w	r2, r2, #32
 80074de:	6022      	str	r2, [r4, #0]
 80074e0:	2210      	movs	r2, #16
 80074e2:	e7b1      	b.n	8007448 <_printf_i+0xe0>
 80074e4:	4675      	mov	r5, lr
 80074e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80074ea:	fb02 3310 	mls	r3, r2, r0, r3
 80074ee:	5ccb      	ldrb	r3, [r1, r3]
 80074f0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80074f4:	4603      	mov	r3, r0
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d1f5      	bne.n	80074e6 <_printf_i+0x17e>
 80074fa:	e7b7      	b.n	800746c <_printf_i+0x104>
 80074fc:	6808      	ldr	r0, [r1, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	6949      	ldr	r1, [r1, #20]
 8007502:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007506:	d004      	beq.n	8007512 <_printf_i+0x1aa>
 8007508:	1d10      	adds	r0, r2, #4
 800750a:	6018      	str	r0, [r3, #0]
 800750c:	6813      	ldr	r3, [r2, #0]
 800750e:	6019      	str	r1, [r3, #0]
 8007510:	e007      	b.n	8007522 <_printf_i+0x1ba>
 8007512:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007516:	f102 0004 	add.w	r0, r2, #4
 800751a:	6018      	str	r0, [r3, #0]
 800751c:	6813      	ldr	r3, [r2, #0]
 800751e:	d0f6      	beq.n	800750e <_printf_i+0x1a6>
 8007520:	8019      	strh	r1, [r3, #0]
 8007522:	2300      	movs	r3, #0
 8007524:	6123      	str	r3, [r4, #16]
 8007526:	4675      	mov	r5, lr
 8007528:	e7b1      	b.n	800748e <_printf_i+0x126>
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	1d11      	adds	r1, r2, #4
 800752e:	6019      	str	r1, [r3, #0]
 8007530:	6815      	ldr	r5, [r2, #0]
 8007532:	6862      	ldr	r2, [r4, #4]
 8007534:	2100      	movs	r1, #0
 8007536:	4628      	mov	r0, r5
 8007538:	f7f8 fe5a 	bl	80001f0 <memchr>
 800753c:	b108      	cbz	r0, 8007542 <_printf_i+0x1da>
 800753e:	1b40      	subs	r0, r0, r5
 8007540:	6060      	str	r0, [r4, #4]
 8007542:	6863      	ldr	r3, [r4, #4]
 8007544:	6123      	str	r3, [r4, #16]
 8007546:	2300      	movs	r3, #0
 8007548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800754c:	e79f      	b.n	800748e <_printf_i+0x126>
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	462a      	mov	r2, r5
 8007552:	4639      	mov	r1, r7
 8007554:	4630      	mov	r0, r6
 8007556:	47c0      	blx	r8
 8007558:	3001      	adds	r0, #1
 800755a:	d0a2      	beq.n	80074a2 <_printf_i+0x13a>
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	079b      	lsls	r3, r3, #30
 8007560:	d507      	bpl.n	8007572 <_printf_i+0x20a>
 8007562:	2500      	movs	r5, #0
 8007564:	f104 0919 	add.w	r9, r4, #25
 8007568:	68e3      	ldr	r3, [r4, #12]
 800756a:	9a03      	ldr	r2, [sp, #12]
 800756c:	1a9b      	subs	r3, r3, r2
 800756e:	429d      	cmp	r5, r3
 8007570:	db05      	blt.n	800757e <_printf_i+0x216>
 8007572:	68e0      	ldr	r0, [r4, #12]
 8007574:	9b03      	ldr	r3, [sp, #12]
 8007576:	4298      	cmp	r0, r3
 8007578:	bfb8      	it	lt
 800757a:	4618      	movlt	r0, r3
 800757c:	e793      	b.n	80074a6 <_printf_i+0x13e>
 800757e:	2301      	movs	r3, #1
 8007580:	464a      	mov	r2, r9
 8007582:	4639      	mov	r1, r7
 8007584:	4630      	mov	r0, r6
 8007586:	47c0      	blx	r8
 8007588:	3001      	adds	r0, #1
 800758a:	d08a      	beq.n	80074a2 <_printf_i+0x13a>
 800758c:	3501      	adds	r5, #1
 800758e:	e7eb      	b.n	8007568 <_printf_i+0x200>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1a7      	bne.n	80074e4 <_printf_i+0x17c>
 8007594:	780b      	ldrb	r3, [r1, #0]
 8007596:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800759a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800759e:	e765      	b.n	800746c <_printf_i+0x104>
 80075a0:	080079bc 	.word	0x080079bc
 80075a4:	080079ab 	.word	0x080079ab

080075a8 <memmove>:
 80075a8:	4288      	cmp	r0, r1
 80075aa:	b510      	push	{r4, lr}
 80075ac:	eb01 0302 	add.w	r3, r1, r2
 80075b0:	d803      	bhi.n	80075ba <memmove+0x12>
 80075b2:	1e42      	subs	r2, r0, #1
 80075b4:	4299      	cmp	r1, r3
 80075b6:	d10c      	bne.n	80075d2 <memmove+0x2a>
 80075b8:	bd10      	pop	{r4, pc}
 80075ba:	4298      	cmp	r0, r3
 80075bc:	d2f9      	bcs.n	80075b2 <memmove+0xa>
 80075be:	1881      	adds	r1, r0, r2
 80075c0:	1ad2      	subs	r2, r2, r3
 80075c2:	42d3      	cmn	r3, r2
 80075c4:	d100      	bne.n	80075c8 <memmove+0x20>
 80075c6:	bd10      	pop	{r4, pc}
 80075c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80075d0:	e7f7      	b.n	80075c2 <memmove+0x1a>
 80075d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075d6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80075da:	e7eb      	b.n	80075b4 <memmove+0xc>

080075dc <_realloc_r>:
 80075dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075de:	4607      	mov	r7, r0
 80075e0:	4614      	mov	r4, r2
 80075e2:	460e      	mov	r6, r1
 80075e4:	b921      	cbnz	r1, 80075f0 <_realloc_r+0x14>
 80075e6:	4611      	mov	r1, r2
 80075e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075ec:	f7ff bc4e 	b.w	8006e8c <_malloc_r>
 80075f0:	b922      	cbnz	r2, 80075fc <_realloc_r+0x20>
 80075f2:	f7ff fbfd 	bl	8006df0 <_free_r>
 80075f6:	4625      	mov	r5, r4
 80075f8:	4628      	mov	r0, r5
 80075fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075fc:	f000 f814 	bl	8007628 <_malloc_usable_size_r>
 8007600:	4284      	cmp	r4, r0
 8007602:	d90f      	bls.n	8007624 <_realloc_r+0x48>
 8007604:	4621      	mov	r1, r4
 8007606:	4638      	mov	r0, r7
 8007608:	f7ff fc40 	bl	8006e8c <_malloc_r>
 800760c:	4605      	mov	r5, r0
 800760e:	2800      	cmp	r0, #0
 8007610:	d0f2      	beq.n	80075f8 <_realloc_r+0x1c>
 8007612:	4631      	mov	r1, r6
 8007614:	4622      	mov	r2, r4
 8007616:	f7ff fbd7 	bl	8006dc8 <memcpy>
 800761a:	4631      	mov	r1, r6
 800761c:	4638      	mov	r0, r7
 800761e:	f7ff fbe7 	bl	8006df0 <_free_r>
 8007622:	e7e9      	b.n	80075f8 <_realloc_r+0x1c>
 8007624:	4635      	mov	r5, r6
 8007626:	e7e7      	b.n	80075f8 <_realloc_r+0x1c>

08007628 <_malloc_usable_size_r>:
 8007628:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800762c:	2800      	cmp	r0, #0
 800762e:	f1a0 0004 	sub.w	r0, r0, #4
 8007632:	bfbc      	itt	lt
 8007634:	580b      	ldrlt	r3, [r1, r0]
 8007636:	18c0      	addlt	r0, r0, r3
 8007638:	4770      	bx	lr
	...

0800763c <_sbrk>:
 800763c:	4b04      	ldr	r3, [pc, #16]	; (8007650 <_sbrk+0x14>)
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	4602      	mov	r2, r0
 8007642:	b909      	cbnz	r1, 8007648 <_sbrk+0xc>
 8007644:	4903      	ldr	r1, [pc, #12]	; (8007654 <_sbrk+0x18>)
 8007646:	6019      	str	r1, [r3, #0]
 8007648:	6818      	ldr	r0, [r3, #0]
 800764a:	4402      	add	r2, r0
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	4770      	bx	lr
 8007650:	2000024c 	.word	0x2000024c
 8007654:	200057c0 	.word	0x200057c0

08007658 <_init>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	bf00      	nop
 800765c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765e:	bc08      	pop	{r3}
 8007660:	469e      	mov	lr, r3
 8007662:	4770      	bx	lr

08007664 <_fini>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	bf00      	nop
 8007668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766a:	bc08      	pop	{r3}
 800766c:	469e      	mov	lr, r3
 800766e:	4770      	bx	lr
